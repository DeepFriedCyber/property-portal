generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

// Your models here...

model Property {
  id             String     @id @default(uuid())
  uploadId       String?    // Reference to the upload batch
  title          String?
  description    String?
  price          Float?
  bedrooms       Int?
  bathrooms      Int?
  area           Float?     // in square feet/meters
  location       String?
  address        String
  city           String?
  state          String?    // County in UK context
  postcode       String?    // UK postcode
  lat            Float?     // latitude for mapping
  lng            Float?     // longitude for mapping
  images         String[]   // array of image URLs
  features       String[]   // array of property features
  councilTaxBand String?    // Council tax band (A-H)
  epcRating      String?    // Energy Performance Certificate rating
  tenure         String?    // Freehold, Leasehold, etc.
  propertyType   String?    // Type of property (house, apartment, etc.)
  listingType    String?    // Type of listing (sale, rent)
  metadata       Json?      // Additional metadata as JSON
  embedding      Unsupported("vector(1536)")? // Vector embedding for similarity search
                                                 // Note: Indexed with IVFFlat for performance:
                                                 // CREATE INDEX "Property_embedding_idx" ON "Property" USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  createdBy      String?    // User ID who created the property
  favorites      Favorite[]
}

model User {
  id        String     @id @default(cuid())
  clerkId   String     @unique
  email     String     @unique
  name      String?
  role      String?    // Optional: 'admin', 'user', etc.
  favorites Favorite[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Favorite {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  createdAt  DateTime @default(now())

  @@unique([userId, propertyId])
}

model Upload {
  id               String    @id @default(uuid())
  userId           String
  filename         String
  status           String    // 'processing', 'complete', 'failed'
  totalProperties  Int
  invalidProperties Int
  processingStats  String?   // JSON string with processing statistics
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt
}

