[
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\.eslintrc.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\.lintstagedrc.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\.venv\\Lib\\site-packages\\torch\\utils\\model_dump\\code.js",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'https://unpkg.com/htm?module'.",
        "line": 1,
        "column": 17,
        "nodeType": "Literal",
        "endLine": 1,
        "endColumn": 47
      },
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'https://unpkg.com/preact?module'.",
        "line": 2,
        "column": 38,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 71
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'blame_on_click' is not in camel case.",
        "line": 23,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 23,
        "endColumn": 24
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'aux_content_pane' is not in camel case.",
        "line": 24,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 24,
        "endColumn": 26
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'aux_content_pane' is not in camel case.",
        "line": 28,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 28,
        "endColumn": 26
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'blame_on_click' is not in camel case.",
        "line": 32,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 32,
        "endColumn": 24
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'blame_on_click' is not in camel case.",
        "line": 39,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 39,
        "endColumn": 24
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'my_caret' is not in camel case.",
        "line": 60,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 60,
        "endColumn": 17
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'my_caret' is not in camel case.",
        "line": 62,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 62,
        "endColumn": 21
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'file_size' is not in camel case.",
        "line": 72,
        "column": 38,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 72,
        "endColumn": 47
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'zip_files' is not in camel case.",
        "line": 72,
        "column": 49,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 72,
        "endColumn": 58
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'store_size' is not in camel case.",
        "line": 73,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 73,
        "endColumn": 17
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'compr_size' is not in camel case.",
        "line": 74,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 74,
        "endColumn": 17
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'zip_files' is not in camel case.",
        "line": 75,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 75,
        "endColumn": 29
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'store_size' is not in camel case.",
        "line": 78,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 78,
        "endColumn": 17
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'compr_size' is not in camel case.",
        "line": 80,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 80,
        "endColumn": 17
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'zip_overhead' is not in camel case.",
        "line": 83,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 83,
        "endColumn": 19
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'file_size' is not in camel case.",
        "line": 83,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 83,
        "endColumn": 31
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'store_size' is not in camel case.",
        "line": 83,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 83,
        "endColumn": 44
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'compr_size' is not in camel case.",
        "line": 83,
        "column": 47,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 83,
        "endColumn": 57
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'file_size' is not in camel case.",
        "line": 88,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 88,
        "endColumn": 30
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'store_size' is not in camel case.",
        "line": 89,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 89,
        "endColumn": 33
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'compr_size' is not in camel case.",
        "line": 90,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 90,
        "endColumn": 37
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'zip_overhead' is not in camel case.",
        "line": 91,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 91,
        "endColumn": 35
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'extra_parts' is not in camel case.",
        "line": 185,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 185,
        "endColumn": 22
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'extra_parts' is not in camel case.",
        "line": 187,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 187,
        "endColumn": 20
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'extra_parts' is not in camel case.",
        "line": 188,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 188,
        "endColumn": 20
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'extra_parts' is not in camel case.",
        "line": 190,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 190,
        "endColumn": 20
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'storage_key' is not in camel case.",
        "line": 211,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 211,
        "endColumn": 16
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'storage_numel' is not in camel case.",
        "line": 213,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 213,
        "endColumn": 18
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'extra_parts' is not in camel case.",
        "line": 218,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 218,
        "endColumn": 16
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'extra_parts' is not in camel case.",
        "line": 221,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 221,
        "endColumn": 30
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'storage_key' is not in camel case.",
        "line": 234,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 234,
        "endColumn": 21
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'storage_numel' is not in camel case.",
        "line": 235,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 235,
        "endColumn": 23
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'new_indent' is not in camel case.",
        "line": 247,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 247,
        "endColumn": 21
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'new_indent' is not in camel case.",
        "line": 254,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 254,
        "endColumn": 34
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'new_indent' is not in camel case.",
        "line": 266,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 266,
        "endColumn": 21
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'new_indent' is not in camel case.",
        "line": 270,
        "column": 35,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 270,
        "endColumn": 45
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'new_indent' is not in camel case.",
        "line": 275,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 275,
        "endColumn": 36
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'new_indent' is not in camel case.",
        "line": 288,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 288,
        "endColumn": 21
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'new_indent' is not in camel case.",
        "line": 294,
        "column": 37,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 294,
        "endColumn": 47
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'new_indent' is not in camel case.",
        "line": 301,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 301,
        "endColumn": 38
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'new_indent' is not in camel case.",
        "line": 308,
        "column": 69,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 308,
        "endColumn": 79
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'new_indent' is not in camel case.",
        "line": 313,
        "column": 69,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 313,
        "endColumn": 79
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'zip_files' is not in camel case.",
        "line": 338,
        "column": 40,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 338,
        "endColumn": 49
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'zip_files' is not in camel case.",
        "line": 353,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 353,
        "endColumn": 20
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'code_files' is not in camel case.",
        "line": 367,
        "column": 33,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 367,
        "endColumn": 43
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'ist_file' is not in camel case.",
        "line": 404,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 404,
        "endColumn": 30
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'ist_s_text' is not in camel case.",
        "line": 404,
        "column": 38,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 404,
        "endColumn": 48
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_start' is not in camel case.",
        "line": 404,
        "column": 50,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 404,
        "endColumn": 57
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_end' is not in camel case.",
        "line": 404,
        "column": 59,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 404,
        "endColumn": 64
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'ist_file' is not in camel case.",
        "line": 406,
        "column": 42,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 406,
        "endColumn": 50
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'ist_s_text' is not in camel case.",
        "line": 406,
        "column": 58,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 406,
        "endColumn": 68
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_start' is not in camel case.",
        "line": 406,
        "column": 70,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 406,
        "endColumn": 77
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_end' is not in camel case.",
        "line": 406,
        "column": 79,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 406,
        "endColumn": 84
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'old_storage' is not in camel case.",
        "line": 547,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 547,
        "endColumn": 28
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'all_tensors' is not in camel case.",
        "line": 577,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 577,
        "endColumn": 18
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'all_tensors' is not in camel case.",
        "line": 580,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 580,
        "endColumn": 16
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'all_tensors' is not in camel case.",
        "line": 583,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 583,
        "endColumn": 36
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'model_data' is not in camel case.",
        "line": 593,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 593,
        "endColumn": 31
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'model_data' is not in camel case.",
        "line": 596,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 596,
        "endColumn": 28
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'blame_info' is not in camel case.",
        "line": 632,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 632,
        "endColumn": 17
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'blame_info' is not in camel case.",
        "line": 637,
        "column": 36,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 637,
        "endColumn": 46
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'interned_strings' is not in camel case.",
        "line": 640,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 640,
        "endColumn": 37
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'blame_info' is not in camel case.",
        "line": 640,
        "column": 45,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 640,
        "endColumn": 55
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'blame_content' is not in camel case.",
        "line": 641,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 641,
        "endColumn": 22
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'blame_info' is not in camel case.",
        "line": 642,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 642,
        "endColumn": 19
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'ist_file' is not in camel case.",
        "line": 643,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 643,
        "endColumn": 23
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'ist_s_text' is not in camel case.",
        "line": 643,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 643,
        "endColumn": 41
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_start' is not in camel case.",
        "line": 643,
        "column": 43,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 643,
        "endColumn": 50
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_end' is not in camel case.",
        "line": 643,
        "column": 52,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 643,
        "endColumn": 57
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'blame_info' is not in camel case.",
        "line": 643,
        "column": 62,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 643,
        "endColumn": 72
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_text' is not in camel case.",
        "line": 644,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 644,
        "endColumn": 17
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'interned_strings' is not in camel case.",
        "line": 644,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 644,
        "endColumn": 36
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'ist_s_text' is not in camel case.",
        "line": 644,
        "column": 37,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 644,
        "endColumn": 47
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_start' is not in camel case.",
        "line": 645,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 645,
        "endColumn": 18
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_end' is not in camel case.",
        "line": 645,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 645,
        "endColumn": 32
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_text' is not in camel case.",
        "line": 645,
        "column": 36,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 645,
        "endColumn": 42
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_text' is not in camel case.",
        "line": 646,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 646,
        "endColumn": 28
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_text' is not in camel case.",
        "line": 647,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 647,
        "endColumn": 26
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_text' is not in camel case.",
        "line": 648,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 648,
        "endColumn": 28
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_text' is not in camel case.",
        "line": 649,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 649,
        "endColumn": 15
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'blame_content' is not in camel case.",
        "line": 651,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 651,
        "endColumn": 20
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'interned_strings' is not in camel case.",
        "line": 652,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 652,
        "endColumn": 31
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'ist_file' is not in camel case.",
        "line": 652,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 652,
        "endColumn": 40
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_start' is not in camel case.",
        "line": 653,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 653,
        "endColumn": 23
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_end' is not in camel case.",
        "line": 653,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 653,
        "endColumn": 32
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_text' is not in camel case.",
        "line": 654,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 654,
        "endColumn": 22
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'blame_content' is not in camel case.",
        "line": 661,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 661,
        "endColumn": 22
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 691,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 691,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [18732, 18771], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'error_msg' is not in camel case.",
        "line": 708,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 708,
        "endColumn": 18
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'error_msg' is not in camel case.",
        "line": 710,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 710,
        "endColumn": 16
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'error_msg' is not in camel case.",
        "line": 714,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 714,
        "endColumn": 18
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 717,
        "column": 33,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 717,
        "endColumn": 44
      }
    ],
    "suppressedMessages": [],
    "errorCount": 92,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import htm from 'https://unpkg.com/htm?module'\r\nimport { h, Component, render } from 'https://unpkg.com/preact?module'\r\n\r\nconst html = htm.bind(h)\r\n\r\nconst BURNED_IN_MODEL_INFO = null\r\n\r\n// https://stackoverflow.com/a/20732091\r\nfunction humanFileSize(size) {\r\n  if (size == 0) {\r\n    return '0 B'\r\n  }\r\n  var i = Math.floor(Math.log(size) / Math.log(1024))\r\n  return (size / Math.pow(1024, i)).toFixed(2) * 1 + ' ' + ['B', 'kB', 'MB', 'GB', 'TB'][i]\r\n}\r\n\r\nfunction caret(down) {\r\n  return down ? '\\u25BE' : '\\u25B8'\r\n}\r\n\r\nclass Blamer {\r\n  constructor() {\r\n    this.blame_on_click = false\r\n    this.aux_content_pane = null\r\n  }\r\n\r\n  setAuxContentPane(pane) {\r\n    this.aux_content_pane = pane\r\n  }\r\n\r\n  readyBlame() {\r\n    this.blame_on_click = true\r\n  }\r\n\r\n  maybeBlame(arg) {\r\n    if (!this.blame_on_click) {\r\n      return\r\n    }\r\n    this.blame_on_click = false\r\n    if (!this.aux_content_pane) {\r\n      return\r\n    }\r\n    this.aux_content_pane.doBlame(arg)\r\n  }\r\n}\r\n\r\nlet blame = new Blamer()\r\n\r\nclass Hider extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = { shown: null }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ shown: this.props.shown === 'true' })\r\n  }\r\n\r\n  render({ name, children }, { shown }) {\r\n    let my_caret = html`<span class=\"caret\" onClick=${() => this.click()}>${caret(shown)}</span>`\r\n    return html`<div data-hider-title=${name} data-shown=${shown}>\r\n      <h2>${my_caret} ${name}</h2>\r\n      <div>${shown ? this.props.children : []}</div>\r\n    </div>`\r\n  }\r\n\r\n  click() {\r\n    this.setState({ shown: !this.state.shown })\r\n  }\r\n}\r\n\r\nfunction ModelSizeSection({ model: { file_size, zip_files } }) {\r\n  let store_size = 0\r\n  let compr_size = 0\r\n  for (const zi of zip_files) {\r\n    if (zi.compression === 0) {\r\n      // TODO: Maybe check that compressed_size === file_size.\r\n      store_size += zi.compressed_size\r\n    } else {\r\n      compr_size += zi.compressed_size\r\n    }\r\n  }\r\n  let zip_overhead = file_size - store_size - compr_size\r\n  // TODO: Better formatting.  Right-align this.\r\n  return html` <${Hider} name=\"Model Size\" shown=\"true\">\r\n    <pre>\r\n.\r\n      Model size: ${file_size} (${humanFileSize(file_size)})\r\n      Stored files: ${store_size} (${humanFileSize(store_size)})\r\n      Compressed files: ${compr_size} (${humanFileSize(compr_size)})\r\n      Zip overhead: ${zip_overhead} (${humanFileSize(zip_overhead)})\r\n    </pre\r\n    >\r\n  <//>`\r\n}\r\n\r\nfunction StructuredDataSection({ name, data, shown }) {\r\n  return html` <${Hider} name=${name} shown=${shown}>\r\n    <div style=\"font-family:monospace;\">\r\n      <${StructuredData} data=${data} indent=\"\" prefix=\"\" /></div\r\n  ><//>`\r\n}\r\n\r\nclass StructuredData extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = { shown: false }\r\n\r\n    this.INLINE_TYPES = new Set(['boolean', 'number', 'string'])\r\n    this.IGNORED_STATE_KEYS = new Set(['training', '_is_full_backward_hook'])\r\n  }\r\n\r\n  click() {\r\n    this.setState({ shown: !this.state.shown })\r\n  }\r\n\r\n  expando(data) {\r\n    if (data === null || this.INLINE_TYPES.has(typeof data)) {\r\n      return false\r\n    }\r\n    if (typeof data != 'object') {\r\n      throw new Error('Not an object')\r\n    }\r\n    if (Array.isArray(data)) {\r\n      // TODO: Maybe show simple lists and tuples on one line.\r\n      return true\r\n    }\r\n    if (data.__tuple_values__) {\r\n      // TODO: Maybe show simple lists and tuples on one line.\r\n      return true\r\n    }\r\n    if (data.__is_dict__) {\r\n      // TODO: Maybe show simple (empty?) dicts on one line.\r\n      return true\r\n    }\r\n    if (data.__module_type__) {\r\n      return true\r\n    }\r\n    if (data.__tensor_v2__) {\r\n      return false\r\n    }\r\n    if (data.__qtensor__) {\r\n      return false\r\n    }\r\n    throw new Error(\"Can't handle data type.\", data)\r\n  }\r\n\r\n  renderHeadline(data) {\r\n    if (data === null) {\r\n      return 'None'\r\n    }\r\n    if (typeof data == 'boolean') {\r\n      const sd = String(data)\r\n      return sd.charAt(0).toUpperCase() + sd.slice(1)\r\n    }\r\n    if (typeof data == 'number') {\r\n      return JSON.stringify(data)\r\n    }\r\n    if (typeof data == 'string') {\r\n      return JSON.stringify(data)\r\n    }\r\n    if (typeof data != 'object') {\r\n      throw new Error('Not an object')\r\n    }\r\n    if (Array.isArray(data)) {\r\n      return 'list(['\r\n    }\r\n    if (data.__tuple_values__) {\r\n      return 'tuple(('\r\n    }\r\n    if (data.__is_dict__) {\r\n      return 'dict({'\r\n    }\r\n    if (data.__module_type__) {\r\n      return data.__module_type__ + '()'\r\n    }\r\n    if (data.__tensor_v2__) {\r\n      const [storage, offset, size, stride, grad] = data.__tensor_v2__\r\n      const [dtype, key, device, numel] = storage\r\n      return this.renderTensor('tensor', dtype, key, device, numel, offset, size, stride, grad, [])\r\n    }\r\n    if (data.__qtensor__) {\r\n      const [storage, offset, size, stride, quantizer, grad] = data.__qtensor__\r\n      const [dtype, key, device, numel] = storage\r\n      let extra_parts = []\r\n      if (quantizer[0] == 'per_tensor_affine') {\r\n        extra_parts.push(`scale=${quantizer[1]}`)\r\n        extra_parts.push(`zero_point=${quantizer[2]}`)\r\n      } else {\r\n        extra_parts.push(`quantizer=${quantizer[0]}`)\r\n      }\r\n      return this.renderTensor(\r\n        'qtensor',\r\n        dtype,\r\n        key,\r\n        device,\r\n        numel,\r\n        offset,\r\n        size,\r\n        stride,\r\n        grad,\r\n        extra_parts\r\n      )\r\n    }\r\n    throw new Error(\"Can't handle data type.\", data)\r\n  }\r\n\r\n  renderTensor(\r\n    prefix,\r\n    dtype,\r\n    storage_key,\r\n    device,\r\n    storage_numel,\r\n    offset,\r\n    size,\r\n    stride,\r\n    grad,\r\n    extra_parts\r\n  ) {\r\n    let parts = ['(' + size.join(',') + ')', dtype]\r\n    parts.push(...extra_parts)\r\n    if (device != 'cpu') {\r\n      parts.push(device)\r\n    }\r\n    if (grad) {\r\n      parts.push('grad')\r\n    }\r\n    // TODO: Check stride and indicate if the tensor is channels-last or non-contiguous\r\n    // TODO: Check size, stride, offset, and numel and indicate if\r\n    // the tensor doesn't use all data in storage.\r\n    // TODO: Maybe show key?\r\n    void offset\r\n    void stride\r\n    void storage_key\r\n    void storage_numel\r\n    return prefix + '(' + parts.join(', ') + ')'\r\n  }\r\n\r\n  renderBody(indent, data) {\r\n    if (data === null || this.INLINE_TYPES.has(typeof data)) {\r\n      throw 'Should not reach here.'\r\n    }\r\n    if (typeof data != 'object') {\r\n      throw new Error('Not an object')\r\n    }\r\n    if (Array.isArray(data)) {\r\n      let new_indent = indent + '\\u00A0\\u00A0'\r\n      let parts = []\r\n      for (let idx = 0; idx < data.length; idx++) {\r\n        // Does it make sense to put explicit index numbers here?\r\n        parts.push(\r\n          html`<br /><${StructuredData}\r\n              prefix=${idx + ': '}\r\n              indent=${new_indent}\r\n              data=${data[idx]}\r\n            />`\r\n        )\r\n      }\r\n      return parts\r\n    }\r\n    if (data.__tuple_values__) {\r\n      // Handled the same as lists.\r\n      return this.renderBody(indent, data.__tuple_values__)\r\n    }\r\n    if (data.__is_dict__) {\r\n      let new_indent = indent + '\\u00A0\\u00A0'\r\n      let parts = []\r\n      for (let idx = 0; idx < data.keys.length; idx++) {\r\n        if (typeof data.keys[idx] != 'string') {\r\n          parts.push(html`<br />${new_indent}Non-string key`)\r\n        } else {\r\n          parts.push(\r\n            html`<br /><${StructuredData}\r\n                prefix=${data.keys[idx] + ': '}\r\n                indent=${new_indent}\r\n                data=${data.values[idx]}\r\n              />`\r\n          )\r\n        }\r\n      }\r\n      return parts\r\n    }\r\n    if (data.__module_type__) {\r\n      const mstate = data.state\r\n      if (mstate === null || typeof mstate != 'object') {\r\n        throw new Error('Bad module state')\r\n      }\r\n      let new_indent = indent + '\\u00A0\\u00A0'\r\n      let parts = []\r\n      if (mstate.__is_dict__) {\r\n        // TODO: Less copy/paste between this and normal dicts.\r\n        for (let idx = 0; idx < mstate.keys.length; idx++) {\r\n          if (typeof mstate.keys[idx] != 'string') {\r\n            parts.push(html`<br />${new_indent}Non-string key`)\r\n          } else if (this.IGNORED_STATE_KEYS.has(mstate.keys[idx])) {\r\n            // Do nothing.\r\n          } else {\r\n            parts.push(\r\n              html`<br /><${StructuredData}\r\n                  prefix=${mstate.keys[idx] + ': '}\r\n                  indent=${new_indent}\r\n                  data=${mstate.values[idx]}\r\n                />`\r\n            )\r\n          }\r\n        }\r\n      } else if (mstate.__tuple_values__) {\r\n        parts.push(html`<br /><${StructuredData} prefix=\"\" indent=${new_indent} data=${mstate} />`)\r\n      } else if (mstate.__module_type__) {\r\n        // We normally wouldn't have the state of a module be another module,\r\n        // but we use \"modules\" to encode special values (like Unicode decode\r\n        // errors) that might be valid states.  Just go with it.\r\n        parts.push(html`<br /><${StructuredData} prefix=\"\" indent=${new_indent} data=${mstate} />`)\r\n      } else {\r\n        throw new Error('Bad module state')\r\n      }\r\n      return parts\r\n    }\r\n    if (data.__tensor_v2__) {\r\n      throw 'Should not reach here.'\r\n    }\r\n    if (data.__qtensor__) {\r\n      throw 'Should not reach here.'\r\n    }\r\n    throw new Error(\"Can't handle data type.\", data)\r\n  }\r\n\r\n  render({ data, indent, prefix }, { shown }) {\r\n    const exp = this.expando(data)\r\n      ? html`<span class=\"caret\" onClick=${() => this.click()}>${caret(shown)} </span>`\r\n      : ''\r\n    const headline = this.renderHeadline(data)\r\n    const body = shown ? this.renderBody(indent, data) : ''\r\n    return html`${indent}${exp}${prefix}${headline}${body}`\r\n  }\r\n}\r\n\r\nfunction ZipContentsSection({ model: { zip_files } }) {\r\n  // TODO: Add human-readable sizes?\r\n  // TODO: Add sorting options?\r\n  // TODO: Add hierarchical collapsible tree?\r\n  return html` <${Hider} name=\"Zip Contents\" shown=\"false\">\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Mode</th>\r\n          <th>Size</th>\r\n          <th>Compressed</th>\r\n          <th>Name</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody style=\"font-family:monospace;\">\r\n        ${zip_files.map(\r\n          zf =>\r\n            html`<tr>\r\n              <td>${{ 0: 'store', 8: 'deflate' }[zf.compression] || zf.compression}</td>\r\n              <td>${zf.file_size}</td>\r\n              <td>${zf.compressed_size}</td>\r\n              <td>${zf.filename}</td>\r\n            </tr>`\r\n        )}\r\n      </tbody>\r\n    </table><//\r\n  >`\r\n}\r\n\r\nfunction CodeSection({ model: { code_files } }) {\r\n  return html` <${Hider} name=\"Code\" shown=\"false\">\r\n    <div>\r\n      ${Object.entries(code_files).map(\r\n        ([fn, code]) => html`<${OneCodeSection} filename=${fn} code=${code} />`\r\n      )}\r\n    </div><//\r\n  >`\r\n}\r\n\r\nclass OneCodeSection extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = { shown: false }\r\n  }\r\n\r\n  click() {\r\n    const shown = !this.state.shown\r\n    this.setState({ shown: shown })\r\n  }\r\n\r\n  render({ filename, code }, { shown }) {\r\n    const header = html`\r\n      <h3 style=\"font-family:monospace;\">\r\n        <span class=\"caret\" onClick=${() => this.click()}>${caret(shown)} </span>\r\n        ${filename}\r\n      </h3>\r\n    `\r\n    if (!shown) {\r\n      return header\r\n    }\r\n    return html`\r\n      ${header}\r\n      <pre>${code.map(c => this.renderBlock(c))}</pre>\r\n    `\r\n  }\r\n\r\n  renderBlock([text, ist_file, line, ist_s_text, s_start, s_end]) {\r\n    return html`<span\r\n      onClick=${() => blame.maybeBlame({ ist_file, line, ist_s_text, s_start, s_end })}\r\n      >${text}</span\r\n    >`\r\n  }\r\n}\r\n\r\nfunction ExtraJsonSection({ files }) {\r\n  return html` <${Hider} name=\"Extra files (JSON)\" shown=\"false\">\r\n    <div>\r\n      <p>Use \"Log Raw Model Info\" for hierarchical view in browser console.</p>\r\n      ${Object.entries(files).map(\r\n        ([fn, json]) => html`<${OneJsonSection} filename=${fn} json=${json} />`\r\n      )}\r\n    </div><//\r\n  >`\r\n}\r\n\r\nclass OneJsonSection extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = { shown: false }\r\n  }\r\n\r\n  click() {\r\n    const shown = !this.state.shown\r\n    this.setState({ shown: shown })\r\n  }\r\n\r\n  render({ filename, json }, { shown }) {\r\n    const header = html`\r\n      <h3 style=\"font-family:monospace;\">\r\n        <span class=\"caret\" onClick=${() => this.click()}>${caret(shown)} </span>\r\n        ${filename}\r\n      </h3>\r\n    `\r\n    if (!shown) {\r\n      return header\r\n    }\r\n    return html`\r\n      ${header}\r\n      <pre>${JSON.stringify(json, null, 2)}</pre>\r\n    `\r\n  }\r\n}\r\n\r\nfunction ExtraPicklesSection({ files }) {\r\n  return html` <${Hider} name=\"Extra Pickles\" shown=\"false\">\r\n    <div>\r\n      ${Object.entries(files).map(\r\n        ([fn, content]) => html`<${OnePickleSection} filename=${fn} content=${content} />`\r\n      )}\r\n    </div><//\r\n  >`\r\n}\r\n\r\nclass OnePickleSection extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = { shown: false }\r\n  }\r\n\r\n  click() {\r\n    const shown = !this.state.shown\r\n    this.setState({ shown: shown })\r\n  }\r\n\r\n  render({ filename, content }, { shown }) {\r\n    const header = html`\r\n      <h3 style=\"font-family:monospace;\">\r\n        <span class=\"caret\" onClick=${() => this.click()}>${caret(shown)} </span>\r\n        ${filename}\r\n      </h3>\r\n    `\r\n    if (!shown) {\r\n      return header\r\n    }\r\n    return html`\r\n      ${header}\r\n      <pre>${content}</pre>\r\n    `\r\n  }\r\n}\r\n\r\nfunction assertStorageAreEqual(key, lhs, rhs) {\r\n  if (lhs.length !== rhs.length || !lhs.every((val, idx) => val === rhs[idx])) {\r\n    throw new Error(\"Storage mismatch for key '\" + key + \"'\")\r\n  }\r\n}\r\n\r\nfunction computeTensorMemory(numel, dtype) {\r\n  const sizes = {\r\n    Byte: 1,\r\n    Char: 1,\r\n    Short: 2,\r\n    Int: 4,\r\n    Long: 8,\r\n    Half: 2,\r\n    Float: 4,\r\n    Double: 8,\r\n    ComplexHalf: 4,\r\n    ComplexFloat: 8,\r\n    ComplexDouble: 16,\r\n    Bool: 1,\r\n    QInt8: 1,\r\n    QUInt8: 1,\r\n    QInt32: 4,\r\n    BFloat16: 2,\r\n  }\r\n  let dtsize = sizes[dtype]\r\n  if (!dtsize) {\r\n    throw new Error('Unrecognized dtype: ' + dtype)\r\n  }\r\n  return numel * dtsize\r\n}\r\n\r\n// TODO: Maybe track by dtype as well.\r\n// TODO: Maybe distinguish between visible size and storage size.\r\nfunction getTensorStorages(data) {\r\n  if (data === null) {\r\n    return new Map()\r\n  }\r\n  if (typeof data == 'boolean') {\r\n    return new Map()\r\n  }\r\n  if (typeof data == 'number') {\r\n    return new Map()\r\n  }\r\n  if (typeof data == 'string') {\r\n    return new Map()\r\n  }\r\n  if (typeof data != 'object') {\r\n    throw new Error('Not an object')\r\n  }\r\n  if (Array.isArray(data)) {\r\n    let result = new Map()\r\n    for (const item of data) {\r\n      const tensors = getTensorStorages(item)\r\n      for (const [key, storage] of tensors.entries()) {\r\n        if (!result.has(key)) {\r\n          result.set(key, storage)\r\n        } else {\r\n          const old_storage = result.get(key)\r\n          assertStorageAreEqual(key, old_storage, storage)\r\n        }\r\n      }\r\n    }\r\n    return result\r\n  }\r\n  if (data.__tuple_values__) {\r\n    return getTensorStorages(data.__tuple_values__)\r\n  }\r\n  if (data.__is_dict__) {\r\n    return getTensorStorages(data.values)\r\n  }\r\n  if (data.__module_type__) {\r\n    return getTensorStorages(data.state)\r\n  }\r\n  if (data.__tensor_v2__) {\r\n    const [storage, offset, size, stride, grad] = data.__tensor_v2__\r\n    const [dtype, key, device, numel] = storage\r\n    return new Map([[key, storage]])\r\n  }\r\n  if (data.__qtensor__) {\r\n    const [storage, offset, size, stride, quantizer, grad] = data.__qtensor__\r\n    const [dtype, key, device, numel] = storage\r\n    return new Map([[key, storage]])\r\n  }\r\n  throw new Error(\"Can't handle data type.\", data)\r\n}\r\n\r\nfunction getTensorMemoryByDevice(pickles) {\r\n  let all_tensors = []\r\n  for (const [name, pickle] of pickles) {\r\n    const tensors = getTensorStorages(pickle)\r\n    all_tensors.push(...tensors.values())\r\n  }\r\n  let result = {}\r\n  for (const storage of all_tensors.values()) {\r\n    const [dtype, key, device, numel] = storage\r\n    const size = computeTensorMemory(numel, dtype)\r\n    result[device] = (result[device] || 0) + size\r\n  }\r\n  return result\r\n}\r\n\r\n// Make this a separate component so it is rendered lazily.\r\nclass OpenTensorMemorySection extends Component {\r\n  render({ model: { model_data, constants } }) {\r\n    let sizes = getTensorMemoryByDevice(\r\n      new Map([\r\n        ['data', model_data],\r\n        ['constants', constants],\r\n      ])\r\n    )\r\n    return html` <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Device</th>\r\n          <th>Bytes</th>\r\n          <th>Human</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody style=\"font-family:monospace;\">\r\n        ${Object.entries(sizes).map(\r\n          ([dev, size]) =>\r\n            html`<tr>\r\n              <td>${dev}</td>\r\n              <td>${size}</td>\r\n              <td>${humanFileSize(size)}</td>\r\n            </tr>`\r\n        )}\r\n      </tbody>\r\n    </table>`\r\n  }\r\n}\r\n\r\nfunction TensorMemorySection({ model }) {\r\n  return html` <${Hider} name=\"Tensor Memory\" shown=\"false\">\r\n    <${OpenTensorMemorySection} model=${model}\r\n  /><//>`\r\n}\r\n\r\nclass AuxContentPane extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      blame_info: null,\r\n    }\r\n  }\r\n\r\n  doBlame(arg) {\r\n    this.setState({ ...this.state, blame_info: arg })\r\n  }\r\n\r\n  render({ model: { interned_strings } }, { blame_info }) {\r\n    let blame_content = ''\r\n    if (blame_info) {\r\n      const { ist_file, line, ist_s_text, s_start, s_end } = blame_info\r\n      let s_text = interned_strings[ist_s_text]\r\n      if (s_start != 0 || s_end != s_text.length) {\r\n        let prefix = s_text.slice(0, s_start)\r\n        let main = s_text.slice(s_start, s_end)\r\n        let suffix = s_text.slice(s_end)\r\n        s_text = html`${prefix}<strong>${main}</strong>${suffix}`\r\n      }\r\n      blame_content = html`\r\n        <h3>${interned_strings[ist_file]}:${line}</h3>\r\n        <pre>${s_start}:${s_end}</pre>\r\n        <pre>${s_text}</pre>\r\n        <br />\r\n      `\r\n    }\r\n    return html`\r\n      <button onClick=${() => blame.readyBlame()}>Blame Code</button>\r\n      <br />\r\n      ${blame_content}\r\n    `\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      err: false,\r\n      model: null,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const app = this\r\n    if (BURNED_IN_MODEL_INFO !== null) {\r\n      app.setState({ model: BURNED_IN_MODEL_INFO })\r\n    } else {\r\n      fetch('./model_info.json')\r\n        .then(function (response) {\r\n          if (!response.ok) {\r\n            throw new Error('Response not ok.')\r\n          }\r\n          return response.json()\r\n        })\r\n        .then(function (body) {\r\n          app.setState({ model: body })\r\n        })\r\n        .catch(function (error) {\r\n          console.log('Top-level error: ', error)\r\n        })\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error) {\r\n    void error\r\n    this.setState({ ...this.state, err: true })\r\n  }\r\n\r\n  render(_, { err }) {\r\n    if (this.state.model === null) {\r\n      return html`<h1>Loading...</h1>`\r\n    }\r\n\r\n    const model = this.state.model.model\r\n\r\n    let error_msg = ''\r\n    if (err) {\r\n      error_msg = html`<h2 style=\"background:red\">An error occurred. Check console</h2>`\r\n    }\r\n\r\n    return html`\r\n      ${error_msg}\r\n      <div id=\"main_content\" style=\"position:absolute;width:99%;height:79%;overflow:scroll\">\r\n        <h1>TorchScript Model (version ${model.version}): ${model.title}</h1>\r\n        <button onClick=${() => console.log(model)}>Log Raw Model Info</button>\r\n        <${ModelSizeSection} model=${model} />\r\n        <${StructuredDataSection} name=\"Model Data\" data=${model.model_data} shown=\"true\" />\r\n        <${StructuredDataSection} name=\"Constants\" data=${model.constants} shown=\"false\" />\r\n        <${ZipContentsSection} model=${model} />\r\n        <${CodeSection} model=${model} />\r\n        <${ExtraJsonSection} files=${model.extra_files_jsons} />\r\n        <${ExtraPicklesSection} files=${model.extra_pickles} />\r\n        <${TensorMemorySection} model=${model} />\r\n      </div>\r\n      <div id=\"aux_content\" style=\"position:absolute;width:99%;top:80%;height:20%;overflow:scroll\">\r\n        <${AuxContentPane}\r\n          err=${this.state.error}\r\n          model=${model}\r\n          ref=${p => blame.setAuxContentPane(p)}\r\n        />\r\n      </div>\r\n    `\r\n  }\r\n}\r\n\r\nrender(h(App), document.body)\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\.venv\\Lib\\site-packages\\torch\\utils\\model_dump\\htm.mjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\.venv\\Lib\\site-packages\\torch\\utils\\model_dump\\preact.mjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\.venv\\Lib\\site-packages\\urllib3\\contrib\\emscripten\\emscripten_fetch_worker.js",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 39,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 39,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1237, 1277], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 99,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 99,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [3257, 3297], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "let Status = {\n  SUCCESS_HEADER: -1,\n  SUCCESS_EOF: -2,\n  ERROR_TIMEOUT: -3,\n  ERROR_EXCEPTION: -4,\n}\n\nlet connections = {}\nlet nextConnectionID = 1\nconst encoder = new TextEncoder()\n\nself.addEventListener('message', async function (event) {\n  if (event.data.close) {\n    let connectionID = event.data.close\n    delete connections[connectionID]\n    return\n  } else if (event.data.getMore) {\n    let connectionID = event.data.getMore\n    let { curOffset, value, reader, intBuffer, byteBuffer } = connections[connectionID]\n    // if we still have some in buffer, then just send it back straight away\n    if (!value || curOffset >= value.length) {\n      // read another buffer if required\n      try {\n        let readResponse = await reader.read()\n\n        if (readResponse.done) {\n          // read everything - clear connection and return\n          delete connections[connectionID]\n          Atomics.store(intBuffer, 0, Status.SUCCESS_EOF)\n          Atomics.notify(intBuffer, 0)\n          // finished reading successfully\n          // return from event handler\n          return\n        }\n        curOffset = 0\n        connections[connectionID].value = readResponse.value\n        value = readResponse.value\n      } catch (error) {\n        console.log('Request exception:', error)\n        let errorBytes = encoder.encode(error.message)\n        let written = errorBytes.length\n        byteBuffer.set(errorBytes)\n        intBuffer[1] = written\n        Atomics.store(intBuffer, 0, Status.ERROR_EXCEPTION)\n        Atomics.notify(intBuffer, 0)\n      }\n    }\n\n    // send as much buffer as we can\n    let curLen = value.length - curOffset\n    if (curLen > byteBuffer.length) {\n      curLen = byteBuffer.length\n    }\n    byteBuffer.set(value.subarray(curOffset, curOffset + curLen), 0)\n\n    Atomics.store(intBuffer, 0, curLen) // store current length in bytes\n    Atomics.notify(intBuffer, 0)\n    curOffset += curLen\n    connections[connectionID].curOffset = curOffset\n\n    return\n  } else {\n    // start fetch\n    let connectionID = nextConnectionID\n    nextConnectionID += 1\n    const intBuffer = new Int32Array(event.data.buffer)\n    const byteBuffer = new Uint8Array(event.data.buffer, 8)\n    try {\n      const response = await fetch(event.data.url, event.data.fetchParams)\n      // return the headers first via textencoder\n      var headers = []\n      for (const pair of response.headers.entries()) {\n        headers.push([pair[0], pair[1]])\n      }\n      let headerObj = {\n        headers: headers,\n        status: response.status,\n        connectionID,\n      }\n      const headerText = JSON.stringify(headerObj)\n      let headerBytes = encoder.encode(headerText)\n      let written = headerBytes.length\n      byteBuffer.set(headerBytes)\n      intBuffer[1] = written\n      // make a connection\n      connections[connectionID] = {\n        reader: response.body.getReader(),\n        intBuffer: intBuffer,\n        byteBuffer: byteBuffer,\n        value: undefined,\n        curOffset: 0,\n      }\n      // set header ready\n      Atomics.store(intBuffer, 0, Status.SUCCESS_HEADER)\n      Atomics.notify(intBuffer, 0)\n      // all fetching after this goes through a new postmessage call with getMore\n      // this allows for parallel requests\n    } catch (error) {\n      console.log('Request exception:', error)\n      let errorBytes = encoder.encode(error.message)\n      let written = errorBytes.length\n      byteBuffer.set(errorBytes)\n      intBuffer[1] = written\n      Atomics.store(intBuffer, 0, Status.ERROR_EXCEPTION)\n      Atomics.notify(intBuffer, 0)\n    }\n  }\n})\nself.postMessage({ inited: true })\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\__mocks__\\fileMock.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\app\\api\\search\\route.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\app\\search\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\api\\middleware\\rateLimiter.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\api\\src\\db\\schema.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\api\\src\\index.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 2,
        "column": 1,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 2,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [20, 57], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// API entry point\r\nconsole.log('API server starting...')\r\n\r\n// Add your API server implementation here\r\n// Example:\r\n// import express from 'express';\r\n// const app = express();\r\n// app.listen(3001, () => console.log('API server running on port 3001'));\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\api\\src\\middleware\\database.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\api\\src\\routes\\health.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\api\\src\\routes\\properties.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\api\\src\\routes\\search.ts",
    "messages": [
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `vectorSearchService` also has a named export `generateEmbeddings`. Check if you meant to write `import {generateEmbeddings} from '../../../../services/vectorSearch'` instead.",
        "line": 86,
        "column": 30,
        "nodeType": "MemberExpression",
        "endLine": 86,
        "endColumn": 68
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `vectorSearchService` also has a named export `semanticPropertySearch`. Check if you meant to write `import {semanticPropertySearch} from '../../../../services/vectorSearch'` instead.",
        "line": 89,
        "column": 27,
        "nodeType": "MemberExpression",
        "endLine": 89,
        "endColumn": 69
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `vectorSearchService` also has a named export `getSimilarProperties`. Check if you meant to write `import {getSimilarProperties} from '../../../../services/vectorSearch'` instead.",
        "line": 148,
        "column": 37,
        "nodeType": "MemberExpression",
        "endLine": 148,
        "endColumn": 77
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// apps/api/src/routes/search.ts\nimport { Router } from 'express'\n\nimport { winstonLogger as logger } from '../../../../lib/logging/winston-logger'\nimport { BadRequest, InternalServerError } from '../../../../lib/middleware/errorHandler'\nimport { createRateLimitMiddleware } from '../../../../lib/rate-limit/factory'\nimport vectorSearchService from '../../../../services/vectorSearch'\n\nconst router = Router()\n\n// Apply rate limiting to all search routes\n// Semantic search is more resource-intensive, so we limit it more strictly\nconst semanticSearchLimiter = createRateLimitMiddleware({\n  interval: 60 * 1000, // 1 minute\n  maxRequests: 20, // 20 requests per minute\n  prefix: 'ratelimit:semantic:',\n})\n\n// Similar properties search is less intensive\nconst similarPropertiesLimiter = createRateLimitMiddleware({\n  interval: 60 * 1000, // 1 minute\n  maxRequests: 50, // 50 requests per minute\n  prefix: 'ratelimit:similar:',\n})\n\n/**\n * POST /api/search/semantic\n * Perform a semantic search on properties\n */\nrouter.post('/semantic', semanticSearchLimiter, async (req, res, next) => {\n  try {\n    // Extract search parameters from request body\n    const { query, filters = {}, options = {} } = req.body\n\n    // Validate query\n    if (!query || typeof query !== 'string' || query.trim() === '') {\n      throw BadRequest('Search query is required')\n    }\n\n    // Validate filters\n    if (filters.minPrice && isNaN(Number(filters.minPrice))) {\n      throw BadRequest('minPrice must be a number')\n    }\n\n    if (filters.maxPrice && isNaN(Number(filters.maxPrice))) {\n      throw BadRequest('maxPrice must be a number')\n    }\n\n    if (filters.bedrooms && isNaN(Number(filters.bedrooms))) {\n      throw BadRequest('bedrooms must be a number')\n    }\n\n    if (filters.bathrooms && isNaN(Number(filters.bathrooms))) {\n      throw BadRequest('bathrooms must be a number')\n    }\n\n    // Validate options\n    if (options.limit && isNaN(Number(options.limit))) {\n      throw BadRequest('limit must be a number')\n    }\n\n    if (options.offset && isNaN(Number(options.offset))) {\n      throw BadRequest('offset must be a number')\n    }\n\n    if (\n      options.similarityThreshold &&\n      (isNaN(Number(options.similarityThreshold)) ||\n        Number(options.similarityThreshold) < 0 ||\n        Number(options.similarityThreshold) > 1)\n    ) {\n      throw BadRequest('similarityThreshold must be a number between 0 and 1')\n    }\n\n    // Log the search request\n    logger.info('Semantic search request', {\n      context: {\n        query,\n        filters,\n        options,\n        requestId: req.id,\n      },\n    })\n\n    // Generate embeddings for the query\n    const embeddings = await vectorSearchService.generateEmbeddings(query)\n\n    // Perform the search\n    const results = await vectorSearchService.semanticPropertySearch(embeddings, filters, options)\n\n    // Return the results\n    res.json({\n      success: true,\n      data: {\n        query,\n        results,\n        count: results.length,\n        filters,\n        options,\n      },\n    })\n  } catch (error) {\n    // Handle known errors\n    if (error instanceof Error) {\n      if (error.message.includes('pgvector extension')) {\n        return next(\n          InternalServerError('Vector search is not available', {\n            details: 'The pgvector extension is not installed on the database',\n          })\n        )\n      }\n    }\n\n    // Pass other errors to the error handler\n    next(error)\n  }\n})\n\n/**\n * GET /api/search/similar/:propertyId\n * Find properties similar to a reference property\n */\nrouter.get('/similar/:propertyId', similarPropertiesLimiter, async (req, res, next) => {\n  try {\n    const { propertyId } = req.params\n    const limit = req.query.limit ? parseInt(req.query.limit as string, 10) : 5\n\n    // Validate propertyId\n    if (!propertyId) {\n      throw BadRequest('Property ID is required')\n    }\n\n    // Validate limit\n    if (isNaN(limit) || limit < 1 || limit > 50) {\n      throw BadRequest('limit must be a number between 1 and 50')\n    }\n\n    // Log the request\n    logger.info('Similar properties request', {\n      context: {\n        propertyId,\n        limit,\n        requestId: req.id,\n      },\n    })\n\n    // Get similar properties\n    const similarProperties = await vectorSearchService.getSimilarProperties(propertyId, limit)\n\n    // Return the results\n    res.json({\n      success: true,\n      data: {\n        referencePropertyId: propertyId,\n        similarProperties,\n        count: similarProperties.length,\n      },\n    })\n  } catch (error) {\n    next(error)\n  }\n})\n\nexport default router\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\api\\src\\routes\\users.ts",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `,`",
        "line": 8,
        "column": 12,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 8,
        "endColumn": 12,
        "fix": { "range": [128, 128], "text": "," }
      },
      {
        "ruleId": "import/order",
        "severity": 2,
        "message": "`../../../../lib/logging/winston-logger` import should occur before import of `../../../../lib/middleware/errorHandler`",
        "line": 11,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "endLine": 11,
        "endColumn": 81,
        "fix": {
          "range": [66, 338],
          "text": "import { winstonLogger as logger } from '../../../../lib/logging/winston-logger'\nimport {\n  BadRequest,\n  NotFound,\n  Unauthorized,\n  Forbidden\n} from '../../../../lib/middleware/errorHandler'\nimport { createRateLimitMiddleware } from '../../../../lib/rate-limit/factory'\n"
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 2,
    "fixableWarningCount": 0,
    "source": "// apps/api/src/routes/users.ts\nimport { Router } from 'express'\n\nimport {\n  BadRequest,\n  NotFound,\n  Unauthorized,\n  Forbidden\n} from '../../../../lib/middleware/errorHandler'\nimport { createRateLimitMiddleware } from '../../../../lib/rate-limit/factory'\nimport { winstonLogger as logger } from '../../../../lib/logging/winston-logger'\n\nconst router = Router()\n\n// Apply rate limiting to user routes\n// Profile operations should be limited to prevent abuse\nconst profileLimiter = createRateLimitMiddleware({\n  interval: 60 * 1000, // 1 minute\n  maxRequests: 30, // 30 requests per minute\n  prefix: 'ratelimit:users:profile:',\n})\n\n/**\n * GET /api/users/me\n * Get the current user's profile\n */\nrouter.get('/me', profileLimiter, (req, res, next) => {\n  try {\n    // Check authentication\n    if (!req.user) {\n      throw Unauthorized('Authentication required')\n    }\n\n    // Log the request\n    logger.info('Fetching current user profile', {\n      context: {\n        userId: req.user.id,\n        requestId: req.id,\n      },\n    })\n\n    // Return user data\n    res.json({\n      success: true,\n      data: {\n        id: req.user.id,\n        email: req.user.email,\n        role: req.user.role,\n      },\n    })\n  } catch (error) {\n    next(error)\n  }\n})\n\n/**\n * GET /api/users/:id\n * Get a user by ID (admin only)\n */\nrouter.get('/:id', profileLimiter, (req, res, next) => {\n  try {\n    const { id } = req.params\n\n    // Check authentication\n    if (!req.user) {\n      throw Unauthorized('Authentication required')\n    }\n\n    // Check authorization (only admins can view other users)\n    if (req.user.id !== id && req.user.role !== 'admin') {\n      throw Forbidden('You do not have permission to view this user')\n    }\n\n    // Log the request\n    logger.info(`Fetching user with ID: ${id}`, {\n      context: {\n        targetUserId: id,\n        requestingUserId: req.user.id,\n        requestId: req.id,\n      },\n    })\n\n    // Simulate fetching user from database\n    const user = fetchUserById(id)\n\n    // Handle not found case\n    if (!user) {\n      throw NotFound(`User with ID ${id} not found`)\n    }\n\n    // Return user data\n    res.json({\n      success: true,\n      data: user,\n    })\n  } catch (error) {\n    next(error)\n  }\n})\n\n/**\n * PUT /api/users/me\n * Update the current user's profile\n */\nrouter.put('/me', profileLimiter, (req, res, next) => {\n  try {\n    // Check authentication\n    if (!req.user) {\n      throw Unauthorized('Authentication required')\n    }\n\n    // Extract update data\n    const { name, email } = req.body\n\n    // Validate email if provided\n    if (email && !isValidEmail(email)) {\n      throw BadRequest('Invalid email format')\n    }\n\n    // Create update object\n    const updateData: Partial<User> = {}\n    if (name !== undefined) updateData.name = name\n    if (email !== undefined) updateData.email = email\n\n    // Log the update\n    logger.info('Updating user profile', {\n      context: {\n        userId: req.user.id,\n        updateFields: Object.keys(updateData),\n        requestId: req.id,\n      },\n    })\n\n    // Simulate updating user in database\n    const updatedUser = updateUser(req.user.id, updateData)\n\n    // Return updated user data\n    res.json({\n      success: true,\n      data: {\n        id: updatedUser.id,\n        email: updatedUser.email,\n        name: updatedUser.name,\n        role: updatedUser.role,\n      },\n    })\n  } catch (error) {\n    next(error)\n  }\n})\n\n// Export router\nexport default router\n\n// Helper functions\n\nfunction isValidEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  return emailRegex.test(email)\n}\n\n// Define user interface\ninterface User {\n  id: string\n  email: string\n  name: string\n  role: 'admin' | 'user'\n  createdAt: string\n}\n\n// Mock functions to simulate database operations\nfunction fetchUserById(id: string): User | null {\n  // Simulate not found for specific IDs\n  if (id === 'not-found' || id === '404') {\n    return null\n  }\n\n  // Return mock user data\n  return {\n    id,\n    email: `user-${id}@example.com`,\n    name: `User ${id}`,\n    role: id === 'admin' ? 'admin' : 'user',\n    createdAt: new Date().toISOString(),\n  }\n}\n\nfunction updateUser(id: string, data: Partial<User>): User {\n  // Get existing user\n  const user = fetchUserById(id)\n\n  if (!user) {\n    throw new Error(`User with ID ${id} not found`)\n  }\n\n  // Return updated user\n  return {\n    ...user,\n    ...data,\n    id, // Ensure ID doesn't change\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\api\\src\\server.ts",
    "messages": [
      {
        "ruleId": "import/order",
        "severity": 2,
        "message": "`../../../lib/logging/winston-logger` import should occur before import of `../../../lib/middleware`",
        "line": 7,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "endLine": 7,
        "endColumn": 78,
        "fix": {
          "range": [92, 304],
          "text": "import { winstonLogger as logger } from '../../../lib/logging/winston-logger'\nimport { setupMiddleware } from '../../../lib/middleware'\nimport { createRateLimitMiddleware } from '../../../lib/rate-limit/factory'\n"
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "// apps/api/src/server.ts\nimport express from 'express'\n\n// Import middleware and utilities\nimport { setupMiddleware } from '../../../lib/middleware'\nimport { createRateLimitMiddleware } from '../../../lib/rate-limit/factory'\nimport { winstonLogger as logger } from '../../../lib/logging/winston-logger'\n\n// Import route handlers\nimport propertiesRoutes from './routes/properties'\nimport searchRoutes from './routes/search'\nimport usersRoutes from './routes/users'\n\n// Create Express application\nconst app = express()\n\n// Apply all middleware (security, CORS, body parsers, logging, error handling)\nsetupMiddleware(app)\n\n// Apply global rate limiting to all API routes\n// This is a fallback to prevent abuse of endpoints that don't have specific rate limits\nconst globalRateLimiter = createRateLimitMiddleware({\n  interval: 60 * 1000, // 1 minute\n  maxRequests: 200, // 200 requests per minute\n  prefix: 'ratelimit:global:',\n})\n\n// Apply global rate limiter to all routes\napp.use(globalRateLimiter)\n\n// Apply routes\napp.use('/api/properties', propertiesRoutes)\napp.use('/api/users', usersRoutes)\napp.use('/api/search', searchRoutes)\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({\n    status: 'ok',\n    timestamp: new Date().toISOString(),\n    version: process.env.npm_package_version || '0.0.0',\n  })\n})\n\n// Start the server\nconst PORT = process.env.PORT || 3001\n\nexport function startServer() {\n  return app.listen(PORT, () => {\n    logger.info(`API server started on port ${PORT}`, {\n      context: {\n        port: PORT,\n        environment: process.env.NODE_ENV || 'development',\n        version: process.env.npm_package_version || '0.0.0',\n      },\n    })\n  })\n}\n\nexport default app\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\api\\src\\some-service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\.next\\server\\interception-route-rewrite-manifest.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\.next\\server\\middleware-build-manifest.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\.next\\server\\middleware-react-loadable-manifest.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\.next\\server\\next-font-manifest.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\.next\\server\\server-reference-manifest.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\.next\\static\\chunks\\polyfills.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\.next\\static\\development\\_buildManifest.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\.next\\static\\development\\_ssgManifest.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\actions\\geocoding.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\admin\\dashboard\\metadata.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\admin\\dashboard\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\admin\\layout.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\agent\\dashboard\\metadata.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\agent\\dashboard\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 113,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 113,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3031, 3034], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3031, 3034], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 192,
        "column": 55,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [5803, 5847],
              "text": "You haven&apos;t uploaded any property files yet."
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [5803, 5847],
              "text": "You haven&lsquo;t uploaded any property files yet."
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [5803, 5847],
              "text": "You haven&#39;t uploaded any property files yet."
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [5803, 5847],
              "text": "You haven&rsquo;t uploaded any property files yet."
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 280,
        "column": 20,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [9684, 9781],
              "text": "\r\n            You don&apos;t have any properties yet. Upload a CSV file to add properties.\r\n          "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [9684, 9781],
              "text": "\r\n            You don&lsquo;t have any properties yet. Upload a CSV file to add properties.\r\n          "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [9684, 9781],
              "text": "\r\n            You don&#39;t have any properties yet. Upload a CSV file to add properties.\r\n          "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [9684, 9781],
              "text": "\r\n            You don&rsquo;t have any properties yet. Upload a CSV file to add properties.\r\n          "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport { useUser } from '@clerk/nextjs'\r\nimport { useState, useEffect } from 'react'\r\n\r\nimport UploadZone from '@components/common/UploadZone'\r\n\r\nimport { Button } from '../../../src/ui'\r\n\r\ninterface UploadRecord {\r\n  id: string\r\n  filename: string\r\n  status: 'pending' | 'approved' | 'rejected'\r\n  createdAt: Date\r\n  propertyCount: number\r\n}\r\n\r\ninterface Property {\r\n  id: string\r\n  uploadId: string\r\n  address: string\r\n  price: number\r\n  bedrooms?: number\r\n  type?: string\r\n  dateSold?: Date\r\n}\r\n\r\nexport default function AgentDashboard() {\r\n  const { isLoaded, isSignedIn, user } = useUser()\r\n  const [uploads, setUploads] = useState<UploadRecord[]>([])\r\n  const [properties, setProperties] = useState<Property[]>([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [uploadStatus, setUploadStatus] = useState<{\r\n    isUploading: boolean\r\n    success: boolean | null\r\n    message: string | null\r\n  }>({\r\n    isUploading: false,\r\n    success: null,\r\n    message: null,\r\n  })\r\n\r\n  useEffect(() => {\r\n    // Fetch agent's uploads and properties\r\n    const fetchAgentData = async () => {\r\n      try {\r\n        setLoading(true)\r\n        // This would be replaced with actual API calls\r\n        const uploadsResponse = await fetch('/api/agent/uploads')\r\n        const propertiesResponse = await fetch('/api/agent/properties')\r\n\r\n        if (!uploadsResponse.ok || !propertiesResponse.ok) {\r\n          throw new Error('Failed to fetch data')\r\n        }\r\n\r\n        const uploadsData = await uploadsResponse.json()\r\n        const propertiesData = await propertiesResponse.json()\r\n\r\n        setUploads(uploadsData.uploads)\r\n        setProperties(propertiesData.properties)\r\n      } catch (err) {\r\n        console.error('Error fetching agent data:', err)\r\n        setError('Failed to load your data. Please try again.')\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n\r\n    fetchAgentData()\r\n  }, [])\r\n\r\n  const handleFileUpload = async (file: File) => {\r\n    setUploadStatus({\r\n      isUploading: true,\r\n      success: null,\r\n      message: 'Uploading file...',\r\n    })\r\n\r\n    try {\r\n      const formData = new FormData()\r\n      formData.append('file', file)\r\n\r\n      const response = await fetch('/api/agent/upload', {\r\n        method: 'POST',\r\n        body: formData,\r\n      })\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json()\r\n        throw new Error(errorData.message || 'Upload failed')\r\n      }\r\n\r\n      const data = await response.json()\r\n\r\n      // Add the new upload to the list\r\n      setUploads([data.upload, ...uploads])\r\n\r\n      setUploadStatus({\r\n        isUploading: false,\r\n        success: true,\r\n        message: `Successfully uploaded ${file.name}`,\r\n      })\r\n\r\n      // Clear success message after 5 seconds\r\n      setTimeout(() => {\r\n        setUploadStatus(prev => ({\r\n          ...prev,\r\n          success: null,\r\n          message: null,\r\n        }))\r\n      }, 5000)\r\n    } catch (err: any) {\r\n      console.error('Upload error:', err)\r\n      setUploadStatus({\r\n        isUploading: false,\r\n        success: false,\r\n        message: err.message || 'Failed to upload file. Please try again.',\r\n      })\r\n    }\r\n  }\r\n\r\n  const viewUploadDetails = (uploadId: string) => {\r\n    // Navigate to upload details page\r\n    window.location.href = `/agent/uploads/${uploadId}`\r\n  }\r\n\r\n  return (\r\n    <div className=\"max-w-7xl mx-auto p-6\">\r\n      <div className=\"flex justify-between items-center mb-6\">\r\n        <h1 className=\"text-3xl font-bold\">Agent Dashboard</h1>\r\n        {isLoaded && isSignedIn && (\r\n          <div className=\"flex items-center\">\r\n            <div className=\"mr-4\">\r\n              <p className=\"text-sm text-gray-600\">Welcome,</p>\r\n              <p className=\"font-medium\">{user.firstName || user.emailAddresses[0].emailAddress}</p>\r\n            </div>\r\n            <Button\r\n              variant=\"secondary\"\r\n              size=\"small\"\r\n              onClick={() => (window.location.href = '/sign-out')}\r\n            >\r\n              Sign Out\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Upload Section */}\r\n      <div className=\"bg-white rounded shadow p-6 mb-8\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">Upload Properties</h2>\r\n        <p className=\"text-gray-600 mb-4\">\r\n          Upload a CSV file containing property details. The file should include columns for\r\n          address, price, bedrooms, type, etc.\r\n        </p>\r\n\r\n        <UploadZone onUpload={handleFileUpload} />\r\n\r\n        {uploadStatus.isUploading && (\r\n          <div className=\"mt-4 flex items-center text-blue-600\">\r\n            <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2\"></div>\r\n            <span>{uploadStatus.message}</span>\r\n          </div>\r\n        )}\r\n\r\n        {uploadStatus.success === true && (\r\n          <div className=\"mt-4 text-green-600\">{uploadStatus.message}</div>\r\n        )}\r\n\r\n        {uploadStatus.success === false && (\r\n          <div className=\"mt-4 text-red-600\">{uploadStatus.message}</div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Uploads Table */}\r\n      <div className=\"bg-white rounded shadow overflow-hidden mb-8\">\r\n        <h2 className=\"text-xl font-semibold p-4 border-b\">Your Uploads</h2>\r\n\r\n        {loading && (\r\n          <div className=\"flex justify-center items-center p-8\">\r\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-700\"></div>\r\n          </div>\r\n        )}\r\n\r\n        {error && (\r\n          <div className=\"p-4 text-red-600\" role=\"alert\">\r\n            {error}\r\n          </div>\r\n        )}\r\n\r\n        {!loading && !error && uploads.length === 0 && (\r\n          <div className=\"p-4 text-gray-600\">You haven't uploaded any property files yet.</div>\r\n        )}\r\n\r\n        {!loading && !error && uploads.length > 0 && (\r\n          <div className=\"overflow-x-auto\">\r\n            <table className=\"min-w-full divide-y divide-gray-200\">\r\n              <thead className=\"bg-gray-50\">\r\n                <tr>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                    Filename\r\n                  </th>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                    Date\r\n                  </th>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                    Properties\r\n                  </th>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                    Status\r\n                  </th>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                    Actions\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                {uploads.map(upload => (\r\n                  <tr key={upload.id}>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                      <div className=\"text-sm font-medium text-gray-900\">{upload.filename}</div>\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                      <div className=\"text-sm text-gray-900\">\r\n                        {new Date(upload.createdAt).toLocaleDateString()}\r\n                      </div>\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                      <div className=\"text-sm text-gray-900\">{upload.propertyCount}</div>\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                      <span\r\n                        className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full \r\n                        ${\r\n                          upload.status === 'pending'\r\n                            ? 'bg-yellow-100 text-yellow-800'\r\n                            : upload.status === 'approved'\r\n                              ? 'bg-green-100 text-green-800'\r\n                              : 'bg-red-100 text-red-800'\r\n                        }`}\r\n                      >\r\n                        {upload.status.charAt(0).toUpperCase() + upload.status.slice(1)}\r\n                      </span>\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\r\n                      <Button\r\n                        variant=\"secondary\"\r\n                        size=\"small\"\r\n                        onClick={() => viewUploadDetails(upload.id)}\r\n                      >\r\n                        View Details\r\n                      </Button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Properties Preview */}\r\n      <div className=\"bg-white rounded shadow overflow-hidden\">\r\n        <h2 className=\"text-xl font-semibold p-4 border-b\">Your Properties</h2>\r\n\r\n        {loading && (\r\n          <div className=\"flex justify-center items-center p-8\">\r\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-700\"></div>\r\n          </div>\r\n        )}\r\n\r\n        {error && (\r\n          <div className=\"p-4 text-red-600\" role=\"alert\">\r\n            {error}\r\n          </div>\r\n        )}\r\n\r\n        {!loading && !error && properties.length === 0 && (\r\n          <div className=\"p-4 text-gray-600\">\r\n            You don't have any properties yet. Upload a CSV file to add properties.\r\n          </div>\r\n        )}\r\n\r\n        {!loading && !error && properties.length > 0 && (\r\n          <div className=\"overflow-x-auto\">\r\n            <table className=\"min-w-full divide-y divide-gray-200\">\r\n              <thead className=\"bg-gray-50\">\r\n                <tr>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                    Address\r\n                  </th>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                    Price\r\n                  </th>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                    Bedrooms\r\n                  </th>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                    Type\r\n                  </th>\r\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                    Actions\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody className=\"bg-white divide-y divide-gray-200\">\r\n                {properties.slice(0, 5).map(property => (\r\n                  <tr key={property.id}>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                      <div className=\"text-sm font-medium text-gray-900\">{property.address}</div>\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                      <div className=\"text-sm text-gray-900\">\r\n                        £{property.price.toLocaleString()}\r\n                      </div>\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                      <div className=\"text-sm text-gray-900\">{property.bedrooms || 'N/A'}</div>\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                      <div className=\"text-sm text-gray-900\">{property.type || 'N/A'}</div>\r\n                    </td>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\r\n                      <Button\r\n                        variant=\"secondary\"\r\n                        size=\"small\"\r\n                        onClick={() => (window.location.href = `/agent/properties/${property.id}`)}\r\n                      >\r\n                        Edit\r\n                      </Button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n\r\n            {properties.length > 5 && (\r\n              <div className=\"p-4 text-center\">\r\n                <Button\r\n                  variant=\"secondary\"\r\n                  onClick={() => (window.location.href = '/agent/properties')}\r\n                >\r\n                  View All Properties ({properties.length})\r\n                </Button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\agent\\layout.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\agent\\profile\\metadata.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\agent\\profile\\page.tsx",
    "messages": [
      {
        "ruleId": "import/order",
        "severity": 2,
        "message": "`../../../src/ui` import should occur before import of `@/lib/auth/clerk-wrapper`",
        "line": 7,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "endLine": 7,
        "endColumn": 41,
        "fix": {
          "range": [52, 172],
          "text": "import { Button } from '../../../src/ui'\r\nimport { useAuthentication, AuthRequired } from '@/lib/auth/clerk-wrapper'\r\n\r\n"
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport { useState } from 'react'\r\n\r\nimport { useAuthentication, AuthRequired } from '@/lib/auth/clerk-wrapper'\r\n\r\nimport { Button } from '../../../src/ui'\r\n\r\n// Profile editor component\r\nconst ProfileEditor = () => {\r\n  const { user } = useAuthentication()\r\n  const [isEditing, setIsEditing] = useState(false)\r\n  const [firstName, setFirstName] = useState('')\r\n  const [lastName, setLastName] = useState('')\r\n  const [isSubmitting, setIsSubmitting] = useState(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [successMessage, setSuccessMessage] = useState<string | null>(null)\r\n\r\n  // Reset success/error messages when editing state changes\r\n  const handleEditProfile = () => {\r\n    setFirstName(user?.firstName || '')\r\n    setLastName(user?.lastName || '')\r\n    setIsEditing(true)\r\n    setError(null)\r\n    setSuccessMessage(null)\r\n  }\r\n\r\n  // Save profile with error handling and retry logic\r\n  const handleSaveProfile = async () => {\r\n    if (!user) return\r\n\r\n    setIsSubmitting(true)\r\n    setError(null)\r\n\r\n    try {\r\n      await user.update({\r\n        firstName,\r\n        lastName,\r\n      })\r\n\r\n      setIsEditing(false)\r\n      setSuccessMessage('Profile updated successfully!')\r\n\r\n      // Clear success message after 3 seconds\r\n      setTimeout(() => {\r\n        setSuccessMessage(null)\r\n      }, 3000)\r\n    } catch (error) {\r\n      console.error('Error updating profile:', error)\r\n      setError('Failed to update profile. Please try again.')\r\n    } finally {\r\n      setIsSubmitting(false)\r\n    }\r\n  }\r\n\r\n  // Retry profile update\r\n  const handleRetry = () => {\r\n    handleSaveProfile()\r\n  }\r\n\r\n  // Cancel editing\r\n  const handleCancelEdit = () => {\r\n    setIsEditing(false)\r\n    setError(null)\r\n  }\r\n\r\n  if (!user) return null\r\n\r\n  return (\r\n    <div className=\"max-w-4xl mx-auto p-6\">\r\n      <h1 className=\"text-3xl font-bold mb-6\">Your Profile</h1>\r\n\r\n      <div className=\"bg-white rounded shadow p-6\">\r\n        {/* Show success message if present */}\r\n        {successMessage && (\r\n          <div className=\"mb-4 p-3 bg-green-50 border border-green-200 text-green-700 rounded-md\">\r\n            {successMessage}\r\n          </div>\r\n        )}\r\n\r\n        {/* Show error message if present */}\r\n        {error && (\r\n          <div className=\"mb-4 p-3 bg-red-50 border border-red-200 text-red-700 rounded-md flex justify-between items-center\">\r\n            <span>{error}</span>\r\n            <button\r\n              onClick={handleRetry}\r\n              className=\"text-sm bg-red-100 hover:bg-red-200 text-red-800 px-3 py-1 rounded-md transition-colors\"\r\n            >\r\n              Retry\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        {isEditing ? (\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <label htmlFor=\"firstName\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                First Name\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"firstName\"\r\n                value={firstName}\r\n                onChange={e => setFirstName(e.target.value)}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\r\n                disabled={isSubmitting}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"lastName\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                Last Name\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"lastName\"\r\n                value={lastName}\r\n                onChange={e => setLastName(e.target.value)}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\r\n                disabled={isSubmitting}\r\n              />\r\n            </div>\r\n            <div className=\"flex space-x-4 mt-6\">\r\n              <Button variant=\"primary\" onClick={handleSaveProfile} disabled={isSubmitting}>\r\n                {isSubmitting ? 'Saving...' : 'Save Changes'}\r\n              </Button>\r\n              <Button variant=\"secondary\" onClick={handleCancelEdit} disabled={isSubmitting}>\r\n                Cancel\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <div className=\"mb-6 flex items-center\">\r\n              <div className=\"w-20 h-20 rounded-full bg-gray-200 flex items-center justify-center text-gray-500 text-2xl mr-4\">\r\n                {user.firstName?.[0] || user.emailAddresses[0].emailAddress[0].toUpperCase()}\r\n              </div>\r\n              <div>\r\n                <h2 className=\"text-xl font-semibold\">\r\n                  {user.firstName} {user.lastName}\r\n                </h2>\r\n                <p className=\"text-gray-600\">{user.emailAddresses[0].emailAddress}</p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"border-t pt-4\">\r\n              <h3 className=\"text-lg font-medium mb-4\">Account Information</h3>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <div>\r\n                  <p className=\"text-sm text-gray-500\">Email</p>\r\n                  <p>{user.emailAddresses[0].emailAddress}</p>\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-sm text-gray-500\">Account Created</p>\r\n                  <p>{user.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'N/A'}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"mt-6\">\r\n              <Button variant=\"secondary\" onClick={handleEditProfile}>\r\n                Edit Profile\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// Main profile page with authentication required\r\nexport default function ProfilePage() {\r\n  return (\r\n    <AuthRequired\r\n      requiredRoles={['agent', 'admin']}\r\n      fallback={\r\n        <div className=\"max-w-4xl mx-auto p-6\">\r\n          <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-6 text-center\">\r\n            <h2 className=\"text-xl font-semibold text-yellow-700 mb-2\">Agent Access Required</h2>\r\n            <p className=\"text-yellow-600 mb-4\">\r\n              You need to be registered as an agent to access this page.\r\n            </p>\r\n            <a\r\n              href=\"/\"\r\n              className=\"inline-block px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2\"\r\n            >\r\n              Go to Home\r\n            </a>\r\n          </div>\r\n        </div>\r\n      }\r\n    >\r\n      <ProfileEditor />\r\n    </AuthRequired>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\agent\\upload\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\api\\admin\\uploads\\[id]\\approve\\route.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 12,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 12,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [419, 471], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextRequest, NextResponse } from 'next/server'\r\n\r\nexport async function POST(request: NextRequest, { params }: { params: { id: string } }) {\r\n  try {\r\n    const uploadId = params.id\r\n\r\n    // In a real implementation, you would:\r\n    // 1. Verify the user has admin permissions\r\n    // 2. Update the upload status in the database\r\n    // 3. Process any side effects (e.g., making properties searchable)\r\n\r\n    console.log(`Approving upload with ID: ${uploadId}`)\r\n\r\n    // Mock successful update\r\n    return NextResponse.json({\r\n      message: 'Upload approved successfully',\r\n      uploadId,\r\n    })\r\n  } catch (error) {\r\n    console.error('Error approving upload:', error)\r\n    return NextResponse.json({ message: 'Failed to approve upload' }, { status: 500 })\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\api\\admin\\uploads\\[id]\\reject\\route.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 12,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 12,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [424, 476], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextRequest, NextResponse } from 'next/server'\r\n\r\nexport async function POST(request: NextRequest, { params }: { params: { id: string } }) {\r\n  try {\r\n    const uploadId = params.id\r\n\r\n    // In a real implementation, you would:\r\n    // 1. Verify the user has admin permissions\r\n    // 2. Update the upload status in the database\r\n    // 3. Process any side effects (e.g., marking properties as unavailable)\r\n\r\n    console.log(`Rejecting upload with ID: ${uploadId}`)\r\n\r\n    // Mock successful update\r\n    return NextResponse.json({\r\n      message: 'Upload rejected successfully',\r\n      uploadId,\r\n    })\r\n  } catch (error) {\r\n    console.error('Error rejecting upload:', error)\r\n    return NextResponse.json({ message: 'Failed to reject upload' }, { status: 500 })\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\api\\admin\\uploads\\route.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'request' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 52,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 52,
        "endColumn": 34
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextRequest, NextResponse } from 'next/server'\r\n\r\n// Mock data - would be replaced with database queries\r\nconst mockUploads = [\r\n  {\r\n    id: '1',\r\n    uploaderId: 'user-123',\r\n    uploaderName: 'John Smith',\r\n    filename: 'london-properties.csv',\r\n    status: 'approved',\r\n    createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 7 days ago\r\n    propertyCount: 42,\r\n  },\r\n  {\r\n    id: '2',\r\n    uploaderId: 'user-123',\r\n    uploaderName: 'John Smith',\r\n    filename: 'manchester-listings.csv',\r\n    status: 'pending',\r\n    createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago\r\n    propertyCount: 18,\r\n  },\r\n  {\r\n    id: '3',\r\n    uploaderId: 'user-123',\r\n    uploaderName: 'John Smith',\r\n    filename: 'birmingham-properties.csv',\r\n    status: 'rejected',\r\n    createdAt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000), // 14 days ago\r\n    propertyCount: 7,\r\n  },\r\n  {\r\n    id: '4',\r\n    uploaderId: 'user-456',\r\n    uploaderName: 'Sarah Johnson',\r\n    filename: 'edinburgh-listings.csv',\r\n    status: 'pending',\r\n    createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // 1 day ago\r\n    propertyCount: 23,\r\n  },\r\n  {\r\n    id: '5',\r\n    uploaderId: 'user-789',\r\n    uploaderName: 'Michael Brown',\r\n    filename: 'glasgow-properties.csv',\r\n    status: 'approved',\r\n    createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000), // 5 days ago\r\n    propertyCount: 31,\r\n  },\r\n]\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // In a real implementation, you would:\r\n    // 1. Verify the user has admin permissions\r\n    // 2. Query the database for all uploads\r\n    // 3. Calculate stats\r\n    // 4. Return the results\r\n\r\n    // Sort by date (newest first)\r\n    const sortedUploads = [...mockUploads].sort(\r\n      (a, b) => b.createdAt.getTime() - a.createdAt.getTime()\r\n    )\r\n\r\n    // Calculate stats\r\n    const stats = {\r\n      totalProperties: mockUploads.reduce((sum, upload) => sum + upload.propertyCount, 0),\r\n      pendingUploads: mockUploads.filter(upload => upload.status === 'pending').length,\r\n      approvedUploads: mockUploads.filter(upload => upload.status === 'approved').length,\r\n      rejectedUploads: mockUploads.filter(upload => upload.status === 'rejected').length,\r\n    }\r\n\r\n    return NextResponse.json({\r\n      uploads: sortedUploads,\r\n      stats,\r\n    })\r\n  } catch (error) {\r\n    console.error('Error fetching admin uploads:', error)\r\n    return NextResponse.json({ message: 'Failed to fetch uploads' }, { status: 500 })\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\api\\agent\\properties\\route.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\api\\agent\\upload\\route.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\api\\agent\\uploads\\route.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\api\\health\\route.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'req' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 9,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 30
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// app/api/health/route.ts\r\nimport { isDatabaseHealthy, getDatabaseStatus } from '@your-org/db'\r\nimport { NextRequest, NextResponse } from 'next/server'\r\n\r\n/**\r\n * Health check endpoint\r\n * GET /api/health\r\n */\r\nexport async function GET(req: NextRequest) {\r\n  const dbStatus = getDatabaseStatus()\r\n  const isDbHealthy = isDatabaseHealthy()\r\n\r\n  const health = {\r\n    status: isDbHealthy ? 'healthy' : 'unhealthy',\r\n    timestamp: new Date().toISOString(),\r\n    services: {\r\n      database: {\r\n        status: dbStatus.status,\r\n        healthy: isDbHealthy,\r\n        error: dbStatus.error ? dbStatus.error.message : null,\r\n      },\r\n      api: {\r\n        status: 'RUNNING',\r\n        healthy: true,\r\n      },\r\n    },\r\n  }\r\n\r\n  // Return 503 if any service is unhealthy\r\n  const statusCode = isDbHealthy ? 200 : 503\r\n\r\n  return NextResponse.json(health, { status: statusCode })\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\api\\properties\\route.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\api\\search\\route.ts",
    "messages": [
      {
        "ruleId": "import/order",
        "severity": 2,
        "message": "There should be no empty line within import group",
        "line": 1,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "endLine": 1,
        "endColumn": 56,
        "fix": { "range": [57, 59], "text": "" }
      },
      {
        "ruleId": "import/order",
        "severity": 2,
        "message": "`@/lib/prisma` import should occur before import of `next/server`",
        "line": 3,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "endLine": 3,
        "endColumn": 38,
        "fix": {
          "range": [0, 98],
          "text": "import { prisma } from '@/lib/prisma'\r\nimport { NextRequest, NextResponse } from 'next/server'\r\n\r\n"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'prisma' is defined but never used.",
        "line": 3,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 16
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 2,
    "fixableWarningCount": 0,
    "source": "import { NextRequest, NextResponse } from 'next/server'\r\n\r\nimport { prisma } from '@/lib/prisma'\r\n\r\n/**\r\n * Placeholder search API\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  const searchParams = request.nextUrl.searchParams\r\n  const query = searchParams.get('q') || ''\r\n\r\n  // Mock search results\r\n  const mockResults = [\r\n    {\r\n      id: '1',\r\n      address: '123 Main St, Anytown, USA',\r\n      price: 350000,\r\n      bedrooms: 3,\r\n      type: 'House',\r\n    },\r\n    {\r\n      id: '2',\r\n      address: '456 Oak Ave, Somewhere, USA',\r\n      price: 275000,\r\n      bedrooms: 2,\r\n      type: 'Apartment',\r\n    },\r\n  ]\r\n\r\n  return NextResponse.json({\r\n    success: true,\r\n    data: {\r\n      query,\r\n      results: mockResults,\r\n    },\r\n  })\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\api\\search\\route.vitest.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'schema' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 76,
        "column": 51,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 76,
        "endColumn": 57
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 76,
        "column": 59,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 76,
        "endColumn": 62,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1949, 1952], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1949, 1952], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-function-type",
        "severity": 2,
        "message": "The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.",
        "line": 102,
        "column": 37,
        "nodeType": "Identifier",
        "messageId": "bannedFunctionType",
        "endLine": 102,
        "endColumn": 45
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 106,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 106,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2809, 2812], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2809, 2812], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'generateEmbedding' is assigned a value but never used.",
        "line": 388,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 388,
        "endColumn": 30
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextRequest } from 'next/server'\r\nimport { describe, it, expect, beforeEach, vi, afterEach } from 'vitest'\r\nimport { z } from 'zod'\r\n\r\nimport { GET } from './route'\r\n\r\n// Mock the embedding generation\r\nvi.mock('../../../../../lib/embedding', () => ({\r\n  generateEmbedding: vi.fn().mockResolvedValue([0.1, 0.2, 0.3]),\r\n}))\r\n\r\n// Mock the database\r\nvi.mock('@your-org/db', () => {\r\n  const selectChain = {\r\n    from: vi.fn().mockReturnThis(),\r\n    where: vi.fn().mockReturnThis(),\r\n    orderBy: vi.fn().mockReturnThis(),\r\n    limit: vi\r\n      .fn()\r\n      .mockResolvedValue([{ id: 'fallback-1', title: 'Fallback Result', price: 500000 }]),\r\n  }\r\n  return {\r\n    db: {\r\n      execute: vi.fn().mockResolvedValue({ rows: [] }),\r\n      select: vi.fn(() => selectChain),\r\n    },\r\n    schema: {\r\n      property: {},\r\n    },\r\n  }\r\n})\r\n\r\n// Mock the database utilities\r\nvi.mock('../../../../../lib/db/utils', () => ({\r\n  bindVector: vi.fn((embedding: number[]) => embedding),\r\n  bindJsonbArray: vi.fn((embedding: number[]) => embedding),\r\n}))\r\n\r\n// Mock the API response utilities\r\nvi.mock('../../../../../lib/api/response', () => {\r\n  return {\r\n    successResponse: vi.fn(data => {\r\n      return Response.json(\r\n        {\r\n          success: true,\r\n          data,\r\n        },\r\n        { status: 200 }\r\n      )\r\n    }),\r\n    errorResponse: vi.fn((message, status = 400, code, details) => {\r\n      return Response.json(\r\n        {\r\n          success: false,\r\n          error: {\r\n            message,\r\n            ...(code && { code }),\r\n            ...(details && { details }),\r\n          },\r\n        },\r\n        { status }\r\n      )\r\n    }),\r\n    HttpStatus: {\r\n      OK: 200,\r\n      BAD_REQUEST: 400,\r\n      UNPROCESSABLE_ENTITY: 422,\r\n      INTERNAL_SERVER_ERROR: 500,\r\n    },\r\n  }\r\n})\r\n\r\n// Mock the validation utilities\r\nvi.mock('../../../../../lib/api/validation', () => {\r\n  return {\r\n    validateQuery: vi.fn(async (req: NextRequest, schema: any) => {\r\n      const url = new URL(req.url)\r\n      const searchParams = Object.fromEntries(url.searchParams.entries())\r\n\r\n      try {\r\n        // Simulate Zod validation\r\n        if (!searchParams.q) {\r\n          throw new z.ZodError([\r\n            {\r\n              code: 'invalid_type',\r\n              expected: 'string',\r\n              received: 'undefined',\r\n              path: ['q'],\r\n              message: 'Search query is required',\r\n            },\r\n          ])\r\n        }\r\n\r\n        return {\r\n          q: searchParams.q,\r\n          limit: searchParams.limit ? parseInt(searchParams.limit, 10) : 10,\r\n        }\r\n      } catch (error) {\r\n        throw error\r\n      }\r\n    }),\r\n    withValidation: vi.fn((handler: Function) => {\r\n      return async (req: NextRequest) => {\r\n        try {\r\n          return await handler(req)\r\n        } catch (error: any) {\r\n          if (error instanceof z.ZodError) {\r\n            return Response.json(\r\n              {\r\n                success: false,\r\n                error: {\r\n                  message: 'Validation error',\r\n                  code: 'VALIDATION_ERROR',\r\n                  details: error.errors,\r\n                },\r\n              },\r\n              { status: 422 }\r\n            )\r\n          }\r\n\r\n          return Response.json(\r\n            {\r\n              success: false,\r\n              error: {\r\n                message: error.message || 'An unexpected error occurred',\r\n              },\r\n            },\r\n            { status: 500 }\r\n          )\r\n        }\r\n      }\r\n    }),\r\n  }\r\n})\r\n\r\n// Util to simulate a request with query params\r\nconst makeRequest = (params: Record<string, string>): NextRequest => {\r\n  const url = new URL('http://localhost/api/search')\r\n  Object.entries(params).forEach(([k, v]) => url.searchParams.append(k, v))\r\n  return new NextRequest(url)\r\n}\r\n\r\ndescribe('GET /search', () => {\r\n  beforeEach(() => {\r\n    vi.clearAllMocks()\r\n  })\r\n\r\n  afterEach(() => {\r\n    vi.resetAllMocks()\r\n  })\r\n\r\n  it('returns fallback results if vector search returns no results', async () => {\r\n    // Setup\r\n    const { db } = await import('@your-org/db')\r\n    const { generateEmbedding } = await import('../../../../../lib/embedding')\r\n    const { bindVector, bindJsonbArray } = await import('../../../../../lib/db/utils')\r\n\r\n    // Execute\r\n    const req = makeRequest({ q: 'modern home', limit: '5' })\r\n    const response = await GET(req)\r\n    const responseBody = await response.json()\r\n\r\n    // Verify\r\n    expect(response.status).toBe(200)\r\n    expect(responseBody.success).toBe(true)\r\n    expect(responseBody.data.query).toBe('modern home')\r\n    expect(responseBody.data.results.length).toBeGreaterThan(0)\r\n    expect(responseBody.data.results[0].title).toBe('Fallback Result')\r\n\r\n    // Verify function calls\r\n    expect(generateEmbedding).toHaveBeenCalledWith('modern home', expect.any(Object))\r\n    expect(db.execute).toHaveBeenCalledWith(expect.any(Object))\r\n    expect(bindVector).toHaveBeenCalledWith([0.1, 0.2, 0.3])\r\n    expect(db.select).toHaveBeenCalled()\r\n    expect(bindJsonbArray).toHaveBeenCalledWith([0.1, 0.2, 0.3])\r\n  })\r\n\r\n  it('returns vector results if vector search is successful', async () => {\r\n    // Setup\r\n    const { db } = await import('@your-org/db')\r\n    const { generateEmbedding } = await import('../../../../../lib/embedding')\r\n    const { bindVector } = await import('../../../../../lib/db/utils')\r\n\r\n    // Reset the mock to ensure it's clean\r\n    vi.mocked(bindVector).mockClear()\r\n\r\n    vi.mocked(db.execute).mockResolvedValueOnce({\r\n      rows: [{ id: 'vector-1', title: 'Vector Result', price: 750000 }],\r\n      command: 'SELECT',\r\n      rowCount: 1,\r\n      oid: 0,\r\n      fields: [],\r\n    })\r\n\r\n    // Execute\r\n    const req = makeRequest({ q: 'villa', limit: '3' })\r\n    const response = await GET(req)\r\n    const responseBody = await response.json()\r\n\r\n    // Verify\r\n    expect(response.status).toBe(200)\r\n    expect(responseBody.success).toBe(true)\r\n    expect(responseBody.data.results[0].title).toBe('Vector Result')\r\n\r\n    // Verify function calls\r\n    expect(generateEmbedding).toHaveBeenCalledWith('villa', expect.any(Object))\r\n    expect(db.execute).toHaveBeenCalledWith(expect.any(Object))\r\n    // Don't test exact parameters for bindVector as it might be called differently\r\n    expect(bindVector).toHaveBeenCalled()\r\n    expect(db.select).not.toHaveBeenCalled() // Should not fall back to JSONB search\r\n  })\r\n\r\n  it('returns 422 with validation error if query param is missing', async () => {\r\n    // Execute\r\n    const req = makeRequest({})\r\n    const response = await GET(req)\r\n    const responseBody = await response.json()\r\n\r\n    // Verify\r\n    expect(response.status).toBe(422)\r\n    expect(responseBody.success).toBe(false)\r\n    expect(responseBody.error.code).toBe('VALIDATION_ERROR')\r\n    expect(responseBody.error.message).toBe('Validation error')\r\n    expect(Array.isArray(responseBody.error.details)).toBe(true)\r\n  })\r\n\r\n  it('uses default limit if not provided', async () => {\r\n    // Setup\r\n    const { db } = await import('@your-org/db')\r\n    const { generateEmbedding } = await import('../../../../../lib/embedding')\r\n\r\n    // Mock successful database response for this test\r\n    vi.mocked(db.execute).mockResolvedValueOnce({\r\n      rows: [{ id: 'default-limit-1', title: 'Default Limit Result', price: 600000 }],\r\n      command: 'SELECT',\r\n      rowCount: 1,\r\n      oid: 0,\r\n      fields: [],\r\n    })\r\n\r\n    // Execute\r\n    const req = makeRequest({ q: 'penthouse' })\r\n    const response = await GET(req)\r\n    const responseBody = await response.json()\r\n\r\n    // Verify\r\n    expect(response.status).toBe(200)\r\n    expect(responseBody.success).toBe(true)\r\n    expect(responseBody.data.results[0].title).toBe('Default Limit Result')\r\n\r\n    // Verify function calls with default limit\r\n    expect(generateEmbedding).toHaveBeenCalledWith('penthouse', expect.any(Object))\r\n    expect(db.execute).toHaveBeenCalledWith(expect.any(Object))\r\n  })\r\n\r\n  it('handles invalid limit parameter by using default', async () => {\r\n    // Setup\r\n    const { db } = await import('@your-org/db')\r\n\r\n    // Mock successful database response for this test\r\n    vi.mocked(db.execute).mockResolvedValueOnce({\r\n      rows: [{ id: 'invalid-limit-1', title: 'Invalid Limit Result', price: 650000 }],\r\n      command: 'SELECT',\r\n      rowCount: 1,\r\n      oid: 0,\r\n      fields: [],\r\n    })\r\n\r\n    // Execute\r\n    const req = makeRequest({ q: 'apartment', limit: 'invalid' })\r\n    const response = await GET(req)\r\n    const responseBody = await response.json()\r\n\r\n    // Verify\r\n    expect(response.status).toBe(200)\r\n    expect(responseBody.success).toBe(true)\r\n    expect(responseBody.data.results[0].title).toBe('Invalid Limit Result')\r\n\r\n    // Should use default limit (10)\r\n    expect(db.execute).toHaveBeenCalledWith(expect.any(Object))\r\n  })\r\n\r\n  it('handles database errors gracefully', async () => {\r\n    // Setup\r\n    const { db } = await import('@your-org/db')\r\n    const { generateEmbedding } = await import('../../../../../lib/embedding')\r\n\r\n    // Mock a database error in both execute and select\r\n    vi.mocked(db.execute).mockRejectedValueOnce(new Error('Database connection error'))\r\n    vi.mocked(db.select).mockImplementationOnce(() => {\r\n      throw new Error('Database query error')\r\n    })\r\n\r\n    // Execute\r\n    const req = makeRequest({ q: 'error test' })\r\n    const response = await GET(req)\r\n    const responseBody = await response.json()\r\n\r\n    // Verify\r\n    expect(response.status).toBe(500)\r\n    expect(responseBody.success).toBe(false)\r\n    expect(responseBody.error.message).toBe('Database query error')\r\n\r\n    // Verify function calls\r\n    expect(generateEmbedding).toHaveBeenCalledWith('error test', expect.any(Object))\r\n    expect(db.execute).toHaveBeenCalledWith(expect.any(Object))\r\n  })\r\n\r\n  it('handles embedding generation errors', async () => {\r\n    // Setup\r\n    const { generateEmbedding } = await import('../../../../../lib/embedding')\r\n\r\n    // Mock embedding generation error\r\n    vi.mocked(generateEmbedding).mockRejectedValueOnce(new Error('Embedding service unavailable'))\r\n\r\n    // Execute\r\n    const req = makeRequest({ q: 'embedding error' })\r\n    const response = await GET(req)\r\n    const responseBody = await response.json()\r\n\r\n    // Verify\r\n    expect(response.status).toBe(500)\r\n    expect(responseBody.success).toBe(false)\r\n    expect(responseBody.error.message).toBe('Embedding service unavailable')\r\n  })\r\n\r\n  it('handles very long search queries properly', async () => {\r\n    // Setup\r\n    const { db } = await import('@your-org/db')\r\n    const { generateEmbedding } = await import('../../../../../lib/embedding')\r\n\r\n    // Mock successful database response\r\n    vi.mocked(db.execute).mockResolvedValueOnce({\r\n      rows: [{ id: 'long-query-1', title: 'Long Query Result', price: 800000 }],\r\n      command: 'SELECT',\r\n      rowCount: 1,\r\n      oid: 0,\r\n      fields: [],\r\n    })\r\n\r\n    // Create a very long search query (500+ characters)\r\n    const longQuery = 'luxury ' + 'modern '.repeat(100) + 'apartment with views'\r\n\r\n    // Execute\r\n    const req = makeRequest({ q: longQuery })\r\n    const response = await GET(req)\r\n    const responseBody = await response.json()\r\n\r\n    // Verify\r\n    expect(response.status).toBe(200)\r\n    expect(responseBody.success).toBe(true)\r\n    expect(responseBody.data.results[0].title).toBe('Long Query Result')\r\n    expect(generateEmbedding).toHaveBeenCalledWith(longQuery, expect.any(Object))\r\n  })\r\n\r\n  it('handles special characters in search queries', async () => {\r\n    // Setup\r\n    const { db } = await import('@your-org/db')\r\n    const { generateEmbedding } = await import('../../../../../lib/embedding')\r\n\r\n    // Mock successful database response\r\n    vi.mocked(db.execute).mockResolvedValueOnce({\r\n      rows: [{ id: 'special-chars-1', title: 'Special Chars Result', price: 950000 }],\r\n      command: 'SELECT',\r\n      rowCount: 1,\r\n      oid: 0,\r\n      fields: [],\r\n    })\r\n\r\n    // Create a query with special characters\r\n    const specialCharsQuery = 'apartment & penthouse (2-bedroom) with $500k-$1M price range'\r\n\r\n    // Execute\r\n    const req = makeRequest({ q: specialCharsQuery })\r\n    const response = await GET(req)\r\n    const responseBody = await response.json()\r\n\r\n    // Verify\r\n    expect(response.status).toBe(200)\r\n    expect(responseBody.success).toBe(true)\r\n    expect(responseBody.data.results[0].title).toBe('Special Chars Result')\r\n    expect(generateEmbedding).toHaveBeenCalledWith(specialCharsQuery, expect.any(Object))\r\n  })\r\n\r\n  it('handles very large limit values', async () => {\r\n    // Setup\r\n    const { db } = await import('@your-org/db')\r\n    const { generateEmbedding } = await import('../../../../../lib/embedding')\r\n\r\n    // Mock successful database response\r\n    vi.mocked(db.execute).mockResolvedValueOnce({\r\n      rows: [{ id: 'large-limit-1', title: 'Large Limit Result', price: 1200000 }],\r\n      command: 'SELECT',\r\n      rowCount: 1,\r\n      oid: 0,\r\n      fields: [],\r\n    })\r\n\r\n    // Execute with a very large limit\r\n    const req = makeRequest({ q: 'house', limit: '1000' })\r\n    const response = await GET(req)\r\n    const responseBody = await response.json()\r\n\r\n    // Verify\r\n    expect(response.status).toBe(200)\r\n    expect(responseBody.success).toBe(true)\r\n    expect(responseBody.data.results[0].title).toBe('Large Limit Result')\r\n\r\n    // The SQL query should be called with the large limit\r\n    expect(db.execute).toHaveBeenCalledWith(expect.any(Object))\r\n  })\r\n})\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\error.tsx",
    "messages": [
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 52,
        "column": 13,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [1624, 1771],
              "text": "\r\n          We&apos;re sorry, but there was an error loading this page. Our team has been notified and is\r\n          working to fix the issue.\r\n        "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [1624, 1771],
              "text": "\r\n          We&lsquo;re sorry, but there was an error loading this page. Our team has been notified and is\r\n          working to fix the issue.\r\n        "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [1624, 1771],
              "text": "\r\n          We&#39;re sorry, but there was an error loading this page. Our team has been notified and is\r\n          working to fix the issue.\r\n        "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [1624, 1771],
              "text": "\r\n          We&rsquo;re sorry, but there was an error loading this page. Our team has been notified and is\r\n          working to fix the issue.\r\n        "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport React, { useEffect } from 'react'\r\n\r\nimport logger from '@/lib/logging/logger'\r\n\r\ninterface ErrorPageProps {\r\n  error: Error & { digest?: string }\r\n  reset: () => void\r\n}\r\n\r\n/**\r\n * Global error page for Next.js\r\n * This is used when an error occurs in a route segment\r\n */\r\nexport default function ErrorPage({ error, reset }: ErrorPageProps) {\r\n  // Log the error when it occurs\r\n  useEffect(() => {\r\n    logger.error(\r\n      'Next.js route error',\r\n      error,\r\n      {\r\n        digest: error.digest,\r\n        url: typeof window !== 'undefined' ? window.location.href : undefined,\r\n        pathname: typeof window !== 'undefined' ? window.location.pathname : undefined,\r\n      },\r\n      ['next-error', 'route-error']\r\n    )\r\n  }, [error])\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center p-6 bg-gray-50\">\r\n      <div className=\"max-w-md w-full p-8 bg-white rounded-lg shadow-lg\">\r\n        <div className=\"text-center mb-6\">\r\n          <svg\r\n            className=\"mx-auto h-16 w-16 text-red-500\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            stroke=\"currentColor\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth={2}\r\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"\r\n            />\r\n          </svg>\r\n          <h2 className=\"mt-4 text-2xl font-bold text-gray-800\">Something went wrong!</h2>\r\n        </div>\r\n\r\n        <p className=\"text-gray-600 mb-6\">\r\n          We're sorry, but there was an error loading this page. Our team has been notified and is\r\n          working to fix the issue.\r\n        </p>\r\n\r\n        {process.env.NODE_ENV !== 'production' && (\r\n          <div className=\"mb-6 p-3 bg-gray-100 rounded text-sm text-gray-700 overflow-auto max-h-48\">\r\n            <p className=\"font-semibold\">\r\n              {error.name}: {error.message}\r\n            </p>\r\n            {error.stack && <pre className=\"mt-2 whitespace-pre-wrap\">{error.stack}</pre>}\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"flex flex-col space-y-3\">\r\n          <button\r\n            onClick={reset}\r\n            className=\"w-full px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\r\n          >\r\n            Try again\r\n          </button>\r\n\r\n          <a\r\n            href=\"/\"\r\n            className=\"w-full px-4 py-2 border border-gray-300 text-gray-700 rounded text-center hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\r\n          >\r\n            Go to Home\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\examples\\accessibility\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\examples\\animations\\page.tsx",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'framer-motion'.",
        "line": 3,
        "column": 24,
        "nodeType": "Literal",
        "endLine": 3,
        "endColumn": 39
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport { motion } from 'framer-motion'\r\nimport React, { useState } from 'react'\r\n\r\nimport AnimatedComponent, {\r\n  fadeInVariants,\r\n  slideInVariants,\r\n  scaleVariants,\r\n} from '@/components/animations/AnimatedComponent'\r\nimport AnimatedModal from '@/components/animations/AnimatedModal'\r\nimport AnimatedPropertyCard from '@/components/animations/AnimatedPropertyCard'\r\n\r\n// Sample property data\r\nconst sampleProperties = [\r\n  {\r\n    id: '1',\r\n    address: '123 Main St, Anytown, USA',\r\n    price: 350000,\r\n    bedrooms: 3,\r\n    type: 'House',\r\n    image: 'https://images.unsplash.com/photo-1580587771525-78b9dba3b914?w=500&q=80',\r\n  },\r\n  {\r\n    id: '2',\r\n    address: '456 Oak Ave, Somewhere, USA',\r\n    price: 275000,\r\n    bedrooms: 2,\r\n    type: 'Apartment',\r\n    image: 'https://images.unsplash.com/photo-1493809842364-78817add7ffb?w=500&q=80',\r\n  },\r\n  {\r\n    id: '3',\r\n    address: '789 Pine Rd, Nowhere, USA',\r\n    price: 425000,\r\n    bedrooms: 4,\r\n    type: 'House',\r\n    image: 'https://images.unsplash.com/photo-1512917774080-9991f1c4c750?w=500&q=80',\r\n  },\r\n  {\r\n    id: '4',\r\n    address: '101 Cedar Ln, Elsewhere, USA',\r\n    price: 199000,\r\n    bedrooms: 1,\r\n    type: 'Condo',\r\n    image: 'https://images.unsplash.com/photo-1512915922686-57c11dde9b6b?w=500&q=80',\r\n  },\r\n]\r\n\r\n// Animation examples page\r\nexport default function AnimationExamplesPage() {\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n  const [selectedProperty, setSelectedProperty] = useState<(typeof sampleProperties)[0] | null>(\r\n    null\r\n  )\r\n\r\n  // Open modal with selected property\r\n  const handlePropertyClick = (property: (typeof sampleProperties)[0]) => {\r\n    setSelectedProperty(property)\r\n    setIsModalOpen(true)\r\n  }\r\n\r\n  // Close modal\r\n  const handleCloseModal = () => {\r\n    setIsModalOpen(false)\r\n  }\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto p-6\">\r\n      <AnimatedComponent variants={fadeInVariants} transition={{ duration: 0.5 }} className=\"mb-12\">\r\n        <h1 className=\"text-4xl font-bold mb-2\">Animation Examples</h1>\r\n        <p className=\"text-gray-600 mb-8\">\r\n          Demonstrating Framer Motion animations with proper cleanup to prevent memory leaks\r\n        </p>\r\n      </AnimatedComponent>\r\n\r\n      {/* Basic animation examples */}\r\n      <AnimatedComponent\r\n        variants={slideInVariants}\r\n        transition={{ duration: 0.5, delay: 0.2 }}\r\n        className=\"mb-12\"\r\n      >\r\n        <h2 className=\"text-2xl font-semibold mb-4\">Basic Animations</h2>\r\n\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n          {/* Fade in */}\r\n          <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n            <h3 className=\"font-semibold mb-4\">Fade In</h3>\r\n            <AnimatedComponent\r\n              variants={fadeInVariants}\r\n              transition={{ duration: 0.5 }}\r\n              className=\"bg-blue-100 p-4 rounded-lg\"\r\n            >\r\n              <p>This content fades in smoothly</p>\r\n            </AnimatedComponent>\r\n          </div>\r\n\r\n          {/* Slide in */}\r\n          <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n            <h3 className=\"font-semibold mb-4\">Slide In</h3>\r\n            <AnimatedComponent\r\n              variants={slideInVariants}\r\n              transition={{ duration: 0.5 }}\r\n              className=\"bg-green-100 p-4 rounded-lg\"\r\n            >\r\n              <p>This content slides in from the left</p>\r\n            </AnimatedComponent>\r\n          </div>\r\n\r\n          {/* Scale */}\r\n          <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n            <h3 className=\"font-semibold mb-4\">Scale</h3>\r\n            <AnimatedComponent\r\n              variants={scaleVariants}\r\n              transition={{ duration: 0.5 }}\r\n              className=\"bg-purple-100 p-4 rounded-lg\"\r\n            >\r\n              <p>This content scales up</p>\r\n            </AnimatedComponent>\r\n          </div>\r\n        </div>\r\n      </AnimatedComponent>\r\n\r\n      {/* Property cards with scroll animations */}\r\n      <AnimatedComponent\r\n        variants={fadeInVariants}\r\n        transition={{ duration: 0.5, delay: 0.4 }}\r\n        className=\"mb-12\"\r\n      >\r\n        <h2 className=\"text-2xl font-semibold mb-4\">Property Cards with Scroll Animations</h2>\r\n        <p className=\"text-gray-600 mb-6\">\r\n          These cards animate as you scroll down the page. Click on a card to open the modal.\r\n        </p>\r\n\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n          {sampleProperties.map((property, index) => (\r\n            <AnimatedPropertyCard\r\n              key={property.id}\r\n              property={property}\r\n              index={index}\r\n              onClick={handlePropertyClick}\r\n            />\r\n          ))}\r\n        </div>\r\n      </AnimatedComponent>\r\n\r\n      {/* Modal example */}\r\n      <AnimatedComponent\r\n        variants={slideInVariants}\r\n        transition={{ duration: 0.5, delay: 0.6 }}\r\n        className=\"mb-12\"\r\n      >\r\n        <h2 className=\"text-2xl font-semibold mb-4\">Modal with Animations</h2>\r\n        <p className=\"text-gray-600 mb-6\">\r\n          Click the button below to open an animated modal with proper focus management and cleanup.\r\n        </p>\r\n\r\n        <motion.button\r\n          className=\"bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold\"\r\n          onClick={() => setIsModalOpen(true)}\r\n          whileHover={{ scale: 1.05 }}\r\n          whileTap={{ scale: 0.95 }}\r\n        >\r\n          Open Modal\r\n        </motion.button>\r\n      </AnimatedComponent>\r\n\r\n      {/* Animated modal */}\r\n      <AnimatedModal\r\n        isOpen={isModalOpen}\r\n        onClose={handleCloseModal}\r\n        title={selectedProperty ? selectedProperty.address : 'Property Details'}\r\n        ariaDescribedby=\"modal-description\"\r\n      >\r\n        {selectedProperty ? (\r\n          <div>\r\n            {selectedProperty.image && (\r\n              <img\r\n                src={selectedProperty.image}\r\n                alt={selectedProperty.address}\r\n                className=\"w-full h-48 object-cover rounded-lg mb-4\"\r\n              />\r\n            )}\r\n\r\n            <div id=\"modal-description\">\r\n              <p className=\"text-2xl font-bold text-blue-600 mb-2\">\r\n                ${selectedProperty.price.toLocaleString()}\r\n              </p>\r\n\r\n              <div className=\"grid grid-cols-2 gap-4 mb-4\">\r\n                <div>\r\n                  <p className=\"text-gray-500\">Type</p>\r\n                  <p className=\"font-semibold\">{selectedProperty.type}</p>\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-gray-500\">Bedrooms</p>\r\n                  <p className=\"font-semibold\">{selectedProperty.bedrooms}</p>\r\n                </div>\r\n              </div>\r\n\r\n              <p className=\"text-gray-700 mb-6\">\r\n                This is a beautiful {selectedProperty.bedrooms} bedroom{' '}\r\n                {selectedProperty.type.toLowerCase()}\r\n                located in a prime area. The property features modern amenities and is move-in\r\n                ready.\r\n              </p>\r\n\r\n              <div className=\"flex justify-end space-x-4\">\r\n                <motion.button\r\n                  className=\"px-4 py-2 border border-gray-300 rounded-lg text-gray-700\"\r\n                  onClick={handleCloseModal}\r\n                  whileHover={{ backgroundColor: '#f3f4f6' }}\r\n                  whileTap={{ scale: 0.95 }}\r\n                >\r\n                  Close\r\n                </motion.button>\r\n\r\n                <motion.button\r\n                  className=\"px-4 py-2 bg-blue-600 text-white rounded-lg\"\r\n                  whileHover={{ backgroundColor: '#2563eb' }}\r\n                  whileTap={{ scale: 0.95 }}\r\n                >\r\n                  Contact Agent\r\n                </motion.button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div id=\"modal-description\">\r\n            <p>Select a property to view details.</p>\r\n            <button\r\n              className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg\"\r\n              onClick={handleCloseModal}\r\n            >\r\n              Close\r\n            </button>\r\n          </div>\r\n        )}\r\n      </AnimatedModal>\r\n    </div>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\examples\\error-handling\\page.tsx",
    "messages": [
      {
        "ruleId": "import/order",
        "severity": 2,
        "message": "There should be at least one empty line between import groups",
        "line": 11,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "endLine": 11,
        "endColumn": 86,
        "fix": { "range": [362, 362], "text": "\n" }
      },
      {
        "ruleId": "import/order",
        "severity": 2,
        "message": "There should be at least one empty line between import groups",
        "line": 12,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "endLine": 12,
        "endColumn": 52,
        "fix": { "range": [415, 415], "text": "\n" }
      },
      {
        "ruleId": "import/order",
        "severity": 2,
        "message": "`@/lib/api/error-handling` import should occur before import of `react`",
        "line": 12,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "endLine": 12,
        "endColumn": 52,
        "fix": {
          "range": [16, 417],
          "text": "import { ApiError } from '@/lib/api/error-handling'\r\nimport React, { useState } from 'react'\r\n\r\nimport {\r\n  EnhancedErrorBoundary,\r\n  ApiErrorBoundary,\r\n  FormErrorBoundary,\r\n} from '@/components/error-handling'\r\nimport CentralizedErrorHandlingExample from '@/components/examples/CentralizedErrorHandlingExample'\r\nimport ErrorHandlingHookExample from '@/components/examples/ErrorHandlingHookExample'\r\n"
        }
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 297,
        "column": 64,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [9416, 9488],
              "text": "All errors are caught by error boundaries and won&apos;t crash the entire app"
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [9416, 9488],
              "text": "All errors are caught by error boundaries and won&lsquo;t crash the entire app"
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [9416, 9488],
              "text": "All errors are caught by error boundaries and won&#39;t crash the entire app"
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [9416, 9488],
              "text": "All errors are caught by error boundaries and won&rsquo;t crash the entire app"
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 3,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport React, { useState } from 'react'\r\n\r\nimport {\r\n  EnhancedErrorBoundary,\r\n  ApiErrorBoundary,\r\n  FormErrorBoundary,\r\n} from '@/components/error-handling'\r\nimport CentralizedErrorHandlingExample from '@/components/examples/CentralizedErrorHandlingExample'\r\nimport ErrorHandlingHookExample from '@/components/examples/ErrorHandlingHookExample'\r\nimport { ApiError } from '@/lib/api/error-handling'\r\nimport { ValidationError } from '@/lib/api/validation'\r\nimport logger from '@/lib/logging/logger'\r\n\r\n// Component that throws a render error\r\nconst RenderErrorComponent = () => {\r\n  // This will throw an error when rendered\r\n  if (true) {\r\n    throw new Error('This is a simulated render error')\r\n  }\r\n\r\n  return <div>This will never render</div>\r\n}\r\n\r\n// Component that throws an async error\r\nconst AsyncErrorComponent = () => {\r\n  const [hasError, setHasError] = useState(false)\r\n\r\n  React.useEffect(() => {\r\n    const fetchData = async () => {\r\n      // Simulate an async error\r\n      await new Promise(resolve => setTimeout(resolve, 500))\r\n\r\n      if (!hasError) {\r\n        setHasError(true)\r\n        throw new Error('This is a simulated async error')\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [hasError])\r\n\r\n  return <div>Loading data...</div>\r\n}\r\n\r\n// Component that throws an API error\r\nconst ApiErrorComponent = () => {\r\n  const [hasError, setHasError] = useState(false)\r\n\r\n  React.useEffect(() => {\r\n    const fetchData = async () => {\r\n      // Simulate an API error\r\n      await new Promise(resolve => setTimeout(resolve, 500))\r\n\r\n      if (!hasError) {\r\n        setHasError(true)\r\n        throw new ApiError('Failed to fetch data from API', 500, 'API_ERROR', {\r\n          details: 'This is a simulated API error',\r\n        })\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [hasError])\r\n\r\n  return <div>Loading API data...</div>\r\n}\r\n\r\n// Component that throws a validation error\r\nconst ValidationErrorComponent = () => {\r\n  const [hasError, setHasError] = useState(false)\r\n\r\n  React.useEffect(() => {\r\n    const validateForm = async () => {\r\n      // Simulate a validation error\r\n      await new Promise(resolve => setTimeout(resolve, 500))\r\n\r\n      if (!hasError) {\r\n        setHasError(true)\r\n        throw new ValidationError('Form validation failed', 'VALIDATION_ERROR', {\r\n          name: 'Name is required',\r\n          email: 'Email is invalid',\r\n          password: 'Password must be at least 8 characters',\r\n        })\r\n      }\r\n    }\r\n\r\n    validateForm()\r\n  }, [hasError])\r\n\r\n  return <div>Validating form...</div>\r\n}\r\n\r\n// Component that logs errors\r\nconst LoggingExample = () => {\r\n  const [logCount, setLogCount] = useState(0)\r\n\r\n  const handleLogDebug = () => {\r\n    logger.debug('This is a debug message', { count: logCount })\r\n    setLogCount(prev => prev + 1)\r\n  }\r\n\r\n  const handleLogInfo = () => {\r\n    logger.info('This is an info message', { count: logCount })\r\n    setLogCount(prev => prev + 1)\r\n  }\r\n\r\n  const handleLogWarn = () => {\r\n    logger.warn('This is a warning message', { count: logCount })\r\n    setLogCount(prev => prev + 1)\r\n  }\r\n\r\n  const handleLogError = () => {\r\n    logger.error('This is an error message', new Error('Test error'), { count: logCount }, [\r\n      'test',\r\n      'error',\r\n    ])\r\n    setLogCount(prev => prev + 1)\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-6 bg-white rounded-lg shadow-sm\">\r\n      <h3 className=\"text-lg font-semibold mb-4\">Structured Logging Example</h3>\r\n      <p className=\"text-gray-600 mb-4\">\r\n        Click the buttons below to log messages with different severity levels. Check the browser\r\n        console to see the structured logs.\r\n      </p>\r\n\r\n      <div className=\"flex flex-wrap gap-3\">\r\n        <button\r\n          onClick={handleLogDebug}\r\n          className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300\"\r\n        >\r\n          Log Debug\r\n        </button>\r\n\r\n        <button\r\n          onClick={handleLogInfo}\r\n          className=\"px-4 py-2 bg-blue-200 text-blue-800 rounded hover:bg-blue-300\"\r\n        >\r\n          Log Info\r\n        </button>\r\n\r\n        <button\r\n          onClick={handleLogWarn}\r\n          className=\"px-4 py-2 bg-yellow-200 text-yellow-800 rounded hover:bg-yellow-300\"\r\n        >\r\n          Log Warning\r\n        </button>\r\n\r\n        <button\r\n          onClick={handleLogError}\r\n          className=\"px-4 py-2 bg-red-200 text-red-800 rounded hover:bg-red-300\"\r\n        >\r\n          Log Error\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n/**\r\n * Error handling example page\r\n */\r\nexport default function ErrorHandlingPage() {\r\n  const [showRenderError, setShowRenderError] = useState(false)\r\n  const [showAsyncError, setShowAsyncError] = useState(false)\r\n  const [showApiError, setShowApiError] = useState(false)\r\n  const [showValidationError, setShowValidationError] = useState(false)\r\n\r\n  return (\r\n    <div className=\"max-w-4xl mx-auto p-6\">\r\n      <div className=\"mb-8\">\r\n        <h1 className=\"text-3xl font-bold mb-2\">Error Handling Examples</h1>\r\n        <p className=\"text-gray-600\">\r\n          This page demonstrates different types of error handling with error boundaries and\r\n          structured logging.\r\n        </p>\r\n      </div>\r\n\r\n      {/* Centralized error handling example */}\r\n      <div className=\"mb-12\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">Centralized Error Handling</h2>\r\n        <CentralizedErrorHandlingExample />\r\n      </div>\r\n\r\n      {/* Error handling hook example */}\r\n      <div className=\"mb-12\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">Error Handling Hook</h2>\r\n        <ErrorHandlingHookExample />\r\n      </div>\r\n\r\n      {/* Logging example */}\r\n      <div className=\"mb-12\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">Structured Logging</h2>\r\n        <LoggingExample />\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-12\">\r\n        {/* Render error example */}\r\n        <div>\r\n          <h2 className=\"text-xl font-semibold mb-4\">Render Error</h2>\r\n          <div className=\"p-6 bg-white rounded-lg shadow-sm\">\r\n            <p className=\"text-gray-600 mb-4\">\r\n              This example shows how to handle errors that occur during rendering.\r\n            </p>\r\n\r\n            <button\r\n              onClick={() => setShowRenderError(prev => !prev)}\r\n              className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 mb-4\"\r\n            >\r\n              {showRenderError ? 'Hide' : 'Show'} Render Error\r\n            </button>\r\n\r\n            {showRenderError && (\r\n              <EnhancedErrorBoundary>\r\n                <RenderErrorComponent />\r\n              </EnhancedErrorBoundary>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Async error example */}\r\n        <div>\r\n          <h2 className=\"text-xl font-semibold mb-4\">Async Error</h2>\r\n          <div className=\"p-6 bg-white rounded-lg shadow-sm\">\r\n            <p className=\"text-gray-600 mb-4\">\r\n              This example shows how to handle errors that occur in async operations.\r\n            </p>\r\n\r\n            <button\r\n              onClick={() => setShowAsyncError(prev => !prev)}\r\n              className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 mb-4\"\r\n            >\r\n              {showAsyncError ? 'Hide' : 'Show'} Async Error\r\n            </button>\r\n\r\n            {showAsyncError && (\r\n              <EnhancedErrorBoundary>\r\n                <AsyncErrorComponent />\r\n              </EnhancedErrorBoundary>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* API error example */}\r\n        <div>\r\n          <h2 className=\"text-xl font-semibold mb-4\">API Error</h2>\r\n          <div className=\"p-6 bg-white rounded-lg shadow-sm\">\r\n            <p className=\"text-gray-600 mb-4\">\r\n              This example shows how to handle API errors with a specialized boundary.\r\n            </p>\r\n\r\n            <button\r\n              onClick={() => setShowApiError(prev => !prev)}\r\n              className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 mb-4\"\r\n            >\r\n              {showApiError ? 'Hide' : 'Show'} API Error\r\n            </button>\r\n\r\n            {showApiError && (\r\n              <ApiErrorBoundary>\r\n                <ApiErrorComponent />\r\n              </ApiErrorBoundary>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Validation error example */}\r\n        <div>\r\n          <h2 className=\"text-xl font-semibold mb-4\">Validation Error</h2>\r\n          <div className=\"p-6 bg-white rounded-lg shadow-sm\">\r\n            <p className=\"text-gray-600 mb-4\">\r\n              This example shows how to handle form validation errors.\r\n            </p>\r\n\r\n            <button\r\n              onClick={() => setShowValidationError(prev => !prev)}\r\n              className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 mb-4\"\r\n            >\r\n              {showValidationError ? 'Hide' : 'Show'} Validation Error\r\n            </button>\r\n\r\n            {showValidationError && (\r\n              <FormErrorBoundary>\r\n                <ValidationErrorComponent />\r\n              </FormErrorBoundary>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"p-6 bg-blue-50 border border-blue-200 rounded-lg\">\r\n        <h2 className=\"text-lg font-semibold text-blue-800 mb-2\">Notes:</h2>\r\n        <ul className=\"list-disc pl-5 text-blue-700 space-y-1\">\r\n          <li>All errors are caught by error boundaries and won't crash the entire app</li>\r\n          <li>Each error type has a specialized error boundary with appropriate UI</li>\r\n          <li>All errors are logged with structured metadata for easier debugging</li>\r\n          <li>The global error handler catches any uncaught errors</li>\r\n          <li>Check the browser console to see the structured logs</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\examples\\form-validation\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\examples\\form\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\layout.tsx",
    "messages": [
      {
        "ruleId": "import/order",
        "severity": 2,
        "message": "`@clerk/nextjs` import should occur before import of `react`",
        "line": 8,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "endLine": 8,
        "endColumn": 46
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react'\r\n\r\nimport './globals.css'\r\nimport GlobalErrorHandler from '@/components/error-handling/GlobalErrorHandler'\r\nimport RouteErrorBoundary from '@/components/error-handling/RouteErrorBoundary'\r\nimport PerformanceMonitor from '@/components/monitoring/PerformanceMonitor'\r\n\r\nimport { ClerkProvider } from '@clerk/nextjs'\r\n\r\nexport const metadata = {\r\n  title: {\r\n    template: '%s | Property Portal',\r\n    default: 'Property Portal | Find Your Dream Home',\r\n  },\r\n  description:\r\n    'Discover thousands of properties for sale and rent across the UK. Find your perfect home with our easy-to-use search tools.',\r\n  keywords: 'property, real estate, homes for sale, houses for rent, UK property market',\r\n  openGraph: {\r\n    title: 'Property Portal | Find Your Dream Home',\r\n    description: 'Discover thousands of properties for sale and rent across the UK.',\r\n    images: [\r\n      {\r\n        url: 'https://property-portal.com/og-image.jpg',\r\n        width: 1200,\r\n        height: 630,\r\n        alt: 'Property Portal',\r\n      },\r\n    ],\r\n    locale: 'en_GB',\r\n    type: 'website',\r\n  },\r\n  twitter: {\r\n    card: 'summary_large_image',\r\n    title: 'Property Portal | Find Your Dream Home',\r\n    description: 'Discover thousands of properties for sale and rent across the UK.',\r\n    images: ['https://property-portal.com/twitter-image.jpg'],\r\n  },\r\n}\r\n\r\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\r\n  // Check if we're in development mode and should bypass Clerk\r\n  const isDevelopmentMode = process.env.NEXT_PUBLIC_CLERK_DEVELOPMENT_MODE === 'true'\r\n\r\n  // Wrap the content with ClerkProvider only if not in development mode\r\n  const content = (\r\n    <html lang=\"en\">\r\n      <body className=\"min-h-screen bg-gray-50\">\r\n        <GlobalErrorHandler\r\n          sentryDsn={process.env.NEXT_PUBLIC_SENTRY_DSN}\r\n          logRocketAppId={process.env.NEXT_PUBLIC_LOGROCKET_APP_ID}\r\n          environment={process.env.NODE_ENV as 'development' | 'test' | 'production'}\r\n          release={process.env.NEXT_PUBLIC_APP_VERSION}\r\n        >\r\n          <PerformanceMonitor>\r\n            <RouteErrorBoundary>{children}</RouteErrorBoundary>\r\n          </PerformanceMonitor>\r\n        </GlobalErrorHandler>\r\n      </body>\r\n    </html>\r\n  )\r\n\r\n  // If in development mode, return content without ClerkProvider\r\n  if (isDevelopmentMode) {\r\n    return content\r\n  }\r\n\r\n  // Otherwise, wrap with ClerkProvider\r\n  return (\r\n    <ClerkProvider\r\n      publishableKey={process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}\r\n      appearance={{\r\n        elements: {\r\n          formButtonPrimary: 'bg-blue-600 hover:bg-blue-700 text-white',\r\n          card: 'rounded-lg shadow-md',\r\n        },\r\n      }}\r\n    >\r\n      {content}\r\n    </ClerkProvider>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\not-found.tsx",
    "messages": [
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 39,
        "column": 45,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [1260, 1343],
              "text": "\r\n          The page you are looking for doesn&apos;t exist or has been moved.\r\n        "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [1260, 1343],
              "text": "\r\n          The page you are looking for doesn&lsquo;t exist or has been moved.\r\n        "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [1260, 1343],
              "text": "\r\n          The page you are looking for doesn&#39;t exist or has been moved.\r\n        "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [1260, 1343],
              "text": "\r\n          The page you are looking for doesn&rsquo;t exist or has been moved.\r\n        "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport { useRouter, usePathname } from 'next/navigation'\r\nimport React, { useEffect } from 'react'\r\n\r\nimport GitHubPagesLink from '@/components/common/GitHubPagesLink'\r\n\r\n/**\r\n * Custom 404 page for Next.js with GitHub Pages support\r\n */\r\nexport default function NotFoundPage() {\r\n  const router = useRouter()\r\n  const pathname = usePathname()\r\n\r\n  // For GitHub Pages, handle client-side routing\r\n  useEffect(() => {\r\n    // Check if we're on GitHub Pages\r\n    const isGitHubPages =\r\n      typeof window !== 'undefined' && window.location.hostname.includes('github.io')\r\n\r\n    if (isGitHubPages) {\r\n      // Strip the basePath for routing\r\n      const path = pathname.replace('/property-portal', '')\r\n\r\n      // If path exists in our app, navigate to it\r\n      if (path && path !== pathname) {\r\n        router.push(path)\r\n      }\r\n    }\r\n  }, [pathname, router])\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center p-6 bg-gray-50\">\r\n      <div className=\"max-w-md w-full p-8 bg-white rounded-lg shadow-lg text-center\">\r\n        <h1 className=\"text-9xl font-bold text-blue-600\">404</h1>\r\n        <h2 className=\"mt-4 text-2xl font-bold text-gray-800\">Page Not Found</h2>\r\n\r\n        <p className=\"mt-4 text-gray-600\">\r\n          The page you are looking for doesn't exist or has been moved.\r\n        </p>\r\n\r\n        <div className=\"mt-8\">\r\n          <GitHubPagesLink\r\n            href=\"/\"\r\n            className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\r\n          >\r\n            Go to Home\r\n          </GitHubPagesLink>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'useEffect' is defined but never used.",
        "line": 3,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 36
      },
      {
        "ruleId": "import/no-named-as-default",
        "severity": 1,
        "message": "Using exported name 'Header' as identifier for default import.",
        "line": 6,
        "column": 8,
        "nodeType": "ImportDefaultSpecifier",
        "endLine": 6,
        "endColumn": 14
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 194,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 194,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [6932, 6985], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 201,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 201,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [7180, 7208], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 206,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 206,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [7308, 7337], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 211,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 211,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [7442, 7476], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 216,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 216,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [7570, 7606], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport React, { useState, useEffect } from 'react'\r\n\r\nimport Footer from '../components/layout/Footer'\r\nimport Header from '../components/layout/Header'\r\nimport CallToAction from '../components/sections/CallToAction'\r\nimport Features from '../components/sections/Features'\r\nimport Hero from '../components/sections/Hero'\r\nimport SearchResults, { Property } from '../components/sections/SearchResults'\r\n\r\nexport default function HomePage() {\r\n  // State for search functionality\r\n  const [searchQuery, setSearchQuery] = useState('')\r\n  const [searchResults, setSearchResults] = useState<Property[]>([])\r\n  const [isSearching, setIsSearching] = useState(false)\r\n  const [searchError, setSearchError] = useState<string | null>(null)\r\n\r\n  // Mock data for the components\r\n  const navLinks = [\r\n    { id: 'buy', label: 'Buy', href: '/buy' },\r\n    { id: 'rent', label: 'Rent', href: '/rent' },\r\n    { id: 'sell', label: 'Sell', href: '/sell' },\r\n    { id: 'agents', label: 'Find Agents', href: '/agents' },\r\n    { id: 'resources', label: 'Resources', href: '/resources' },\r\n  ]\r\n\r\n  const features = [\r\n    {\r\n      id: 'search',\r\n      title: 'Advanced Search',\r\n      description: 'Find properties that match your exact criteria with our powerful search tools.',\r\n      icon: '🔍',\r\n    },\r\n    {\r\n      id: 'virtual-tours',\r\n      title: 'Virtual Tours',\r\n      description: 'Explore properties from the comfort of your home with immersive virtual tours.',\r\n      icon: '🏠',\r\n    },\r\n    {\r\n      id: 'alerts',\r\n      title: 'Property Alerts',\r\n      description:\r\n        'Get notified instantly when new properties matching your criteria become available.',\r\n      icon: '🔔',\r\n    },\r\n    {\r\n      id: 'mortgage',\r\n      title: 'Mortgage Calculator',\r\n      description:\r\n        'Plan your finances with our easy-to-use mortgage calculator and affordability tools.',\r\n      icon: '💰',\r\n    },\r\n    {\r\n      id: 'agents',\r\n      title: 'Expert Agents',\r\n      description:\r\n        'Connect with experienced real estate agents who can guide you through the process.',\r\n      icon: '👤',\r\n    },\r\n    {\r\n      id: 'market-insights',\r\n      title: 'Market Insights',\r\n      description: 'Access up-to-date market data and trends to make informed property decisions.',\r\n      icon: '📊',\r\n    },\r\n  ]\r\n\r\n  const footerColumns = [\r\n    {\r\n      id: 'buyers',\r\n      title: 'For Buyers',\r\n      links: [\r\n        { id: 'buy-property', label: 'Buy Property', href: '/buy' },\r\n        { id: 'mortgage', label: 'Mortgage Calculator', href: '/mortgage' },\r\n        { id: 'buyer-guides', label: 'Buyer Guides', href: '/guides/buyers' },\r\n        { id: 'saved-properties', label: 'Saved Properties', href: '/account/saved' },\r\n      ],\r\n    },\r\n    {\r\n      id: 'sellers',\r\n      title: 'For Sellers',\r\n      links: [\r\n        { id: 'sell-property', label: 'Sell Property', href: '/sell' },\r\n        { id: 'valuation', label: 'Property Valuation', href: '/valuation' },\r\n        { id: 'seller-guides', label: 'Seller Guides', href: '/guides/sellers' },\r\n        { id: 'find-agent', label: 'Find an Agent', href: '/agents' },\r\n      ],\r\n    },\r\n    {\r\n      id: 'company',\r\n      title: 'Company',\r\n      links: [\r\n        { id: 'about', label: 'About Us', href: '/about' },\r\n        { id: 'contact', label: 'Contact Us', href: '/contact' },\r\n        { id: 'careers', label: 'Careers', href: '/careers' },\r\n        { id: 'press', label: 'Press', href: '/press' },\r\n      ],\r\n    },\r\n  ]\r\n\r\n  const socialLinks = [\r\n    { id: 'facebook', icon: '📘', href: 'https://facebook.com', label: 'Facebook' },\r\n    { id: 'twitter', icon: '🐦', href: 'https://twitter.com', label: 'Twitter' },\r\n    { id: 'instagram', icon: '📷', href: 'https://instagram.com', label: 'Instagram' },\r\n    { id: 'linkedin', icon: '💼', href: 'https://linkedin.com', label: 'LinkedIn' },\r\n  ]\r\n\r\n  // Mock property search function\r\n  const performSearch = (query: string) => {\r\n    // Reset any previous errors\r\n    setSearchError(null)\r\n    setSearchQuery(query)\r\n    setIsSearching(true)\r\n\r\n    // Simulate API call with a delay\r\n    setTimeout(() => {\r\n      try {\r\n        // Simulate a random error (10% chance) for demonstration purposes\r\n        if (Math.random() < 0.1) {\r\n          throw new Error('Unable to connect to search service. Please try again.')\r\n        }\r\n\r\n        // Mock data - in a real app, this would come from an API\r\n        const mockResults: Property[] = [\r\n          {\r\n            id: '1',\r\n            title: 'Modern Apartment in City Center',\r\n            price: '£350,000',\r\n            location: 'Cambridge, UK',\r\n            bedrooms: 2,\r\n            bathrooms: 1,\r\n            area: '850 sq ft',\r\n            description:\r\n              'A beautiful modern apartment in the heart of Cambridge with easy access to shops, restaurants, and public transport.',\r\n            imageUrl: 'https://placehold.co/600x400/png?text=Apartment',\r\n          },\r\n          {\r\n            id: '2',\r\n            title: 'Spacious Family Home with Garden',\r\n            price: '£550,000',\r\n            location: 'Cambridge, UK',\r\n            bedrooms: 4,\r\n            bathrooms: 2,\r\n            area: '1,800 sq ft',\r\n            description:\r\n              'Perfect family home with a large garden in a quiet neighborhood. Close to excellent schools and parks.',\r\n            imageUrl: 'https://placehold.co/600x400/png?text=Family+Home',\r\n          },\r\n          {\r\n            id: '3',\r\n            title: 'Luxury Penthouse with River View',\r\n            price: '£750,000',\r\n            location: 'Cambridge, UK',\r\n            bedrooms: 3,\r\n            bathrooms: 2,\r\n            area: '1,200 sq ft',\r\n            description:\r\n              'Stunning penthouse apartment with panoramic views of the river. Features high-end finishes and a private terrace.',\r\n            imageUrl: 'https://placehold.co/600x400/png?text=Penthouse',\r\n          },\r\n        ]\r\n\r\n        // Filter results based on query for demonstration\r\n        const filteredResults =\r\n          query.length > 0\r\n            ? mockResults.filter(\r\n                property =>\r\n                  property.title.toLowerCase().includes(query.toLowerCase()) ||\r\n                  property.location.toLowerCase().includes(query.toLowerCase()) ||\r\n                  property.description.toLowerCase().includes(query.toLowerCase())\r\n              )\r\n            : mockResults\r\n\r\n        setSearchResults(filteredResults)\r\n      } catch (error) {\r\n        console.error('Search error:', error)\r\n        setSearchError(error instanceof Error ? error.message : 'An unexpected error occurred')\r\n        setSearchResults([])\r\n      } finally {\r\n        setIsSearching(false)\r\n      }\r\n    }, 1500)\r\n  }\r\n\r\n  const clearSearch = () => {\r\n    setSearchQuery('')\r\n    setSearchResults([])\r\n    setSearchError(null)\r\n  }\r\n\r\n  const handleViewDetails = (propertyId: string) => {\r\n    console.log('View details for property:', propertyId)\r\n    alert(`Viewing details for property ID: ${propertyId}`)\r\n    // In a real app, you would navigate to a property details page\r\n  }\r\n\r\n  // Event handlers\r\n  const handleLogin = () => {\r\n    console.log('Login clicked')\r\n    alert('Login functionality disabled for testing')\r\n  }\r\n\r\n  const handleSignup = () => {\r\n    console.log('Signup clicked')\r\n    alert('Signup functionality disabled for testing')\r\n  }\r\n\r\n  const handlePrimaryCTA = () => {\r\n    console.log('Primary CTA clicked')\r\n    alert('Start your property journey!')\r\n  }\r\n\r\n  const handleSecondaryCTA = () => {\r\n    console.log('Secondary CTA clicked')\r\n    alert('Contact an agent!')\r\n  }\r\n\r\n  return (\r\n    <main>\r\n      <Header navLinks={navLinks} onLogin={handleLogin} onSignup={handleSignup} />\r\n\r\n      <Hero\r\n        title=\"Find Your Dream Property\"\r\n        subtitle=\"Discover thousands of properties for sale and rent across the country\"\r\n        buttonText=\"Explore Properties\"\r\n        useInlineSearch={true}\r\n        onInlineSearch={performSearch}\r\n      />\r\n\r\n      {/* Search Results Section - Only visible when there's a search query */}\r\n      {searchQuery && (\r\n        <SearchResults\r\n          query={searchQuery}\r\n          results={searchResults}\r\n          isLoading={isSearching}\r\n          error={searchError || undefined}\r\n          onViewDetails={handleViewDetails}\r\n          onClearSearch={clearSearch}\r\n        />\r\n      )}\r\n\r\n      <Features\r\n        title=\"Everything You Need in One Place\"\r\n        subtitle=\"Our platform offers comprehensive tools and resources for buyers, sellers, and renters\"\r\n        features={features}\r\n        className=\"features-section\"\r\n      />\r\n\r\n      <CallToAction\r\n        title=\"Ready to Start Your Property Journey?\"\r\n        description=\"Whether you're buying, selling, or renting, we're here to help every step of the way.\"\r\n        primaryButtonText=\"Get Started\"\r\n        secondaryButtonText=\"Contact an Agent\"\r\n        onPrimaryClick={handlePrimaryCTA}\r\n        onSecondaryClick={handleSecondaryCTA}\r\n      />\r\n\r\n      <Footer\r\n        columns={footerColumns}\r\n        copyrightText=\"© 2023 Property Portal. All rights reserved.\"\r\n        socialLinks={socialLinks}\r\n      />\r\n    </main>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\pages\\search.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 6,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 56,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 56,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1503, 1506], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1503, 1506], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport { useSearchParams } from 'next/navigation'\r\nimport { useEffect, useState, useRef } from 'react'\r\n\r\nimport { Button } from '../../src/ui'\r\n\r\ninterface Property {\r\n  id: string\r\n  title: string\r\n  location: string\r\n  price: number\r\n  imageUrl: string\r\n  description: string\r\n}\r\n\r\nexport default function SearchPage() {\r\n  const searchParams = useSearchParams()\r\n  const query = searchParams?.get('query') || ''\r\n  const [results, setResults] = useState<Property[]>([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n  const debounceTimeout = useRef<NodeJS.Timeout | null>(null)\r\n\r\n  useEffect(() => {\r\n    if (!query) {\r\n      setResults([])\r\n      setError(null)\r\n      setLoading(false)\r\n      return\r\n    }\r\n\r\n    // Debounce API calls by 300ms\r\n    if (debounceTimeout.current) clearTimeout(debounceTimeout.current)\r\n\r\n    debounceTimeout.current = setTimeout(() => {\r\n      const runSearch = async () => {\r\n        setLoading(true)\r\n        setError(null)\r\n\r\n        try {\r\n          const res = await fetch('/api/search', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ query }),\r\n          })\r\n\r\n          if (!res.ok) {\r\n            throw new Error(`API error: ${res.status}`)\r\n          }\r\n\r\n          const data = await res.json()\r\n          setResults(data?.properties || [])\r\n        } catch (err: any) {\r\n          console.error('Search failed:', err)\r\n          setError('Failed to load search results. Please try again.')\r\n          setResults([])\r\n        } finally {\r\n          setLoading(false)\r\n        }\r\n      }\r\n\r\n      runSearch()\r\n    }, 300)\r\n\r\n    // Cleanup on unmount or query change\r\n    return () => {\r\n      if (debounceTimeout.current) clearTimeout(debounceTimeout.current)\r\n    }\r\n  }, [query])\r\n\r\n  return (\r\n    <div className=\"max-w-5xl mx-auto p-6\">\r\n      <h1 className=\"text-3xl font-bold mb-4\">\r\n        Search results for: <span className=\"text-purple-600\">{query || '...'}</span>\r\n      </h1>\r\n\r\n      {!query && <p className=\"text-gray-600\">Please enter a search term to find properties.</p>}\r\n\r\n      {loading && (\r\n        <div className=\"flex justify-center my-6\">\r\n          <svg\r\n            className=\"animate-spin h-8 w-8 text-purple-600\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            aria-label=\"Loading\"\r\n          >\r\n            <circle\r\n              className=\"opacity-25\"\r\n              cx=\"12\"\r\n              cy=\"12\"\r\n              r=\"10\"\r\n              stroke=\"currentColor\"\r\n              strokeWidth=\"4\"\r\n            ></circle>\r\n            <path\r\n              className=\"opacity-75\"\r\n              fill=\"currentColor\"\r\n              d=\"M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z\"\r\n            ></path>\r\n          </svg>\r\n        </div>\r\n      )}\r\n\r\n      {error && (\r\n        <p className=\"text-red-600 font-semibold my-4\" role=\"alert\">\r\n          {error}\r\n        </p>\r\n      )}\r\n\r\n      {!loading && !error && results.length > 0 && (\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n          {results.map(p => (\r\n            <div key={p.id} className=\"border rounded shadow-sm p-4\">\r\n              <img src={p.imageUrl} alt={p.title} className=\"rounded w-full h-40 object-cover\" />\r\n              <h2 className=\"text-xl font-bold mt-2\">{p.title}</h2>\r\n              <p className=\"text-sm text-gray-500\">{p.location}</p>\r\n              <p className=\"text-lg font-semibold text-blue-600\">£{p.price.toLocaleString()}</p>\r\n              <p className=\"mt-2 text-sm\">{p.description}</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {!loading && !error && query && results.length === 0 && <p>No matching properties found.</p>}\r\n    </div>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\sign-in\\[[...sign-in]]\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\sign-out\\[[...sign-out]]\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'useRouter' is defined but never used.",
        "line": 2,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { SignOutButton } from '@clerk/nextjs'\r\nimport { useRouter } from 'next/navigation'\r\n\r\nexport default function SignOutPage() {\r\n  return (\r\n    <div className=\"flex min-h-screen items-center justify-center\">\r\n      <div className=\"bg-white p-8 rounded-lg shadow-md text-center\">\r\n        <h1 className=\"text-2xl font-bold mb-4\">Sign Out</h1>\r\n        <p className=\"mb-6 text-gray-600\">Are you sure you want to sign out?</p>\r\n        <SignOutButton>\r\n          <button className=\"bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded\">\r\n            Sign Out\r\n          </button>\r\n        </SignOutButton>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\sign-up\\[[...sign-up]]\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\simple-test\\layout.tsx",
    "messages": [
      {
        "ruleId": "jsx-a11y/html-has-lang",
        "severity": 2,
        "message": "<html> elements must have the lang prop.",
        "line": 3,
        "column": 5,
        "nodeType": "JSXOpeningElement",
        "endLine": 3,
        "endColumn": 11
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "export default function SimpleLayout({ children }: { children: React.ReactNode }) {\r\n  return (\r\n    <html>\r\n      <body>{children}</body>\r\n    </html>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\simple-test\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\standalone\\layout.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\standalone\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\app\\test-page\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\DynamicMap.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\PropertyCard.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\PropertyCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\PropertyUploadForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\animations\\AnimatedComponent.tsx",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'framer-motion'.",
        "line": 3,
        "column": 34,
        "nodeType": "Literal",
        "endLine": 3,
        "endColumn": 49
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport { motion, Variants } from 'framer-motion'\r\nimport React, { ReactNode } from 'react'\r\n\r\n// Common animation variants\r\nexport const fadeInVariants: Variants = {\r\n  hidden: { opacity: 0 },\r\n  visible: { opacity: 1 },\r\n}\r\n\r\nexport const slideInVariants: Variants = {\r\n  hidden: { x: -50, opacity: 0 },\r\n  visible: { x: 0, opacity: 1 },\r\n}\r\n\r\nexport const scaleVariants: Variants = {\r\n  hidden: { scale: 0.8, opacity: 0 },\r\n  visible: { scale: 1, opacity: 1 },\r\n}\r\n\r\ninterface AnimatedComponentProps {\r\n  children: ReactNode\r\n  className?: string\r\n  variants: Variants\r\n  transition?: {\r\n    duration?: number\r\n    delay?: number\r\n    ease?: string | number[]\r\n  }\r\n}\r\n\r\n/**\r\n * A reusable animated component that wraps content with Framer Motion animations\r\n */\r\nconst AnimatedComponent: React.FC<AnimatedComponentProps> = ({\r\n  children,\r\n  className = '',\r\n  variants,\r\n  transition = { duration: 0.5 },\r\n}) => {\r\n  return (\r\n    <motion.div\r\n      initial=\"hidden\"\r\n      animate=\"visible\"\r\n      exit=\"hidden\"\r\n      variants={variants}\r\n      transition={transition}\r\n      className={className}\r\n    >\r\n      {children}\r\n    </motion.div>\r\n  )\r\n}\r\n\r\nexport default AnimatedComponent\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\animations\\AnimatedModal.tsx",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'framer-motion'.",
        "line": 3,
        "column": 41,
        "nodeType": "Literal",
        "endLine": 3,
        "endColumn": 56
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "The 'handleKeyDown' function makes the dependencies of useEffect Hook (at line 75) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'handleKeyDown' in its own useCallback() Hook.",
        "line": 28,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "endLine": 32,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport { motion, AnimatePresence } from 'framer-motion'\r\nimport React, { useEffect, useRef } from 'react'\r\n\r\ninterface AnimatedModalProps {\r\n  isOpen: boolean\r\n  onClose: () => void\r\n  title: string\r\n  children: React.ReactNode\r\n  ariaDescribedby?: string\r\n}\r\n\r\n/**\r\n * An accessible animated modal component with proper focus management\r\n */\r\nconst AnimatedModal: React.FC<AnimatedModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  title,\r\n  children,\r\n  ariaDescribedby,\r\n}) => {\r\n  const modalRef = useRef<HTMLDivElement>(null)\r\n  const previousFocusRef = useRef<HTMLElement | null>(null)\r\n\r\n  // Handle keyboard events\r\n  const handleKeyDown = (e: KeyboardEvent) => {\r\n    if (e.key === 'Escape') {\r\n      onClose()\r\n    }\r\n  }\r\n\r\n  // Handle click outside\r\n  const handleBackdropClick = (e: React.MouseEvent<HTMLDivElement>) => {\r\n    if (e.target === e.currentTarget) {\r\n      onClose()\r\n    }\r\n  }\r\n\r\n  // Manage focus and keyboard events\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      // Store the previously focused element\r\n      previousFocusRef.current = document.activeElement as HTMLElement\r\n\r\n      // Add keyboard event listener\r\n      window.addEventListener('keydown', handleKeyDown)\r\n\r\n      // Focus the modal\r\n      if (modalRef.current) {\r\n        modalRef.current.focus()\r\n      }\r\n\r\n      // Prevent body scrolling\r\n      document.body.style.overflow = 'hidden'\r\n    } else {\r\n      // Remove keyboard event listener\r\n      window.removeEventListener('keydown', handleKeyDown)\r\n\r\n      // Restore focus to the previously focused element\r\n      if (previousFocusRef.current) {\r\n        previousFocusRef.current.focus()\r\n      }\r\n\r\n      // Restore body scrolling\r\n      document.body.style.overflow = ''\r\n    }\r\n\r\n    // Cleanup\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown)\r\n      document.body.style.overflow = ''\r\n    }\r\n  }, [isOpen, handleKeyDown])\r\n\r\n  // Modal animation variants\r\n  const backdropVariants = {\r\n    hidden: { opacity: 0 },\r\n    visible: { opacity: 1 },\r\n  }\r\n\r\n  const modalVariants = {\r\n    hidden: { opacity: 0, y: 50, scale: 0.95 },\r\n    visible: { opacity: 1, y: 0, scale: 1 },\r\n  }\r\n\r\n  return (\r\n    <AnimatePresence>\r\n      {isOpen && (\r\n        <motion.div\r\n          className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\"\r\n          initial=\"hidden\"\r\n          animate=\"visible\"\r\n          exit=\"hidden\"\r\n          variants={backdropVariants}\r\n          onClick={handleBackdropClick}\r\n        >\r\n          <motion.div\r\n            ref={modalRef}\r\n            className=\"bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto\"\r\n            variants={modalVariants}\r\n            transition={{ type: 'spring', damping: 25, stiffness: 300 }}\r\n            tabIndex={-1}\r\n            role=\"dialog\"\r\n            aria-modal=\"true\"\r\n            aria-labelledby=\"modal-title\"\r\n            aria-describedby={ariaDescribedby}\r\n          >\r\n            <div className=\"p-6\">\r\n              <div className=\"flex justify-between items-center mb-4\">\r\n                <h2 id=\"modal-title\" className=\"text-xl font-semibold\">\r\n                  {title}\r\n                </h2>\r\n                <button\r\n                  onClick={onClose}\r\n                  className=\"text-gray-500 hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 rounded-full p-1\"\r\n                  aria-label=\"Close modal\"\r\n                >\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    className=\"h-6 w-6\"\r\n                    fill=\"none\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    stroke=\"currentColor\"\r\n                  >\r\n                    <path\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      strokeWidth={2}\r\n                      d=\"M6 18L18 6M6 6l12 12\"\r\n                    />\r\n                  </svg>\r\n                </button>\r\n              </div>\r\n              {children}\r\n            </div>\r\n          </motion.div>\r\n        </motion.div>\r\n      )}\r\n    </AnimatePresence>\r\n  )\r\n}\r\n\r\nexport default AnimatedModal\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\animations\\AnimatedPropertyCard.tsx",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'framer-motion'.",
        "line": 3,
        "column": 24,
        "nodeType": "Literal",
        "endLine": 3,
        "endColumn": 39
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport { motion } from 'framer-motion'\r\nimport React from 'react'\r\n\r\ninterface Property {\r\n  id: string\r\n  address: string\r\n  price: number\r\n  bedrooms: number\r\n  type: string\r\n  image?: string\r\n}\r\n\r\ninterface AnimatedPropertyCardProps {\r\n  property: Property\r\n  index: number\r\n  onClick: (property: Property) => void\r\n}\r\n\r\n/**\r\n * An animated property card component with hover effects\r\n */\r\nconst AnimatedPropertyCard: React.FC<AnimatedPropertyCardProps> = ({\r\n  property,\r\n  index,\r\n  onClick,\r\n}) => {\r\n  // Card animation variants\r\n  const cardVariants = {\r\n    hidden: { opacity: 0, y: 50 },\r\n    visible: (i: number) => ({\r\n      opacity: 1,\r\n      y: 0,\r\n      transition: {\r\n        delay: i * 0.1,\r\n        duration: 0.5,\r\n      },\r\n    }),\r\n  }\r\n\r\n  return (\r\n    <motion.div\r\n      className=\"bg-white rounded-lg shadow-md overflow-hidden cursor-pointer\"\r\n      variants={cardVariants}\r\n      initial=\"hidden\"\r\n      animate=\"visible\"\r\n      custom={index}\r\n      whileHover={{ y: -5, boxShadow: '0 10px 25px -5px rgba(0, 0, 0, 0.1)' }}\r\n      onClick={() => onClick(property)}\r\n    >\r\n      {property.image && (\r\n        <div className=\"relative h-40 overflow-hidden\">\r\n          <img\r\n            src={property.image}\r\n            alt={property.address}\r\n            className=\"w-full h-full object-cover transition-transform duration-300 hover:scale-110\"\r\n          />\r\n          <div className=\"absolute bottom-0 left-0 bg-blue-600 text-white px-3 py-1 text-sm font-semibold\">\r\n            {property.type}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"p-4\">\r\n        <h3 className=\"font-semibold text-lg mb-1 line-clamp-1\">{property.address}</h3>\r\n        <p className=\"text-blue-600 font-bold text-xl mb-2\">${property.price.toLocaleString()}</p>\r\n        <p className=\"text-gray-600\">\r\n          {property.bedrooms} {property.bedrooms === 1 ? 'bedroom' : 'bedrooms'}\r\n        </p>\r\n      </div>\r\n    </motion.div>\r\n  )\r\n}\r\n\r\nexport default AnimatedPropertyCard\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\common\\GitHubPagesLink.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 11,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 11,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [240, 243], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [240, 243], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'pathname' is assigned a value but never used.",
        "line": 23,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 17
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport Link from 'next/link'\r\nimport { usePathname } from 'next/navigation'\r\nimport React from 'react'\r\n\r\ninterface GitHubPagesLinkProps {\r\n  href: string\r\n  children: React.ReactNode\r\n  className?: string\r\n  [key: string]: any\r\n}\r\n\r\n/**\r\n * Custom Link component that handles GitHub Pages base path\r\n */\r\nexport default function GitHubPagesLink({\r\n  href,\r\n  children,\r\n  className,\r\n  ...props\r\n}: GitHubPagesLinkProps) {\r\n  const pathname = usePathname()\r\n\r\n  // Check if we're on GitHub Pages\r\n  const isGitHubPages =\r\n    typeof window !== 'undefined' && window.location.hostname.includes('github.io')\r\n\r\n  // Adjust href for GitHub Pages\r\n  let adjustedHref = href\r\n  if (isGitHubPages && href.startsWith('/') && !href.startsWith('/property-portal')) {\r\n    adjustedHref = `/property-portal${href}`\r\n  }\r\n\r\n  return (\r\n    <Link href={adjustedHref} className={className} {...props}>\r\n      {children}\r\n    </Link>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\common\\UploadZone.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 138,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 138,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'clearFile' is assigned a value but never used.",
        "line": 162,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 162,
        "endColumn": 18
      },
      {
        "ruleId": "jsx-a11y/click-events-have-key-events",
        "severity": 2,
        "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
        "line": 173,
        "column": 7,
        "nodeType": "JSXOpeningElement",
        "endLine": 186,
        "endColumn": 8
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport { useState, useRef, useEffect, DragEvent, ChangeEvent } from 'react'\r\n\r\nimport { Button } from '../../src/ui'\r\n\r\ninterface FileValidationResult {\r\n  valid: boolean\r\n  message: string\r\n}\r\n\r\ninterface UploadZoneProps {\r\n  onUpload: (file: File) => void\r\n  acceptedFileTypes?: string | string[]\r\n  maxSizeInMB?: number\r\n  multiple?: boolean\r\n  disabled?: boolean\r\n  showPreview?: boolean\r\n  customValidator?: (file: File) => Promise<FileValidationResult> | FileValidationResult\r\n  className?: string\r\n  description?: string\r\n}\r\n\r\nexport default function UploadZone({\r\n  onUpload,\r\n  acceptedFileTypes = '.csv',\r\n  maxSizeInMB = 10,\r\n  multiple = false,\r\n  disabled = false,\r\n  showPreview = false,\r\n  customValidator,\r\n  className = '',\r\n  description,\r\n}: UploadZoneProps) {\r\n  const [isDragging, setIsDragging] = useState(false)\r\n  const [selectedFile, setSelectedFile] = useState<File | null>(null)\r\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null)\r\n  const [validationError, setValidationError] = useState<string | null>(null)\r\n  const fileInputRef = useRef<HTMLInputElement>(null)\r\n  const dropZoneRef = useRef<HTMLDivElement>(null)\r\n\r\n  // Convert acceptedFileTypes to array for easier handling\r\n  const acceptedTypesArray = Array.isArray(acceptedFileTypes)\r\n    ? acceptedFileTypes\r\n    : [acceptedFileTypes]\r\n\r\n  // Clean up preview URL when component unmounts\r\n  useEffect(() => {\r\n    return () => {\r\n      if (previewUrl) {\r\n        URL.revokeObjectURL(previewUrl)\r\n      }\r\n    }\r\n  }, [previewUrl])\r\n\r\n  // Handle drag events\r\n  const handleDragOver = (e: DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    if (!disabled) {\r\n      setIsDragging(true)\r\n    }\r\n  }\r\n\r\n  const handleDragLeave = (e: DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    setIsDragging(false)\r\n  }\r\n\r\n  const handleDrop = (e: DragEvent<HTMLDivElement>) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    setIsDragging(false)\r\n\r\n    if (disabled) return\r\n\r\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\r\n      const file = e.dataTransfer.files[0]\r\n      processFile(file)\r\n    }\r\n  }\r\n\r\n  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files && e.target.files.length > 0) {\r\n      const file = e.target.files[0]\r\n      processFile(file)\r\n    }\r\n  }\r\n\r\n  const validateFileType = (file: File): boolean => {\r\n    // If no specific types are required, accept all\r\n    if (acceptedTypesArray.length === 0 || acceptedTypesArray[0] === '*') {\r\n      return true\r\n    }\r\n\r\n    // Check if file extension or MIME type matches any accepted type\r\n    return acceptedTypesArray.some(type => {\r\n      // Check by extension (e.g., .csv)\r\n      if (type.startsWith('.')) {\r\n        return file.name.toLowerCase().endsWith(type.toLowerCase())\r\n      }\r\n      // Check by MIME type (e.g., text/csv)\r\n      return file.type === type\r\n    })\r\n  }\r\n\r\n  const validateFileSize = (file: File): boolean => {\r\n    const fileSizeInMB = file.size / (1024 * 1024)\r\n    return fileSizeInMB <= maxSizeInMB\r\n  }\r\n\r\n  const processFile = async (file: File) => {\r\n    setValidationError(null)\r\n\r\n    // Validate file type\r\n    if (!validateFileType(file)) {\r\n      setValidationError(\r\n        `Invalid file type. Please upload ${acceptedTypesArray.join(' or ')} files.`\r\n      )\r\n      return\r\n    }\r\n\r\n    // Validate file size\r\n    if (!validateFileSize(file)) {\r\n      setValidationError(`File is too large. Maximum size is ${maxSizeInMB}MB.`)\r\n      return\r\n    }\r\n\r\n    // Run custom validator if provided\r\n    if (customValidator) {\r\n      try {\r\n        const result = await Promise.resolve(customValidator(file))\r\n        if (!result.valid) {\r\n          setValidationError(result.message)\r\n          return\r\n        }\r\n      } catch (error) {\r\n        setValidationError('File validation failed.')\r\n        return\r\n      }\r\n    }\r\n\r\n    // Create preview for image files\r\n    if (showPreview && file.type.startsWith('image/')) {\r\n      const url = URL.createObjectURL(file)\r\n      setPreviewUrl(url)\r\n    } else {\r\n      setPreviewUrl(null)\r\n    }\r\n\r\n    setSelectedFile(file)\r\n    onUpload(file)\r\n  }\r\n\r\n  const handleButtonClick = () => {\r\n    if (!disabled && fileInputRef.current) {\r\n      fileInputRef.current.click()\r\n    }\r\n  }\r\n\r\n  const clearFile = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.stopPropagation()\r\n    setSelectedFile(null)\r\n    setPreviewUrl(null)\r\n    if (fileInputRef.current) {\r\n      fileInputRef.current.value = ''\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={`${className}`}>\r\n      <div\r\n        ref={dropZoneRef}\r\n        className={`border-2 border-dashed rounded-lg p-6 text-center transition-colors ${\r\n          disabled\r\n            ? 'bg-gray-100 border-gray-300 cursor-not-allowed opacity-60'\r\n            : isDragging\r\n              ? 'border-purple-500 bg-purple-50'\r\n              : 'border-gray-300 hover:border-purple-400 cursor-pointer'\r\n        }`}\r\n        onDragOver={handleDragOver}\r\n        onDragLeave={handleDragLeave}\r\n        onDrop={handleDrop}\r\n        onClick={disabled ? undefined : handleButtonClick}\r\n      >\r\n        <input\r\n          type=\"file\"\r\n          ref={fileInputRef}\r\n          onChange={handleFileChange}\r\n          accept={\r\n            Array.isArray(acceptedFileTypes) ? acceptedFileTypes.join(',') : acceptedFileTypes\r\n          }\r\n          multiple={multiple}\r\n          disabled={disabled}\r\n          className=\"hidden\"\r\n        />\r\n\r\n        {/* Preview area */}\r\n        {showPreview && previewUrl && (\r\n          <div className=\"mb-4\">\r\n            <img\r\n              src={previewUrl}\r\n              alt=\"File preview\"\r\n              className=\"max-h-40 max-w-full mx-auto rounded\"\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"flex flex-col items-center justify-center\">\r\n          {!selectedFile ? (\r\n            <>\r\n              <svg\r\n                className=\"w-12 h-12 text-gray-400 mb-3\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                viewBox=\"0 0 24 24\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n              >\r\n                <path\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  strokeWidth=\"2\"\r\n                  d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\"\r\n                ></path>\r\n              </svg>\r\n              <p className=\"mb-2 text-sm text-gray-700\">\r\n                <span className=\"font-semibold\">Click to upload</span> or drag and drop\r\n              </p>\r\n              <p className=\"text-xs text-gray-500\">\r\n                {Array.isArray(acceptedFileTypes)\r\n                  ? acceptedFileTypes.join(', ')\r\n                  : acceptedFileTypes}{' '}\r\n                files up to {maxSizeInMB}MB\r\n              </p>\r\n              {description && <p className=\"mt-2 text-xs text-gray-500\">{description}</p>}\r\n            </>\r\n          ) : (\r\n            <div className=\"flex flex-col items-center\">\r\n              <div className=\"flex items-center mb-2\">\r\n                <svg\r\n                  className=\"w-8 h-8 text-green-500 mr-2\"\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                >\r\n                  <path\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                    strokeWidth=\"2\"\r\n                    d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n                  ></path>\r\n                </svg>\r\n                <span className=\"text-sm font-medium\">{selectedFile.name}</span>\r\n              </div>\r\n              <p className=\"text-xs text-gray-500 mb-3\">\r\n                {(selectedFile.size / (1024 * 1024)).toFixed(2)} MB\r\n              </p>\r\n              <Button\r\n                variant=\"secondary\"\r\n                size=\"small\"\r\n                onClick={() => {\r\n                  if (fileInputRef.current) {\r\n                    setSelectedFile(null)\r\n                    setPreviewUrl(null)\r\n                    fileInputRef.current.value = ''\r\n                  }\r\n                }}\r\n                disabled={disabled}\r\n              >\r\n                Choose Different File\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Error message */}\r\n      {validationError && <div className=\"mt-2 text-sm text-red-600\">{validationError}</div>}\r\n    </div>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\error-handling\\EnhancedErrorBoundary.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\error-handling\\GlobalErrorHandler.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\error-handling\\RouteErrorBoundary.tsx",
    "messages": [
      {
        "ruleId": "import/order",
        "severity": 2,
        "message": "`./EnhancedErrorBoundary` import should occur before import of `@/lib/logging/logger`",
        "line": 9,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "endLine": 9,
        "endColumn": 60,
        "fix": {
          "range": [143, 249],
          "text": "import EnhancedErrorBoundary from './EnhancedErrorBoundary'\r\nimport logger from '@/lib/logging/logger'\r\n\r\n"
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "// components/error-handling/RouteErrorBoundary.tsx\r\n'use client'\r\n\r\nimport { useRouter } from 'next/navigation'\r\nimport React from 'react'\r\n\r\nimport logger from '@/lib/logging/logger'\r\n\r\nimport EnhancedErrorBoundary from './EnhancedErrorBoundary'\r\n\r\ninterface RouteErrorBoundaryProps {\r\n  children: React.ReactNode\r\n  fallback?: React.ReactNode | ((error: Error, resetError: () => void) => React.ReactNode)\r\n  onError?: (error: Error) => void\r\n}\r\n\r\n/**\r\n * Error boundary specifically for handling route errors\r\n */\r\nconst RouteErrorBoundary: React.FC<RouteErrorBoundaryProps> = ({ children, fallback, onError }) => {\r\n  const router = useRouter()\r\n\r\n  // Default fallback UI for route errors\r\n  const defaultFallback = (error: Error, resetError: () => void) => {\r\n    return (\r\n      <div className=\"p-6 bg-blue-50 border border-blue-200 rounded-lg\">\r\n        <h2 className=\"text-xl font-semibold text-blue-700 mb-2\">Navigation Error</h2>\r\n\r\n        <p className=\"text-blue-600 mb-4\">\r\n          There was a problem loading this page. Please try again or go back to the home page.\r\n        </p>\r\n\r\n        <div className=\"mb-4 p-3 bg-white rounded border border-blue-100 text-sm text-gray-700 overflow-auto max-h-32\">\r\n          <p className=\"font-semibold\">\r\n            {error.name}: {error.message}\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"flex space-x-4\">\r\n          <button\r\n            onClick={resetError}\r\n            className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\r\n          >\r\n            Try again\r\n          </button>\r\n\r\n          <button\r\n            onClick={() => router.push('/')}\r\n            className=\"px-4 py-2 border border-blue-300 text-blue-700 rounded hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\r\n          >\r\n            Go to Home\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Handle route errors\r\n  const handleError = (error: Error) => {\r\n    // Log the error\r\n    logger.error(\r\n      'Route error caught by boundary',\r\n      error,\r\n      {\r\n        url: typeof window !== 'undefined' ? window.location.href : undefined,\r\n        pathname: typeof window !== 'undefined' ? window.location.pathname : undefined,\r\n      },\r\n      ['error-boundary', 'route-error']\r\n    )\r\n\r\n    // Call the optional onError callback\r\n    if (onError) {\r\n      onError(error)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <EnhancedErrorBoundary fallback={fallback || defaultFallback} onError={handleError}>\r\n      {children}\r\n    </EnhancedErrorBoundary>\r\n  )\r\n}\r\n\r\nexport default RouteErrorBoundary\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\error-handling\\index.tsx",
    "messages": [
      {
        "ruleId": "import/order",
        "severity": 2,
        "message": "There should be no empty line within import group",
        "line": 3,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "endLine": 3,
        "endColumn": 63,
        "fix": { "range": [80, 82], "text": "" }
      },
      {
        "ruleId": "import/order",
        "severity": 2,
        "message": "There should be at least one empty line between import groups",
        "line": 5,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "endLine": 5,
        "endColumn": 52,
        "fix": { "range": [133, 133], "text": "\n" }
      },
      {
        "ruleId": "import/order",
        "severity": 2,
        "message": "`@/lib/api/error-handling` import should occur before import of `react`",
        "line": 5,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "endLine": 5,
        "endColumn": 52,
        "fix": {
          "range": [16, 135],
          "text": "import { ApiError } from '@/lib/api/error-handling'\r\nimport React, { Component, ErrorInfo, ReactNode } from 'react'\r\n\r\n"
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 3,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport React, { Component, ErrorInfo, ReactNode } from 'react'\r\n\r\nimport { ApiError } from '@/lib/api/error-handling'\r\nimport { ValidationError } from '@/lib/api/validation'\r\nimport logger from '@/lib/logging/logger'\r\n\r\ninterface ErrorBoundaryProps {\r\n  children: ReactNode\r\n  fallback?: ReactNode\r\n}\r\n\r\ninterface ErrorBoundaryState {\r\n  hasError: boolean\r\n  error: Error | null\r\n}\r\n\r\n/**\r\n * Base error boundary component that catches errors in its child component tree\r\n */\r\nclass EnhancedErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\r\n  constructor(props: ErrorBoundaryProps) {\r\n    super(props)\r\n    this.state = { hasError: false, error: null }\r\n  }\r\n\r\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\r\n    return { hasError: true, error }\r\n  }\r\n\r\n  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {\r\n    // Log the error to our monitoring service\r\n    logger.error('Error caught by error boundary:', error, {\r\n      componentStack: errorInfo.componentStack,\r\n      errorName: error.name,\r\n      errorMessage: error.message,\r\n    })\r\n  }\r\n\r\n  render(): ReactNode {\r\n    if (this.state.hasError) {\r\n      if (this.props.fallback) {\r\n        return this.props.fallback\r\n      }\r\n\r\n      return (\r\n        <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n          <h3 className=\"text-lg font-semibold text-red-800 mb-2\">Something went wrong</h3>\r\n          <p className=\"text-red-700 mb-3\">\r\n            {this.state.error?.message || 'An unexpected error occurred'}\r\n          </p>\r\n          <button\r\n            onClick={() => this.setState({ hasError: false, error: null })}\r\n            className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700\"\r\n          >\r\n            Try again\r\n          </button>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return this.props.children\r\n  }\r\n}\r\n\r\n/**\r\n * Specialized error boundary for API errors\r\n */\r\nclass ApiErrorBoundary extends EnhancedErrorBoundary {\r\n  render(): ReactNode {\r\n    if (this.state.hasError) {\r\n      const error = this.state.error\r\n      const isApiError = error instanceof ApiError\r\n      const statusCode = isApiError ? (error as ApiError).statusCode : 500\r\n      const errorCode = isApiError ? (error as ApiError).code : 'UNKNOWN_ERROR'\r\n      const details = isApiError ? (error as ApiError).details : undefined\r\n\r\n      return (\r\n        <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n          <h3 className=\"text-lg font-semibold text-red-800 mb-2\">API Error</h3>\r\n          <p className=\"text-red-700 mb-2\">{error?.message || 'Failed to fetch data'}</p>\r\n\r\n          <div className=\"bg-white p-3 rounded mb-3 text-sm font-mono\">\r\n            <p>Status: {statusCode}</p>\r\n            <p>Code: {errorCode}</p>\r\n            {details && <p>Details: {JSON.stringify(details)}</p>}\r\n          </div>\r\n\r\n          <button\r\n            onClick={() => this.setState({ hasError: false, error: null })}\r\n            className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700\"\r\n          >\r\n            Retry\r\n          </button>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return this.props.children\r\n  }\r\n}\r\n\r\n/**\r\n * Specialized error boundary for form validation errors\r\n */\r\nclass FormErrorBoundary extends EnhancedErrorBoundary {\r\n  render(): ReactNode {\r\n    if (this.state.hasError) {\r\n      const error = this.state.error\r\n      const isValidationError = error instanceof ValidationError\r\n      const fieldErrors = isValidationError ? (error as ValidationError).fieldErrors : {}\r\n\r\n      return (\r\n        <div className=\"p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\r\n          <h3 className=\"text-lg font-semibold text-yellow-800 mb-2\">Validation Error</h3>\r\n          <p className=\"text-yellow-700 mb-3\">{error?.message || 'Form validation failed'}</p>\r\n\r\n          {Object.keys(fieldErrors).length > 0 && (\r\n            <div className=\"bg-white p-3 rounded mb-3\">\r\n              <h4 className=\"font-semibold mb-2\">Field Errors:</h4>\r\n              <ul className=\"list-disc pl-5\">\r\n                {Object.entries(fieldErrors).map(([field, message]) => (\r\n                  <li key={field} className=\"text-red-600\">\r\n                    <span className=\"font-semibold\">{field}:</span> {message}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          )}\r\n\r\n          <button\r\n            onClick={() => this.setState({ hasError: false, error: null })}\r\n            className=\"px-4 py-2 bg-yellow-600 text-white rounded hover:bg-yellow-700\"\r\n          >\r\n            Fix and retry\r\n          </button>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport { EnhancedErrorBoundary, ApiErrorBoundary, FormErrorBoundary }\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\examples\\CentralizedErrorHandlingExample.tsx",
    "messages": [
      {
        "ruleId": "import/order",
        "severity": 2,
        "message": "There should be no empty line within import group",
        "line": 3,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "endLine": 3,
        "endColumn": 40,
        "fix": { "range": [57, 59], "text": "" }
      },
      {
        "ruleId": "import/order",
        "severity": 2,
        "message": "There should be at least one empty line between import groups",
        "line": 5,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "endLine": 5,
        "endColumn": 52,
        "fix": { "range": [110, 110], "text": "\n" }
      },
      {
        "ruleId": "import/order",
        "severity": 2,
        "message": "`@/lib/api/error-handling` import should occur before import of `react`",
        "line": 5,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "endLine": 5,
        "endColumn": 52,
        "fix": {
          "range": [16, 112],
          "text": "import { ApiError } from '@/lib/api/error-handling'\r\nimport React, { useState } from 'react'\r\n\r\n"
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 3,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport React, { useState } from 'react'\r\n\r\nimport { ApiError } from '@/lib/api/error-handling'\r\nimport { ValidationError } from '@/lib/api/validation'\r\nimport logger from '@/lib/logging/logger'\r\n\r\n/**\r\n * Example component demonstrating centralized error handling\r\n */\r\nconst CentralizedErrorHandlingExample: React.FC = () => {\r\n  const [error, setError] = useState<Error | null>(null)\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  // Simulate different types of errors\r\n  const simulateGenericError = () => {\r\n    setLoading(true)\r\n    setTimeout(() => {\r\n      try {\r\n        throw new Error('This is a simulated generic error')\r\n      } catch (err) {\r\n        if (err instanceof Error) {\r\n          // Log the error\r\n          logger.error('Generic error occurred:', err)\r\n          // Set the error state\r\n          setError(err)\r\n        }\r\n        setLoading(false)\r\n      }\r\n    }, 500)\r\n  }\r\n\r\n  const simulateApiError = () => {\r\n    setLoading(true)\r\n    setTimeout(() => {\r\n      try {\r\n        throw new ApiError('Failed to fetch user data', 404, 'USER_NOT_FOUND', {\r\n          userId: '12345',\r\n        })\r\n      } catch (err) {\r\n        if (err instanceof Error) {\r\n          // Log the error\r\n          logger.error('API error occurred:', err)\r\n          // Set the error state\r\n          setError(err)\r\n        }\r\n        setLoading(false)\r\n      }\r\n    }, 500)\r\n  }\r\n\r\n  const simulateValidationError = () => {\r\n    setLoading(true)\r\n    setTimeout(() => {\r\n      try {\r\n        throw new ValidationError('Form validation failed', 'VALIDATION_ERROR', {\r\n          email: 'Email is required',\r\n          password: 'Password must be at least 8 characters',\r\n        })\r\n      } catch (err) {\r\n        if (err instanceof Error) {\r\n          // Log the error\r\n          logger.error('Validation error occurred:', err)\r\n          // Set the error state\r\n          setError(err)\r\n        }\r\n        setLoading(false)\r\n      }\r\n    }, 500)\r\n  }\r\n\r\n  // Clear the error\r\n  const clearError = () => {\r\n    setError(null)\r\n  }\r\n\r\n  // Render appropriate error UI based on error type\r\n  const renderErrorUI = () => {\r\n    if (!error) return null\r\n\r\n    if (error instanceof ApiError) {\r\n      return (\r\n        <div className=\"bg-red-50 border border-red-200 p-4 rounded-lg mb-4\">\r\n          <h3 className=\"text-lg font-semibold text-red-800 mb-2\">API Error</h3>\r\n          <p className=\"text-red-700 mb-2\">{error.message}</p>\r\n          <div className=\"bg-white p-3 rounded mb-3 text-sm font-mono\">\r\n            <p>Status: {error.statusCode}</p>\r\n            <p>Code: {error.code}</p>\r\n            {error.details && <p>Details: {JSON.stringify(error.details)}</p>}\r\n          </div>\r\n          <button\r\n            onClick={clearError}\r\n            className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700\"\r\n          >\r\n            Dismiss\r\n          </button>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (error instanceof ValidationError) {\r\n      return (\r\n        <div className=\"bg-yellow-50 border border-yellow-200 p-4 rounded-lg mb-4\">\r\n          <h3 className=\"text-lg font-semibold text-yellow-800 mb-2\">Validation Error</h3>\r\n          <p className=\"text-yellow-700 mb-3\">{error.message}</p>\r\n          {Object.keys(error.fieldErrors).length > 0 && (\r\n            <div className=\"bg-white p-3 rounded mb-3\">\r\n              <h4 className=\"font-semibold mb-2\">Field Errors:</h4>\r\n              <ul className=\"list-disc pl-5\">\r\n                {Object.entries(error.fieldErrors).map(([field, message]) => (\r\n                  <li key={field} className=\"text-red-600\">\r\n                    <span className=\"font-semibold\">{field}:</span> {message}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          )}\r\n          <button\r\n            onClick={clearError}\r\n            className=\"px-4 py-2 bg-yellow-600 text-white rounded hover:bg-yellow-700\"\r\n          >\r\n            Dismiss\r\n          </button>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    // Generic error\r\n    return (\r\n      <div className=\"bg-red-50 border border-red-200 p-4 rounded-lg mb-4\">\r\n        <h3 className=\"text-lg font-semibold text-red-800 mb-2\">Error</h3>\r\n        <p className=\"text-red-700 mb-3\">{error.message}</p>\r\n        <button\r\n          onClick={clearError}\r\n          className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700\"\r\n        >\r\n          Dismiss\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-6 bg-white rounded-lg shadow-sm\">\r\n      <p className=\"text-gray-600 mb-4\">\r\n        This example demonstrates centralized error handling with different error types and\r\n        appropriate UI for each.\r\n      </p>\r\n\r\n      {/* Error UI */}\r\n      {renderErrorUI()}\r\n\r\n      {/* Action buttons */}\r\n      <div className=\"flex flex-wrap gap-3\">\r\n        <button\r\n          onClick={simulateGenericError}\r\n          disabled={loading}\r\n          className=\"px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 disabled:opacity-50\"\r\n        >\r\n          {loading ? 'Loading...' : 'Simulate Generic Error'}\r\n        </button>\r\n\r\n        <button\r\n          onClick={simulateApiError}\r\n          disabled={loading}\r\n          className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50\"\r\n        >\r\n          {loading ? 'Loading...' : 'Simulate API Error'}\r\n        </button>\r\n\r\n        <button\r\n          onClick={simulateValidationError}\r\n          disabled={loading}\r\n          className=\"px-4 py-2 bg-yellow-600 text-white rounded hover:bg-yellow-700 disabled:opacity-50\"\r\n        >\r\n          {loading ? 'Loading...' : 'Simulate Validation Error'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CentralizedErrorHandlingExample\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\examples\\EnvExample.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\examples\\ErrorHandlingHookExample.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\layout\\Footer.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\layout\\Header.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\monitoring\\PerformanceMonitor.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\sections\\CallToAction.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\sections\\FeatureCard.tsx",
    "messages": [
      {
        "ruleId": "jsx-a11y/no-noninteractive-tabindex",
        "severity": 2,
        "message": "`tabIndex` should only be declared on interactive elements.",
        "line": 38,
        "column": 7,
        "nodeType": "JSXAttribute",
        "endLine": 38,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import Image from 'next/image'\r\nimport React from 'react'\r\n\r\nimport { FeatureItem } from './Features'\r\n\r\ninterface FeatureCardProps {\r\n  feature: FeatureItem\r\n  className?: string\r\n}\r\n\r\nexport const FeatureCard: React.FC<FeatureCardProps> = ({ feature, className = '' }) => {\r\n  const renderIcon = (icon: FeatureItem['icon']) => {\r\n    if (React.isValidElement(icon)) {\r\n      return icon\r\n    } else if (typeof icon === 'string') {\r\n      return (\r\n        <span className=\"text-blue-600 text-2xl\" aria-hidden=\"true\">\r\n          {icon}\r\n        </span>\r\n      )\r\n    } else if (icon && typeof icon === 'object' && 'src' in icon) {\r\n      return (\r\n        <Image\r\n          src={icon.src}\r\n          alt={icon.alt || feature.title}\r\n          width={24}\r\n          height={24}\r\n          className=\"w-6 h-6\"\r\n        />\r\n      )\r\n    }\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`bg-white p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300 h-full flex flex-col ${className}`}\r\n      tabIndex={0}\r\n    >\r\n      <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mb-4\">\r\n        {renderIcon(feature.icon)}\r\n      </div>\r\n      <h3 className=\"text-xl font-semibold mb-2 text-gray-800\">{feature.title}</h3>\r\n      <p className=\"text-gray-600 flex-grow\">{feature.description}</p>\r\n    </div>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\sections\\Features.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\sections\\Hero.test.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'fireEvent' is defined but never used.",
        "line": 1,
        "column": 26,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 18,
        "column": 60,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 18,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [509, 512], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [509, 512], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 20,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 20,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [593, 596], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [593, 596], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { render, screen, fireEvent, waitFor } from '@testing-library/react'\r\nimport userEvent from '@testing-library/user-event'\r\nimport React from 'react'\r\nimport { vi } from 'vitest'\r\n\r\nimport Hero from './Hero'\r\n\r\n// Mock the useRouter hook\r\n\r\nconst mockRouterPush = vi.fn()\r\nvi.mock('next/navigation', () => ({\r\n  useRouter: () => ({\r\n    push: mockRouterPush,\r\n  }),\r\n}))\r\n\r\n// Mock the useDebounce hook with a function we can control in tests\r\nconst mockUseDebounce = vi.fn().mockImplementation((value: any) => value)\r\nvi.mock('../../hooks/useDebounce', () => ({\r\n  useDebounce: (value: any, delay: number) => mockUseDebounce(value, delay),\r\n}))\r\n\r\ndescribe('Hero Component', () => {\r\n  it('renders with default props', () => {\r\n    render(<Hero />)\r\n\r\n    // Check if the default title and subtitle are rendered\r\n    expect(screen.getByText('Find Your Perfect UK Home')).toBeInTheDocument()\r\n    expect(\r\n      screen.getByText('Search smarter with AI-powered property matching and location insights')\r\n    ).toBeInTheDocument()\r\n\r\n    // Check if the search input is rendered\r\n    expect(screen.getByRole('searchbox')).toBeInTheDocument()\r\n\r\n    // Check if the search button is rendered with default text\r\n    expect(screen.getByRole('button', { name: /search/i })).toBeInTheDocument()\r\n  })\r\n\r\n  it('renders with custom props', () => {\r\n    const customProps = {\r\n      title: 'Custom Title',\r\n      subtitle: 'Custom Subtitle',\r\n      buttonText: 'Custom Button',\r\n    }\r\n\r\n    render(<Hero {...customProps} />)\r\n\r\n    // Check if the custom title and subtitle are rendered\r\n    expect(screen.getByText('Custom Title')).toBeInTheDocument()\r\n    expect(screen.getByText('Custom Subtitle')).toBeInTheDocument()\r\n\r\n    // Check if the search button has the custom text\r\n    // The button is disabled initially, so we need to check the text content\r\n    const button = screen.getByRole('button')\r\n    expect(button).toHaveTextContent('Custom Button')\r\n  })\r\n\r\n  it('handles search input and button click', async () => {\r\n    const mockOnInlineSearch = vi.fn()\r\n    const user = userEvent.setup()\r\n\r\n    render(<Hero useInlineSearch={true} onInlineSearch={mockOnInlineSearch} />)\r\n\r\n    // Get the search input and button\r\n    const searchInput = screen.getByRole('searchbox')\r\n    const searchButton = screen.getByRole('button', { name: /search/i })\r\n\r\n    // Type in the search input\r\n    await user.type(searchInput, 'test search')\r\n\r\n    // Click the search button\r\n    await user.click(searchButton)\r\n\r\n    // Check if the onInlineSearch function was called with the correct value\r\n    expect(mockOnInlineSearch).toHaveBeenCalledWith('test search')\r\n  })\r\n\r\n  it('handles Enter key press in search input', async () => {\r\n    const mockOnInlineSearch = vi.fn()\r\n    const user = userEvent.setup()\r\n\r\n    render(<Hero useInlineSearch={true} onInlineSearch={mockOnInlineSearch} />)\r\n\r\n    // Get the search input\r\n    const searchInput = screen.getByRole('searchbox')\r\n\r\n    // Type in the search input and press Enter\r\n    await user.type(searchInput, 'test search{enter}')\r\n\r\n    // Check if the onInlineSearch function was called with the correct value\r\n    expect(mockOnInlineSearch).toHaveBeenCalledWith('test search')\r\n  })\r\n\r\n  it('disables the search button when input is empty', async () => {\r\n    const user = userEvent.setup()\r\n    render(<Hero />)\r\n\r\n    // Get the search button\r\n    const searchButton = screen.getByRole('button', { name: /search/i })\r\n\r\n    // Initially, the button should be disabled\r\n    expect(searchButton).toBeDisabled()\r\n\r\n    // Type in the search input\r\n    const searchInput = screen.getByRole('searchbox')\r\n    await user.type(searchInput, 'test')\r\n\r\n    // Now the button should be enabled\r\n    expect(searchButton).not.toBeDisabled()\r\n\r\n    // Clear the input\r\n    await user.clear(searchInput)\r\n\r\n    // The button should be disabled again\r\n    expect(searchButton).toBeDisabled()\r\n  })\r\n\r\n  // Skip this test for now as the loading state is not easily testable\r\n  it.skip('shows loading state when searching', async () => {\r\n    const mockOnInlineSearch = vi.fn(() => {\r\n      // Simulate a delay in the search\r\n      return new Promise(resolve => setTimeout(resolve, 100))\r\n    })\r\n\r\n    const user = userEvent.setup()\r\n\r\n    render(<Hero useInlineSearch={true} onInlineSearch={mockOnInlineSearch} />)\r\n\r\n    // Get the search input and button\r\n    const searchInput = screen.getByRole('searchbox')\r\n    const searchButton = screen.getByRole('button')\r\n\r\n    // Type in the search input\r\n    await user.type(searchInput, 'test search')\r\n\r\n    // Click the search button\r\n    await user.click(searchButton)\r\n\r\n    // Wait for the search to complete\r\n    await waitFor(() => {\r\n      expect(mockOnInlineSearch).toHaveBeenCalledWith('test search')\r\n    })\r\n  })\r\n\r\n  it('navigates to search page when useInlineSearch is false', async () => {\r\n    // Clear any previous mock calls\r\n    mockRouterPush.mockClear()\r\n\r\n    const user = userEvent.setup()\r\n\r\n    render(<Hero useInlineSearch={false} />)\r\n\r\n    // Get the search input and button\r\n    const searchInput = screen.getByRole('searchbox')\r\n    const searchButton = screen.getByRole('button', { name: /search/i })\r\n\r\n    // Type in the search input\r\n    await user.type(searchInput, 'london apartment')\r\n\r\n    // Click the search button\r\n    await user.click(searchButton)\r\n\r\n    // Check if router.push was called with the correct URL\r\n    expect(mockRouterPush).toHaveBeenCalledWith('/search?query=london%20apartment')\r\n  })\r\n\r\n  it('navigates to search page on Enter key press when useInlineSearch is false', async () => {\r\n    // Clear any previous mock calls\r\n    mockRouterPush.mockClear()\r\n\r\n    const user = userEvent.setup()\r\n\r\n    render(<Hero useInlineSearch={false} />)\r\n\r\n    // Get the search input\r\n    const searchInput = screen.getByRole('searchbox')\r\n\r\n    // Type in the search input and press Enter\r\n    await user.type(searchInput, 'manchester house{enter}')\r\n\r\n    // Check if router.push was called with the correct URL\r\n    expect(mockRouterPush).toHaveBeenCalledWith('/search?query=manchester%20house')\r\n  })\r\n\r\n  it('triggers search via debounce when typing', async () => {\r\n    // Reset the mock\r\n    mockUseDebounce.mockClear()\r\n\r\n    const mockOnInlineSearch = vi.fn()\r\n    const user = userEvent.setup()\r\n\r\n    // First render with normal debounce behavior\r\n    render(<Hero useInlineSearch={true} onInlineSearch={mockOnInlineSearch} />)\r\n\r\n    // Get the search input\r\n    const searchInput = screen.getByRole('searchbox')\r\n\r\n    // Type in the search input\r\n    await user.type(searchInput, 'debounced search')\r\n\r\n    // Verify useDebounce was called with the input value and a delay\r\n    expect(mockUseDebounce).toHaveBeenCalledWith('debounced search', 500)\r\n\r\n    // Now simulate the debounced value changing after the delay\r\n    // by manually calling the useEffect that depends on debouncedInput\r\n    await waitFor(() => {\r\n      // The component should call onInlineSearch with the debounced value\r\n      expect(mockOnInlineSearch).toHaveBeenCalledWith('debounced search')\r\n    })\r\n  })\r\n\r\n  // Edge Case Tests\r\n  it('handles special characters in search input', async () => {\r\n    mockRouterPush.mockClear()\r\n    const user = userEvent.setup()\r\n\r\n    render(<Hero useInlineSearch={false} />)\r\n\r\n    const searchInput = screen.getByRole('searchbox')\r\n\r\n    // Type special characters in the search input\r\n    await user.type(searchInput, 'flat & apartment #123 £500-£700/month')\r\n    await user.click(screen.getByRole('button'))\r\n\r\n    // Check if router.push was called with the correctly encoded URL\r\n    expect(mockRouterPush).toHaveBeenCalledWith(\r\n      '/search?query=flat%20%26%20apartment%20%23123%20%C2%A3500-%C2%A3700%2Fmonth'\r\n    )\r\n  })\r\n\r\n  it('handles invalid title prop by using default', () => {\r\n    render(<Hero title={undefined} />)\r\n\r\n    // Should fall back to default title\r\n    expect(screen.getByText('Find Your Perfect UK Home')).toBeInTheDocument()\r\n  })\r\n\r\n  it('trims whitespace from search input', async () => {\r\n    const mockOnInlineSearch = vi.fn()\r\n    const user = userEvent.setup()\r\n\r\n    render(<Hero useInlineSearch={true} onInlineSearch={mockOnInlineSearch} />)\r\n\r\n    const searchInput = screen.getByRole('searchbox')\r\n\r\n    // Type input with extra spaces\r\n    await user.type(searchInput, '  london apartment  ')\r\n    await user.click(screen.getByRole('button'))\r\n\r\n    // Check if the onInlineSearch function was called with trimmed value\r\n    expect(mockOnInlineSearch).toHaveBeenCalledWith('london apartment')\r\n  })\r\n\r\n  // Accessibility Tests\r\n  it('has proper accessibility attributes', () => {\r\n    render(<Hero />)\r\n\r\n    // Check search input accessibility\r\n    const searchInput = screen.getByRole('searchbox')\r\n    expect(searchInput).toHaveAttribute('aria-label', 'Search for properties')\r\n    expect(searchInput).toHaveAttribute('aria-describedby', 'search-description')\r\n\r\n    // Check search button accessibility\r\n    const searchButton = screen.getByRole('button')\r\n    expect(searchButton).toHaveAttribute('aria-label', 'Search for properties')\r\n\r\n    // Check search container accessibility\r\n    const searchContainer = screen.getByRole('search')\r\n    expect(searchContainer).toHaveAttribute('aria-label', 'Property search')\r\n\r\n    // Check heading accessibility\r\n    const heading = screen.getByRole('heading', { level: 1 })\r\n    expect(heading).toHaveAttribute('id', 'hero-heading')\r\n\r\n    // Check section accessibility\r\n    const section = heading.closest('section')\r\n    expect(section).toHaveAttribute('aria-labelledby', 'hero-heading')\r\n  })\r\n\r\n  it('supports keyboard navigation', async () => {\r\n    const mockOnInlineSearch = vi.fn()\r\n    const user = userEvent.setup()\r\n\r\n    render(<Hero useInlineSearch={true} onInlineSearch={mockOnInlineSearch} />)\r\n\r\n    const searchInput = screen.getByRole('searchbox')\r\n\r\n    // Focus on the input\r\n    await user.click(searchInput)\r\n\r\n    // Type and press Enter\r\n    await user.type(searchInput, 'keyboard navigation test{enter}')\r\n\r\n    // Check if the search was triggered\r\n    expect(mockOnInlineSearch).toHaveBeenCalledWith('keyboard navigation test')\r\n  })\r\n})\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\sections\\Hero.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'handleSearch', 'onInlineSearch', and 'useInlineSearch'. Either include them or remove the dependency array.",
        "line": 34,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 34,
        "endColumn": 22,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [debouncedInput, handleSearch, onInlineSearch, useInlineSearch]",
            "fix": {
              "range": [1050, 1066],
              "text": "[debouncedInput, handleSearch, onInlineSearch, useInlineSearch]"
            }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useRouter } from 'next/navigation'\r\nimport React, { useState, useEffect } from 'react'\r\n\r\nimport { useDebounce } from '../../hooks/useDebounce'\r\nimport { Button } from '../../src/ui'\r\n\r\ninterface HeroProps {\r\n  title?: string\r\n  subtitle?: string\r\n  buttonText?: string\r\n  useInlineSearch?: boolean\r\n  onInlineSearch?: (query: string) => void\r\n}\r\n\r\nexport default function Hero({\r\n  title = 'Find Your Perfect UK Home',\r\n  subtitle = 'Search smarter with AI-powered property matching and location insights',\r\n  buttonText = 'Search',\r\n  useInlineSearch = false,\r\n  onInlineSearch,\r\n}: HeroProps) {\r\n  const [input, setInput] = useState('')\r\n  const [isSearching, setIsSearching] = useState(false)\r\n  const router = useRouter()\r\n\r\n  // Debounce the search input with a 500ms delay\r\n  const debouncedInput = useDebounce(input, 500)\r\n\r\n  // Effect to trigger search when debounced input changes\r\n  useEffect(() => {\r\n    if (debouncedInput && debouncedInput.trim() && useInlineSearch && onInlineSearch) {\r\n      handleSearch(true)\r\n    }\r\n  }, [debouncedInput])\r\n\r\n  const handleSearch = (isDebounced = false) => {\r\n    if (!input.trim()) return\r\n\r\n    if (useInlineSearch && onInlineSearch) {\r\n      // Only set isSearching if this isn't from the debounce effect\r\n      // (to avoid UI flicker when typing quickly)\r\n      if (!isDebounced) {\r\n        setIsSearching(true)\r\n      }\r\n\r\n      onInlineSearch(input.trim())\r\n\r\n      // Scroll to results\r\n      setTimeout(() => {\r\n        const searchResults = document.getElementById('search-results')\r\n        if (searchResults) {\r\n          searchResults.scrollIntoView({\r\n            behavior: 'smooth',\r\n            block: 'start',\r\n          })\r\n        }\r\n        setIsSearching(false)\r\n      }, 100)\r\n    } else {\r\n      const encoded = encodeURIComponent(input.trim())\r\n      router.push(`/search?query=${encoded}`)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <section\r\n      className=\"bg-gradient-to-br from-purple-700 via-indigo-700 to-indigo-900 text-white py-24 px-6 text-center\"\r\n      aria-labelledby=\"hero-heading\"\r\n    >\r\n      <h1 id=\"hero-heading\" className=\"text-5xl sm:text-6xl font-extrabold tracking-tight mb-6\">\r\n        {title}\r\n      </h1>\r\n      <p className=\"text-xl max-w-lg mx-auto mb-10 leading-relaxed\">{subtitle}</p>\r\n\r\n      <div\r\n        className=\"bg-white text-black p-5 rounded-2xl max-w-4xl mx-auto shadow-lg\"\r\n        role=\"search\"\r\n        aria-label=\"Property search\"\r\n      >\r\n        <div className=\"flex flex-col sm:flex-row gap-5 items-center\">\r\n          <div className=\"w-full flex-1 relative\">\r\n            <label\r\n              htmlFor=\"property-search\"\r\n              className=\"block text-sm font-medium text-gray-700 mb-1\"\r\n            >\r\n              Search for properties\r\n            </label>\r\n            <input\r\n              id=\"property-search\"\r\n              type=\"search\"\r\n              className=\"w-full px-5 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\r\n              placeholder=\"e.g. 'Modern flat near Cambridge with a garden'\"\r\n              value={input}\r\n              onChange={e => setInput(e.target.value)}\r\n              onKeyDown={e => e.key === 'Enter' && handleSearch()}\r\n              aria-describedby=\"search-description\"\r\n            />\r\n            <div id=\"search-description\" className=\"mt-1 text-xs text-gray-500\">\r\n              Enter location, property type, or features to find your ideal property\r\n            </div>\r\n          </div>\r\n\r\n          <Button\r\n            variant=\"primary\"\r\n            onClick={() => handleSearch()}\r\n            disabled={!input.trim() || isSearching}\r\n            className=\"w-full sm:w-auto px-8 py-3 font-semibold rounded-lg transition-transform hover:scale-105 disabled:opacity-50\"\r\n            aria-label={isSearching ? 'Searching...' : 'Search for properties'}\r\n          >\r\n            {isSearching ? (\r\n              <>\r\n                <span className=\"inline-block mr-2 h-4 w-4 rounded-full border-2 border-white border-t-transparent animate-spin\"></span>\r\n                Searching...\r\n              </>\r\n            ) : (\r\n              buttonText\r\n            )}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\sections\\HeroComponent.test.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'fireEvent' is defined but never used.",
        "line": 1,
        "column": 26,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 18,
        "column": 60,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 18,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [509, 512], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [509, 512], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 20,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 20,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [593, 596], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [593, 596], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { render, screen, fireEvent, waitFor } from '@testing-library/react'\r\nimport userEvent from '@testing-library/user-event'\r\nimport React from 'react'\r\nimport { vi } from 'vitest'\r\n\r\nimport Hero from './Hero'\r\n\r\n// Mock the useRouter hook\r\n\r\nconst mockRouterPush = vi.fn()\r\nvi.mock('next/navigation', () => ({\r\n  useRouter: () => ({\r\n    push: mockRouterPush,\r\n  }),\r\n}))\r\n\r\n// Mock the useDebounce hook with a function we can control in tests\r\nconst mockUseDebounce = vi.fn().mockImplementation((value: any) => value)\r\nvi.mock('../../hooks/useDebounce', () => ({\r\n  useDebounce: (value: any, delay: number) => mockUseDebounce(value, delay),\r\n}))\r\n\r\ndescribe('Hero Component', () => {\r\n  it('renders with default props', () => {\r\n    render(<Hero />)\r\n\r\n    // Check if the default title and subtitle are rendered\r\n    expect(screen.getByText('Find Your Perfect UK Home')).toBeInTheDocument()\r\n    expect(\r\n      screen.getByText('Search smarter with AI-powered property matching and location insights')\r\n    ).toBeInTheDocument()\r\n\r\n    // Check if the search input is rendered\r\n    expect(screen.getByRole('searchbox')).toBeInTheDocument()\r\n\r\n    // Check if the search button is rendered with default text\r\n    expect(screen.getByRole('button', { name: /search/i })).toBeInTheDocument()\r\n  })\r\n\r\n  it('renders with custom props', () => {\r\n    const customProps = {\r\n      title: 'Custom Title',\r\n      subtitle: 'Custom Subtitle',\r\n      buttonText: 'Custom Button',\r\n    }\r\n\r\n    render(<Hero {...customProps} />)\r\n\r\n    // Check if the custom title and subtitle are rendered\r\n    expect(screen.getByText('Custom Title')).toBeInTheDocument()\r\n    expect(screen.getByText('Custom Subtitle')).toBeInTheDocument()\r\n\r\n    // Check if the search button has the custom text\r\n    // The button is disabled initially, so we need to check the text content\r\n    const button = screen.getByRole('button')\r\n    expect(button).toHaveTextContent('Custom Button')\r\n  })\r\n\r\n  it('handles search input and button click', async () => {\r\n    const mockOnInlineSearch = vi.fn()\r\n    const user = userEvent.setup()\r\n\r\n    render(<Hero useInlineSearch={true} onInlineSearch={mockOnInlineSearch} />)\r\n\r\n    // Get the search input and button\r\n    const searchInput = screen.getByRole('searchbox')\r\n    const searchButton = screen.getByRole('button', { name: /search/i })\r\n\r\n    // Type in the search input\r\n    await user.type(searchInput, 'test search')\r\n\r\n    // Click the search button\r\n    await user.click(searchButton)\r\n\r\n    // Check if the onInlineSearch function was called with the correct value\r\n    expect(mockOnInlineSearch).toHaveBeenCalledWith('test search')\r\n  })\r\n\r\n  it('handles Enter key press in search input', async () => {\r\n    const mockOnInlineSearch = vi.fn()\r\n    const user = userEvent.setup()\r\n\r\n    render(<Hero useInlineSearch={true} onInlineSearch={mockOnInlineSearch} />)\r\n\r\n    // Get the search input\r\n    const searchInput = screen.getByRole('searchbox')\r\n\r\n    // Type in the search input and press Enter\r\n    await user.type(searchInput, 'test search{enter}')\r\n\r\n    // Check if the onInlineSearch function was called with the correct value\r\n    expect(mockOnInlineSearch).toHaveBeenCalledWith('test search')\r\n  })\r\n\r\n  it('disables the search button when input is empty', async () => {\r\n    const user = userEvent.setup()\r\n    render(<Hero />)\r\n\r\n    // Get the search button\r\n    const searchButton = screen.getByRole('button', { name: /search/i })\r\n\r\n    // Initially, the button should be disabled\r\n    expect(searchButton).toBeDisabled()\r\n\r\n    // Type in the search input\r\n    const searchInput = screen.getByRole('searchbox')\r\n    await user.type(searchInput, 'test')\r\n\r\n    // Now the button should be enabled\r\n    expect(searchButton).not.toBeDisabled()\r\n\r\n    // Clear the input\r\n    await user.clear(searchInput)\r\n\r\n    // The button should be disabled again\r\n    expect(searchButton).toBeDisabled()\r\n  })\r\n\r\n  // Skip this test for now as the loading state is not easily testable\r\n  it.skip('shows loading state when searching', async () => {\r\n    const mockOnInlineSearch = vi.fn(() => {\r\n      // Simulate a delay in the search\r\n      return new Promise(resolve => setTimeout(resolve, 100))\r\n    })\r\n\r\n    const user = userEvent.setup()\r\n\r\n    render(<Hero useInlineSearch={true} onInlineSearch={mockOnInlineSearch} />)\r\n\r\n    // Get the search input and button\r\n    const searchInput = screen.getByRole('searchbox')\r\n    const searchButton = screen.getByRole('button')\r\n\r\n    // Type in the search input\r\n    await user.type(searchInput, 'test search')\r\n\r\n    // Click the search button\r\n    await user.click(searchButton)\r\n\r\n    // Wait for the search to complete\r\n    await waitFor(() => {\r\n      expect(mockOnInlineSearch).toHaveBeenCalledWith('test search')\r\n    })\r\n  })\r\n\r\n  it('navigates to search page when useInlineSearch is false', async () => {\r\n    // Clear any previous mock calls\r\n    mockRouterPush.mockClear()\r\n\r\n    const user = userEvent.setup()\r\n\r\n    render(<Hero useInlineSearch={false} />)\r\n\r\n    // Get the search input and button\r\n    const searchInput = screen.getByRole('searchbox')\r\n    const searchButton = screen.getByRole('button', { name: /search/i })\r\n\r\n    // Type in the search input\r\n    await user.type(searchInput, 'london apartment')\r\n\r\n    // Click the search button\r\n    await user.click(searchButton)\r\n\r\n    // Check if router.push was called with the correct URL\r\n    expect(mockRouterPush).toHaveBeenCalledWith('/search?query=london%20apartment')\r\n  })\r\n\r\n  it('navigates to search page on Enter key press when useInlineSearch is false', async () => {\r\n    // Clear any previous mock calls\r\n    mockRouterPush.mockClear()\r\n\r\n    const user = userEvent.setup()\r\n\r\n    render(<Hero useInlineSearch={false} />)\r\n\r\n    // Get the search input\r\n    const searchInput = screen.getByRole('searchbox')\r\n\r\n    // Type in the search input and press Enter\r\n    await user.type(searchInput, 'manchester house{enter}')\r\n\r\n    // Check if router.push was called with the correct URL\r\n    expect(mockRouterPush).toHaveBeenCalledWith('/search?query=manchester%20house')\r\n  })\r\n\r\n  it('triggers search via debounce when typing', async () => {\r\n    // Reset the mock\r\n    mockUseDebounce.mockClear()\r\n\r\n    const mockOnInlineSearch = vi.fn()\r\n    const user = userEvent.setup()\r\n\r\n    // First render with normal debounce behavior\r\n    render(<Hero useInlineSearch={true} onInlineSearch={mockOnInlineSearch} />)\r\n\r\n    // Get the search input\r\n    const searchInput = screen.getByRole('searchbox')\r\n\r\n    // Type in the search input\r\n    await user.type(searchInput, 'debounced search')\r\n\r\n    // Verify useDebounce was called with the input value and a delay\r\n    expect(mockUseDebounce).toHaveBeenCalledWith('debounced search', 500)\r\n\r\n    // Now simulate the debounced value changing after the delay\r\n    // by manually calling the useEffect that depends on debouncedInput\r\n    await waitFor(() => {\r\n      // The component should call onInlineSearch with the debounced value\r\n      expect(mockOnInlineSearch).toHaveBeenCalledWith('debounced search')\r\n    })\r\n  })\r\n\r\n  // Edge Case Tests\r\n  it('handles special characters in search input', async () => {\r\n    mockRouterPush.mockClear()\r\n    const user = userEvent.setup()\r\n\r\n    render(<Hero useInlineSearch={false} />)\r\n\r\n    const searchInput = screen.getByRole('searchbox')\r\n\r\n    // Type special characters in the search input\r\n    await user.type(searchInput, 'flat & apartment #123 £500-£700/month')\r\n    await user.click(screen.getByRole('button'))\r\n\r\n    // Check if router.push was called with the correctly encoded URL\r\n    expect(mockRouterPush).toHaveBeenCalledWith(\r\n      '/search?query=flat%20%26%20apartment%20%23123%20%C2%A3500-%C2%A3700%2Fmonth'\r\n    )\r\n  })\r\n\r\n  it('handles invalid title prop by using default', () => {\r\n    render(<Hero title={undefined} />)\r\n\r\n    // Should fall back to default title\r\n    expect(screen.getByText('Find Your Perfect UK Home')).toBeInTheDocument()\r\n  })\r\n\r\n  it('trims whitespace from search input', async () => {\r\n    const mockOnInlineSearch = vi.fn()\r\n    const user = userEvent.setup()\r\n\r\n    render(<Hero useInlineSearch={true} onInlineSearch={mockOnInlineSearch} />)\r\n\r\n    const searchInput = screen.getByRole('searchbox')\r\n\r\n    // Type input with extra spaces\r\n    await user.type(searchInput, '  london apartment  ')\r\n    await user.click(screen.getByRole('button'))\r\n\r\n    // Check if the onInlineSearch function was called with trimmed value\r\n    expect(mockOnInlineSearch).toHaveBeenCalledWith('london apartment')\r\n  })\r\n\r\n  // Accessibility Tests\r\n  it('has proper accessibility attributes', () => {\r\n    render(<Hero />)\r\n\r\n    // Check search input accessibility\r\n    const searchInput = screen.getByRole('searchbox')\r\n    expect(searchInput).toHaveAttribute('aria-label', 'Search for properties')\r\n    expect(searchInput).toHaveAttribute('aria-describedby', 'search-description')\r\n\r\n    // Check search button accessibility\r\n    const searchButton = screen.getByRole('button')\r\n    expect(searchButton).toHaveAttribute('aria-label', 'Search for properties')\r\n\r\n    // Check search container accessibility\r\n    const searchContainer = screen.getByRole('search')\r\n    expect(searchContainer).toHaveAttribute('aria-label', 'Property search')\r\n\r\n    // Check heading accessibility\r\n    const heading = screen.getByRole('heading', { level: 1 })\r\n    expect(heading).toHaveAttribute('id', 'hero-heading')\r\n\r\n    // Check section accessibility\r\n    const section = heading.closest('section')\r\n    expect(section).toHaveAttribute('aria-labelledby', 'hero-heading')\r\n  })\r\n\r\n  it('supports keyboard navigation', async () => {\r\n    const mockOnInlineSearch = vi.fn()\r\n    const user = userEvent.setup()\r\n\r\n    render(<Hero useInlineSearch={true} onInlineSearch={mockOnInlineSearch} />)\r\n\r\n    const searchInput = screen.getByRole('searchbox')\r\n\r\n    // Focus on the input\r\n    await user.click(searchInput)\r\n\r\n    // Type and press Enter\r\n    await user.type(searchInput, 'keyboard navigation test{enter}')\r\n\r\n    // Check if the search was triggered\r\n    expect(mockOnInlineSearch).toHaveBeenCalledWith('keyboard navigation test')\r\n  })\r\n})\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\sections\\SearchResults.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\components\\sections\\SearchResults.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\cypress.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\cypress\\e2e\\accessibility.cy.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\cypress\\e2e\\search.cy.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\cypress\\e2e\\tab-navigation.cy.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\cypress\\support\\commands.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 35,
        "column": 70,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 35,
        "endColumn": 73,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1305, 1308], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1305, 1308], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// ***********************************************\n// This example commands.js shows you how to\n// create various custom commands and overwrite\n// existing commands.\n//\n// For more comprehensive examples of custom\n// commands please read more here:\n// https://on.cypress.io/custom-commands\n// ***********************************************\n\n// Import cypress-testing-library commands\nimport '@testing-library/cypress/add-commands'\n\n// Import type definitions\n/// <reference types=\"cypress\" />\n/// <reference path=\"../cypress.d.ts\" />\n\n// -- This is a parent command --\n// Cypress.Commands.add('login', (email, password) => { ... })\n\n// -- This is a child command --\n// Cypress.Commands.add('drag', { prevSubject: 'element'}, (subject, options) => { ... })\n\n// -- This is a dual command --\n// Cypress.Commands.add('dismiss', { prevSubject: 'optional'}, (subject, options) => { ... })\n\n// -- This will overwrite an existing command --\n// Cypress.Commands.overwrite('visit', (originalFn, url, options) => { ... })\n\n// Add custom tab command for keyboard navigation testing\n// Type definitions are in cypress.d.ts and support/index.d.ts files\ntype TabOptions = Partial<{ shift: boolean; shiftKey: boolean }>\n\n// Add the custom tab command\nCypress.Commands.add('tab', { prevSubject: ['optional'] }, (subject: any, options?: TabOptions) => {\n  const opts = options || {}\n  const isShiftTab = opts.shift || opts.shiftKey || false\n\n  if (subject) {\n    cy.wrap(subject).focus()\n  }\n\n  return cy.focused().then($el => {\n    const focusableElements = Cypress.$(\n      'a[href]:not([disabled]), button:not([disabled]), input:not([disabled]), textarea:not([disabled]), select:not([disabled]), [tabindex]:not([tabindex=\"-1\"])'\n    ).filter(':visible')\n\n    const currentIndex = focusableElements.index($el)\n\n    let nextIndex\n    if (isShiftTab) {\n      nextIndex = currentIndex - 1\n      if (nextIndex < 0) nextIndex = focusableElements.length - 1\n    } else {\n      nextIndex = currentIndex + 1\n      if (nextIndex >= focusableElements.length) nextIndex = 0\n    }\n\n    const nextElement = focusableElements.get(nextIndex) // Raw DOM element\n    return cy.wrap(nextElement).focus() // Chainable<Element>\n  })\n})\n\n// Type definitions are also in cypress.d.ts file\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\cypress\\support\\e2e.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/triple-slash-reference",
        "severity": 2,
        "message": "Do not use a triple slash reference for ../cypress.d.ts, use `import` style instead.",
        "line": 4,
        "column": 1,
        "nodeType": "Line",
        "messageId": "tripleSlashReference",
        "endLine": 4,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/triple-slash-reference",
        "severity": 2,
        "message": "Do not use a triple slash reference for ./index.d.ts, use `import` style instead.",
        "line": 5,
        "column": 1,
        "nodeType": "Line",
        "messageId": "tripleSlashReference",
        "endLine": 5,
        "endColumn": 38
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Import type definitions\n/// <reference types=\"cypress\" />\n/// <reference types=\"@testing-library/cypress\" />\n/// <reference path=\"../cypress.d.ts\" />\n/// <reference path=\"./index.d.ts\" />\n\n// Import commands.js using ES2015 syntax:\nimport './commands'\n\n// Import cypress-axe\nimport 'cypress-axe'\n\n// Alternatively you can use CommonJS syntax:\n// require('./commands')\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\hooks\\useDebounce.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\hooks\\useErrorHandler.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\lib\\api\\error-handling.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\lib\\api\\validation.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\lib\\auth\\authMiddleware.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\lib\\auth\\clerk-wrapper.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 176,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 176,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5237, 5240], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5237, 5240], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'user' is assigned a value but never used.",
        "line": 191,
        "column": 22,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 191,
        "endColumn": 26
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 287,
        "column": 20,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [9627, 9713],
              "text": "\r\n            You don&apos;t have the required permissions to access this page.\r\n          "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [9627, 9713],
              "text": "\r\n            You don&lsquo;t have the required permissions to access this page.\r\n          "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [9627, 9713],
              "text": "\r\n            You don&#39;t have the required permissions to access this page.\r\n          "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [9627, 9713],
              "text": "\r\n            You don&rsquo;t have the required permissions to access this page.\r\n          "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/auth/clerk-wrapper.tsx\r\nimport { ClerkProvider, useUser as useClerkUser, SignedIn, SignedOut, useAuth } from '@clerk/nextjs'\r\nimport { useRouter } from 'next/navigation'\r\nimport React, { useState, useEffect, useCallback, createContext, useContext } from 'react'\r\n\r\n// Define the authentication state\r\ninterface AuthState {\r\n  isLoaded: boolean\r\n  isSignedIn: boolean | null\r\n  isError: boolean\r\n  errorMessage: string | null\r\n  retryCount: number\r\n  isRetrying: boolean\r\n}\r\n\r\n// Define the authentication context\r\ninterface AuthContextType {\r\n  authState: AuthState\r\n  user: ReturnType<typeof useClerkUser>['user'] | null\r\n  retryAuth: () => void\r\n  signOut: () => Promise<void>\r\n  isAuthorized: (requiredRoles?: string[]) => boolean\r\n}\r\n\r\n// Create the authentication context\r\nconst AuthContext = createContext<AuthContextType | null>(null)\r\n\r\n// Custom hook to use the authentication context\r\nexport const useAuthWrapper = () => {\r\n  const context = useContext(AuthContext)\r\n  if (!context) {\r\n    throw new Error('useAuthWrapper must be used within an AuthProvider')\r\n  }\r\n  return context\r\n}\r\n\r\n// Authentication provider component\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const { isLoaded: clerkLoaded, isSignedIn, user } = useClerkUser()\r\n  const { signOut: clerkSignOut } = useAuth()\r\n  const router = useRouter()\r\n\r\n  // Authentication state\r\n  const [authState, setAuthState] = useState<AuthState>({\r\n    isLoaded: false,\r\n    isSignedIn: null,\r\n    isError: false,\r\n    errorMessage: null,\r\n    retryCount: 0,\r\n    isRetrying: false,\r\n  })\r\n\r\n  // Maximum number of retry attempts\r\n  const MAX_RETRY_ATTEMPTS = 3\r\n\r\n  // Retry authentication\r\n  const retryAuth = useCallback(() => {\r\n    if (authState.retryCount >= MAX_RETRY_ATTEMPTS) {\r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        isError: true,\r\n        errorMessage: 'Maximum retry attempts reached. Please refresh the page or try again later.',\r\n        isRetrying: false,\r\n      }))\r\n      return\r\n    }\r\n\r\n    setAuthState(prev => ({\r\n      ...prev,\r\n      isRetrying: true,\r\n      retryCount: prev.retryCount + 1,\r\n    }))\r\n\r\n    // Simulate a retry by forcing a re-render\r\n    // In a real app, you might want to call a specific Clerk method to refresh the session\r\n    setTimeout(() => {\r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        isRetrying: false,\r\n      }))\r\n    }, 1000)\r\n  }, [authState.retryCount])\r\n\r\n  // Sign out with error handling\r\n  const handleSignOut = useCallback(async () => {\r\n    try {\r\n      if (clerkSignOut) {\r\n        await clerkSignOut()\r\n        router.push('/')\r\n      }\r\n    } catch (error) {\r\n      console.error('Error signing out:', error)\r\n      // If sign out fails, we can still clear local state\r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        isSignedIn: false,\r\n        isError: true,\r\n        errorMessage: 'Failed to sign out properly. Please refresh the page.',\r\n      }))\r\n    }\r\n  }, [clerkSignOut, router])\r\n\r\n  // Check if user has required roles\r\n  const isAuthorized = useCallback(\r\n    (requiredRoles?: string[]) => {\r\n      if (!isSignedIn || !user) return false\r\n      if (!requiredRoles || requiredRoles.length === 0) return true\r\n\r\n      // Get user roles from public metadata\r\n      // This assumes roles are stored in publicMetadata.roles\r\n      const userRoles = (user.publicMetadata?.roles as string[]) || []\r\n\r\n      // Check if user has any of the required roles\r\n      return requiredRoles.some(role => userRoles.includes(role))\r\n    },\r\n    [isSignedIn, user]\r\n  )\r\n\r\n  // Update auth state when Clerk state changes\r\n  useEffect(() => {\r\n    // If Clerk is still loading, don't update state yet\r\n    if (!clerkLoaded) return\r\n\r\n    setAuthState(prev => ({\r\n      ...prev,\r\n      isLoaded: true,\r\n      isSignedIn,\r\n      // Clear error state if authentication succeeds\r\n      ...(isSignedIn && { isError: false, errorMessage: null }),\r\n    }))\r\n  }, [clerkLoaded, isSignedIn])\r\n\r\n  // Handle offline/online status\r\n  useEffect(() => {\r\n    const handleOnline = () => {\r\n      // When coming back online, check if we had an error and retry\r\n      if (authState.isError) {\r\n        retryAuth()\r\n      }\r\n    }\r\n\r\n    const handleOffline = () => {\r\n      // When going offline, set an appropriate error message\r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        isError: true,\r\n        errorMessage: 'You are currently offline. Authentication services may be unavailable.',\r\n      }))\r\n    }\r\n\r\n    window.addEventListener('online', handleOnline)\r\n    window.addEventListener('offline', handleOffline)\r\n\r\n    return () => {\r\n      window.removeEventListener('online', handleOnline)\r\n      window.removeEventListener('offline', handleOffline)\r\n    }\r\n  }, [authState.isError, retryAuth])\r\n\r\n  // Context value\r\n  const contextValue: AuthContextType = {\r\n    authState,\r\n    user,\r\n    retryAuth,\r\n    signOut: handleSignOut,\r\n    isAuthorized,\r\n  }\r\n\r\n  return <AuthContext.Provider value={contextValue}>{children}</AuthContext.Provider>\r\n}\r\n\r\n// Enhanced ClerkProvider with error handling\r\nexport const EnhancedClerkProvider: React.FC<{\r\n  children: React.ReactNode\r\n  publishableKey?: string\r\n  appearance?: any\r\n}> = ({ children, publishableKey, appearance }) => {\r\n  return (\r\n    <ClerkProvider publishableKey={publishableKey} appearance={appearance}>\r\n      <AuthProvider>{children}</AuthProvider>\r\n    </ClerkProvider>\r\n  )\r\n}\r\n\r\n// Authentication required component\r\nexport const AuthRequired: React.FC<{\r\n  children: React.ReactNode\r\n  fallback?: React.ReactNode\r\n  requiredRoles?: string[]\r\n}> = ({ children, fallback, requiredRoles }) => {\r\n  const { authState, user, retryAuth, isAuthorized } = useAuthWrapper()\r\n\r\n  // If still loading, show loading state\r\n  if (!authState.isLoaded) {\r\n    return (\r\n      <div className=\"flex justify-center items-center min-h-screen\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-purple-700\"></div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // If authentication error, show error state with retry button\r\n  if (authState.isError) {\r\n    return (\r\n      <div className=\"flex flex-col justify-center items-center min-h-screen p-4\">\r\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-6 max-w-md text-center\">\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            className=\"h-12 w-12 text-red-500 mx-auto mb-4\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            stroke=\"currentColor\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth={2}\r\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"\r\n            />\r\n          </svg>\r\n          <h2 className=\"text-xl font-semibold text-red-700 mb-2\">Authentication Error</h2>\r\n          <p className=\"text-red-600 mb-4\">\r\n            {authState.errorMessage || 'There was a problem authenticating your account.'}\r\n          </p>\r\n          <button\r\n            onClick={retryAuth}\r\n            disabled={authState.isRetrying}\r\n            className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 disabled:opacity-50\"\r\n          >\r\n            {authState.isRetrying ? 'Retrying...' : 'Retry Authentication'}\r\n          </button>\r\n          <p className=\"mt-4 text-sm text-gray-600\">\r\n            If the problem persists, please try refreshing the page or contact support.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // If not signed in, show fallback or default message\r\n  if (!authState.isSignedIn) {\r\n    return (\r\n      <>\r\n        <SignedOut>\r\n          {fallback || (\r\n            <div className=\"flex flex-col justify-center items-center min-h-screen p-4\">\r\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-6 max-w-md text-center\">\r\n                <h2 className=\"text-xl font-semibold text-blue-700 mb-2\">\r\n                  Authentication Required\r\n                </h2>\r\n                <p className=\"text-blue-600 mb-4\">Please sign in to access this page.</p>\r\n                <a\r\n                  href=\"/sign-in\"\r\n                  className=\"inline-block px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\r\n                >\r\n                  Sign In\r\n                </a>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </SignedOut>\r\n      </>\r\n    )\r\n  }\r\n\r\n  // If roles are required but user doesn't have them\r\n  if (requiredRoles && requiredRoles.length > 0 && !isAuthorized(requiredRoles)) {\r\n    return (\r\n      <div className=\"flex flex-col justify-center items-center min-h-screen p-4\">\r\n        <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-6 max-w-md text-center\">\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            className=\"h-12 w-12 text-yellow-500 mx-auto mb-4\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            stroke=\"currentColor\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth={2}\r\n              d=\"M12 15v2m0 0v2m0-2h2m-2 0H9m3-3V9m0 0V7m0 2h2m-2 0H9\"\r\n            />\r\n          </svg>\r\n          <h2 className=\"text-xl font-semibold text-yellow-700 mb-2\">Access Denied</h2>\r\n          <p className=\"text-yellow-600 mb-4\">\r\n            You don't have the required permissions to access this page.\r\n          </p>\r\n          <a\r\n            href=\"/\"\r\n            className=\"inline-block px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2\"\r\n          >\r\n            Go to Home\r\n          </a>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // If signed in and authorized, show children\r\n  return <SignedIn>{children}</SignedIn>\r\n}\r\n\r\n// Export a hook for checking authorization\r\nexport const useAuthorization = () => {\r\n  const { isAuthorized } = useAuthWrapper()\r\n  return { isAuthorized }\r\n}\r\n\r\n// Export a hook for getting authentication state\r\nexport const useAuthentication = () => {\r\n  const { authState, user, retryAuth, signOut } = useAuthWrapper()\r\n  return {\r\n    isLoaded: authState.isLoaded,\r\n    isSignedIn: authState.isSignedIn,\r\n    isError: authState.isError,\r\n    errorMessage: authState.errorMessage,\r\n    isRetrying: authState.isRetrying,\r\n    user,\r\n    retryAuth,\r\n    signOut,\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\lib\\constants\\errorCodes.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\lib\\db.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-var",
        "severity": 2,
        "message": "Unexpected var, use let or const instead.",
        "line": 14,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "unexpectedVar",
        "endLine": 14,
        "endColumn": 39,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\lib\\db\\nextjs-utils.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'T' is defined but never used.",
        "line": 68,
        "column": 37,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 68,
        "endColumn": 38
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextRequest, NextResponse } from 'next/server'\r\n\r\n/**\r\n * HTTP status codes\r\n */\r\nexport enum HttpStatus {\r\n  OK = 200,\r\n  CREATED = 201,\r\n  BAD_REQUEST = 400,\r\n  UNAUTHORIZED = 401,\r\n  FORBIDDEN = 403,\r\n  NOT_FOUND = 404,\r\n  INTERNAL_SERVER_ERROR = 500,\r\n}\r\n\r\n/**\r\n * Standard API response format\r\n */\r\ninterface ApiResponse<T> {\r\n  success: boolean\r\n  data?: T\r\n  error?: {\r\n    code: string\r\n    message: string\r\n    details?: unknown\r\n  }\r\n  statusCode: number\r\n}\r\n\r\n/**\r\n * Creates a standardized success response\r\n */\r\nexport function successResponse<T>(data: T, statusCode: HttpStatus = HttpStatus.OK): NextResponse {\r\n  const response: ApiResponse<T> = {\r\n    success: true,\r\n    data,\r\n    statusCode,\r\n  }\r\n\r\n  return NextResponse.json(response, { status: statusCode })\r\n}\r\n\r\n/**\r\n * Creates a standardized error response\r\n */\r\nexport function errorResponse(\r\n  code: string,\r\n  message: string,\r\n  statusCode: HttpStatus = HttpStatus.BAD_REQUEST,\r\n  details?: unknown\r\n): NextResponse {\r\n  const response: ApiResponse<null> = {\r\n    success: false,\r\n    error: {\r\n      code,\r\n      message,\r\n      details,\r\n    },\r\n    statusCode,\r\n  }\r\n\r\n  return NextResponse.json(response, { status: statusCode })\r\n}\r\n\r\n/**\r\n * Higher-order function that wraps API handlers with database error handling\r\n */\r\nexport function withDatabaseHandler<T, Params extends unknown[] = []>(\r\n  handler: (req: NextRequest, ...args: Params) => Promise<NextResponse>\r\n) {\r\n  return async (req: NextRequest, ...args: Params): Promise<NextResponse> => {\r\n    try {\r\n      return await handler(req, ...args)\r\n    } catch (error) {\r\n      console.error('Database operation failed:', error)\r\n\r\n      return errorResponse(\r\n        'DATABASE_ERROR',\r\n        'An error occurred while processing your request',\r\n        HttpStatus.INTERNAL_SERVER_ERROR,\r\n        process.env.NODE_ENV === 'development' ? { error: String(error) } : undefined\r\n      )\r\n    }\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\lib\\db\\queries.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\lib\\env.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\lib\\helpers\\apiErrorHelpers.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 14,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 14,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [325, 328], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [325, 328], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 30,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 30,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [760, 763], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [760, 763], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 121,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 121,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4104, 4107], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4104, 4107], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 132,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 132,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4360, 4363], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4360, 4363], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextResponse } from 'next/server'\r\n\r\nimport { HttpStatus } from '../../lib/db/nextjs-utils'\r\nimport { ErrorCode, ErrorMessage } from '../constants/errorCodes'\r\n\r\n/**\r\n * Type for API error response\r\n */\r\ntype ApiErrorResponse = {\r\n  success: boolean\r\n  error: {\r\n    message: string\r\n    code: string\r\n    details?: any\r\n  }\r\n}\r\n\r\n/**\r\n * Create a standardized error response\r\n * @param message Error message\r\n * @param status HTTP status code\r\n * @param code Error code\r\n * @param details Optional error details\r\n * @returns NextResponse with standardized error format\r\n */\r\nexport function createErrorResponse(\r\n  message: string,\r\n  status: number = HttpStatus.INTERNAL_SERVER_ERROR,\r\n  code: string = ErrorCode.INTERNAL_SERVER_ERROR,\r\n  details?: any\r\n): NextResponse<ApiErrorResponse> {\r\n  return NextResponse.json(\r\n    {\r\n      success: false,\r\n      error: {\r\n        message,\r\n        code,\r\n        ...(details && { details }),\r\n      },\r\n    },\r\n    { status }\r\n  )\r\n}\r\n\r\n/**\r\n * Common error responses for API handlers\r\n */\r\nexport const ApiErrors = {\r\n  /**\r\n   * Property not found error with more descriptive message\r\n   */\r\n  propertyNotFound: (id?: string) =>\r\n    createErrorResponse(\r\n      id\r\n        ? `No property exists with the ID: ${id}. Please verify the ID and try again.`\r\n        : `Property not found. The requested property does not exist or has been removed.`,\r\n      HttpStatus.NOT_FOUND,\r\n      ErrorCode.PROPERTY_NOT_FOUND\r\n    ),\r\n\r\n  /**\r\n   * Missing parameter error with more descriptive messages\r\n   */\r\n  missingParameter: (paramName: string) => {\r\n    // Create more descriptive error messages based on the parameter name\r\n    let customMessage: string\r\n\r\n    if (paramName === 'id') {\r\n      customMessage = \"The 'id' parameter is required to identify the specific resource\"\r\n    } else if (paramName === 'uploadId') {\r\n      customMessage = \"The 'uploadId' parameter is required to filter properties by upload\"\r\n    } else if (paramName === 'id or uploadId') {\r\n      customMessage =\r\n        \"Either 'id' (for a single property) or 'uploadId' (for multiple properties) is required\"\r\n    } else {\r\n      customMessage = `${ErrorMessage[ErrorCode.MISSING_PARAMETER]}: ${paramName}`\r\n    }\r\n\r\n    return createErrorResponse(customMessage, HttpStatus.BAD_REQUEST, ErrorCode.MISSING_PARAMETER)\r\n  },\r\n\r\n  /**\r\n   * Invalid parameter error with more descriptive messages\r\n   */\r\n  invalidParameter: (paramName: string, reason?: string) => {\r\n    let message: string\r\n\r\n    if (paramName === 'query parameters' && reason?.includes('id OR uploadId')) {\r\n      message =\r\n        \"API request conflict: You cannot specify both 'id' and 'uploadId' parameters simultaneously. Please use only one of these parameters per request.\"\r\n    } else if (paramName.includes('price')) {\r\n      message = `Invalid price parameter: ${reason || 'Price must be a positive number'}`\r\n    } else if (paramName.includes('status')) {\r\n      message = `Invalid status value: ${reason || 'Status must be one of: available, pending, sold'}`\r\n    } else {\r\n      message = `${ErrorMessage[ErrorCode.INVALID_PARAMETER]}: ${paramName}${reason ? ` - ${reason}` : ''}`\r\n    }\r\n\r\n    return createErrorResponse(message, HttpStatus.BAD_REQUEST, ErrorCode.INVALID_PARAMETER)\r\n  },\r\n\r\n  /**\r\n   * Invalid ID format error with more descriptive message and examples\r\n   */\r\n  invalidIdFormat: (id: string, expectedFormat: string = 'UUID') => {\r\n    let message = `${ErrorMessage[ErrorCode.INVALID_ID_FORMAT]}: \"${id}\" is not a valid ${expectedFormat}`\r\n\r\n    // Add helpful examples based on the expected format\r\n    if (expectedFormat.toLowerCase() === 'uuid') {\r\n      message += `. UUID must be in format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx (e.g., 123e4567-e89b-12d3-a456-426614174000)`\r\n    } else if (expectedFormat.toLowerCase() === 'integer') {\r\n      message += `. Expected a numeric value (e.g., 1234)`\r\n    }\r\n\r\n    return createErrorResponse(message, HttpStatus.BAD_REQUEST, ErrorCode.INVALID_ID_FORMAT)\r\n  },\r\n\r\n  /**\r\n   * Validation error\r\n   */\r\n  validationError: (details: any) =>\r\n    createErrorResponse(\r\n      ErrorMessage[ErrorCode.VALIDATION_ERROR],\r\n      HttpStatus.BAD_REQUEST,\r\n      ErrorCode.VALIDATION_ERROR,\r\n      details\r\n    ),\r\n\r\n  /**\r\n   * Database error\r\n   */\r\n  databaseError: (message?: string, details?: any) =>\r\n    createErrorResponse(\r\n      message || ErrorMessage[ErrorCode.DATABASE_ERROR],\r\n      HttpStatus.INTERNAL_SERVER_ERROR,\r\n      ErrorCode.DATABASE_ERROR,\r\n      details\r\n    ),\r\n\r\n  /**\r\n   * Unauthorized error (authentication required)\r\n   */\r\n  unauthorized: (message?: string) =>\r\n    createErrorResponse(\r\n      message || ErrorMessage[ErrorCode.UNAUTHORIZED],\r\n      HttpStatus.UNAUTHORIZED,\r\n      ErrorCode.UNAUTHORIZED\r\n    ),\r\n\r\n  /**\r\n   * Forbidden error (insufficient permissions)\r\n   */\r\n  forbidden: (message?: string) =>\r\n    createErrorResponse(\r\n      message || ErrorMessage[ErrorCode.FORBIDDEN],\r\n      HttpStatus.FORBIDDEN,\r\n      ErrorCode.FORBIDDEN\r\n    ),\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\lib\\helpers\\validationHelpers.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\lib\\logging\\fixed-logger.ts",
    "messages": [
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'LogLevel'.",
        "line": 23,
        "column": 13,
        "nodeType": "Identifier",
        "endLine": 23,
        "endColumn": 21
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'configureLogger'.",
        "line": 94,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 94,
        "endColumn": 32
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'setLogUser'.",
        "line": 258,
        "column": 23,
        "nodeType": "Identifier",
        "endLine": 258,
        "endColumn": 33
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'setRequestId'.",
        "line": 284,
        "column": 23,
        "nodeType": "Identifier",
        "endLine": 284,
        "endColumn": 35
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'debug'.",
        "line": 457,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 457,
        "endColumn": 22
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'info'.",
        "line": 464,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 464,
        "endColumn": 21
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'warn'.",
        "line": 471,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 471,
        "endColumn": 21
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'error'.",
        "line": 478,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 478,
        "endColumn": 22
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'fatal'.",
        "line": 490,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 490,
        "endColumn": 22
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple default exports.",
        "line": 511,
        "column": 1,
        "nodeType": "ExportDefaultDeclaration",
        "endLine": 511,
        "endColumn": 22
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'LogLevel'.",
        "line": 533,
        "column": 13,
        "nodeType": "Identifier",
        "endLine": 533,
        "endColumn": 21
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'configureLogger'.",
        "line": 604,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 604,
        "endColumn": 32
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'setLogUser'.",
        "line": 768,
        "column": 23,
        "nodeType": "Identifier",
        "endLine": 768,
        "endColumn": 33
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'setRequestId'.",
        "line": 794,
        "column": 23,
        "nodeType": "Identifier",
        "endLine": 794,
        "endColumn": 35
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'debug'.",
        "line": 967,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 967,
        "endColumn": 22
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'info'.",
        "line": 974,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 974,
        "endColumn": 21
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'warn'.",
        "line": 981,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 981,
        "endColumn": 21
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'error'.",
        "line": 988,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 988,
        "endColumn": 22
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'fatal'.",
        "line": 1000,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 1000,
        "endColumn": 22
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple default exports.",
        "line": 1021,
        "column": 1,
        "nodeType": "ExportDefaultDeclaration",
        "endLine": 1021,
        "endColumn": 22
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'LogLevel'.",
        "line": 1043,
        "column": 13,
        "nodeType": "Identifier",
        "endLine": 1043,
        "endColumn": 21
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'configureLogger'.",
        "line": 1114,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 1114,
        "endColumn": 32
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'setLogUser'.",
        "line": 1278,
        "column": 23,
        "nodeType": "Identifier",
        "endLine": 1278,
        "endColumn": 33
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'setRequestId'.",
        "line": 1304,
        "column": 23,
        "nodeType": "Identifier",
        "endLine": 1304,
        "endColumn": 35
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'debug'.",
        "line": 1477,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 1477,
        "endColumn": 22
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'info'.",
        "line": 1484,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 1484,
        "endColumn": 21
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'warn'.",
        "line": 1491,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 1491,
        "endColumn": 21
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'error'.",
        "line": 1498,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 1498,
        "endColumn": 22
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'fatal'.",
        "line": 1510,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 1510,
        "endColumn": 22
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple default exports.",
        "line": 1531,
        "column": 1,
        "nodeType": "ExportDefaultDeclaration",
        "endLine": 1531,
        "endColumn": 22
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'LogLevel'.",
        "line": 1553,
        "column": 13,
        "nodeType": "Identifier",
        "endLine": 1553,
        "endColumn": 21
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'configureLogger'.",
        "line": 1624,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 1624,
        "endColumn": 32
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'setLogUser'.",
        "line": 1788,
        "column": 23,
        "nodeType": "Identifier",
        "endLine": 1788,
        "endColumn": 33
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'setRequestId'.",
        "line": 1814,
        "column": 23,
        "nodeType": "Identifier",
        "endLine": 1814,
        "endColumn": 35
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'debug'.",
        "line": 1987,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 1987,
        "endColumn": 22
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'info'.",
        "line": 1994,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 1994,
        "endColumn": 21
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'warn'.",
        "line": 2001,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 2001,
        "endColumn": 21
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'error'.",
        "line": 2008,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 2008,
        "endColumn": 22
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'fatal'.",
        "line": 2020,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 2020,
        "endColumn": 22
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple default exports.",
        "line": 2041,
        "column": 1,
        "nodeType": "ExportDefaultDeclaration",
        "endLine": 2041,
        "endColumn": 22
      }
    ],
    "suppressedMessages": [],
    "errorCount": 40,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/logging/fixed-logger.ts\n\n/**\n * Sensitive fields that should never be logged\n * Add any field names that might contain sensitive information\n */\nconst SENSITIVE_FIELDS = [\n  'password',\n  'token',\n  'secret',\n  'authorization',\n  'apiKey',\n  'api_key',\n  'key',\n  'credential',\n  'ssn',\n  'socialSecurity',\n  'creditCard',\n  'cardNumber',\n  'cvv',\n]\n\nexport enum LogLevel {\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n  FATAL = 'fatal',\n}\n\ninterface LoggerConfig {\n  enableConsole?: boolean\n  minLevel?: LogLevel\n  sentryDsn?: string\n  logRocketAppId?: string\n  userId?: string\n  userEmail?: string\n  requestId?: string\n  release?: string\n  environment?: 'development' | 'test' | 'production'\n}\n\n/**\n * Sanitize an object to remove sensitive data before logging\n * @param obj The object to sanitize\n * @returns A sanitized copy of the object\n */\nfunction sanitizeForLogging(obj: unknown): unknown {\n  if (!obj || typeof obj !== 'object') {\n    return obj\n  }\n\n  // Handle arrays\n  if (Array.isArray(obj)) {\n    return obj.map(item => sanitizeForLogging(item))\n  }\n\n  // Handle objects\n  const sanitized = { ...obj }\n  for (const key in sanitized) {\n    const lowerKey = key.toLowerCase()\n\n    // Check if this key contains any sensitive terms\n    if (SENSITIVE_FIELDS.some(field => lowerKey.includes(field.toLowerCase()))) {\n      sanitized[key] = '[REDACTED]'\n    } else if (typeof sanitized[key] === 'object' && sanitized[key] !== null) {\n      // Recursively sanitize nested objects\n      sanitized[key] = sanitizeForLogging(sanitized[key])\n    }\n  }\n\n  return sanitized\n}\n\nconst defaultConfig: LoggerConfig = {\n  enableConsole: true,\n  // Set different default log levels based on environment\n  minLevel: process.env.NODE_ENV === 'production' ? LogLevel.WARN : LogLevel.DEBUG,\n  environment:\n    (process.env.NODE_ENV as unknown as 'development' | 'test' | 'production') || 'development',\n  release: process.env.NEXT_PUBLIC_APP_VERSION,\n}\n\n// Global logger configuration\n// TODO: Consider refactoring to use a class or singleton pattern if this module grows more complex\n// This would help encapsulate state and provide better testability\nlet loggerConfig: LoggerConfig = { ...defaultConfig }\nlet sentryInitialized = false\nlet logRocketInitialized = false\n\n/**\n * Configure the logger\n */\nexport function configureLogger(config: Partial<LoggerConfig>) {\n  loggerConfig = { ...loggerConfig, ...config }\n\n  // Use environment variables for secrets if not explicitly provided\n  const sentryDsn = loggerConfig.sentryDsn || process.env.NEXT_PUBLIC_SENTRY_DSN\n  const logRocketAppId = loggerConfig.logRocketAppId || process.env.NEXT_PUBLIC_LOGROCKET_APP_ID\n\n  // Initialize external logging services if configured\n  if (sentryDsn && typeof window !== 'undefined') {\n    initSentry(sentryDsn, loggerConfig)\n  }\n\n  if (logRocketAppId && typeof window !== 'undefined') {\n    initLogRocket(logRocketAppId, loggerConfig)\n  }\n\n  // In production, ensure we're not logging too verbosely\n  if (process.env.NODE_ENV === 'production' && !config.minLevel) {\n    loggerConfig.minLevel = LogLevel.WARN\n  }\n}\n\n/**\n * Initialize Sentry for error tracking\n * @returns The Sentry instance if initialization was successful, null otherwise\n */\nasync function initSentry(dsn: string, config: LoggerConfig) {\n  // Skip initialization if already initialized or if dsn is missing/empty\n  if (sentryInitialized) {\n    console.warn('Sentry already initialized, skipping initialization')\n    return\n  }\n\n  if (!dsn || dsn.trim() === '') {\n    console.warn('Sentry DSN is empty or missing, skipping initialization')\n    return null\n  }\n\n  try {\n    const Sentry = await import('@sentry/nextjs')\n\n    Sentry.init({\n      dsn,\n      environment: config.environment,\n      release: config.release,\n      tracesSampleRate: config.environment === 'production' ? 0.2 : 1.0,\n    })\n\n    // Set user information if available\n    if (config.userId || config.userEmail) {\n      Sentry.setUser({\n        id: config.userId,\n        email: config.userEmail,\n      })\n    }\n\n    sentryInitialized = true\n    return Sentry\n  } catch (error) {\n    console.error('Failed to initialize Sentry:', error)\n    // Log detailed error information to help with debugging\n    if (error instanceof Error) {\n      console.error(`Sentry initialization error: ${error.name}: ${error.message}`)\n      if (error.stack) console.error(`Stack trace: ${error.stack}`)\n    }\n    // Log environment information to help diagnose deployment issues\n    console.error(`Environment: ${process.env.NODE_ENV}, Release: ${config.release}`)\n    return null\n  }\n}\n\n/**\n * Initialize LogRocket for session replay\n * @returns The LogRocket instance if initialization was successful, null otherwise\n */\nasync function initLogRocket(appId: string, config: LoggerConfig) {\n  // Skip initialization if already initialized or if appId is missing/empty\n  if (logRocketInitialized) {\n    console.warn('LogRocket already initialized, skipping initialization')\n    return\n  }\n\n  if (!appId || appId.trim() === '') {\n    console.warn('LogRocket App ID is empty or missing, skipping initialization')\n    return null\n  }\n\n  try {\n    const LogRocket = (await import('logrocket')).default\n\n    LogRocket.init(appId, {\n      release: config.release,\n      console: {\n        isEnabled: {\n          error: true,\n          warn: true,\n        },\n      },\n      network: {\n        isEnabled: true,\n        requestSanitizer: request => {\n          // Don't log request bodies for sensitive endpoints\n          if (request.url.includes('/api/auth') || request.url.includes('/api/user')) {\n            request.body = null\n          }\n          return request\n        },\n        responseSanitizer: response => {\n          // Don't log response bodies for sensitive endpoints\n          if (response.url.includes('/api/auth') || response.url.includes('/api/user')) {\n            response.body = null\n          }\n          return response\n        },\n      },\n    })\n\n    // Set user information if available\n    if (config.userId || config.userEmail) {\n      LogRocket.identify(config.userId || 'anonymous', {\n        email: config.userEmail,\n      })\n    }\n\n    // Connect LogRocket with Sentry if both are enabled\n    if (sentryInitialized) {\n      const Sentry = await import('@sentry/nextjs')\n      LogRocket.getSessionURL(sessionURL => {\n        Sentry.configureScope(scope => {\n          scope.setExtra('logRocketSessionURL', sessionURL)\n\n          // Add request ID to Sentry scope if available\n          if (loggerConfig.requestId) {\n            scope.setTag('requestId', loggerConfig.requestId)\n          }\n        })\n      })\n    }\n\n    // Add request ID to LogRocket metadata if available\n    if (loggerConfig.requestId) {\n      LogRocket.setMeta('requestId', loggerConfig.requestId)\n    }\n\n    logRocketInitialized = true\n    return LogRocket\n  } catch (error) {\n    console.error('Failed to initialize LogRocket:', error)\n    // Log detailed error information to help with debugging\n    if (error instanceof Error) {\n      console.error(`LogRocket initialization error: ${error.name}: ${error.message}`)\n      if (error.stack) console.error(`Stack trace: ${error.stack}`)\n    }\n    // Log environment information to help diagnose deployment issues\n    console.error(\n      `Environment: ${process.env.NODE_ENV}, Release: ${config.release}, AppId: ${appId}`\n    )\n    return null\n  }\n}\n\n/**\n * Set user information for logging\n */\nexport async function setLogUser(userId?: string, userEmail?: string) {\n  loggerConfig.userId = userId\n  loggerConfig.userEmail = userEmail\n\n  // Update user information in external services\n  if (sentryInitialized) {\n    const Sentry = await import('@sentry/nextjs')\n    Sentry.setUser({\n      id: userId,\n      email: userEmail,\n    })\n  }\n\n  if (logRocketInitialized && typeof window !== 'undefined') {\n    const LogRocket = (await import('logrocket')).default\n    LogRocket.identify(userId || 'anonymous', {\n      email: userEmail,\n    })\n  }\n}\n\n/**\n * Set request ID for logging\n * This is useful for tracking logs across a single request lifecycle\n * and correlating logs between different services\n */\nexport async function setRequestId(requestId: string) {\n  loggerConfig.requestId = requestId\n\n  // Update request ID in external services\n  if (sentryInitialized && typeof window !== 'undefined') {\n    try {\n      const Sentry = await import('@sentry/nextjs')\n      Sentry.configureScope(scope => {\n        scope.setTag('requestId', requestId)\n      })\n    } catch (err) {\n      console.error('Failed to set request ID in Sentry:', err)\n    }\n  }\n\n  if (logRocketInitialized && typeof window !== 'undefined') {\n    try {\n      const LogRocket = (await import('logrocket')).default\n      LogRocket.setMeta('requestId', requestId)\n    } catch (err) {\n      console.error('Failed to set request ID in LogRocket:', err)\n    }\n  }\n}\n\n/**\n * Log a message with the specified level\n */\nasync function log(\n  level: LogLevel,\n  message: string,\n  context?: Record<string, unknown>,\n  tags?: string[],\n  error?: Error\n) {\n  // Skip if below minimum log level\n  if (loggerConfig.minLevel && shouldSkipLog(level, loggerConfig.minLevel)) {\n    return\n  }\n\n  // Enhance context with requestId and userId if available in config\n  const enhancedContext = sanitizeForLogging({\n    ...(context || {}),\n    ...(loggerConfig.requestId ? { requestId: loggerConfig.requestId } : {}),\n    ...(loggerConfig.userId ? { userId: loggerConfig.userId } : {}),\n  })\n\n  // Log to console if enabled\n  if (loggerConfig.enableConsole !== false) {\n    logToConsole(level, message, enhancedContext, tags, error)\n  }\n\n  // Log to external services\n  await logToExternalServices(level, message, enhancedContext, tags, error)\n}\n\n/**\n * Determine if a log should be skipped based on minimum level\n */\nfunction shouldSkipLog(level: LogLevel, minLevel: LogLevel): boolean {\n  const levels = [LogLevel.DEBUG, LogLevel.INFO, LogLevel.WARN, LogLevel.ERROR, LogLevel.FATAL]\n  const levelIndex = levels.indexOf(level)\n  const minLevelIndex = levels.indexOf(minLevel)\n\n  return levelIndex < minLevelIndex\n}\n\n/**\n * Log to the console with appropriate formatting\n */\nfunction logToConsole(\n  level: LogLevel,\n  message: string,\n  context?: Record<string, unknown>,\n  tags?: string[],\n  error?: Error\n) {\n  const timestamp = new Date().toISOString()\n  const formattedMessage = `[${timestamp}] [${level.toUpperCase()}] ${message}`\n  const logData = { ...(context || {}), tags }\n\n  // Use the appropriate console method based on level\n  switch (level) {\n    case LogLevel.DEBUG:\n      console.warn(`[DEBUG] ${formattedMessage}`, logData)\n      break\n    case LogLevel.INFO:\n      console.warn(`[INFO] ${formattedMessage}`, logData)\n      break\n    case LogLevel.WARN:\n      console.warn(`[WARN] ${formattedMessage}`, logData)\n      break\n    case LogLevel.ERROR:\n    case LogLevel.FATAL:\n      console.error(formattedMessage, error || '', logData)\n      break\n  }\n}\n\n/**\n * Log to external services like Sentry and LogRocket\n */\nasync function logToExternalServices(\n  level: LogLevel,\n  message: string,\n  context?: Record<string, unknown>,\n  tags?: string[],\n  error?: Error\n) {\n  // Send to Sentry if configured and level is ERROR or FATAL\n  if (sentryInitialized && (level === LogLevel.ERROR || level === LogLevel.FATAL)) {\n    try {\n      const Sentry = await import('@sentry/nextjs')\n\n      // Set extra context\n      Sentry.configureScope(scope => {\n        if (context) {\n          Object.entries(context).forEach(([key, value]) => {\n            scope.setExtra(key, value)\n          })\n        }\n\n        if (tags) {\n          tags.forEach(tag => {\n            scope.setTag(tag, 'true')\n          })\n        }\n      })\n\n      // Capture the error or message\n      if (error) {\n        Sentry.captureException(error)\n      } else {\n        Sentry.captureMessage(message, level)\n      }\n    } catch (err) {\n      console.error('Failed to log to Sentry:', err)\n      if (err instanceof Error) {\n        console.error(`Sentry logging error: ${err.name}: ${err.message}`)\n        // Don't log stack trace here to avoid recursive error logging\n      }\n    }\n  }\n\n  // Send to LogRocket if configured\n  if (logRocketInitialized) {\n    try {\n      const LogRocket = (await import('logrocket')).default\n\n      // Log the message\n      if (level === LogLevel.ERROR || level === LogLevel.FATAL) {\n        LogRocket.captureException(error || new Error(message), {\n          tags: tags?.reduce((acc, tag) => ({ ...acc, [tag]: true }), {}),\n          extra: context,\n        })\n      } else if (level === LogLevel.WARN) {\n        LogRocket.warn(message, context)\n      } else {\n        LogRocket.log(message, context)\n      }\n    } catch (err) {\n      console.error('Failed to log to LogRocket:', err)\n      if (err instanceof Error) {\n        console.error(`LogRocket logging error: ${err.name}: ${err.message}`)\n        // Don't log stack trace here to avoid recursive error logging\n      }\n    }\n  }\n}\n\n/**\n * Log a debug message\n */\nexport function debug(message: string, context?: Record<string, unknown>, tags?: string[]) {\n  log(LogLevel.DEBUG, message, context, tags)\n}\n\n/**\n * Log an info message\n */\nexport function info(message: string, context?: Record<string, unknown>, tags?: string[]) {\n  log(LogLevel.INFO, message, context, tags)\n}\n\n/**\n * Log a warning message\n */\nexport function warn(message: string, context?: Record<string, unknown>, tags?: string[]) {\n  log(LogLevel.WARN, message, context, tags)\n}\n\n/**\n * Log an error message\n */\nexport function error(\n  message: string,\n  errorObj?: Error,\n  context?: Record<string, unknown>,\n  tags?: string[]\n) {\n  log(LogLevel.ERROR, message, context, tags, errorObj)\n}\n\n/**\n * Log a fatal error message\n */\nexport function fatal(\n  message: string,\n  errorObj?: Error,\n  context?: Record<string, unknown>,\n  tags?: string[]\n) {\n  log(LogLevel.FATAL, message, context, tags, errorObj)\n}\n\n// Export a default logger object\nconst logger = {\n  debug,\n  info,\n  warn,\n  error,\n  fatal,\n  configureLogger,\n  setLogUser,\n  setRequestId,\n}\n\nexport default logger // lib/logging/fixed-logger.ts\n\n/**\n * Sensitive fields that should never be logged\n * Add any field names that might contain sensitive information\n */\nconst SENSITIVE_FIELDS = [\n  'password',\n  'token',\n  'secret',\n  'authorization',\n  'apiKey',\n  'api_key',\n  'key',\n  'credential',\n  'ssn',\n  'socialSecurity',\n  'creditCard',\n  'cardNumber',\n  'cvv',\n]\n\nexport enum LogLevel {\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n  FATAL = 'fatal',\n}\n\ninterface LoggerConfig {\n  enableConsole?: boolean\n  minLevel?: LogLevel\n  sentryDsn?: string\n  logRocketAppId?: string\n  userId?: string\n  userEmail?: string\n  requestId?: string\n  release?: string\n  environment?: 'development' | 'test' | 'production'\n}\n\n/**\n * Sanitize an object to remove sensitive data before logging\n * @param obj The object to sanitize\n * @returns A sanitized copy of the object\n */\nfunction sanitizeForLogging(obj: unknown): unknown {\n  if (!obj || typeof obj !== 'object') {\n    return obj\n  }\n\n  // Handle arrays\n  if (Array.isArray(obj)) {\n    return obj.map(item => sanitizeForLogging(item))\n  }\n\n  // Handle objects\n  const sanitized = { ...obj }\n  for (const key in sanitized) {\n    const lowerKey = key.toLowerCase()\n\n    // Check if this key contains any sensitive terms\n    if (SENSITIVE_FIELDS.some(field => lowerKey.includes(field.toLowerCase()))) {\n      sanitized[key] = '[REDACTED]'\n    } else if (typeof sanitized[key] === 'object' && sanitized[key] !== null) {\n      // Recursively sanitize nested objects\n      sanitized[key] = sanitizeForLogging(sanitized[key])\n    }\n  }\n\n  return sanitized\n}\n\nconst defaultConfig: LoggerConfig = {\n  enableConsole: true,\n  // Set different default log levels based on environment\n  minLevel: process.env.NODE_ENV === 'production' ? LogLevel.WARN : LogLevel.DEBUG,\n  environment:\n    (process.env.NODE_ENV as unknown as 'development' | 'test' | 'production') || 'development',\n  release: process.env.NEXT_PUBLIC_APP_VERSION,\n}\n\n// Global logger configuration\n// TODO: Consider refactoring to use a class or singleton pattern if this module grows more complex\n// This would help encapsulate state and provide better testability\nlet loggerConfig: LoggerConfig = { ...defaultConfig }\nlet sentryInitialized = false\nlet logRocketInitialized = false\n\n/**\n * Configure the logger\n */\nexport function configureLogger(config: Partial<LoggerConfig>) {\n  loggerConfig = { ...loggerConfig, ...config }\n\n  // Use environment variables for secrets if not explicitly provided\n  const sentryDsn = loggerConfig.sentryDsn || process.env.NEXT_PUBLIC_SENTRY_DSN\n  const logRocketAppId = loggerConfig.logRocketAppId || process.env.NEXT_PUBLIC_LOGROCKET_APP_ID\n\n  // Initialize external logging services if configured\n  if (sentryDsn && typeof window !== 'undefined') {\n    initSentry(sentryDsn, loggerConfig)\n  }\n\n  if (logRocketAppId && typeof window !== 'undefined') {\n    initLogRocket(logRocketAppId, loggerConfig)\n  }\n\n  // In production, ensure we're not logging too verbosely\n  if (process.env.NODE_ENV === 'production' && !config.minLevel) {\n    loggerConfig.minLevel = LogLevel.WARN\n  }\n}\n\n/**\n * Initialize Sentry for error tracking\n * @returns The Sentry instance if initialization was successful, null otherwise\n */\nasync function initSentry(dsn: string, config: LoggerConfig) {\n  // Skip initialization if already initialized or if dsn is missing/empty\n  if (sentryInitialized) {\n    console.warn('Sentry already initialized, skipping initialization')\n    return\n  }\n\n  if (!dsn || dsn.trim() === '') {\n    console.warn('Sentry DSN is empty or missing, skipping initialization')\n    return null\n  }\n\n  try {\n    const Sentry = await import('@sentry/nextjs')\n\n    Sentry.init({\n      dsn,\n      environment: config.environment,\n      release: config.release,\n      tracesSampleRate: config.environment === 'production' ? 0.2 : 1.0,\n    })\n\n    // Set user information if available\n    if (config.userId || config.userEmail) {\n      Sentry.setUser({\n        id: config.userId,\n        email: config.userEmail,\n      })\n    }\n\n    sentryInitialized = true\n    return Sentry\n  } catch (error) {\n    console.error('Failed to initialize Sentry:', error)\n    // Log detailed error information to help with debugging\n    if (error instanceof Error) {\n      console.error(`Sentry initialization error: ${error.name}: ${error.message}`)\n      if (error.stack) console.error(`Stack trace: ${error.stack}`)\n    }\n    // Log environment information to help diagnose deployment issues\n    console.error(`Environment: ${process.env.NODE_ENV}, Release: ${config.release}`)\n    return null\n  }\n}\n\n/**\n * Initialize LogRocket for session replay\n * @returns The LogRocket instance if initialization was successful, null otherwise\n */\nasync function initLogRocket(appId: string, config: LoggerConfig) {\n  // Skip initialization if already initialized or if appId is missing/empty\n  if (logRocketInitialized) {\n    console.warn('LogRocket already initialized, skipping initialization')\n    return\n  }\n\n  if (!appId || appId.trim() === '') {\n    console.warn('LogRocket App ID is empty or missing, skipping initialization')\n    return null\n  }\n\n  try {\n    const LogRocket = (await import('logrocket')).default\n\n    LogRocket.init(appId, {\n      release: config.release,\n      console: {\n        isEnabled: {\n          error: true,\n          warn: true,\n        },\n      },\n      network: {\n        isEnabled: true,\n        requestSanitizer: request => {\n          // Don't log request bodies for sensitive endpoints\n          if (request.url.includes('/api/auth') || request.url.includes('/api/user')) {\n            request.body = null\n          }\n          return request\n        },\n        responseSanitizer: response => {\n          // Don't log response bodies for sensitive endpoints\n          if (response.url.includes('/api/auth') || response.url.includes('/api/user')) {\n            response.body = null\n          }\n          return response\n        },\n      },\n    })\n\n    // Set user information if available\n    if (config.userId || config.userEmail) {\n      LogRocket.identify(config.userId || 'anonymous', {\n        email: config.userEmail,\n      })\n    }\n\n    // Connect LogRocket with Sentry if both are enabled\n    if (sentryInitialized) {\n      const Sentry = await import('@sentry/nextjs')\n      LogRocket.getSessionURL(sessionURL => {\n        Sentry.configureScope(scope => {\n          scope.setExtra('logRocketSessionURL', sessionURL)\n\n          // Add request ID to Sentry scope if available\n          if (loggerConfig.requestId) {\n            scope.setTag('requestId', loggerConfig.requestId)\n          }\n        })\n      })\n    }\n\n    // Add request ID to LogRocket metadata if available\n    if (loggerConfig.requestId) {\n      LogRocket.setMeta('requestId', loggerConfig.requestId)\n    }\n\n    logRocketInitialized = true\n    return LogRocket\n  } catch (error) {\n    console.error('Failed to initialize LogRocket:', error)\n    // Log detailed error information to help with debugging\n    if (error instanceof Error) {\n      console.error(`LogRocket initialization error: ${error.name}: ${error.message}`)\n      if (error.stack) console.error(`Stack trace: ${error.stack}`)\n    }\n    // Log environment information to help diagnose deployment issues\n    console.error(\n      `Environment: ${process.env.NODE_ENV}, Release: ${config.release}, AppId: ${appId}`\n    )\n    return null\n  }\n}\n\n/**\n * Set user information for logging\n */\nexport async function setLogUser(userId?: string, userEmail?: string) {\n  loggerConfig.userId = userId\n  loggerConfig.userEmail = userEmail\n\n  // Update user information in external services\n  if (sentryInitialized) {\n    const Sentry = await import('@sentry/nextjs')\n    Sentry.setUser({\n      id: userId,\n      email: userEmail,\n    })\n  }\n\n  if (logRocketInitialized && typeof window !== 'undefined') {\n    const LogRocket = (await import('logrocket')).default\n    LogRocket.identify(userId || 'anonymous', {\n      email: userEmail,\n    })\n  }\n}\n\n/**\n * Set request ID for logging\n * This is useful for tracking logs across a single request lifecycle\n * and correlating logs between different services\n */\nexport async function setRequestId(requestId: string) {\n  loggerConfig.requestId = requestId\n\n  // Update request ID in external services\n  if (sentryInitialized && typeof window !== 'undefined') {\n    try {\n      const Sentry = await import('@sentry/nextjs')\n      Sentry.configureScope(scope => {\n        scope.setTag('requestId', requestId)\n      })\n    } catch (err) {\n      console.error('Failed to set request ID in Sentry:', err)\n    }\n  }\n\n  if (logRocketInitialized && typeof window !== 'undefined') {\n    try {\n      const LogRocket = (await import('logrocket')).default\n      LogRocket.setMeta('requestId', requestId)\n    } catch (err) {\n      console.error('Failed to set request ID in LogRocket:', err)\n    }\n  }\n}\n\n/**\n * Log a message with the specified level\n */\nasync function log(\n  level: LogLevel,\n  message: string,\n  context?: Record<string, unknown>,\n  tags?: string[],\n  error?: Error\n) {\n  // Skip if below minimum log level\n  if (loggerConfig.minLevel && shouldSkipLog(level, loggerConfig.minLevel)) {\n    return\n  }\n\n  // Enhance context with requestId and userId if available in config\n  const enhancedContext = sanitizeForLogging({\n    ...(context || {}),\n    ...(loggerConfig.requestId ? { requestId: loggerConfig.requestId } : {}),\n    ...(loggerConfig.userId ? { userId: loggerConfig.userId } : {}),\n  })\n\n  // Log to console if enabled\n  if (loggerConfig.enableConsole !== false) {\n    logToConsole(level, message, enhancedContext, tags, error)\n  }\n\n  // Log to external services\n  await logToExternalServices(level, message, enhancedContext, tags, error)\n}\n\n/**\n * Determine if a log should be skipped based on minimum level\n */\nfunction shouldSkipLog(level: LogLevel, minLevel: LogLevel): boolean {\n  const levels = [LogLevel.DEBUG, LogLevel.INFO, LogLevel.WARN, LogLevel.ERROR, LogLevel.FATAL]\n  const levelIndex = levels.indexOf(level)\n  const minLevelIndex = levels.indexOf(minLevel)\n\n  return levelIndex < minLevelIndex\n}\n\n/**\n * Log to the console with appropriate formatting\n */\nfunction logToConsole(\n  level: LogLevel,\n  message: string,\n  context?: Record<string, unknown>,\n  tags?: string[],\n  error?: Error\n) {\n  const timestamp = new Date().toISOString()\n  const formattedMessage = `[${timestamp}] [${level.toUpperCase()}] ${message}`\n  const logData = { ...(context || {}), tags }\n\n  // Use the appropriate console method based on level\n  switch (level) {\n    case LogLevel.DEBUG:\n      console.warn(`[DEBUG] ${formattedMessage}`, logData)\n      break\n    case LogLevel.INFO:\n      console.warn(`[INFO] ${formattedMessage}`, logData)\n      break\n    case LogLevel.WARN:\n      console.warn(`[WARN] ${formattedMessage}`, logData)\n      break\n    case LogLevel.ERROR:\n    case LogLevel.FATAL:\n      console.error(formattedMessage, error || '', logData)\n      break\n  }\n}\n\n/**\n * Log to external services like Sentry and LogRocket\n */\nasync function logToExternalServices(\n  level: LogLevel,\n  message: string,\n  context?: Record<string, unknown>,\n  tags?: string[],\n  error?: Error\n) {\n  // Send to Sentry if configured and level is ERROR or FATAL\n  if (sentryInitialized && (level === LogLevel.ERROR || level === LogLevel.FATAL)) {\n    try {\n      const Sentry = await import('@sentry/nextjs')\n\n      // Set extra context\n      Sentry.configureScope(scope => {\n        if (context) {\n          Object.entries(context).forEach(([key, value]) => {\n            scope.setExtra(key, value)\n          })\n        }\n\n        if (tags) {\n          tags.forEach(tag => {\n            scope.setTag(tag, 'true')\n          })\n        }\n      })\n\n      // Capture the error or message\n      if (error) {\n        Sentry.captureException(error)\n      } else {\n        Sentry.captureMessage(message, level)\n      }\n    } catch (err) {\n      console.error('Failed to log to Sentry:', err)\n      if (err instanceof Error) {\n        console.error(`Sentry logging error: ${err.name}: ${err.message}`)\n        // Don't log stack trace here to avoid recursive error logging\n      }\n    }\n  }\n\n  // Send to LogRocket if configured\n  if (logRocketInitialized) {\n    try {\n      const LogRocket = (await import('logrocket')).default\n\n      // Log the message\n      if (level === LogLevel.ERROR || level === LogLevel.FATAL) {\n        LogRocket.captureException(error || new Error(message), {\n          tags: tags?.reduce((acc, tag) => ({ ...acc, [tag]: true }), {}),\n          extra: context,\n        })\n      } else if (level === LogLevel.WARN) {\n        LogRocket.warn(message, context)\n      } else {\n        LogRocket.log(message, context)\n      }\n    } catch (err) {\n      console.error('Failed to log to LogRocket:', err)\n      if (err instanceof Error) {\n        console.error(`LogRocket logging error: ${err.name}: ${err.message}`)\n        // Don't log stack trace here to avoid recursive error logging\n      }\n    }\n  }\n}\n\n/**\n * Log a debug message\n */\nexport function debug(message: string, context?: Record<string, unknown>, tags?: string[]) {\n  log(LogLevel.DEBUG, message, context, tags)\n}\n\n/**\n * Log an info message\n */\nexport function info(message: string, context?: Record<string, unknown>, tags?: string[]) {\n  log(LogLevel.INFO, message, context, tags)\n}\n\n/**\n * Log a warning message\n */\nexport function warn(message: string, context?: Record<string, unknown>, tags?: string[]) {\n  log(LogLevel.WARN, message, context, tags)\n}\n\n/**\n * Log an error message\n */\nexport function error(\n  message: string,\n  errorObj?: Error,\n  context?: Record<string, unknown>,\n  tags?: string[]\n) {\n  log(LogLevel.ERROR, message, context, tags, errorObj)\n}\n\n/**\n * Log a fatal error message\n */\nexport function fatal(\n  message: string,\n  errorObj?: Error,\n  context?: Record<string, unknown>,\n  tags?: string[]\n) {\n  log(LogLevel.FATAL, message, context, tags, errorObj)\n}\n\n// Export a default logger object\nconst logger = {\n  debug,\n  info,\n  warn,\n  error,\n  fatal,\n  configureLogger,\n  setLogUser,\n  setRequestId,\n}\n\nexport default logger // lib/logging/fixed-logger.ts\n\n/**\n * Sensitive fields that should never be logged\n * Add any field names that might contain sensitive information\n */\nconst SENSITIVE_FIELDS = [\n  'password',\n  'token',\n  'secret',\n  'authorization',\n  'apiKey',\n  'api_key',\n  'key',\n  'credential',\n  'ssn',\n  'socialSecurity',\n  'creditCard',\n  'cardNumber',\n  'cvv',\n]\n\nexport enum LogLevel {\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n  FATAL = 'fatal',\n}\n\ninterface LoggerConfig {\n  enableConsole?: boolean\n  minLevel?: LogLevel\n  sentryDsn?: string\n  logRocketAppId?: string\n  userId?: string\n  userEmail?: string\n  requestId?: string\n  release?: string\n  environment?: 'development' | 'test' | 'production'\n}\n\n/**\n * Sanitize an object to remove sensitive data before logging\n * @param obj The object to sanitize\n * @returns A sanitized copy of the object\n */\nfunction sanitizeForLogging(obj: unknown): unknown {\n  if (!obj || typeof obj !== 'object') {\n    return obj\n  }\n\n  // Handle arrays\n  if (Array.isArray(obj)) {\n    return obj.map(item => sanitizeForLogging(item))\n  }\n\n  // Handle objects\n  const sanitized = { ...obj }\n  for (const key in sanitized) {\n    const lowerKey = key.toLowerCase()\n\n    // Check if this key contains any sensitive terms\n    if (SENSITIVE_FIELDS.some(field => lowerKey.includes(field.toLowerCase()))) {\n      sanitized[key] = '[REDACTED]'\n    } else if (typeof sanitized[key] === 'object' && sanitized[key] !== null) {\n      // Recursively sanitize nested objects\n      sanitized[key] = sanitizeForLogging(sanitized[key])\n    }\n  }\n\n  return sanitized\n}\n\nconst defaultConfig: LoggerConfig = {\n  enableConsole: true,\n  // Set different default log levels based on environment\n  minLevel: process.env.NODE_ENV === 'production' ? LogLevel.WARN : LogLevel.DEBUG,\n  environment:\n    (process.env.NODE_ENV as unknown as 'development' | 'test' | 'production') || 'development',\n  release: process.env.NEXT_PUBLIC_APP_VERSION,\n}\n\n// Global logger configuration\n// TODO: Consider refactoring to use a class or singleton pattern if this module grows more complex\n// This would help encapsulate state and provide better testability\nlet loggerConfig: LoggerConfig = { ...defaultConfig }\nlet sentryInitialized = false\nlet logRocketInitialized = false\n\n/**\n * Configure the logger\n */\nexport function configureLogger(config: Partial<LoggerConfig>) {\n  loggerConfig = { ...loggerConfig, ...config }\n\n  // Use environment variables for secrets if not explicitly provided\n  const sentryDsn = loggerConfig.sentryDsn || process.env.NEXT_PUBLIC_SENTRY_DSN\n  const logRocketAppId = loggerConfig.logRocketAppId || process.env.NEXT_PUBLIC_LOGROCKET_APP_ID\n\n  // Initialize external logging services if configured\n  if (sentryDsn && typeof window !== 'undefined') {\n    initSentry(sentryDsn, loggerConfig)\n  }\n\n  if (logRocketAppId && typeof window !== 'undefined') {\n    initLogRocket(logRocketAppId, loggerConfig)\n  }\n\n  // In production, ensure we're not logging too verbosely\n  if (process.env.NODE_ENV === 'production' && !config.minLevel) {\n    loggerConfig.minLevel = LogLevel.WARN\n  }\n}\n\n/**\n * Initialize Sentry for error tracking\n * @returns The Sentry instance if initialization was successful, null otherwise\n */\nasync function initSentry(dsn: string, config: LoggerConfig) {\n  // Skip initialization if already initialized or if dsn is missing/empty\n  if (sentryInitialized) {\n    console.warn('Sentry already initialized, skipping initialization')\n    return\n  }\n\n  if (!dsn || dsn.trim() === '') {\n    console.warn('Sentry DSN is empty or missing, skipping initialization')\n    return null\n  }\n\n  try {\n    const Sentry = await import('@sentry/nextjs')\n\n    Sentry.init({\n      dsn,\n      environment: config.environment,\n      release: config.release,\n      tracesSampleRate: config.environment === 'production' ? 0.2 : 1.0,\n    })\n\n    // Set user information if available\n    if (config.userId || config.userEmail) {\n      Sentry.setUser({\n        id: config.userId,\n        email: config.userEmail,\n      })\n    }\n\n    sentryInitialized = true\n    return Sentry\n  } catch (error) {\n    console.error('Failed to initialize Sentry:', error)\n    // Log detailed error information to help with debugging\n    if (error instanceof Error) {\n      console.error(`Sentry initialization error: ${error.name}: ${error.message}`)\n      if (error.stack) console.error(`Stack trace: ${error.stack}`)\n    }\n    // Log environment information to help diagnose deployment issues\n    console.error(`Environment: ${process.env.NODE_ENV}, Release: ${config.release}`)\n    return null\n  }\n}\n\n/**\n * Initialize LogRocket for session replay\n * @returns The LogRocket instance if initialization was successful, null otherwise\n */\nasync function initLogRocket(appId: string, config: LoggerConfig) {\n  // Skip initialization if already initialized or if appId is missing/empty\n  if (logRocketInitialized) {\n    console.warn('LogRocket already initialized, skipping initialization')\n    return\n  }\n\n  if (!appId || appId.trim() === '') {\n    console.warn('LogRocket App ID is empty or missing, skipping initialization')\n    return null\n  }\n\n  try {\n    const LogRocket = (await import('logrocket')).default\n\n    LogRocket.init(appId, {\n      release: config.release,\n      console: {\n        isEnabled: {\n          error: true,\n          warn: true,\n        },\n      },\n      network: {\n        isEnabled: true,\n        requestSanitizer: request => {\n          // Don't log request bodies for sensitive endpoints\n          if (request.url.includes('/api/auth') || request.url.includes('/api/user')) {\n            request.body = null\n          }\n          return request\n        },\n        responseSanitizer: response => {\n          // Don't log response bodies for sensitive endpoints\n          if (response.url.includes('/api/auth') || response.url.includes('/api/user')) {\n            response.body = null\n          }\n          return response\n        },\n      },\n    })\n\n    // Set user information if available\n    if (config.userId || config.userEmail) {\n      LogRocket.identify(config.userId || 'anonymous', {\n        email: config.userEmail,\n      })\n    }\n\n    // Connect LogRocket with Sentry if both are enabled\n    if (sentryInitialized) {\n      const Sentry = await import('@sentry/nextjs')\n      LogRocket.getSessionURL(sessionURL => {\n        Sentry.configureScope(scope => {\n          scope.setExtra('logRocketSessionURL', sessionURL)\n\n          // Add request ID to Sentry scope if available\n          if (loggerConfig.requestId) {\n            scope.setTag('requestId', loggerConfig.requestId)\n          }\n        })\n      })\n    }\n\n    // Add request ID to LogRocket metadata if available\n    if (loggerConfig.requestId) {\n      LogRocket.setMeta('requestId', loggerConfig.requestId)\n    }\n\n    logRocketInitialized = true\n    return LogRocket\n  } catch (error) {\n    console.error('Failed to initialize LogRocket:', error)\n    // Log detailed error information to help with debugging\n    if (error instanceof Error) {\n      console.error(`LogRocket initialization error: ${error.name}: ${error.message}`)\n      if (error.stack) console.error(`Stack trace: ${error.stack}`)\n    }\n    // Log environment information to help diagnose deployment issues\n    console.error(\n      `Environment: ${process.env.NODE_ENV}, Release: ${config.release}, AppId: ${appId}`\n    )\n    return null\n  }\n}\n\n/**\n * Set user information for logging\n */\nexport async function setLogUser(userId?: string, userEmail?: string) {\n  loggerConfig.userId = userId\n  loggerConfig.userEmail = userEmail\n\n  // Update user information in external services\n  if (sentryInitialized) {\n    const Sentry = await import('@sentry/nextjs')\n    Sentry.setUser({\n      id: userId,\n      email: userEmail,\n    })\n  }\n\n  if (logRocketInitialized && typeof window !== 'undefined') {\n    const LogRocket = (await import('logrocket')).default\n    LogRocket.identify(userId || 'anonymous', {\n      email: userEmail,\n    })\n  }\n}\n\n/**\n * Set request ID for logging\n * This is useful for tracking logs across a single request lifecycle\n * and correlating logs between different services\n */\nexport async function setRequestId(requestId: string) {\n  loggerConfig.requestId = requestId\n\n  // Update request ID in external services\n  if (sentryInitialized && typeof window !== 'undefined') {\n    try {\n      const Sentry = await import('@sentry/nextjs')\n      Sentry.configureScope(scope => {\n        scope.setTag('requestId', requestId)\n      })\n    } catch (err) {\n      console.error('Failed to set request ID in Sentry:', err)\n    }\n  }\n\n  if (logRocketInitialized && typeof window !== 'undefined') {\n    try {\n      const LogRocket = (await import('logrocket')).default\n      LogRocket.setMeta('requestId', requestId)\n    } catch (err) {\n      console.error('Failed to set request ID in LogRocket:', err)\n    }\n  }\n}\n\n/**\n * Log a message with the specified level\n */\nasync function log(\n  level: LogLevel,\n  message: string,\n  context?: Record<string, unknown>,\n  tags?: string[],\n  error?: Error\n) {\n  // Skip if below minimum log level\n  if (loggerConfig.minLevel && shouldSkipLog(level, loggerConfig.minLevel)) {\n    return\n  }\n\n  // Enhance context with requestId and userId if available in config\n  const enhancedContext = sanitizeForLogging({\n    ...(context || {}),\n    ...(loggerConfig.requestId ? { requestId: loggerConfig.requestId } : {}),\n    ...(loggerConfig.userId ? { userId: loggerConfig.userId } : {}),\n  })\n\n  // Log to console if enabled\n  if (loggerConfig.enableConsole !== false) {\n    logToConsole(level, message, enhancedContext, tags, error)\n  }\n\n  // Log to external services\n  await logToExternalServices(level, message, enhancedContext, tags, error)\n}\n\n/**\n * Determine if a log should be skipped based on minimum level\n */\nfunction shouldSkipLog(level: LogLevel, minLevel: LogLevel): boolean {\n  const levels = [LogLevel.DEBUG, LogLevel.INFO, LogLevel.WARN, LogLevel.ERROR, LogLevel.FATAL]\n  const levelIndex = levels.indexOf(level)\n  const minLevelIndex = levels.indexOf(minLevel)\n\n  return levelIndex < minLevelIndex\n}\n\n/**\n * Log to the console with appropriate formatting\n */\nfunction logToConsole(\n  level: LogLevel,\n  message: string,\n  context?: Record<string, unknown>,\n  tags?: string[],\n  error?: Error\n) {\n  const timestamp = new Date().toISOString()\n  const formattedMessage = `[${timestamp}] [${level.toUpperCase()}] ${message}`\n  const logData = { ...(context || {}), tags }\n\n  // Use the appropriate console method based on level\n  switch (level) {\n    case LogLevel.DEBUG:\n      console.warn(`[DEBUG] ${formattedMessage}`, logData)\n      break\n    case LogLevel.INFO:\n      console.warn(`[INFO] ${formattedMessage}`, logData)\n      break\n    case LogLevel.WARN:\n      console.warn(`[WARN] ${formattedMessage}`, logData)\n      break\n    case LogLevel.ERROR:\n    case LogLevel.FATAL:\n      console.error(formattedMessage, error || '', logData)\n      break\n  }\n}\n\n/**\n * Log to external services like Sentry and LogRocket\n */\nasync function logToExternalServices(\n  level: LogLevel,\n  message: string,\n  context?: Record<string, unknown>,\n  tags?: string[],\n  error?: Error\n) {\n  // Send to Sentry if configured and level is ERROR or FATAL\n  if (sentryInitialized && (level === LogLevel.ERROR || level === LogLevel.FATAL)) {\n    try {\n      const Sentry = await import('@sentry/nextjs')\n\n      // Set extra context\n      Sentry.configureScope(scope => {\n        if (context) {\n          Object.entries(context).forEach(([key, value]) => {\n            scope.setExtra(key, value)\n          })\n        }\n\n        if (tags) {\n          tags.forEach(tag => {\n            scope.setTag(tag, 'true')\n          })\n        }\n      })\n\n      // Capture the error or message\n      if (error) {\n        Sentry.captureException(error)\n      } else {\n        Sentry.captureMessage(message, level)\n      }\n    } catch (err) {\n      console.error('Failed to log to Sentry:', err)\n      if (err instanceof Error) {\n        console.error(`Sentry logging error: ${err.name}: ${err.message}`)\n        // Don't log stack trace here to avoid recursive error logging\n      }\n    }\n  }\n\n  // Send to LogRocket if configured\n  if (logRocketInitialized) {\n    try {\n      const LogRocket = (await import('logrocket')).default\n\n      // Log the message\n      if (level === LogLevel.ERROR || level === LogLevel.FATAL) {\n        LogRocket.captureException(error || new Error(message), {\n          tags: tags?.reduce((acc, tag) => ({ ...acc, [tag]: true }), {}),\n          extra: context,\n        })\n      } else if (level === LogLevel.WARN) {\n        LogRocket.warn(message, context)\n      } else {\n        LogRocket.log(message, context)\n      }\n    } catch (err) {\n      console.error('Failed to log to LogRocket:', err)\n      if (err instanceof Error) {\n        console.error(`LogRocket logging error: ${err.name}: ${err.message}`)\n        // Don't log stack trace here to avoid recursive error logging\n      }\n    }\n  }\n}\n\n/**\n * Log a debug message\n */\nexport function debug(message: string, context?: Record<string, unknown>, tags?: string[]) {\n  log(LogLevel.DEBUG, message, context, tags)\n}\n\n/**\n * Log an info message\n */\nexport function info(message: string, context?: Record<string, unknown>, tags?: string[]) {\n  log(LogLevel.INFO, message, context, tags)\n}\n\n/**\n * Log a warning message\n */\nexport function warn(message: string, context?: Record<string, unknown>, tags?: string[]) {\n  log(LogLevel.WARN, message, context, tags)\n}\n\n/**\n * Log an error message\n */\nexport function error(\n  message: string,\n  errorObj?: Error,\n  context?: Record<string, unknown>,\n  tags?: string[]\n) {\n  log(LogLevel.ERROR, message, context, tags, errorObj)\n}\n\n/**\n * Log a fatal error message\n */\nexport function fatal(\n  message: string,\n  errorObj?: Error,\n  context?: Record<string, unknown>,\n  tags?: string[]\n) {\n  log(LogLevel.FATAL, message, context, tags, errorObj)\n}\n\n// Export a default logger object\nconst logger = {\n  debug,\n  info,\n  warn,\n  error,\n  fatal,\n  configureLogger,\n  setLogUser,\n  setRequestId,\n}\n\nexport default logger // lib/logging/fixed-logger.ts\n\n/**\n * Sensitive fields that should never be logged\n * Add any field names that might contain sensitive information\n */\nconst SENSITIVE_FIELDS = [\n  'password',\n  'token',\n  'secret',\n  'authorization',\n  'apiKey',\n  'api_key',\n  'key',\n  'credential',\n  'ssn',\n  'socialSecurity',\n  'creditCard',\n  'cardNumber',\n  'cvv',\n]\n\nexport enum LogLevel {\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n  FATAL = 'fatal',\n}\n\ninterface LoggerConfig {\n  enableConsole?: boolean\n  minLevel?: LogLevel\n  sentryDsn?: string\n  logRocketAppId?: string\n  userId?: string\n  userEmail?: string\n  requestId?: string\n  release?: string\n  environment?: 'development' | 'test' | 'production'\n}\n\n/**\n * Sanitize an object to remove sensitive data before logging\n * @param obj The object to sanitize\n * @returns A sanitized copy of the object\n */\nfunction sanitizeForLogging(obj: unknown): unknown {\n  if (!obj || typeof obj !== 'object') {\n    return obj\n  }\n\n  // Handle arrays\n  if (Array.isArray(obj)) {\n    return obj.map(item => sanitizeForLogging(item))\n  }\n\n  // Handle objects\n  const sanitized = { ...obj }\n  for (const key in sanitized) {\n    const lowerKey = key.toLowerCase()\n\n    // Check if this key contains any sensitive terms\n    if (SENSITIVE_FIELDS.some(field => lowerKey.includes(field.toLowerCase()))) {\n      sanitized[key] = '[REDACTED]'\n    } else if (typeof sanitized[key] === 'object' && sanitized[key] !== null) {\n      // Recursively sanitize nested objects\n      sanitized[key] = sanitizeForLogging(sanitized[key])\n    }\n  }\n\n  return sanitized\n}\n\nconst defaultConfig: LoggerConfig = {\n  enableConsole: true,\n  // Set different default log levels based on environment\n  minLevel: process.env.NODE_ENV === 'production' ? LogLevel.WARN : LogLevel.DEBUG,\n  environment:\n    (process.env.NODE_ENV as unknown as 'development' | 'test' | 'production') || 'development',\n  release: process.env.NEXT_PUBLIC_APP_VERSION,\n}\n\n// Global logger configuration\n// TODO: Consider refactoring to use a class or singleton pattern if this module grows more complex\n// This would help encapsulate state and provide better testability\nlet loggerConfig: LoggerConfig = { ...defaultConfig }\nlet sentryInitialized = false\nlet logRocketInitialized = false\n\n/**\n * Configure the logger\n */\nexport function configureLogger(config: Partial<LoggerConfig>) {\n  loggerConfig = { ...loggerConfig, ...config }\n\n  // Use environment variables for secrets if not explicitly provided\n  const sentryDsn = loggerConfig.sentryDsn || process.env.NEXT_PUBLIC_SENTRY_DSN\n  const logRocketAppId = loggerConfig.logRocketAppId || process.env.NEXT_PUBLIC_LOGROCKET_APP_ID\n\n  // Initialize external logging services if configured\n  if (sentryDsn && typeof window !== 'undefined') {\n    initSentry(sentryDsn, loggerConfig)\n  }\n\n  if (logRocketAppId && typeof window !== 'undefined') {\n    initLogRocket(logRocketAppId, loggerConfig)\n  }\n\n  // In production, ensure we're not logging too verbosely\n  if (process.env.NODE_ENV === 'production' && !config.minLevel) {\n    loggerConfig.minLevel = LogLevel.WARN\n  }\n}\n\n/**\n * Initialize Sentry for error tracking\n * @returns The Sentry instance if initialization was successful, null otherwise\n */\nasync function initSentry(dsn: string, config: LoggerConfig) {\n  // Skip initialization if already initialized or if dsn is missing/empty\n  if (sentryInitialized) {\n    console.warn('Sentry already initialized, skipping initialization')\n    return\n  }\n\n  if (!dsn || dsn.trim() === '') {\n    console.warn('Sentry DSN is empty or missing, skipping initialization')\n    return null\n  }\n\n  try {\n    const Sentry = await import('@sentry/nextjs')\n\n    Sentry.init({\n      dsn,\n      environment: config.environment,\n      release: config.release,\n      tracesSampleRate: config.environment === 'production' ? 0.2 : 1.0,\n    })\n\n    // Set user information if available\n    if (config.userId || config.userEmail) {\n      Sentry.setUser({\n        id: config.userId,\n        email: config.userEmail,\n      })\n    }\n\n    sentryInitialized = true\n    return Sentry\n  } catch (error) {\n    console.error('Failed to initialize Sentry:', error)\n    // Log detailed error information to help with debugging\n    if (error instanceof Error) {\n      console.error(`Sentry initialization error: ${error.name}: ${error.message}`)\n      if (error.stack) console.error(`Stack trace: ${error.stack}`)\n    }\n    // Log environment information to help diagnose deployment issues\n    console.error(`Environment: ${process.env.NODE_ENV}, Release: ${config.release}`)\n    return null\n  }\n}\n\n/**\n * Initialize LogRocket for session replay\n * @returns The LogRocket instance if initialization was successful, null otherwise\n */\nasync function initLogRocket(appId: string, config: LoggerConfig) {\n  // Skip initialization if already initialized or if appId is missing/empty\n  if (logRocketInitialized) {\n    console.warn('LogRocket already initialized, skipping initialization')\n    return\n  }\n\n  if (!appId || appId.trim() === '') {\n    console.warn('LogRocket App ID is empty or missing, skipping initialization')\n    return null\n  }\n\n  try {\n    const LogRocket = (await import('logrocket')).default\n\n    LogRocket.init(appId, {\n      release: config.release,\n      console: {\n        isEnabled: {\n          error: true,\n          warn: true,\n        },\n      },\n      network: {\n        isEnabled: true,\n        requestSanitizer: request => {\n          // Don't log request bodies for sensitive endpoints\n          if (request.url.includes('/api/auth') || request.url.includes('/api/user')) {\n            request.body = null\n          }\n          return request\n        },\n        responseSanitizer: response => {\n          // Don't log response bodies for sensitive endpoints\n          if (response.url.includes('/api/auth') || response.url.includes('/api/user')) {\n            response.body = null\n          }\n          return response\n        },\n      },\n    })\n\n    // Set user information if available\n    if (config.userId || config.userEmail) {\n      LogRocket.identify(config.userId || 'anonymous', {\n        email: config.userEmail,\n      })\n    }\n\n    // Connect LogRocket with Sentry if both are enabled\n    if (sentryInitialized) {\n      const Sentry = await import('@sentry/nextjs')\n      LogRocket.getSessionURL(sessionURL => {\n        Sentry.configureScope(scope => {\n          scope.setExtra('logRocketSessionURL', sessionURL)\n\n          // Add request ID to Sentry scope if available\n          if (loggerConfig.requestId) {\n            scope.setTag('requestId', loggerConfig.requestId)\n          }\n        })\n      })\n    }\n\n    // Add request ID to LogRocket metadata if available\n    if (loggerConfig.requestId) {\n      LogRocket.setMeta('requestId', loggerConfig.requestId)\n    }\n\n    logRocketInitialized = true\n    return LogRocket\n  } catch (error) {\n    console.error('Failed to initialize LogRocket:', error)\n    // Log detailed error information to help with debugging\n    if (error instanceof Error) {\n      console.error(`LogRocket initialization error: ${error.name}: ${error.message}`)\n      if (error.stack) console.error(`Stack trace: ${error.stack}`)\n    }\n    // Log environment information to help diagnose deployment issues\n    console.error(\n      `Environment: ${process.env.NODE_ENV}, Release: ${config.release}, AppId: ${appId}`\n    )\n    return null\n  }\n}\n\n/**\n * Set user information for logging\n */\nexport async function setLogUser(userId?: string, userEmail?: string) {\n  loggerConfig.userId = userId\n  loggerConfig.userEmail = userEmail\n\n  // Update user information in external services\n  if (sentryInitialized) {\n    const Sentry = await import('@sentry/nextjs')\n    Sentry.setUser({\n      id: userId,\n      email: userEmail,\n    })\n  }\n\n  if (logRocketInitialized && typeof window !== 'undefined') {\n    const LogRocket = (await import('logrocket')).default\n    LogRocket.identify(userId || 'anonymous', {\n      email: userEmail,\n    })\n  }\n}\n\n/**\n * Set request ID for logging\n * This is useful for tracking logs across a single request lifecycle\n * and correlating logs between different services\n */\nexport async function setRequestId(requestId: string) {\n  loggerConfig.requestId = requestId\n\n  // Update request ID in external services\n  if (sentryInitialized && typeof window !== 'undefined') {\n    try {\n      const Sentry = await import('@sentry/nextjs')\n      Sentry.configureScope(scope => {\n        scope.setTag('requestId', requestId)\n      })\n    } catch (err) {\n      console.error('Failed to set request ID in Sentry:', err)\n    }\n  }\n\n  if (logRocketInitialized && typeof window !== 'undefined') {\n    try {\n      const LogRocket = (await import('logrocket')).default\n      LogRocket.setMeta('requestId', requestId)\n    } catch (err) {\n      console.error('Failed to set request ID in LogRocket:', err)\n    }\n  }\n}\n\n/**\n * Log a message with the specified level\n */\nasync function log(\n  level: LogLevel,\n  message: string,\n  context?: Record<string, unknown>,\n  tags?: string[],\n  error?: Error\n) {\n  // Skip if below minimum log level\n  if (loggerConfig.minLevel && shouldSkipLog(level, loggerConfig.minLevel)) {\n    return\n  }\n\n  // Enhance context with requestId and userId if available in config\n  const enhancedContext = sanitizeForLogging({\n    ...(context || {}),\n    ...(loggerConfig.requestId ? { requestId: loggerConfig.requestId } : {}),\n    ...(loggerConfig.userId ? { userId: loggerConfig.userId } : {}),\n  })\n\n  // Log to console if enabled\n  if (loggerConfig.enableConsole !== false) {\n    logToConsole(level, message, enhancedContext, tags, error)\n  }\n\n  // Log to external services\n  await logToExternalServices(level, message, enhancedContext, tags, error)\n}\n\n/**\n * Determine if a log should be skipped based on minimum level\n */\nfunction shouldSkipLog(level: LogLevel, minLevel: LogLevel): boolean {\n  const levels = [LogLevel.DEBUG, LogLevel.INFO, LogLevel.WARN, LogLevel.ERROR, LogLevel.FATAL]\n  const levelIndex = levels.indexOf(level)\n  const minLevelIndex = levels.indexOf(minLevel)\n\n  return levelIndex < minLevelIndex\n}\n\n/**\n * Log to the console with appropriate formatting\n */\nfunction logToConsole(\n  level: LogLevel,\n  message: string,\n  context?: Record<string, unknown>,\n  tags?: string[],\n  error?: Error\n) {\n  const timestamp = new Date().toISOString()\n  const formattedMessage = `[${timestamp}] [${level.toUpperCase()}] ${message}`\n  const logData = { ...(context || {}), tags }\n\n  // Use the appropriate console method based on level\n  switch (level) {\n    case LogLevel.DEBUG:\n      console.warn(`[DEBUG] ${formattedMessage}`, logData)\n      break\n    case LogLevel.INFO:\n      console.warn(`[INFO] ${formattedMessage}`, logData)\n      break\n    case LogLevel.WARN:\n      console.warn(`[WARN] ${formattedMessage}`, logData)\n      break\n    case LogLevel.ERROR:\n    case LogLevel.FATAL:\n      console.error(formattedMessage, error || '', logData)\n      break\n  }\n}\n\n/**\n * Log to external services like Sentry and LogRocket\n */\nasync function logToExternalServices(\n  level: LogLevel,\n  message: string,\n  context?: Record<string, unknown>,\n  tags?: string[],\n  error?: Error\n) {\n  // Send to Sentry if configured and level is ERROR or FATAL\n  if (sentryInitialized && (level === LogLevel.ERROR || level === LogLevel.FATAL)) {\n    try {\n      const Sentry = await import('@sentry/nextjs')\n\n      // Set extra context\n      Sentry.configureScope(scope => {\n        if (context) {\n          Object.entries(context).forEach(([key, value]) => {\n            scope.setExtra(key, value)\n          })\n        }\n\n        if (tags) {\n          tags.forEach(tag => {\n            scope.setTag(tag, 'true')\n          })\n        }\n      })\n\n      // Capture the error or message\n      if (error) {\n        Sentry.captureException(error)\n      } else {\n        Sentry.captureMessage(message, level)\n      }\n    } catch (err) {\n      console.error('Failed to log to Sentry:', err)\n      if (err instanceof Error) {\n        console.error(`Sentry logging error: ${err.name}: ${err.message}`)\n        // Don't log stack trace here to avoid recursive error logging\n      }\n    }\n  }\n\n  // Send to LogRocket if configured\n  if (logRocketInitialized) {\n    try {\n      const LogRocket = (await import('logrocket')).default\n\n      // Log the message\n      if (level === LogLevel.ERROR || level === LogLevel.FATAL) {\n        LogRocket.captureException(error || new Error(message), {\n          tags: tags?.reduce((acc, tag) => ({ ...acc, [tag]: true }), {}),\n          extra: context,\n        })\n      } else if (level === LogLevel.WARN) {\n        LogRocket.warn(message, context)\n      } else {\n        LogRocket.log(message, context)\n      }\n    } catch (err) {\n      console.error('Failed to log to LogRocket:', err)\n      if (err instanceof Error) {\n        console.error(`LogRocket logging error: ${err.name}: ${err.message}`)\n        // Don't log stack trace here to avoid recursive error logging\n      }\n    }\n  }\n}\n\n/**\n * Log a debug message\n */\nexport function debug(message: string, context?: Record<string, unknown>, tags?: string[]) {\n  log(LogLevel.DEBUG, message, context, tags)\n}\n\n/**\n * Log an info message\n */\nexport function info(message: string, context?: Record<string, unknown>, tags?: string[]) {\n  log(LogLevel.INFO, message, context, tags)\n}\n\n/**\n * Log a warning message\n */\nexport function warn(message: string, context?: Record<string, unknown>, tags?: string[]) {\n  log(LogLevel.WARN, message, context, tags)\n}\n\n/**\n * Log an error message\n */\nexport function error(\n  message: string,\n  errorObj?: Error,\n  context?: Record<string, unknown>,\n  tags?: string[]\n) {\n  log(LogLevel.ERROR, message, context, tags, errorObj)\n}\n\n/**\n * Log a fatal error message\n */\nexport function fatal(\n  message: string,\n  errorObj?: Error,\n  context?: Record<string, unknown>,\n  tags?: string[]\n) {\n  log(LogLevel.FATAL, message, context, tags, errorObj)\n}\n\n// Export a default logger object\nconst logger = {\n  debug,\n  info,\n  warn,\n  error,\n  fatal,\n  configureLogger,\n  setLogUser,\n  setRequestId,\n}\n\nexport default logger\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\lib\\logging\\logger.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 24,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 24,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [622, 625], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [622, 625], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/ban-ts-comment",
        "severity": 2,
        "message": "Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.",
        "line": 107,
        "column": 5,
        "nodeType": "Line",
        "messageId": "tsIgnoreInsteadOfExpectError",
        "endLine": 107,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "replaceTsIgnoreWithTsExpectError",
            "fix": {
              "range": [2865, 2905],
              "text": "// @ts-expect-error - LogRocket types may vary"
            },
            "desc": "Replace \"@ts-ignore\" with \"@ts-expect-error\"."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/ban-ts-comment",
        "severity": 2,
        "message": "Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.",
        "line": 158,
        "column": 11,
        "nodeType": "Line",
        "messageId": "tsIgnoreInsteadOfExpectError",
        "endLine": 158,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "replaceTsIgnoreWithTsExpectError",
            "fix": {
              "range": [4445, 4499],
              "text": "// @ts-expect-error - Sentry API might vary between versions"
            },
            "desc": "Replace \"@ts-ignore\" with \"@ts-expect-error\"."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 159,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 159,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4536, 4539], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4536, 4539], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/ban-ts-comment",
        "severity": 2,
        "message": "Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.",
        "line": 215,
        "column": 5,
        "nodeType": "Line",
        "messageId": "tsIgnoreInsteadOfExpectError",
        "endLine": 215,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "replaceTsIgnoreWithTsExpectError",
            "fix": {
              "range": [6014, 6054],
              "text": "// @ts-expect-error - LogRocket types may vary"
            },
            "desc": "Replace \"@ts-ignore\" with \"@ts-expect-error\"."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 235,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 235,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6531, 6534], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6531, 6534], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 264,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 264,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [7169, 7219], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 267,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 267,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [7265, 7314], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/ban-ts-comment",
        "severity": 2,
        "message": "Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.",
        "line": 297,
        "column": 9,
        "nodeType": "Line",
        "messageId": "tsIgnoreInsteadOfExpectError",
        "endLine": 297,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "replaceTsIgnoreWithTsExpectError",
            "fix": {
              "range": [8062, 8116],
              "text": "// @ts-expect-error - Sentry API might vary between versions"
            },
            "desc": "Replace \"@ts-ignore\" with \"@ts-expect-error\"."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 298,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 298,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8151, 8154], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8151, 8154], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 319,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 319,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8727, 8730], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8727, 8730], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/ban-ts-comment",
        "severity": 2,
        "message": "Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.",
        "line": 329,
        "column": 7,
        "nodeType": "Line",
        "messageId": "tsIgnoreInsteadOfExpectError",
        "endLine": 329,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "replaceTsIgnoreWithTsExpectError",
            "fix": {
              "range": [8948, 8988],
              "text": "// @ts-expect-error - LogRocket types may vary"
            },
            "desc": "Replace \"@ts-ignore\" with \"@ts-expect-error\"."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 360,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 360,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9802, 9805], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9802, 9805], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 391,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 391,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10729, 10732], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10729, 10732], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 401,
        "column": 64,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 401,
        "endColumn": 67,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11016, 11019], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11016, 11019], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 411,
        "column": 64,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 411,
        "endColumn": 67,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11304, 11307], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11304, 11307], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 425,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 425,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11647, 11650], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11647, 11650], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 441,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 441,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12008, 12011], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12008, 12011], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 16,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/logging/logger.ts\r\n/**\r\n * Structured logging utility for the application\r\n *\r\n * This module provides a consistent interface for logging across the application.\r\n * It supports different log levels, structured metadata, and can be configured\r\n * to send logs to external services like Sentry or LogRocket.\r\n */\r\n\r\n// Log levels in order of severity\r\nexport enum LogLevel {\r\n  DEBUG = 'debug',\r\n  INFO = 'info',\r\n  WARN = 'warn',\r\n  ERROR = 'error',\r\n  FATAL = 'fatal',\r\n}\r\n\r\n// Log entry interface\r\nexport interface LogEntry {\r\n  level: LogLevel\r\n  message: string\r\n  timestamp: string\r\n  context?: Record<string, any>\r\n  tags?: string[]\r\n  error?: Error\r\n}\r\n\r\n// Logger configuration interface\r\nexport interface LoggerConfig {\r\n  minLevel: LogLevel\r\n  enableConsole: boolean\r\n  sentryDsn?: string\r\n  logRocketAppId?: string\r\n  environment: 'development' | 'test' | 'production'\r\n  release?: string\r\n  userId?: string\r\n  userEmail?: string\r\n}\r\n\r\n// Default configuration\r\nconst defaultConfig: LoggerConfig = {\r\n  minLevel: LogLevel.DEBUG,\r\n  enableConsole: true,\r\n  environment: (process.env.NODE_ENV as 'development' | 'test' | 'production') || 'development',\r\n  release: process.env.NEXT_PUBLIC_APP_VERSION,\r\n}\r\n\r\n// Global logger configuration\r\nlet loggerConfig: LoggerConfig = { ...defaultConfig }\r\n\r\n// External logging services\r\nlet sentryInitialized = false\r\nlet logRocketInitialized = false\r\n\r\n/**\r\n * Initialize Sentry for error tracking\r\n * This is done lazily to avoid importing Sentry in environments where it's not needed\r\n */\r\nasync function initSentry(dsn: string, config: LoggerConfig) {\r\n  if (sentryInitialized) return\r\n\r\n  try {\r\n    // Dynamically import Sentry to avoid bundling it unnecessarily\r\n    const Sentry = await import('@sentry/nextjs')\r\n\r\n    Sentry.init({\r\n      dsn,\r\n      environment: config.environment,\r\n      release: config.release,\r\n      tracesSampleRate: config.environment === 'production' ? 0.2 : 1.0,\r\n      // Only send errors and above to Sentry\r\n      beforeSend(event) {\r\n        if (event.level && ['error', 'fatal'].includes(event.level)) {\r\n          return event\r\n        }\r\n        return null\r\n      },\r\n    })\r\n\r\n    // Set user information if available\r\n    if (config.userId || config.userEmail) {\r\n      Sentry.setUser({\r\n        id: config.userId,\r\n        email: config.userEmail,\r\n      })\r\n    }\r\n\r\n    sentryInitialized = true\r\n\r\n    return Sentry\r\n  } catch (error) {\r\n    console.error('Failed to initialize Sentry:', error)\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * Initialize LogRocket for session replay\r\n * This is done lazily to avoid importing LogRocket in environments where it's not needed\r\n */\r\nasync function initLogRocket(appId: string, config: LoggerConfig) {\r\n  if (logRocketInitialized) return\r\n\r\n  try {\r\n    // Dynamically import LogRocket to avoid bundling it unnecessarily\r\n    // @ts-ignore - LogRocket types may vary\r\n    const LogRocket = (await import('logrocket')).default\r\n\r\n    LogRocket.init(appId, {\r\n      release: config.release,\r\n      console: {\r\n        isEnabled: {\r\n          // Configure which console methods to capture\r\n          log: true,\r\n          warn: true,\r\n          error: true,\r\n        },\r\n      },\r\n      network: {\r\n        isEnabled: true,\r\n        requestSanitizer: request => {\r\n          // Don't log request bodies for sensitive endpoints\r\n          if (\r\n            request.url &&\r\n            (request.url.includes('/api/auth') || request.url.includes('/api/user'))\r\n          ) {\r\n            request.body = undefined\r\n          }\r\n          return request\r\n        },\r\n        responseSanitizer: response => {\r\n          // Don't log response bodies for sensitive endpoints\r\n          if (\r\n            response.url &&\r\n            (response.url.includes('/api/auth') || response.url.includes('/api/user'))\r\n          ) {\r\n            response.body = undefined\r\n          }\r\n          return response\r\n        },\r\n      },\r\n    })\r\n\r\n    // Set user information if available\r\n    if (config.userId || config.userEmail) {\r\n      LogRocket.identify(config.userId || 'anonymous', {\r\n        email: config.userEmail || '',\r\n      })\r\n    }\r\n\r\n    // Connect LogRocket with Sentry if both are enabled\r\n    if (sentryInitialized) {\r\n      const Sentry = await import('@sentry/nextjs')\r\n      LogRocket.getSessionURL(sessionURL => {\r\n        // Use a try-catch to handle potential missing methods\r\n        try {\r\n          // @ts-ignore - Sentry API might vary between versions\r\n          Sentry.withScope((scope: any) => {\r\n            scope.setExtra('logRocketSessionURL', sessionURL)\r\n          })\r\n        } catch (err) {\r\n          console.error('Failed to set LogRocket session URL in Sentry:', err)\r\n        }\r\n      })\r\n    }\r\n\r\n    logRocketInitialized = true\r\n\r\n    return LogRocket\r\n  } catch (error) {\r\n    console.error('Failed to initialize LogRocket:', error)\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * Configure the logger\r\n * @param config Logger configuration\r\n */\r\nexport function configureLogger(config: Partial<LoggerConfig>) {\r\n  loggerConfig = { ...loggerConfig, ...config }\r\n\r\n  // Initialize external logging services if configured\r\n  if (loggerConfig.sentryDsn && typeof window !== 'undefined') {\r\n    initSentry(loggerConfig.sentryDsn, loggerConfig)\r\n  }\r\n\r\n  if (loggerConfig.logRocketAppId && typeof window !== 'undefined') {\r\n    initLogRocket(loggerConfig.logRocketAppId, loggerConfig)\r\n  }\r\n}\r\n\r\n/**\r\n * Set user information for logging\r\n * @param userId User ID\r\n * @param userEmail User email\r\n */\r\nexport async function setLogUser(userId?: string, userEmail?: string) {\r\n  loggerConfig.userId = userId\r\n  loggerConfig.userEmail = userEmail\r\n\r\n  // Update user information in external services\r\n  if (sentryInitialized) {\r\n    const Sentry = await import('@sentry/nextjs')\r\n    if (Sentry.setUser) {\r\n      Sentry.setUser({\r\n        id: userId,\r\n        email: userEmail,\r\n      })\r\n    }\r\n  }\r\n\r\n  if (logRocketInitialized && typeof window !== 'undefined') {\r\n    // @ts-ignore - LogRocket types may vary\r\n    const LogRocket = (await import('logrocket')).default\r\n    LogRocket.identify(userId || 'anonymous', {\r\n      email: userEmail || '',\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Create a log entry\r\n * @param level Log level\r\n * @param message Log message\r\n * @param context Additional context\r\n * @param tags Tags for categorizing logs\r\n * @param error Error object\r\n * @returns Log entry\r\n */\r\nfunction createLogEntry(\r\n  level: LogLevel,\r\n  message: string,\r\n  context?: Record<string, any>,\r\n  tags?: string[],\r\n  error?: Error\r\n): LogEntry {\r\n  return {\r\n    level,\r\n    message,\r\n    timestamp: new Date().toISOString(),\r\n    context,\r\n    tags,\r\n    error,\r\n  }\r\n}\r\n\r\n/**\r\n * Log to the console with appropriate formatting\r\n * @param entry Log entry\r\n */\r\nfunction logToConsole(entry: LogEntry) {\r\n  if (!loggerConfig.enableConsole) return\r\n\r\n  const { level, message, timestamp, context, tags, error } = entry\r\n\r\n  // Format the log message\r\n  const formattedMessage = `[${timestamp}] [${level.toUpperCase()}] ${message}`\r\n\r\n  // Log with appropriate console method\r\n  switch (level) {\r\n    case LogLevel.DEBUG:\r\n      console.debug(formattedMessage, { context, tags })\r\n      break\r\n    case LogLevel.INFO:\r\n      console.info(formattedMessage, { context, tags })\r\n      break\r\n    case LogLevel.WARN:\r\n      console.warn(formattedMessage, { context, tags })\r\n      break\r\n    case LogLevel.ERROR:\r\n    case LogLevel.FATAL:\r\n      console.error(formattedMessage, { context, tags, error })\r\n      break\r\n  }\r\n}\r\n\r\n/**\r\n * Send log to external services\r\n * @param entry Log entry\r\n */\r\nasync function logToExternalServices(entry: LogEntry) {\r\n  const { level, message, context, tags, error } = entry\r\n\r\n  // Send to Sentry if configured and level is ERROR or FATAL\r\n  if (\r\n    loggerConfig.sentryDsn &&\r\n    sentryInitialized &&\r\n    (level === LogLevel.ERROR || level === LogLevel.FATAL)\r\n  ) {\r\n    try {\r\n      const Sentry = await import('@sentry/nextjs')\r\n\r\n      // Set extra context\r\n      try {\r\n        // @ts-ignore - Sentry API might vary between versions\r\n        Sentry.withScope((scope: any) => {\r\n          if (context) {\r\n            Object.entries(context).forEach(([key, value]) => {\r\n              scope.setExtra(key, value)\r\n            })\r\n          }\r\n\r\n          if (tags) {\r\n            tags.forEach(tag => {\r\n              scope.setTag(tag, 'true')\r\n            })\r\n          }\r\n        })\r\n      } catch (err) {\r\n        console.error('Failed to set context in Sentry:', err)\r\n      }\r\n\r\n      // Capture the error or message\r\n      if (error) {\r\n        Sentry.captureException(error)\r\n      } else {\r\n        Sentry.captureMessage(message, level as any)\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to log to Sentry:', err)\r\n    }\r\n  }\r\n\r\n  // Send to LogRocket if configured\r\n  if (loggerConfig.logRocketAppId && logRocketInitialized) {\r\n    try {\r\n      // @ts-ignore - LogRocket types may vary\r\n      const LogRocket = (await import('logrocket')).default\r\n\r\n      // Log the message\r\n      if (level === LogLevel.ERROR || level === LogLevel.FATAL) {\r\n        LogRocket.captureException(error || new Error(message), {\r\n          tags,\r\n          extra: context,\r\n        })\r\n      } else if (level === LogLevel.WARN) {\r\n        LogRocket.warn(message, context)\r\n      } else {\r\n        LogRocket.log(message, context)\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to log to LogRocket:', err)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Log a message\r\n * @param level Log level\r\n * @param message Log message\r\n * @param context Additional context\r\n * @param tags Tags for categorizing logs\r\n * @param error Error object\r\n */\r\nasync function log(\r\n  level: LogLevel,\r\n  message: string,\r\n  context?: Record<string, any>,\r\n  tags?: string[],\r\n  error?: Error\r\n) {\r\n  // Skip if below minimum log level\r\n  if (\r\n    (level === LogLevel.DEBUG && loggerConfig.minLevel !== LogLevel.DEBUG) ||\r\n    (level === LogLevel.INFO &&\r\n      [LogLevel.WARN, LogLevel.ERROR, LogLevel.FATAL].includes(loggerConfig.minLevel)) ||\r\n    (level === LogLevel.WARN && [LogLevel.ERROR, LogLevel.FATAL].includes(loggerConfig.minLevel)) ||\r\n    (level === LogLevel.ERROR && loggerConfig.minLevel === LogLevel.FATAL)\r\n  ) {\r\n    return\r\n  }\r\n\r\n  // Create log entry\r\n  const entry = createLogEntry(level, message, context, tags, error)\r\n\r\n  // Log to console\r\n  logToConsole(entry)\r\n\r\n  // Log to external services\r\n  await logToExternalServices(entry)\r\n}\r\n\r\n/**\r\n * Log a debug message\r\n * @param message Log message\r\n * @param context Additional context\r\n * @param tags Tags for categorizing logs\r\n */\r\nexport function debug(message: string, context?: Record<string, any>, tags?: string[]) {\r\n  log(LogLevel.DEBUG, message, context, tags)\r\n}\r\n\r\n/**\r\n * Log an info message\r\n * @param message Log message\r\n * @param context Additional context\r\n * @param tags Tags for categorizing logs\r\n */\r\nexport function info(message: string, context?: Record<string, any>, tags?: string[]) {\r\n  log(LogLevel.INFO, message, context, tags)\r\n}\r\n\r\n/**\r\n * Log a warning message\r\n * @param message Log message\r\n * @param context Additional context\r\n * @param tags Tags for categorizing logs\r\n */\r\nexport function warn(message: string, context?: Record<string, any>, tags?: string[]) {\r\n  log(LogLevel.WARN, message, context, tags)\r\n}\r\n\r\n/**\r\n * Log an error message\r\n * @param message Log message\r\n * @param error Error object\r\n * @param context Additional context\r\n * @param tags Tags for categorizing logs\r\n */\r\nexport function error(\r\n  message: string,\r\n  error?: Error,\r\n  context?: Record<string, any>,\r\n  tags?: string[]\r\n) {\r\n  log(LogLevel.ERROR, message, context, tags, error)\r\n}\r\n\r\n/**\r\n * Log a fatal error message\r\n * @param message Log message\r\n * @param error Error object\r\n * @param context Additional context\r\n * @param tags Tags for categorizing logs\r\n */\r\nexport function fatal(\r\n  message: string,\r\n  error?: Error,\r\n  context?: Record<string, any>,\r\n  tags?: string[]\r\n) {\r\n  log(LogLevel.FATAL, message, context, tags, error)\r\n}\r\n\r\n// Export a default logger object\r\nconst logger = {\r\n  debug,\r\n  info,\r\n  warn,\r\n  error,\r\n  fatal,\r\n  configureLogger,\r\n  setLogUser,\r\n}\r\n\r\nexport default logger\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\lib\\logging\\simplified-logger.ts",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: ',' expected.",
        "line": 48,
        "column": 57,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/logging/simplified-logger.ts\n\n/**\n * Sensitive fields that should never be logged\n * Add any field names that might contain sensitive information\n */\nconst SENSITIVE_FIELDS = [\n  'password',\n  'token',\n  'secret',\n  'authorization',\n  'apiKey',\n  'api_key',\n  'key',\n  'credential',\n  'ssn',\n  'socialSecurity',\n  'creditCard',\n  'cardNumber',\n  'cvv',\n]\n\nexport enum LogLevel {\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n  FATAL = 'fatal',\n}\n\ninterface LoggerConfig {\n  enableConsole?: boolean\n  minLevel?: LogLevel\n  sentryDsn?: string\n  logRocketAppId?: string\n  userId?: string\n  userEmail?: string\n  requestId?: string\n  release?: string\n  environment?: 'development' | 'test' | 'production'\n}\n\n/**\n * Sanitize an object to remove sensitive data before logging\n * @param obj The object to sanitize\n * @returns A sanitized copy of the object\n */\nfunction sanitizeForLogging(obj: unknown, seen = unknown {\n  if (!obj || typeof obj !== 'object') {\n    return obj\n  }\n\n  // Handle circular references\n  if (seen.has(obj as object)) {\n    return '[Circular]'\n  }\n  seen.add(obj as object)\n\n  // Handle Error objects specially\n  if (obj instanceof Error) {\n    const errorObj = {\n      name: obj.name,\n      message: obj.message,\n      stack: obj.stack,\n    }\n    \n    // Also include any custom properties that might be on the error\n    const customProps = Object.getOwnPropertyNames(obj)\n      .filter(prop => !['name', 'message', 'stack'].includes(prop))\n      .reduce((acc, prop) => {\n        acc[prop] = (obj as any)[prop]\n        return acc\n      }, {} as Record<string, unknown>)\n      \n    return sanitizeForLogging({ ...errorObj, ...customProps }, seen)\n  }\n\n  // Handle arrays\n  if (Array.isArray(obj)) {\n    return obj.map(item => sanitizeForLogging(item, seen))\n  }\n\n  // Handle objects\n  const sanitized = { ...obj }\n  for (const key in sanitized) {\n    const lowerKey = key.toLowerCase()\n\n    // Check if this key contains any sensitive terms using regex\n    if (SENSITIVE_FIELDS_REGEX.test(lowerKey)) {\n      sanitized[key] = '[REDACTED]'\n    } else if (typeof sanitized[key] === 'object' && sanitized[key] !== null) {\n      // Recursively sanitize nested objects\n      sanitized[key] = sanitizeForLogging(sanitized[key], seen)\n    }\n  }\n\n  return sanitized\n}\n\n/**\n * Validate environment string to ensure it's one of the expected values\n */\nfunction validateEnvironment(env?: string): 'development' | 'test' | 'production' {\n  if (!env || !['development', 'test', 'production'].includes(env)) {\n    return 'development'\n  }\n  return env as 'development' | 'test' | 'production'\n}\n\nconst defaultConfig: LoggerConfig = {\n  enableConsole: true,\n  // Set different default log levels based on environment\n  minLevel: process.env.NODE_ENV === 'production' ? LogLevel.WARN : LogLevel.DEBUG,\n  environment: validateEnvironment(process.env.NODE_ENV),\n  release: process.env.NEXT_PUBLIC_APP_VERSION,\n}\n\n// Global logger configuration\n// TODO: Consider refactoring to use a class or singleton pattern if this module grows more complex\n// This would help encapsulate state and provide better testability\nlet loggerConfig: LoggerConfig = { ...defaultConfig }\nlet sentryInitialized = false\nlet logRocketInitialized = false\n\n/**\n * Configure the logger\n */\nexport function configureLogger(config: Partial<LoggerConfig>) {\n  // If reconfiguring with different external service credentials, clean up first\n  if (\n    (sentryInitialized && config.sentryDsn && config.sentryDsn !== loggerConfig.sentryDsn) ||\n    (logRocketInitialized && config.logRocketAppId && config.logRocketAppId !== loggerConfig.logRocketAppId)\n  ) {\n    shutdownLogger()\n  }\n\n  loggerConfig = { ...loggerConfig, ...config }\n\n  // Use environment variables for secrets if not explicitly provided\n  const sentryDsn = loggerConfig.sentryDsn || process.env.NEXT_PUBLIC_SENTRY_DSN\n  const logRocketAppId = loggerConfig.logRocketAppId || process.env.NEXT_PUBLIC_LOGROCKET_APP_ID\n\n  // Initialize external logging services if configured\n  if (sentryDsn && typeof window !== 'undefined') {\n    initSentry(sentryDsn, loggerConfig)\n  }\n\n  if (logRocketAppId && typeof window !== 'undefined') {\n    initLogRocket(logRocketAppId, loggerConfig)\n  }\n\n  // In production, ensure we're not logging too verbosely\n  if (process.env.NODE_ENV === 'production' && !config.minLevel) {\n    loggerConfig.minLevel = LogLevel.WARN\n  }\n}\n\n/**\n * Shutdown and cleanup logger resources\n * This is useful when reconfiguring the logger or when the application is shutting down\n */\nexport async function shutdownLogger() {\n  if (sentryInitialized && typeof window !== 'undefined') {\n    try {\n      const Sentry = await import('@sentry/nextjs')\n      Sentry.close()\n      sentryInitialized = false\n    } catch (err) {\n      console.error('Failed to shutdown Sentry:', err)\n    }\n  }\n\n  // LogRocket doesn't have an explicit shutdown method, but we can mark it as not initialized\n  logRocketInitialized = false\n}\n\n/**\n * Initialize Sentry for error tracking\n * @returns The Sentry instance if initialization was successful, null otherwise\n */\nasync function initSentry(dsn: string, config: LoggerConfig) {\n  // Skip initialization if already initialized or if dsn is missing/empty\n  if (sentryInitialized) {\n    console.warn('Sentry already initialized, skipping initialization')\n    return\n  }\n\n  if (!dsn || dsn.trim() === '') {\n    console.warn('Sentry DSN is empty or missing, skipping initialization')\n    return null\n  }\n\n  try {\n    const Sentry = await import('@sentry/nextjs')\n\n    Sentry.init({\n      dsn,\n      environment: config.environment,\n      release: config.release,\n      tracesSampleRate: config.environment === 'production' ? 0.2 : 1.0,\n    })\n\n    // Set user information if available\n    if (config.userId || config.userEmail) {\n      Sentry.setUser({\n        id: config.userId,\n        email: config.userEmail,\n      })\n    }\n\n    sentryInitialized = true\n    return Sentry\n  } catch (error) {\n    console.error('Failed to initialize Sentry:', error)\n    // Log detailed error information to help with debugging\n    if (error instanceof Error) {\n      console.error(`Sentry initialization error: ${error.name}: ${error.message}`)\n      if (error.stack) console.error(`Stack trace: ${error.stack}`)\n    }\n    // Log environment information to help diagnose deployment issues\n    console.error(`Environment: ${process.env.NODE_ENV}, Release: ${config.release}`)\n    return null\n  }\n}\n\n/**\n * Initialize LogRocket for session replay\n * @returns The LogRocket instance if initialization was successful, null otherwise\n */\nasync function initLogRocket(appId: string, config: LoggerConfig) {\n  // Skip initialization if already initialized or if appId is missing/empty\n  if (logRocketInitialized) {\n    console.warn('LogRocket already initialized, skipping initialization')\n    return\n  }\n\n  if (!appId || appId.trim() === '') {\n    console.warn('LogRocket App ID is empty or missing, skipping initialization')\n    return null\n  }\n\n  try {\n    const LogRocket = (await import('logrocket')).default\n\n    LogRocket.init(appId, {\n      release: config.release,\n      console: {\n        isEnabled: {\n          error: true,\n          warn: true,\n        },\n      },\n      network: {\n        isEnabled: true,\n        requestSanitizer: request => {\n          // Don't log request bodies for sensitive endpoints\n          if (request.url.includes('/api/auth') || request.url.includes('/api/user')) {\n            request.body = null\n          }\n          return request\n        },\n        responseSanitizer: response => {\n          // Don't log response bodies for sensitive endpoints\n          if (response.url.includes('/api/auth') || response.url.includes('/api/user')) {\n            response.body = null\n          }\n          return response\n        },\n      },\n    })\n\n    // Set user information if available\n    if (config.userId || config.userEmail) {\n      LogRocket.identify(config.userId || 'anonymous', {\n        email: config.userEmail,\n      })\n    }\n\n    // Connect LogRocket with Sentry if both are enabled\n    if (sentryInitialized) {\n      const Sentry = await import('@sentry/nextjs')\n      LogRocket.getSessionURL(sessionURL => {\n        Sentry.configureScope(scope => {\n          scope.setExtra('logRocketSessionURL', sessionURL)\n\n          // Add request ID to Sentry scope if available\n          if (loggerConfig.requestId) {\n            scope.setTag('requestId', loggerConfig.requestId)\n          }\n        })\n      })\n    }\n\n    // Add request ID to LogRocket metadata if available\n    if (loggerConfig.requestId) {\n      LogRocket.setMeta('requestId', loggerConfig.requestId)\n    }\n\n    logRocketInitialized = true\n    return LogRocket\n  } catch (error) {\n    console.error('Failed to initialize LogRocket:', error)\n    // Log detailed error information to help with debugging\n    if (error instanceof Error) {\n      console.error(`LogRocket initialization error: ${error.name}: ${error.message}`)\n      if (error.stack) console.error(`Stack trace: ${error.stack}`)\n    }\n    // Log environment information to help diagnose deployment issues\n    console.error(\n      `Environment: ${process.env.NODE_ENV}, Release: ${config.release}, AppId: ${appId}`\n    )\n    return null\n  }\n}\n\n/**\n * Set user information for logging\n */\nexport async function setLogUser(userId?: string, userEmail?: string) {\n  loggerConfig.userId = userId\n  loggerConfig.userEmail = userEmail\n\n  // Update user information in external services\n  if (sentryInitialized) {\n    const Sentry = await import('@sentry/nextjs')\n    Sentry.setUser({\n      id: userId,\n      email: userEmail,\n    })\n  }\n\n  if (logRocketInitialized && typeof window !== 'undefined') {\n    const LogRocket = (await import('logrocket')).default\n    LogRocket.identify(userId || 'anonymous', {\n      email: userEmail,\n    })\n  }\n}\n\n/**\n * Set request ID for logging\n * This is useful for tracking logs across a single request lifecycle\n * and correlating logs between different services\n */\nexport async function setRequestId(requestId: string) {\n  loggerConfig.requestId = requestId\n\n  // Update request ID in external services\n  if (sentryInitialized && typeof window !== 'undefined') {\n    try {\n      const Sentry = await import('@sentry/nextjs')\n      Sentry.configureScope(scope => {\n        scope.setTag('requestId', requestId)\n      })\n    } catch (err) {\n      console.error('Failed to set request ID in Sentry:', err)\n    }\n  }\n\n  if (logRocketInitialized && typeof window !== 'undefined') {\n    try {\n      const LogRocket = (await import('logrocket')).default\n      LogRocket.setMeta('requestId', requestId)\n    } catch (err) {\n      console.error('Failed to set request ID in LogRocket:', err)\n    }\n  }\n}\n\n/**\n * Log a message with the specified level\n */\nasync function log(\n  level: LogLevel,\n  message: string,\n  context?: Record<string, unknown>,\n  tags?: string[],\n  error?: Error\n) {\n  // Skip if below minimum log level\n  if (loggerConfig.minLevel && shouldSkipLog(level, loggerConfig.minLevel)) {\n    return\n  }\n\n  // Enhance context with requestId and userId if available in config\n  const enhancedContext = sanitizeForLogging({\n    ...(context || {}),\n    ...(loggerConfig.requestId ? { requestId: loggerConfig.requestId } : {}),\n    ...(loggerConfig.userId ? { userId: loggerConfig.userId } : {}),\n  })\n\n  // Log to console if enabled\n  if (loggerConfig.enableConsole !== false) {\n    logToConsole(level, message, enhancedContext, tags, error)\n  }\n\n  // Log to external services\n  await logToExternalServices(level, message, enhancedContext, tags, error)\n}\n\n/**\n * Priority map for log levels to make comparisons more maintainable\n */\nconst LOG_LEVEL_PRIORITY: Record<LogLevel, number> = {\n  [LogLevel.DEBUG]: 0,\n  [LogLevel.INFO]: 1,\n  [LogLevel.WARN]: 2,\n  [LogLevel.ERROR]: 3,\n  [LogLevel.FATAL]: 4,\n}\n\n/**\n * Determine if a log should be skipped based on minimum level\n */\nfunction shouldSkipLog(level: LogLevel, minLevel: LogLevel): boolean {\n  return LOG_LEVEL_PRIORITY[level] < LOG_LEVEL_PRIORITY[minLevel]\n}\n\n/**\n * Log to the console with appropriate formatting\n */\nfunction logToConsole(\n  level: LogLevel,\n  message: string,\n  context?: Record<string, unknown>,\n  tags?: string[],\n  error?: Error\n) {\n  const timestamp = new Date().toISOString()\n  const formattedMessage = `[${timestamp}] [${level.toUpperCase()}] ${message}`\n  const logData = { ...(context || {}), tags }\n\n  // Use the appropriate console method based on level\n  switch (level) {\n    case LogLevel.DEBUG:\n      console.debug(formattedMessage, logData)\n      break\n    case LogLevel.INFO:\n      console.info(formattedMessage, logData)\n      break\n    case LogLevel.WARN:\n      console.warn(formattedMessage, logData)\n      break\n    case LogLevel.ERROR:\n    case LogLevel.FATAL:\n      console.error(formattedMessage, error || '', logData)\n      break\n  }\n}\n\n/**\n * Log to external services like Sentry and LogRocket\n */\nasync function logToExternalServices(\n  level: LogLevel,\n  message: string,\n  context?: Record<string, unknown>,\n  tags?: string[],\n  error?: Error\n): Promise<void> {\n  // Send to Sentry if configured and level is ERROR or FATAL\n  if (sentryInitialized && (level === LogLevel.ERROR || level === LogLevel.FATAL)) {\n    try {\n      const Sentry = await import('@sentry/nextjs')\n\n      // Set extra context\n      Sentry.configureScope(scope => {\n        if (context) {\n          Object.entries(context).forEach(([key, value]) => {\n            scope.setExtra(key, value)\n          })\n        }\n\n        if (tags) {\n          tags.forEach(tag => {\n            scope.setTag(tag, 'true')\n          })\n        }\n      })\n\n      // Capture the error or message\n      if (error) {\n        Sentry.captureException(error)\n      } else {\n        Sentry.captureMessage(message, level)\n      }\n    } catch (err) {\n      console.error('Failed to log to Sentry:', err)\n      if (err instanceof Error) {\n        console.error(`Sentry logging error: ${err.name}: ${err.message}`)\n        // Don't log stack trace here to avoid recursive error logging\n      }\n    }\n  }\n\n  // Send to LogRocket if configured\n  if (logRocketInitialized) {\n    try {\n      const LogRocket = (await import('logrocket')).default\n\n      // Log the message\n      if (level === LogLevel.ERROR || level === LogLevel.FATAL) {\n        LogRocket.captureException(error || new Error(message), {\n          tags: tags?.reduce((acc, tag) => ({ ...acc, [tag]: true }), {}),\n          extra: context,\n        })\n      } else if (level === LogLevel.WARN) {\n        LogRocket.warn(message, context)\n      } else {\n        LogRocket.log(message, context)\n      }\n    } catch (err) {\n      console.error('Failed to log to LogRocket:', err)\n      if (err instanceof Error) {\n        console.error(`LogRocket logging error: ${err.name}: ${err.message}`)\n        // Don't log stack trace here to avoid recursive error logging\n      }\n    }\n  }\n}\n\n/**\n * Log a debug message\n * @returns A Promise that resolves when logging is complete\n */\nexport function debug(message: string, context?: Record<string, unknown>, tags?: string[]): Promise<void> {\n  return log(LogLevel.DEBUG, message, context, tags)\n}\n\n/**\n * Log an info message\n * @returns A Promise that resolves when logging is complete\n */\nexport function info(message: string, context?: Record<string, unknown>, tags?: string[]): Promise<void> {\n  return log(LogLevel.INFO, message, context, tags)\n}\n\n/**\n * Log a warning message\n * @returns A Promise that resolves when logging is complete\n */\nexport function warn(message: string, context?: Record<string, unknown>, tags?: string[]): Promise<void> {\n  return log(LogLevel.WARN, message, context, tags)\n}\n\n/**\n * Log an error message\n * @returns A Promise that resolves when logging is complete\n */\nexport function error(\n  message: string,\n  errorObj?: Error,\n  context?: Record<string, unknown>,\n  tags?: string[]\n): Promise<void> {\n  return log(LogLevel.ERROR, message, context, tags, errorObj)\n}\n\n/**\n * Log a fatal error message\n * @returns A Promise that resolves when logging is complete\n */\nexport function fatal(\n  message: string,\n  errorObj?: Error,\n  context?: Record<string, unknown>,\n  tags?: string[]\n): Promise<void> {\n  return log(LogLevel.FATAL, message, context, tags, errorObj)\n}\n\n// Export a default logger object\nconst logger = {\n  debug,\n  info,\n  warn,\n  error,\n  fatal,\n  configureLogger,\n  shutdownLogger,\n  setLogUser,\n  setRequestId,\n}\n\nexport default logger\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\lib\\monitoring\\performance.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 225,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 225,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5660, 5663], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5660, 5663], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/monitoring/performance.ts\r\nimport logger from '@/lib/logging/logger'\r\n\r\n/**\r\n * Performance monitoring utility\r\n *\r\n * This module provides utilities for monitoring performance metrics\r\n * and reporting them to the logging system.\r\n */\r\n\r\n// Performance metric types\r\nexport enum MetricType {\r\n  NAVIGATION = 'navigation',\r\n  RESOURCE = 'resource',\r\n  PAINT = 'paint',\r\n  LAYOUT = 'layout',\r\n  FIRST_INPUT = 'first-input',\r\n  CUSTOM = 'custom',\r\n}\r\n\r\n// Performance metric interface\r\nexport interface PerformanceMetric {\r\n  name: string\r\n  type: MetricType\r\n  value: number\r\n  unit: 'ms' | 'bytes' | 'count'\r\n  timestamp: number\r\n}\r\n\r\n/**\r\n * Initialize performance monitoring\r\n */\r\nexport function initPerformanceMonitoring() {\r\n  if (typeof window === 'undefined' || !window.performance) {\r\n    return\r\n  }\r\n\r\n  // Report navigation timing metrics\r\n  reportNavigationTiming()\r\n\r\n  // Set up performance observers\r\n  setupPerformanceObservers()\r\n\r\n  // Report metrics on page unload\r\n  window.addEventListener('unload', () => {\r\n    reportResourceTiming()\r\n  })\r\n}\r\n\r\n/**\r\n * Report navigation timing metrics\r\n */\r\nfunction reportNavigationTiming() {\r\n  if (typeof window === 'undefined' || !window.performance) {\r\n    return\r\n  }\r\n\r\n  // Wait for the page to be fully loaded\r\n  window.addEventListener('load', () => {\r\n    setTimeout(() => {\r\n      const navigation = performance.getEntriesByType(\r\n        'navigation'\r\n      )[0] as PerformanceNavigationTiming\r\n\r\n      if (!navigation) {\r\n        return\r\n      }\r\n\r\n      const metrics: PerformanceMetric[] = [\r\n        {\r\n          name: 'time_to_first_byte',\r\n          type: MetricType.NAVIGATION,\r\n          value: navigation.responseStart - navigation.requestStart,\r\n          unit: 'ms',\r\n          timestamp: Date.now(),\r\n        },\r\n        {\r\n          name: 'dom_load',\r\n          type: MetricType.NAVIGATION,\r\n          value: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,\r\n          unit: 'ms',\r\n          timestamp: Date.now(),\r\n        },\r\n        {\r\n          name: 'page_load',\r\n          type: MetricType.NAVIGATION,\r\n          value: navigation.loadEventEnd - navigation.loadEventStart,\r\n          unit: 'ms',\r\n          timestamp: Date.now(),\r\n        },\r\n        {\r\n          name: 'total_page_load',\r\n          type: MetricType.NAVIGATION,\r\n          value: navigation.loadEventEnd - navigation.startTime,\r\n          unit: 'ms',\r\n          timestamp: Date.now(),\r\n        },\r\n      ]\r\n\r\n      // Log the metrics\r\n      logger.info(\r\n        'Navigation timing metrics',\r\n        {\r\n          metrics,\r\n          url: window.location.href,\r\n          pathname: window.location.pathname,\r\n        },\r\n        ['performance', 'navigation']\r\n      )\r\n    }, 0)\r\n  })\r\n}\r\n\r\n/**\r\n * Report resource timing metrics\r\n */\r\nfunction reportResourceTiming() {\r\n  if (typeof window === 'undefined' || !window.performance) {\r\n    return\r\n  }\r\n\r\n  const resources = performance.getEntriesByType('resource')\r\n\r\n  if (!resources || resources.length === 0) {\r\n    return\r\n  }\r\n\r\n  // Group resources by type\r\n  const resourcesByType: Record<string, PerformanceResourceTiming[]> = {}\r\n\r\n  resources.forEach(resource => {\r\n    const resourceTiming = resource as PerformanceResourceTiming\r\n    const url = new URL(resourceTiming.name)\r\n    const fileExtension = url.pathname.split('.').pop() || 'unknown'\r\n\r\n    if (!resourcesByType[fileExtension]) {\r\n      resourcesByType[fileExtension] = []\r\n    }\r\n\r\n    resourcesByType[fileExtension].push(resourceTiming)\r\n  })\r\n\r\n  // Calculate metrics for each resource type\r\n  const metrics: Record<\r\n    string,\r\n    {\r\n      count: number\r\n      totalSize: number\r\n      totalDuration: number\r\n      averageDuration: number\r\n    }\r\n  > = {}\r\n\r\n  Object.entries(resourcesByType).forEach(([type, resources]) => {\r\n    const totalSize = resources.reduce((sum, resource) => {\r\n      return sum + (resource.transferSize || 0)\r\n    }, 0)\r\n\r\n    const totalDuration = resources.reduce((sum, resource) => {\r\n      return sum + (resource.responseEnd - resource.startTime)\r\n    }, 0)\r\n\r\n    metrics[type] = {\r\n      count: resources.length,\r\n      totalSize,\r\n      totalDuration,\r\n      averageDuration: totalDuration / resources.length,\r\n    }\r\n  })\r\n\r\n  // Log the metrics\r\n  logger.info(\r\n    'Resource timing metrics',\r\n    {\r\n      metrics,\r\n      url: window.location.href,\r\n      pathname: window.location.pathname,\r\n    },\r\n    ['performance', 'resource']\r\n  )\r\n}\r\n\r\n/**\r\n * Set up performance observers\r\n */\r\nfunction setupPerformanceObservers() {\r\n  if (typeof window === 'undefined' || !window.PerformanceObserver) {\r\n    return\r\n  }\r\n\r\n  // Observe paint metrics (FP, FCP)\r\n  try {\r\n    const paintObserver = new PerformanceObserver(entries => {\r\n      entries.getEntries().forEach(entry => {\r\n        const metric: PerformanceMetric = {\r\n          name: entry.name,\r\n          type: MetricType.PAINT,\r\n          value: entry.startTime,\r\n          unit: 'ms',\r\n          timestamp: Date.now(),\r\n        }\r\n\r\n        logger.info(\r\n          `Paint metric: ${entry.name}`,\r\n          {\r\n            metric,\r\n            url: window.location.href,\r\n            pathname: window.location.pathname,\r\n          },\r\n          ['performance', 'paint']\r\n        )\r\n      })\r\n    })\r\n\r\n    paintObserver.observe({ entryTypes: ['paint'] })\r\n  } catch (error) {\r\n    logger.warn('Failed to observe paint metrics', { error })\r\n  }\r\n\r\n  // Observe layout shift metrics (CLS)\r\n  try {\r\n    let cumulativeLayoutShift = 0\r\n\r\n    const layoutShiftObserver = new PerformanceObserver(entries => {\r\n      entries.getEntries().forEach((entry: any) => {\r\n        // Only count layout shifts without recent user input\r\n        if (!entry.hadRecentInput) {\r\n          cumulativeLayoutShift += entry.value\r\n        }\r\n      })\r\n\r\n      const metric: PerformanceMetric = {\r\n        name: 'cumulative_layout_shift',\r\n        type: MetricType.LAYOUT,\r\n        value: cumulativeLayoutShift,\r\n        unit: 'count',\r\n        timestamp: Date.now(),\r\n      }\r\n\r\n      logger.info(\r\n        'Layout shift metric',\r\n        {\r\n          metric,\r\n          url: window.location.href,\r\n          pathname: window.location.pathname,\r\n        },\r\n        ['performance', 'layout']\r\n      )\r\n    })\r\n\r\n    layoutShiftObserver.observe({ entryTypes: ['layout-shift'] })\r\n  } catch (error) {\r\n    logger.warn('Failed to observe layout shift metrics', { error })\r\n  }\r\n\r\n  // Observe first input delay (FID)\r\n  try {\r\n    const firstInputObserver = new PerformanceObserver(entries => {\r\n      entries.getEntries().forEach(entry => {\r\n        const metric: PerformanceMetric = {\r\n          name: 'first_input_delay',\r\n          type: MetricType.FIRST_INPUT,\r\n          value: entry.processingStart - entry.startTime,\r\n          unit: 'ms',\r\n          timestamp: Date.now(),\r\n        }\r\n\r\n        logger.info(\r\n          'First input delay metric',\r\n          {\r\n            metric,\r\n            url: window.location.href,\r\n            pathname: window.location.pathname,\r\n          },\r\n          ['performance', 'first-input']\r\n        )\r\n      })\r\n    })\r\n\r\n    firstInputObserver.observe({ entryTypes: ['first-input'] })\r\n  } catch (error) {\r\n    logger.warn('Failed to observe first input delay metrics', { error })\r\n  }\r\n}\r\n\r\n/**\r\n * Measure the execution time of a function\r\n * @param fn Function to measure\r\n * @param name Name of the metric\r\n * @returns Result of the function\r\n */\r\nexport function measureExecutionTime<T>(fn: () => T, name: string): T {\r\n  const start = performance.now()\r\n  const result = fn()\r\n  const duration = performance.now() - start\r\n\r\n  const metric: PerformanceMetric = {\r\n    name,\r\n    type: MetricType.CUSTOM,\r\n    value: duration,\r\n    unit: 'ms',\r\n    timestamp: Date.now(),\r\n  }\r\n\r\n  logger.debug(\r\n    `Execution time for ${name}`,\r\n    {\r\n      metric,\r\n      url: typeof window !== 'undefined' ? window.location.href : undefined,\r\n      pathname: typeof window !== 'undefined' ? window.location.pathname : undefined,\r\n    },\r\n    ['performance', 'execution-time']\r\n  )\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * Measure the execution time of an async function\r\n * @param fn Async function to measure\r\n * @param name Name of the metric\r\n * @returns Promise that resolves to the result of the function\r\n */\r\nexport async function measureAsyncExecutionTime<T>(fn: () => Promise<T>, name: string): Promise<T> {\r\n  const start = performance.now()\r\n\r\n  try {\r\n    const result = await fn()\r\n    const duration = performance.now() - start\r\n\r\n    const metric: PerformanceMetric = {\r\n      name,\r\n      type: MetricType.CUSTOM,\r\n      value: duration,\r\n      unit: 'ms',\r\n      timestamp: Date.now(),\r\n    }\r\n\r\n    logger.debug(\r\n      `Async execution time for ${name}`,\r\n      {\r\n        metric,\r\n        url: typeof window !== 'undefined' ? window.location.href : undefined,\r\n        pathname: typeof window !== 'undefined' ? window.location.pathname : undefined,\r\n      },\r\n      ['performance', 'execution-time']\r\n    )\r\n\r\n    return result\r\n  } catch (error) {\r\n    const duration = performance.now() - start\r\n\r\n    const metric: PerformanceMetric = {\r\n      name: `${name}_error`,\r\n      type: MetricType.CUSTOM,\r\n      value: duration,\r\n      unit: 'ms',\r\n      timestamp: Date.now(),\r\n    }\r\n\r\n    logger.warn(\r\n      `Error in async execution for ${name}`,\r\n      {\r\n        metric,\r\n        error,\r\n        url: typeof window !== 'undefined' ? window.location.href : undefined,\r\n        pathname: typeof window !== 'undefined' ? window.location.pathname : undefined,\r\n      },\r\n      ['performance', 'execution-time', 'error']\r\n    )\r\n\r\n    throw error\r\n  }\r\n}\r\n\r\n/**\r\n * Create a performance monitoring hook for React components\r\n * @param componentName Name of the component\r\n * @returns Object with performance monitoring methods\r\n */\r\nexport function usePerformanceMonitoring(componentName: string) {\r\n  const renderStart = performance.now()\r\n\r\n  return {\r\n    /**\r\n     * Report component render time\r\n     */\r\n    reportRenderTime: () => {\r\n      const renderTime = performance.now() - renderStart\r\n\r\n      const metric: PerformanceMetric = {\r\n        name: `${componentName}_render`,\r\n        type: MetricType.CUSTOM,\r\n        value: renderTime,\r\n        unit: 'ms',\r\n        timestamp: Date.now(),\r\n      }\r\n\r\n      logger.debug(\r\n        `Render time for ${componentName}`,\r\n        {\r\n          metric,\r\n          url: typeof window !== 'undefined' ? window.location.href : undefined,\r\n          pathname: typeof window !== 'undefined' ? window.location.pathname : undefined,\r\n        },\r\n        ['performance', 'render-time']\r\n      )\r\n    },\r\n\r\n    /**\r\n     * Measure the execution time of a function\r\n     * @param fn Function to measure\r\n     * @param name Name of the metric\r\n     * @returns Result of the function\r\n     */\r\n    measureExecutionTime: <T>(fn: () => T, name: string): T => {\r\n      return measureExecutionTime(fn, `${componentName}_${name}`)\r\n    },\r\n\r\n    /**\r\n     * Measure the execution time of an async function\r\n     * @param fn Async function to measure\r\n     * @param name Name of the metric\r\n     * @returns Promise that resolves to the result of the function\r\n     */\r\n    measureAsyncExecutionTime: <T>(fn: () => Promise<T>, name: string): Promise<T> => {\r\n      return measureAsyncExecutionTime(fn, `${componentName}_${name}`)\r\n    },\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\lib\\rate-limit.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\lib\\types\\property.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 35,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 35,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [790, 793], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [790, 793], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\r\n * Property-related type definitions\r\n */\r\n\r\n/**\r\n * Property interface representing a real estate property\r\n */\r\nexport interface Property {\r\n  id: string\r\n  uploadId: string\r\n  address: string\r\n  city?: string\r\n  state?: string\r\n  zipCode?: string\r\n  postcode?: string // UK-specific postal code\r\n  country?: string\r\n  price?: number\r\n  bedrooms?: number\r\n  bathrooms?: number\r\n  squareFeet?: number\r\n  description?: string\r\n  features?: string[]\r\n  status?: 'available' | 'pending' | 'sold' | 'deleted'\r\n\r\n  // UK-specific fields\r\n  councilTaxBand?: string // A–H\r\n  tenure?: string // Freehold / Leasehold\r\n  epcRating?: string // A–G\r\n\r\n  createdAt: string\r\n  updatedAt?: string\r\n  createdBy?: string\r\n  updatedBy?: string\r\n  images?: PropertyImage[]\r\n  metadata?: Record<string, any>\r\n}\r\n\r\n/**\r\n * Property image interface\r\n */\r\nexport interface PropertyImage {\r\n  id: string\r\n  propertyId: string\r\n  url: string\r\n  caption?: string\r\n  isPrimary?: boolean\r\n  order?: number\r\n  createdAt: string\r\n}\r\n\r\n/**\r\n * Input for creating a new property\r\n */\r\nexport type CreatePropertyInput = Omit<Property, 'id' | 'createdAt' | 'images'> & {\r\n  images?: Omit<PropertyImage, 'id' | 'propertyId' | 'createdAt'>[]\r\n}\r\n\r\n/**\r\n * Input for updating an existing property\r\n */\r\nexport type UpdatePropertyInput = Partial<\r\n  Omit<Property, 'id' | 'createdAt' | 'createdBy' | 'images'>\r\n> & {\r\n  images?: Omit<PropertyImage, 'id' | 'propertyId' | 'createdAt'>[]\r\n}\r\n\r\n/**\r\n * Property search filters\r\n */\r\nexport interface PropertySearchFilters {\r\n  city?: string\r\n  state?: string\r\n  zipCode?: string\r\n  minPrice?: number\r\n  maxPrice?: number\r\n  minBedrooms?: number\r\n  minBathrooms?: number\r\n  minSquareFeet?: number\r\n  status?: Property['status']\r\n  createdAfter?: string\r\n  createdBefore?: string\r\n}\r\n\r\n/**\r\n * Property search result\r\n */\r\nexport interface PropertySearchResult {\r\n  properties: Property[]\r\n  total: number\r\n  page: number\r\n  pageSize: number\r\n  totalPages: number\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\middleware.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\next.config.cjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\next.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\pages\\MyPage.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\pages\\_document.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\postcss.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\setup-tests.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\src\\components\\MyPageComponent.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 8,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 8,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [175, 216], "text": "" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\src\\ui\\Button.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\src\\ui\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\tailwind.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\apps\\web\\vitest.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\ApiCallExample.tsx",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 99,
        "column": 13,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 99,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [3363, 3391], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 122,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 122,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [4010, 4047], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 236,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 236,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [7564, 7623], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// ApiCallExample.tsx\r\nimport React, { useState, useEffect } from 'react'\r\n\r\nimport {\r\n  fetchWithRetry,\r\n  NetworkError,\r\n  TimeoutError,\r\n  ApiError,\r\n  createCircuitBreaker,\r\n  withCircuitBreaker,\r\n} from '../lib/api/fetchUtils'\r\n\r\nimport ErrorBoundary from './ErrorBoundary'\r\n\r\ninterface Property {\r\n  id: string\r\n  address: string\r\n  price: number\r\n  bedrooms: number\r\n  type: string\r\n}\r\n\r\n// Create a circuit breaker for the properties API\r\nconst propertiesCircuitBreaker = createCircuitBreaker({\r\n  name: 'properties-api',\r\n  failureThreshold: 3,\r\n  resetTimeout: 15000, // 15 seconds\r\n})\r\n\r\nconst PropertyList = () => {\r\n  const [properties, setProperties] = useState<Property[]>([])\r\n  const [loading, setLoading] = useState<boolean>(true)\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [retryCount, setRetryCount] = useState<number>(0)\r\n  const [circuitStatus, setCircuitStatus] = useState<'CLOSED' | 'OPEN' | 'HALF_OPEN'>(\r\n    propertiesCircuitBreaker.getStatus()\r\n  )\r\n\r\n  useEffect(() => {\r\n    // Create an AbortController for cancelling the fetch request\r\n    const controller = new AbortController()\r\n    const signal = controller.signal\r\n\r\n    const fetchProperties = async () => {\r\n      try {\r\n        setLoading(true)\r\n\r\n        // Check circuit breaker status and update UI\r\n        const currentStatus = propertiesCircuitBreaker.getStatus()\r\n        setCircuitStatus(currentStatus)\r\n\r\n        if (currentStatus === 'OPEN') {\r\n          setError('Service is temporarily unavailable. Please try again later.')\r\n          setLoading(false)\r\n          return\r\n        }\r\n\r\n        // Using circuit breaker pattern with our fetch utility\r\n        const data = await withCircuitBreaker(\r\n          // Primary function\r\n          () =>\r\n            fetchWithRetry<Property[]>(\r\n              '/api/properties',\r\n              { signal },\r\n              3, // 3 retries\r\n              300, // 300ms initial backoff\r\n              5000 // 5 second timeout\r\n            ),\r\n          // Circuit breaker\r\n          propertiesCircuitBreaker,\r\n          // Fallback function (optional - returns empty array if API is down)\r\n          () => Promise.resolve([])\r\n        )\r\n\r\n        setProperties(data)\r\n        setError(null)\r\n\r\n        // Update circuit status after successful request\r\n        setCircuitStatus(propertiesCircuitBreaker.getStatus())\r\n      } catch (err) {\r\n        // Type guard for different error types\r\n        if (err instanceof TimeoutError) {\r\n          setError('Request timed out. Please check your connection and try again.')\r\n        } else if (err instanceof NetworkError) {\r\n          setError('Network error occurred. Please check your connection and try again.')\r\n        } else if (err instanceof ApiError) {\r\n          if (err.status === 401 || err.status === 403) {\r\n            setError('You are not authorized to access this resource.')\r\n          } else if (err.status === 404) {\r\n            setError('The requested resource was not found.')\r\n          } else if (err.status >= 500) {\r\n            setError('Server error. Please try again later.')\r\n          } else {\r\n            setError(`API error: ${err.message}`)\r\n          }\r\n        } else if (err instanceof Error) {\r\n          // Don't update state if the request was aborted\r\n          if (err.name === 'AbortError') {\r\n            console.log('Fetch aborted')\r\n            return\r\n          }\r\n\r\n          setError(`Error: ${err.message}`)\r\n          console.error('Error fetching properties:', err)\r\n        } else {\r\n          setError('An unknown error occurred. Please try again later.')\r\n          console.error('Unknown error:', err)\r\n        }\r\n\r\n        // Update circuit status after failed request\r\n        setCircuitStatus(propertiesCircuitBreaker.getStatus())\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n\r\n    fetchProperties()\r\n\r\n    // Cleanup function to abort fetch when component unmounts\r\n    return () => {\r\n      controller.abort()\r\n      console.log('Property fetch aborted')\r\n    }\r\n  }, [retryCount]) // Dependency on retryCount to trigger refetch\r\n\r\n  // Function to retry loading data with proper error handling\r\n  const handleRetry = () => {\r\n    setError(null)\r\n\r\n    // If circuit is OPEN, try to reset it after the timeout period\r\n    if (circuitStatus === 'OPEN') {\r\n      const now = Date.now()\r\n      const lastFailure = propertiesCircuitBreaker['lastFailure'] as unknown as number\r\n      const resetTimeout = 15000 // Same as in circuit breaker creation\r\n\r\n      if (lastFailure && now - lastFailure > resetTimeout) {\r\n        // Manually reset the circuit breaker for demonstration purposes\r\n        propertiesCircuitBreaker.reset()\r\n        setCircuitStatus(propertiesCircuitBreaker.getStatus())\r\n      }\r\n    }\r\n\r\n    setRetryCount(prev => prev + 1) // Increment retry count to trigger useEffect\r\n  }\r\n\r\n  // Helper function to get circuit status badge\r\n  const getCircuitStatusBadge = () => {\r\n    let className = 'circuit-status'\r\n    let label = ''\r\n\r\n    switch (circuitStatus) {\r\n      case 'CLOSED':\r\n        className += ' closed'\r\n        label = 'API: Healthy'\r\n        break\r\n      case 'HALF_OPEN':\r\n        className += ' half-open'\r\n        label = 'API: Testing'\r\n        break\r\n      case 'OPEN':\r\n        className += ' open'\r\n        label = 'API: Down'\r\n        break\r\n    }\r\n\r\n    return <div className={className}>{label}</div>\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"loading-container\">\r\n        {getCircuitStatusBadge()}\r\n        <div className=\"loading-spinner\"></div>\r\n        <p>Loading properties...</p>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"error-container\">\r\n        {getCircuitStatusBadge()}\r\n        <h3>Error</h3>\r\n        <p>{error}</p>\r\n        <button onClick={handleRetry} className=\"retry-button\" disabled={circuitStatus === 'OPEN'}>\r\n          {circuitStatus === 'OPEN' ? 'Service Unavailable' : 'Try Again'}\r\n        </button>\r\n        {circuitStatus === 'OPEN' && (\r\n          <p className=\"circuit-message\">\r\n            The service is temporarily unavailable. Please try again later.\r\n          </p>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"property-list\">\r\n      <div className=\"property-header\">\r\n        <h2>Available Properties</h2>\r\n        {getCircuitStatusBadge()}\r\n      </div>\r\n\r\n      {properties.length === 0 ? (\r\n        <div className=\"empty-state\">\r\n          <p>No properties found.</p>\r\n          <button onClick={handleRetry} className=\"refresh-button\">\r\n            Refresh\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <ul>\r\n          {properties.map(property => (\r\n            <li key={property.id} className=\"property-card\">\r\n              <h3>{property.address}</h3>\r\n              <p>Price: ${property.price.toLocaleString()}</p>\r\n              <p>Bedrooms: {property.bedrooms}</p>\r\n              <p>Type: {property.type}</p>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\n// Wrap the component with ErrorBoundary for additional safety\r\nconst ApiCallExample = () => {\r\n  // Custom error handler for the ErrorBoundary\r\n  const handleError = (error: Error, errorInfo: React.ErrorInfo) => {\r\n    // Log to monitoring service or analytics in a real app\r\n    console.error('Error caught by boundary in ApiCallExample:', error, errorInfo)\r\n\r\n    // You could also reset the circuit breaker here if needed\r\n    if (propertiesCircuitBreaker.getStatus() !== 'CLOSED') {\r\n      console.log('Resetting circuit breaker due to React error')\r\n      propertiesCircuitBreaker.reset()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"api-call-example\">\r\n      <h1>Property Listings</h1>\r\n      <div className=\"api-description\">\r\n        <p>\r\n          This component demonstrates robust API calls with timeout handling, retry logic, and\r\n          circuit breaker pattern.\r\n        </p>\r\n      </div>\r\n      <ErrorBoundary\r\n        onError={handleError}\r\n        fallback={\r\n          <div className=\"error-fallback\">\r\n            <h3>Something went wrong</h3>\r\n            <p>The property listing component encountered an error.</p>\r\n            <button onClick={() => window.location.reload()} className=\"reload-button\">\r\n              Reload Page\r\n            </button>\r\n          </div>\r\n        }\r\n      >\r\n        <PropertyList />\r\n      </ErrorBoundary>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ApiCallExample\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\ErrorBoundary.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\ErrorBoundary.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\ErrorBoundaryExample.tsx",
    "messages": [
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 31,
        "column": 10,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [813, 875],
              "text": "We&apos;re sorry for the inconvenience. Our team has been notified."
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [813, 875],
              "text": "We&lsquo;re sorry for the inconvenience. Our team has been notified."
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [813, 875],
              "text": "We&#39;re sorry for the inconvenience. Our team has been notified."
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [813, 875],
              "text": "We&rsquo;re sorry for the inconvenience. Our team has been notified."
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// ErrorBoundaryExample.tsx\r\nimport React from 'react'\r\n\r\nimport ErrorBoundary from './ErrorBoundary'\r\n\r\n// Example component that might throw an error\r\nconst BuggyCounter = () => {\r\n  const [counter, setCounter] = React.useState(0)\r\n\r\n  const handleClick = () => {\r\n    setCounter(prevCounter => prevCounter + 1)\r\n  }\r\n\r\n  if (counter === 5) {\r\n    // Simulate an error when counter reaches 5\r\n    throw new Error('I crashed when counter reached 5!')\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p>Counter: {counter}</p>\r\n      <button onClick={handleClick}>Increment</button>\r\n    </div>\r\n  )\r\n}\r\n\r\n// Custom fallback UI\r\nconst CustomFallback = () => (\r\n  <div style={{ padding: '20px', border: '1px solid #f44336', borderRadius: '4px' }}>\r\n    <h3 style={{ color: '#f44336' }}>Oops! Something went wrong</h3>\r\n    <p>We're sorry for the inconvenience. Our team has been notified.</p>\r\n    <button onClick={() => window.location.reload()}>Refresh Page</button>\r\n  </div>\r\n)\r\n\r\n// Example of how to use ErrorBoundary\r\nconst ErrorBoundaryExample = () => {\r\n  const handleError = (error: Error, errorInfo: React.ErrorInfo) => {\r\n    // In a real app, you might send this to an error reporting service\r\n    console.error('Caught an error:', error, errorInfo)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Error Boundary Example</h1>\r\n\r\n      {/* Basic usage */}\r\n      <div style={{ marginBottom: '30px' }}>\r\n        <h2>Basic Error Boundary</h2>\r\n        <ErrorBoundary>\r\n          <BuggyCounter />\r\n        </ErrorBoundary>\r\n      </div>\r\n\r\n      {/* With custom fallback UI */}\r\n      <div style={{ marginBottom: '30px' }}>\r\n        <h2>Error Boundary with Custom Fallback</h2>\r\n        <ErrorBoundary fallback={<CustomFallback />}>\r\n          <BuggyCounter />\r\n        </ErrorBoundary>\r\n      </div>\r\n\r\n      {/* With error handler */}\r\n      <div>\r\n        <h2>Error Boundary with Error Handler</h2>\r\n        <ErrorBoundary onError={handleError}>\r\n          <BuggyCounter />\r\n        </ErrorBoundary>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ErrorBoundaryExample\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\LoadMore.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has an unnecessary dependency: 'observerRef.current'. Either exclude it or remove the dependency array. Mutable values like 'observerRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",
        "line": 25,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 25,
        "endColumn": 45,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [loading, hasMore]",
            "fix": { "range": [824, 863], "text": "[loading, hasMore]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect, useRef } from 'react'\r\n\r\nimport { Property } from '@/types/property'\r\n\r\nimport PropertyCard from './PropertyCard'\r\n\r\nexport default function LoadMore({ initial, query }: { initial: Property[]; query: string }) {\r\n  const [page, setPage] = useState(1)\r\n  const [properties, setProperties] = useState(initial)\r\n  const [loading, setLoading] = useState(false)\r\n  const [hasMore, setHasMore] = useState(true)\r\n  const observerRef = useRef<HTMLDivElement | null>(null)\r\n\r\n  useEffect(() => {\r\n    if (!observerRef.current || !hasMore) return\r\n\r\n    const observer = new IntersectionObserver(entries => {\r\n      if (entries[0].isIntersecting && !loading) {\r\n        setPage(prev => prev + 1)\r\n      }\r\n    })\r\n\r\n    observer.observe(observerRef.current)\r\n    return () => observer.disconnect()\r\n  }, [observerRef.current, loading, hasMore])\r\n\r\n  useEffect(() => {\r\n    if (page === 1) return\r\n\r\n    const loadMore = async () => {\r\n      setLoading(true)\r\n      try {\r\n        const res = await fetch(`/api/properties?query=${encodeURIComponent(query)}&page=${page}`)\r\n        if (!res.ok) throw new Error('Failed to fetch more properties')\r\n\r\n        const data = await res.json()\r\n        if (data.properties && Array.isArray(data.properties)) {\r\n          if (data.properties.length === 0) {\r\n            setHasMore(false)\r\n          } else {\r\n            setProperties(prev => [...prev, ...data.properties])\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading more properties:', error)\r\n        setHasMore(false)\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n\r\n    loadMore()\r\n  }, [page, query])\r\n\r\n  return (\r\n    <>\r\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6\">\r\n        {properties.map(property => (\r\n          <PropertyCard key={property.id} {...property} />\r\n        ))}\r\n      </div>\r\n\r\n      {hasMore && (\r\n        <div ref={observerRef} className=\"h-10 mt-6 text-center text-sm text-gray-400\">\r\n          {loading ? 'Loading more properties...' : 'Scroll to load more'}\r\n        </div>\r\n      )}\r\n\r\n      {!hasMore && properties.length > 0 && (\r\n        <p className=\"text-center mt-6 text-sm text-gray-500\">No more properties to load</p>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\LocationSearch.tsx",
    "messages": [
      {
        "ruleId": "jsx-a11y/role-supports-aria-props",
        "severity": 2,
        "message": "The attribute aria-expanded is not supported by the role textbox. This role is implicit on the element input.",
        "line": 93,
        "column": 9,
        "nodeType": "JSXOpeningElement",
        "endLine": 103,
        "endColumn": 11
      },
      {
        "ruleId": "jsx-a11y/click-events-have-key-events",
        "severity": 2,
        "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
        "line": 138,
        "column": 13,
        "nodeType": "JSXOpeningElement",
        "endLine": 144,
        "endColumn": 14
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect, useRef } from 'react'\r\n\r\nimport { LocationResult } from '../lib/services/locationService'\r\n\r\ninterface LocationSearchProps {\r\n  onSelect?: (location: LocationResult) => void\r\n  placeholder?: string\r\n  className?: string\r\n  initialValue?: string\r\n}\r\n\r\n/**\r\n * Location Search component with autocomplete for UK postcodes and locations\r\n */\r\nexport default function LocationSearch({\r\n  onSelect,\r\n  placeholder = 'Search for a location or postcode',\r\n  className = '',\r\n  initialValue = '',\r\n}: LocationSearchProps) {\r\n  const [query, setQuery] = useState(initialValue)\r\n  const [results, setResults] = useState<LocationResult[]>([])\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [showResults, setShowResults] = useState(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n  const searchRef = useRef<HTMLDivElement>(null)\r\n\r\n  // Handle clicks outside the component to close the results dropdown\r\n  useEffect(() => {\r\n    function handleClickOutside(event: MouseEvent) {\r\n      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {\r\n        setShowResults(false)\r\n      }\r\n    }\r\n\r\n    document.addEventListener('mousedown', handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside)\r\n    }\r\n  }, [])\r\n\r\n  // Fetch location suggestions when query changes\r\n  useEffect(() => {\r\n    const fetchLocations = async () => {\r\n      if (!query || query.length < 2) {\r\n        setResults([])\r\n        return\r\n      }\r\n\r\n      setIsLoading(true)\r\n      setError(null)\r\n\r\n      try {\r\n        const response = await fetch(`/api/locations/search?query=${encodeURIComponent(query)}`)\r\n\r\n        if (!response.ok) {\r\n          const errorData = await response.json()\r\n          throw new Error(errorData.message || 'Failed to fetch location data')\r\n        }\r\n\r\n        const data = await response.json()\r\n        setResults(data.results)\r\n        setShowResults(true)\r\n      } catch (err) {\r\n        console.error('Error fetching locations:', err)\r\n        setError(err instanceof Error ? err.message : 'Failed to fetch location data')\r\n        setResults([])\r\n      } finally {\r\n        setIsLoading(false)\r\n      }\r\n    }\r\n\r\n    // Debounce the API call\r\n    const timeoutId = setTimeout(() => {\r\n      fetchLocations()\r\n    }, 300)\r\n\r\n    return () => clearTimeout(timeoutId)\r\n  }, [query])\r\n\r\n  // Handle selection of a location from the results\r\n  const handleSelect = (location: LocationResult) => {\r\n    setQuery(location.label)\r\n    setShowResults(false)\r\n    if (onSelect) {\r\n      onSelect(location)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={`relative ${className}`} ref={searchRef}>\r\n      <div className=\"relative\">\r\n        <input\r\n          type=\"text\"\r\n          value={query}\r\n          onChange={e => setQuery(e.target.value)}\r\n          onFocus={() => query.length >= 2 && setShowResults(true)}\r\n          placeholder={placeholder}\r\n          className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n          aria-label=\"Search for a location\"\r\n          aria-expanded={showResults}\r\n          aria-autocomplete=\"list\"\r\n        />\r\n        {isLoading && (\r\n          <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\r\n            <svg\r\n              className=\"animate-spin h-5 w-5 text-gray-400\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 24 24\"\r\n            >\r\n              <circle\r\n                className=\"opacity-25\"\r\n                cx=\"12\"\r\n                cy=\"12\"\r\n                r=\"10\"\r\n                stroke=\"currentColor\"\r\n                strokeWidth=\"4\"\r\n              ></circle>\r\n              <path\r\n                className=\"opacity-75\"\r\n                fill=\"currentColor\"\r\n                d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\r\n              ></path>\r\n            </svg>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {error && <div className=\"mt-1 text-sm text-red-600\">{error}</div>}\r\n\r\n      {showResults && results.length > 0 && (\r\n        <ul\r\n          className=\"absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-auto\"\r\n          role=\"listbox\"\r\n        >\r\n          {results.map((location, index) => (\r\n            <li\r\n              key={`${location.label}-${index}`}\r\n              onClick={() => handleSelect(location)}\r\n              className=\"px-4 py-2 hover:bg-gray-100 cursor-pointer\"\r\n              role=\"option\"\r\n              aria-selected={false}\r\n            >\r\n              {location.label}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n\r\n      {showResults && query.length >= 2 && results.length === 0 && !isLoading && (\r\n        <div className=\"absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg p-4 text-center text-gray-500\">\r\n          No locations found\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\Map.tsx",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'leaflet/dist/leaflet.css'.",
        "line": 3,
        "column": 8,
        "nodeType": "Literal",
        "endLine": 3,
        "endColumn": 34
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useRef, useEffect } from 'react'\r\n\r\nimport 'leaflet/dist/leaflet.css'\r\nimport { useLeafletMap, Location } from '@/hooks/useLeafletMap'\r\n\r\ninterface MapProps {\r\n  selectedLocation?: Location\r\n  markers?: Location[]\r\n  onMarkerClick?: (location: Location) => void\r\n  zoom?: number\r\n  height?: string\r\n}\r\n\r\n/**\r\n * A reusable map component using Leaflet\r\n *\r\n * This component is responsible for:\r\n * - Rendering the map container\r\n * - Passing props to the useLeafletMap hook\r\n * - Updating the map view when selectedLocation changes\r\n */\r\nconst Map = ({\r\n  selectedLocation = { lat: 51.505, lng: -0.09 }, // Default to London\r\n  markers = [],\r\n  onMarkerClick,\r\n  zoom = 13,\r\n  height = '400px',\r\n}: MapProps) => {\r\n  const mapContainerRef = useRef<HTMLDivElement>(null)\r\n\r\n  // Use our custom hook to manage the map\r\n  const { isMapReady, setView } = useLeafletMap({\r\n    containerRef: mapContainerRef,\r\n    initialLocation: selectedLocation,\r\n    markers,\r\n    onMarkerClick,\r\n    zoom,\r\n  })\r\n\r\n  // Update view when selected location changes\r\n  useEffect(() => {\r\n    if (isMapReady && selectedLocation) {\r\n      setView(selectedLocation, zoom)\r\n    }\r\n  }, [selectedLocation, zoom, isMapReady, setView])\r\n\r\n  return <div ref={mapContainerRef} style={{ height, width: '100%' }} data-testid=\"map-container\" />\r\n}\r\n\r\nexport default Map\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\Pagination.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\PropertyAmenities.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\PropertyCard.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'rest' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 30,
        "column": 6,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 10
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import Link from 'next/link'\r\nimport React from 'react'\r\n\r\nimport { formatGBP } from '@/lib/currency'\r\nimport { Property } from '@/types/property'\r\n\r\nimport PropertyAmenities from './PropertyAmenities'\r\n\r\ninterface PropertyCardProps extends Property {\r\n  onViewDetails?: (id: string) => void\r\n}\r\n\r\n/**\r\n * A reusable property card component that displays property information\r\n */\r\nconst PropertyCard: React.FC<PropertyCardProps> = ({\r\n  id,\r\n  title,\r\n  description,\r\n  price,\r\n  bedrooms,\r\n  bathrooms,\r\n  squareFeet,\r\n  address,\r\n  city,\r\n  metadata,\r\n  lat,\r\n  lng,\r\n  onViewDetails,\r\n  ...rest\r\n}) => {\r\n  // Format price as currency using the utility function\r\n\r\n  // Get main image URL or use placeholder\r\n  const imageUrl = metadata?.mainImageUrl || 'https://placehold.co/600x400/png?text=Property'\r\n\r\n  // Format location\r\n  const location = `${city}${address ? `, ${address}` : ''}`\r\n\r\n  // Handle view details click\r\n  const handleViewDetails = () => {\r\n    if (onViewDetails) {\r\n      onViewDetails(id)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <article\r\n      className=\"bg-white rounded-lg shadow-md overflow-hidden transition-transform hover:scale-[1.02]\"\r\n      aria-labelledby={`property-title-${id}`}\r\n    >\r\n      <div className=\"h-48 bg-gray-200\">\r\n        <img src={imageUrl} alt={`Property: ${title}`} className=\"w-full h-full object-cover\" />\r\n      </div>\r\n      <div className=\"p-4\">\r\n        <h3 id={`property-title-${id}`} className=\"text-xl font-semibold mb-2\">\r\n          {title || metadata?.title || 'Property Listing'}\r\n        </h3>\r\n        <p className=\"text-blue-600 font-bold mt-2\">{formatGBP(price)}</p>\r\n        <p className=\"text-gray-600 mb-2\">{location}</p>\r\n        <div className=\"flex justify-between text-sm text-gray-500 mb-3\">\r\n          <span aria-label={`${bedrooms} bedrooms`}>{bedrooms} beds</span>\r\n          <span aria-label={`${bathrooms} bathrooms`}>{bathrooms} baths</span>\r\n          <span aria-label={`Area: ${squareFeet} sq ft`}>{squareFeet} sq ft</span>\r\n        </div>\r\n        <p className=\"text-gray-700 mb-4 line-clamp-2\">{description}</p>\r\n        <PropertyAmenities lat={lat} lng={lng} />\r\n\r\n        {onViewDetails ? (\r\n          // Use callback if provided (for custom handling)\r\n          <button\r\n            className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded transition-colors\"\r\n            onClick={handleViewDetails}\r\n            aria-label={`View details for ${title || 'this property'}`}\r\n          >\r\n            View Details\r\n          </button>\r\n        ) : (\r\n          // Otherwise use direct link to property page\r\n          <Link href={`/properties/${id}`} passHref>\r\n            <span\r\n              className=\"block w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded transition-colors text-center cursor-pointer\"\r\n              aria-label={`View details for ${title || 'this property'}`}\r\n            >\r\n              View Details\r\n            </span>\r\n          </Link>\r\n        )}\r\n      </div>\r\n    </article>\r\n  )\r\n}\r\n\r\nexport default PropertyCard\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\PropertyListingWithLoaders.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\PropertyMap.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\PropertySearch.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\SearchForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\SearchHistory.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\SearchInput.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.",
        "line": 19,
        "column": 23,
        "nodeType": "Identifier",
        "endLine": 19,
        "endColumn": 34
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import debounce from 'lodash.debounce'\r\nimport { useRouter } from 'next/router'\r\nimport { useState, useCallback, useEffect } from 'react'\r\n\r\nimport { useSearchStore } from '../store/searchStore'\r\n\r\nexport default function SearchInput() {\r\n  const [query, setQuery] = useState('')\r\n  const { history, addQuery, clearHistory } = useSearchStore()\r\n  const router = useRouter()\r\n\r\n  // Initialize query from URL\r\n  useEffect(() => {\r\n    if (router.query.q) {\r\n      setQuery(router.query.q as string)\r\n    }\r\n  }, [router.query.q])\r\n\r\n  const updateQuery = useCallback(\r\n    debounce((q: string) => {\r\n      const query = { ...router.query }\r\n      if (q) {\r\n        query.q = q\r\n      } else {\r\n        delete query.q\r\n      }\r\n\r\n      router.push(\r\n        {\r\n          pathname: '/search',\r\n          query,\r\n        },\r\n        undefined,\r\n        { shallow: true }\r\n      )\r\n\r\n      if (q) {\r\n        addQuery(q)\r\n      }\r\n    }, 300),\r\n    [router, addQuery]\r\n  )\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const val = e.target.value\r\n    setQuery(val)\r\n    updateQuery(val)\r\n  }\r\n\r\n  return (\r\n    <div className=\"mb-4 space-y-2\">\r\n      <input\r\n        type=\"text\"\r\n        className=\"w-full p-3 border rounded\"\r\n        value={query}\r\n        onChange={onChange}\r\n        placeholder=\"Search properties...\"\r\n        aria-label=\"Search input\"\r\n      />\r\n      {history.length > 0 && (\r\n        <div className=\"text-sm text-gray-500\">\r\n          Recent:{' '}\r\n          {history.map((q, idx) => (\r\n            <button\r\n              key={idx}\r\n              className=\"underline mx-1 text-blue-600\"\r\n              onClick={() => {\r\n                setQuery(q)\r\n                updateQuery(q)\r\n              }}\r\n            >\r\n              {q}\r\n            </button>\r\n          ))}\r\n          <button className=\"ml-4 text-red-500\" onClick={() => clearHistory()}>\r\n            Clear\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\UseEffectExample.tsx",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 88,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 88,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2282, 2359], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 154,
        "column": 13,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 154,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [4571, 4605], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 182,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 182,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [5473, 5541], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 219,
        "column": 15,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 219,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [6789, 6823], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 251,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 251,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [7868, 7933], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 270,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 270,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [8488, 8532], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// UseEffectExample.tsx\r\nimport React, { useState, useEffect, useCallback } from 'react'\r\n\r\ninterface User {\r\n  id: number\r\n  name: string\r\n  email: string\r\n}\r\n\r\ninterface Post {\r\n  id: number\r\n  title: string\r\n  body: string\r\n}\r\n\r\n// Custom error types for better type checking\r\ninterface NetworkError extends Error {\r\n  name: 'NetworkError'\r\n}\r\n\r\ninterface TimeoutError extends Error {\r\n  name: 'TimeoutError'\r\n}\r\n\r\ntype ApiError = NetworkError | TimeoutError | Error\r\n\r\n// Fetch with timeout utility\r\nconst fetchWithTimeout = async (\r\n  url: string,\r\n  options: RequestInit = {},\r\n  timeout = 8000\r\n): Promise<Response> => {\r\n  const controller = new AbortController()\r\n  const { signal } = controller\r\n\r\n  const timeoutId = setTimeout(() => controller.abort(), timeout)\r\n\r\n  try {\r\n    const response = await fetch(url, { ...options, signal })\r\n    clearTimeout(timeoutId)\r\n    return response\r\n  } catch (error) {\r\n    clearTimeout(timeoutId)\r\n    if (error instanceof Error && error.name === 'AbortError') {\r\n      const timeoutError = new Error('Request timed out') as TimeoutError\r\n      timeoutError.name = 'TimeoutError'\r\n      throw timeoutError\r\n    }\r\n    const networkError = new Error('Network error occurred') as NetworkError\r\n    networkError.name = 'NetworkError'\r\n    throw networkError\r\n  }\r\n}\r\n\r\n// Retry function with exponential backoff\r\nconst fetchWithRetry = async <T,>(\r\n  url: string,\r\n  options: RequestInit = {},\r\n  retries = 3,\r\n  backoff = 300,\r\n  timeout = 8000\r\n): Promise<T> => {\r\n  let lastError: ApiError\r\n\r\n  for (let attempt = 0; attempt <= retries; attempt++) {\r\n    try {\r\n      const response = await fetchWithTimeout(url, options, timeout)\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`)\r\n      }\r\n\r\n      return await response.json()\r\n    } catch (err) {\r\n      const error = err as ApiError\r\n      lastError = error\r\n\r\n      // Don't retry if we've reached max retries\r\n      if (attempt === retries) break\r\n\r\n      // Don't retry for certain status codes\r\n      if (error.message.includes('Status: 404') || error.message.includes('Status: 401')) {\r\n        break\r\n      }\r\n\r\n      // Wait with exponential backoff before retrying\r\n      const delay = backoff * Math.pow(2, attempt)\r\n      console.log(`Retrying fetch (${attempt + 1}/${retries}) after ${delay}ms...`)\r\n      await new Promise(resolve => setTimeout(resolve, delay))\r\n    }\r\n  }\r\n\r\n  throw lastError\r\n}\r\n\r\nconst UseEffectExample = () => {\r\n  // State for users data\r\n  const [users, setUsers] = useState<User[]>([])\r\n  const [loading, setLoading] = useState<boolean>(true)\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [retryTrigger, setRetryTrigger] = useState<number>(0)\r\n\r\n  // State for selected user and their posts\r\n  const [selectedUserId, setSelectedUserId] = useState<number | null>(null)\r\n  const [userPosts, setUserPosts] = useState<Post[]>([])\r\n  const [postsLoading, setPostsLoading] = useState<boolean>(false)\r\n  const [postsError, setPostsError] = useState<string | null>(null)\r\n\r\n  // State for window width (for resize event example)\r\n  const [windowWidth, setWindowWidth] = useState<number>(\r\n    typeof window !== 'undefined' ? window.innerWidth : 0\r\n  )\r\n\r\n  // Retry handler for user data\r\n  const handleRetry = useCallback(() => {\r\n    setError(null)\r\n    setRetryTrigger(prev => prev + 1)\r\n  }, [])\r\n\r\n  // Retry handler for posts data\r\n  const handlePostsRetry = useCallback(() => {\r\n    setPostsError(null)\r\n    // Re-trigger the posts fetch by resetting and setting the selectedUserId\r\n    const currentId = selectedUserId\r\n    setSelectedUserId(null)\r\n    setTimeout(() => setSelectedUserId(currentId), 100)\r\n  }, [selectedUserId])\r\n\r\n  // Effect for fetching users (runs once on component mount)\r\n  useEffect(() => {\r\n    const controller = new AbortController()\r\n    const { signal } = controller\r\n\r\n    const fetchUsers = async () => {\r\n      try {\r\n        setLoading(true)\r\n\r\n        // Using fetchWithRetry with timeout and retry logic\r\n        const data = await fetchWithRetry<User[]>(\r\n          'https://jsonplaceholder.typicode.com/users',\r\n          { signal },\r\n          2, // 2 retries\r\n          300, // 300ms initial backoff\r\n          5000 // 5 second timeout\r\n        )\r\n\r\n        setUsers(data)\r\n        setError(null)\r\n      } catch (err) {\r\n        // Type guard for different error types\r\n        if (err instanceof Error) {\r\n          // Don't update state if the request was aborted\r\n          if (err.name === 'AbortError') {\r\n            console.log('Users fetch aborted')\r\n            return\r\n          }\r\n\r\n          // Handle specific error types\r\n          if (err.name === 'TimeoutError') {\r\n            setError('Request timed out. Please check your connection and try again.')\r\n          } else if (err.name === 'NetworkError') {\r\n            setError('Network error occurred. Please check your connection and try again.')\r\n          } else {\r\n            setError('Failed to fetch users. Please try again later.')\r\n          }\r\n\r\n          console.error('Error fetching users:', err)\r\n        } else {\r\n          setError('An unknown error occurred. Please try again later.')\r\n          console.error('Unknown error:', err)\r\n        }\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n\r\n    fetchUsers()\r\n\r\n    // Cleanup function (will run when component unmounts)\r\n    return () => {\r\n      controller.abort()\r\n      console.log('Component unmounted, cleaning up user fetch resources')\r\n    }\r\n  }, [retryTrigger]) // Dependency on retryTrigger to allow manual retries\r\n\r\n  // Effect for fetching posts when a user is selected\r\n  useEffect(() => {\r\n    // Skip if no user is selected\r\n    if (selectedUserId === null) return\r\n\r\n    let isMounted = true // Flag to prevent state updates if component unmounts\r\n    const controller = new AbortController()\r\n    const { signal } = controller\r\n\r\n    const fetchUserPosts = async () => {\r\n      try {\r\n        setPostsLoading(true)\r\n        setPostsError(null)\r\n\r\n        // Using fetchWithRetry with timeout and retry logic\r\n        const data = await fetchWithRetry<Post[]>(\r\n          `https://jsonplaceholder.typicode.com/posts?userId=${selectedUserId}`,\r\n          { signal },\r\n          2, // 2 retries\r\n          300, // 300ms initial backoff\r\n          5000 // 5 second timeout\r\n        )\r\n\r\n        // Only update state if component is still mounted\r\n        if (isMounted) {\r\n          setUserPosts(data)\r\n        }\r\n      } catch (err) {\r\n        if (isMounted) {\r\n          // Type guard for different error types\r\n          if (err instanceof Error) {\r\n            // Don't update state if the request was aborted\r\n            if (err.name === 'AbortError') {\r\n              console.log('Posts fetch aborted')\r\n              return\r\n            }\r\n\r\n            // Handle specific error types\r\n            if (err.name === 'TimeoutError') {\r\n              setPostsError('Request timed out. Please check your connection and try again.')\r\n            } else if (err.name === 'NetworkError') {\r\n              setPostsError('Network error occurred. Please check your connection and try again.')\r\n            } else {\r\n              setPostsError('Failed to fetch posts. Please try again later.')\r\n            }\r\n\r\n            console.error('Error fetching posts:', err)\r\n          } else {\r\n            setPostsError('An unknown error occurred. Please try again later.')\r\n            console.error('Unknown error:', err)\r\n          }\r\n        }\r\n      } finally {\r\n        if (isMounted) {\r\n          setPostsLoading(false)\r\n        }\r\n      }\r\n    }\r\n\r\n    fetchUserPosts()\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      isMounted = false // Prevent state updates if component unmounts\r\n      controller.abort() // Abort any in-progress fetch\r\n      console.log(`Cleaning up posts fetch for user ${selectedUserId}`)\r\n    }\r\n  }, [selectedUserId]) // This effect runs when selectedUserId changes\r\n\r\n  // Effect for window resize event (subscription example)\r\n  useEffect(() => {\r\n    // Skip during server-side rendering\r\n    if (typeof window === 'undefined') return\r\n\r\n    const handleResize = () => {\r\n      setWindowWidth(window.innerWidth)\r\n    }\r\n\r\n    // Add event listener\r\n    window.addEventListener('resize', handleResize)\r\n\r\n    // Cleanup function to remove event listener\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize)\r\n      console.log('Removed resize event listener')\r\n    }\r\n  }, []) // Empty dependency array for one-time setup\r\n\r\n  // Function to handle user selection\r\n  const handleUserSelect = (userId: number) => {\r\n    setSelectedUserId(userId)\r\n  }\r\n\r\n  return (\r\n    <div className=\"use-effect-example\">\r\n      <h1>useEffect Examples</h1>\r\n\r\n      <div className=\"window-width\">\r\n        <h2>Window Width (Resize Event Example)</h2>\r\n        <p>Current window width: {windowWidth}px</p>\r\n        <p className=\"hint\">Try resizing your browser window</p>\r\n      </div>\r\n\r\n      <div className=\"users-section\">\r\n        <h2>Users (Data Fetching Example)</h2>\r\n\r\n        {loading ? (\r\n          <div className=\"loading-indicator\">\r\n            <p>Loading users...</p>\r\n          </div>\r\n        ) : error ? (\r\n          <div className=\"error-container\">\r\n            <div className=\"error-message\">{error}</div>\r\n            <button onClick={handleRetry} className=\"retry-button\" aria-label=\"Retry loading users\">\r\n              Retry\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <div className=\"user-list\">\r\n            <p>Select a user to see their posts:</p>\r\n            <ul>\r\n              {users.map(user => (\r\n                <li key={user.id}>\r\n                  <button\r\n                    onClick={() => handleUserSelect(user.id)}\r\n                    className={selectedUserId === user.id ? 'selected' : ''}\r\n                  >\r\n                    {user.name}\r\n                  </button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {selectedUserId && (\r\n        <div className=\"posts-section\">\r\n          <h2>Posts by User (Dependent Data Fetching)</h2>\r\n\r\n          {postsLoading ? (\r\n            <div className=\"loading-indicator\">\r\n              <p>Loading posts...</p>\r\n            </div>\r\n          ) : postsError ? (\r\n            <div className=\"error-container\">\r\n              <div className=\"error-message\">{postsError}</div>\r\n              <button\r\n                onClick={handlePostsRetry}\r\n                className=\"retry-button\"\r\n                aria-label=\"Retry loading posts\"\r\n              >\r\n                Retry\r\n              </button>\r\n            </div>\r\n          ) : userPosts.length > 0 ? (\r\n            <ul className=\"post-list\">\r\n              {userPosts.map(post => (\r\n                <li key={post.id}>\r\n                  <h3>{post.title}</h3>\r\n                  <p>{post.body}</p>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          ) : (\r\n            <p>No posts found for this user.</p>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"notes\">\r\n        <h3>Notes on useEffect:</h3>\r\n        <ul>\r\n          <li>\r\n            <strong>Empty dependency array []</strong>: Effect runs once after initial render\r\n          </li>\r\n          <li>\r\n            <strong>With dependencies [dep1, dep2]</strong>: Effect runs when any dependency changes\r\n          </li>\r\n          <li>\r\n            <strong>No dependency array</strong>: Effect runs after every render\r\n          </li>\r\n          <li>\r\n            <strong>Return function</strong>: Cleanup logic that runs before next effect or unmount\r\n          </li>\r\n          <li>\r\n            <strong>For SSR (Next.js)</strong>: Use getServerSideProps or getStaticProps instead\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UseEffectExample\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\accessibility\\AccessibleButton.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\accessibility\\AccessibleForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\accessibility\\AccessibleInput.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isFocused' is assigned a value but never used.",
        "line": 41,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 41,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// AccessibleInput.tsx\r\nimport React, { useState } from 'react'\r\n\r\ninterface AccessibleInputProps {\r\n  id: string\r\n  label: string\r\n  type?: string\r\n  value: string\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n  required?: boolean\r\n  disabled?: boolean\r\n  placeholder?: string\r\n  helpText?: string\r\n  errorMessage?: string\r\n  className?: string\r\n  autoComplete?: string\r\n  maxLength?: number\r\n  min?: number | string\r\n  max?: number | string\r\n  pattern?: string\r\n}\r\n\r\nconst AccessibleInput: React.FC<AccessibleInputProps> = ({\r\n  id,\r\n  label,\r\n  type = 'text',\r\n  value,\r\n  onChange,\r\n  required = false,\r\n  disabled = false,\r\n  placeholder = '',\r\n  helpText,\r\n  errorMessage,\r\n  className = '',\r\n  autoComplete,\r\n  maxLength,\r\n  min,\r\n  max,\r\n  pattern,\r\n}) => {\r\n  const [isFocused, setIsFocused] = useState(false)\r\n\r\n  // Generate unique IDs for associated elements\r\n  const helpTextId = helpText ? `${id}-help` : undefined\r\n  const errorId = errorMessage ? `${id}-error` : undefined\r\n\r\n  // Combine IDs for aria-describedby\r\n  const ariaDescribedby = [helpTextId, errorId].filter(Boolean).join(' ') || undefined\r\n\r\n  // Determine if the input is in an error state\r\n  const hasError = !!errorMessage\r\n\r\n  return (\r\n    <div className={`form-field ${className} ${hasError ? 'has-error' : ''}`}>\r\n      <label htmlFor={id} className={required ? 'required-label' : ''}>\r\n        {label}\r\n        {required && <span className=\"visually-hidden\"> (required)</span>}\r\n      </label>\r\n\r\n      <input\r\n        id={id}\r\n        type={type}\r\n        value={value}\r\n        onChange={onChange}\r\n        required={required}\r\n        disabled={disabled}\r\n        placeholder={placeholder}\r\n        aria-describedby={ariaDescribedby}\r\n        aria-invalid={hasError}\r\n        aria-required={required}\r\n        className={hasError ? 'input-error' : ''}\r\n        onFocus={() => setIsFocused(true)}\r\n        onBlur={() => setIsFocused(false)}\r\n        autoComplete={autoComplete}\r\n        maxLength={maxLength}\r\n        min={min}\r\n        max={max}\r\n        pattern={pattern}\r\n      />\r\n\r\n      {helpText && (\r\n        <div id={helpTextId} className=\"help-text\">\r\n          {helpText}\r\n        </div>\r\n      )}\r\n\r\n      {errorMessage && (\r\n        <div id={errorId} className=\"error-message\" role=\"alert\" aria-live=\"assertive\">\r\n          {errorMessage}\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AccessibleInput\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\accessibility\\AccessibleModal.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\accessibility\\AccessibleNavigation.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "The ref value 'navRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'navRef.current' to a variable inside the effect, and use that variable in the cleanup function.",
        "line": 83,
        "column": 14,
        "nodeType": "Identifier",
        "endLine": 83,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// AccessibleNavigation.tsx\r\nimport React, { useState, useRef, useEffect } from 'react'\r\n\r\nimport AccessibleButton from './AccessibleButton'\r\n\r\ninterface NavItem {\r\n  id: string\r\n  label: string\r\n  href: string\r\n  children?: NavItem[]\r\n  icon?: React.ReactNode\r\n}\r\n\r\ninterface AccessibleNavigationProps {\r\n  items: NavItem[]\r\n  currentPath: string\r\n  ariaLabel?: string\r\n  className?: string\r\n  onNavItemClick?: (item: NavItem) => void\r\n}\r\n\r\nconst AccessibleNavigation: React.FC<AccessibleNavigationProps> = ({\r\n  items,\r\n  currentPath,\r\n  ariaLabel = 'Main Navigation',\r\n  className = '',\r\n  onNavItemClick,\r\n}) => {\r\n  const [expandedItems, setExpandedItems] = useState<Record<string, boolean>>({})\r\n  const navRef = useRef<HTMLElement>(null)\r\n\r\n  // Handle keyboard navigation\r\n  useEffect(() => {\r\n    if (!navRef.current) return\r\n\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      const target = event.target as HTMLElement\r\n\r\n      // Only handle keyboard events for nav items\r\n      if (!target.classList.contains('nav-link') && !target.classList.contains('nav-button')) {\r\n        return\r\n      }\r\n\r\n      const navItems = Array.from(\r\n        navRef.current?.querySelectorAll('.nav-link, .nav-button') || []\r\n      ) as HTMLElement[]\r\n\r\n      const currentIndex = navItems.indexOf(target)\r\n\r\n      switch (event.key) {\r\n        case 'ArrowDown':\r\n          event.preventDefault()\r\n          if (currentIndex < navItems.length - 1) {\r\n            navItems[currentIndex + 1].focus()\r\n          }\r\n          break\r\n\r\n        case 'ArrowUp':\r\n          event.preventDefault()\r\n          if (currentIndex > 0) {\r\n            navItems[currentIndex - 1].focus()\r\n          }\r\n          break\r\n\r\n        case 'Home':\r\n          event.preventDefault()\r\n          navItems[0].focus()\r\n          break\r\n\r\n        case 'End':\r\n          event.preventDefault()\r\n          navItems[navItems.length - 1].focus()\r\n          break\r\n\r\n        default:\r\n          break\r\n      }\r\n    }\r\n\r\n    navRef.current.addEventListener('keydown', handleKeyDown)\r\n\r\n    return () => {\r\n      navRef.current?.removeEventListener('keydown', handleKeyDown)\r\n    }\r\n  }, [items])\r\n\r\n  // Toggle submenu\r\n  const toggleSubmenu = (itemId: string) => {\r\n    setExpandedItems(prev => ({\r\n      ...prev,\r\n      [itemId]: !prev[itemId],\r\n    }))\r\n  }\r\n\r\n  // Handle nav item click\r\n  const handleItemClick = (item: NavItem, event: React.MouseEvent) => {\r\n    // If the item has children, toggle the submenu\r\n    if (item.children && item.children.length > 0) {\r\n      event.preventDefault()\r\n      toggleSubmenu(item.id)\r\n    }\r\n\r\n    // Call the custom click handler if provided\r\n    if (onNavItemClick) {\r\n      onNavItemClick(item)\r\n    }\r\n  }\r\n\r\n  // Render a nav item\r\n  const renderNavItem = (item: NavItem, level: number = 0) => {\r\n    const isActive = currentPath === item.href\r\n    const hasChildren = item.children && item.children.length > 0\r\n    const isExpanded = expandedItems[item.id] || false\r\n\r\n    return (\r\n      <li key={item.id} className={`nav-item level-${level}`}>\r\n        {hasChildren ? (\r\n          <>\r\n            <AccessibleButton\r\n              className={`nav-button ${isActive ? 'active' : ''}`}\r\n              onClick={e => handleItemClick(item, e)}\r\n              ariaExpanded={isExpanded}\r\n              ariaControls={`submenu-${item.id}`}\r\n              ariaLabel={`${item.label} ${isExpanded ? 'collapse' : 'expand'} submenu`}\r\n              icon={item.icon}\r\n            >\r\n              {item.label}\r\n              <span className=\"submenu-indicator\" aria-hidden=\"true\">\r\n                {isExpanded ? '▼' : '▶'}\r\n              </span>\r\n            </AccessibleButton>\r\n\r\n            {isExpanded && (\r\n              <ul\r\n                id={`submenu-${item.id}`}\r\n                className=\"submenu\"\r\n                role=\"menu\"\r\n                aria-label={`${item.label} submenu`}\r\n              >\r\n                {item.children.map(child => renderNavItem(child, level + 1))}\r\n              </ul>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <a\r\n            href={item.href}\r\n            className={`nav-link ${isActive ? 'active' : ''}`}\r\n            aria-current={isActive ? 'page' : undefined}\r\n            onClick={e => handleItemClick(item, e)}\r\n          >\r\n            {item.icon && (\r\n              <span className=\"nav-icon\" aria-hidden=\"true\">\r\n                {item.icon}\r\n              </span>\r\n            )}\r\n            {item.label}\r\n          </a>\r\n        )}\r\n      </li>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <nav ref={navRef} aria-label={ariaLabel} className={`accessible-nav ${className}`}>\r\n      <ul className=\"nav-list\" role=\"menubar\">\r\n        {items.map(item => renderNavItem(item))}\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default AccessibleNavigation\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\accessibility\\AccessibleTable.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\accessibility\\PropertyCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\accessibility\\PropertySearchForm.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'useState' is defined but never used.",
        "line": 2,
        "column": 17,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 25
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// PropertySearchForm.tsx\r\nimport React, { useState } from 'react'\r\n\r\nimport AccessibleForm from './AccessibleForm'\r\n\r\ninterface PropertySearchFormProps {\r\n  onSearch: (searchParams: Record<string, string>) => void\r\n  loading?: boolean\r\n  className?: string\r\n}\r\n\r\nconst PropertySearchForm: React.FC<PropertySearchFormProps> = ({\r\n  onSearch,\r\n  loading = false,\r\n  className = '',\r\n}) => {\r\n  // Define form fields with validation\r\n  const searchFields = [\r\n    {\r\n      id: 'location',\r\n      label: 'Location',\r\n      type: 'text',\r\n      required: true,\r\n      placeholder: 'City, neighborhood, or ZIP code',\r\n      helpText: 'Enter a city, neighborhood, or ZIP code to search for properties',\r\n      validation: (value: string) => {\r\n        if (value.length < 2) {\r\n          return 'Location must be at least 2 characters'\r\n        }\r\n        return undefined\r\n      },\r\n      autoComplete: 'address-level2',\r\n    },\r\n    {\r\n      id: 'minPrice',\r\n      label: 'Minimum Price',\r\n      type: 'number',\r\n      placeholder: 'Min price',\r\n      helpText: 'Enter the minimum price for properties',\r\n      validation: (value: string) => {\r\n        if (value && parseInt(value) < 0) {\r\n          return 'Price cannot be negative'\r\n        }\r\n        return undefined\r\n      },\r\n      min: 0,\r\n    },\r\n    {\r\n      id: 'maxPrice',\r\n      label: 'Maximum Price',\r\n      type: 'number',\r\n      placeholder: 'Max price',\r\n      helpText: 'Enter the maximum price for properties',\r\n      validation: (value: string) => {\r\n        if (value && parseInt(value) < 0) {\r\n          return 'Price cannot be negative'\r\n        }\r\n        return undefined\r\n      },\r\n      min: 0,\r\n    },\r\n    {\r\n      id: 'bedrooms',\r\n      label: 'Minimum Bedrooms',\r\n      type: 'number',\r\n      placeholder: 'Min bedrooms',\r\n      helpText: 'Select the minimum number of bedrooms',\r\n      min: 0,\r\n      max: 10,\r\n    },\r\n    {\r\n      id: 'bathrooms',\r\n      label: 'Minimum Bathrooms',\r\n      type: 'number',\r\n      placeholder: 'Min bathrooms',\r\n      helpText: 'Select the minimum number of bathrooms',\r\n      min: 0,\r\n      max: 10,\r\n    },\r\n    {\r\n      id: 'propertyType',\r\n      label: 'Property Type',\r\n      type: 'text',\r\n      placeholder: 'Any property type',\r\n      helpText: 'Enter the type of property you are looking for (e.g., house, apartment, condo)',\r\n    },\r\n  ]\r\n\r\n  // Handle form submission\r\n  const handleSubmit = (formData: Record<string, string>) => {\r\n    // Filter out empty values\r\n    const filteredData = Object.entries(formData).reduce(\r\n      (acc, [key, value]) => {\r\n        if (value) {\r\n          acc[key] = value\r\n        }\r\n        return acc\r\n      },\r\n      {} as Record<string, string>\r\n    )\r\n\r\n    onSearch(filteredData)\r\n  }\r\n\r\n  return (\r\n    <div className={`property-search-form ${className}`}>\r\n      <AccessibleForm\r\n        fields={searchFields}\r\n        onSubmit={handleSubmit}\r\n        submitLabel=\"Search Properties\"\r\n        title=\"Find Your Dream Property\"\r\n        description=\"Use the form below to search for properties that match your criteria.\"\r\n        loading={loading}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PropertySearchForm\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\animations\\AnimatedComponent.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'AnimationControls' is defined but never used.",
        "line": 2,
        "column": 32,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 49
      },
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'framer-motion'.",
        "line": 2,
        "column": 67,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 82
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "The ref value 'animationState.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'animationState.current' to a variable inside the effect, and use that variable in the cleanup function.",
        "line": 81,
        "column": 22,
        "nodeType": "Identifier",
        "endLine": 81,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// components/animations/AnimatedComponent.tsx\r\nimport { motion, useAnimation, AnimationControls, Variants } from 'framer-motion'\r\nimport React, { useEffect, useRef } from 'react'\r\n\r\ninterface AnimatedComponentProps {\r\n  children: React.ReactNode\r\n  variants?: Variants\r\n  initial?: string | object\r\n  animate?: string | object\r\n  exit?: string | object\r\n  transition?: object\r\n  className?: string\r\n  onAnimationComplete?: () => void\r\n  onAnimationStart?: () => void\r\n  triggerAnimation?: boolean\r\n  customAnimation?: string\r\n}\r\n\r\n/**\r\n * A wrapper component that adds animations to its children using Framer Motion\r\n * with proper cleanup to prevent memory leaks\r\n */\r\nconst AnimatedComponent: React.FC<AnimatedComponentProps> = ({\r\n  children,\r\n  variants,\r\n  initial = 'hidden',\r\n  animate = 'visible',\r\n  exit = 'exit',\r\n  transition,\r\n  className = '',\r\n  onAnimationComplete,\r\n  onAnimationStart,\r\n  triggerAnimation = true,\r\n  customAnimation,\r\n}) => {\r\n  // Use animation controls for manual control\r\n  const controls = useAnimation()\r\n\r\n  // Keep track of animation state\r\n  const animationState = useRef({\r\n    isAnimating: false,\r\n    isMounted: false,\r\n  })\r\n\r\n  // Start animation when component mounts or when triggerAnimation changes\r\n  useEffect(() => {\r\n    animationState.current.isMounted = true\r\n\r\n    const startAnimation = async () => {\r\n      if (!animationState.current.isMounted) return\r\n\r\n      if (onAnimationStart) {\r\n        onAnimationStart()\r\n      }\r\n\r\n      animationState.current.isAnimating = true\r\n\r\n      if (customAnimation) {\r\n        await controls.start(customAnimation)\r\n      } else {\r\n        await controls.start(animate)\r\n      }\r\n\r\n      if (!animationState.current.isMounted) return\r\n\r\n      animationState.current.isAnimating = false\r\n\r\n      if (onAnimationComplete) {\r\n        onAnimationComplete()\r\n      }\r\n    }\r\n\r\n    if (triggerAnimation) {\r\n      startAnimation()\r\n    } else {\r\n      controls.stop()\r\n    }\r\n\r\n    // Cleanup function to prevent memory leaks\r\n    return () => {\r\n      animationState.current.isMounted = false\r\n\r\n      // Stop any ongoing animations when component unmounts\r\n      controls.stop()\r\n    }\r\n  }, [controls, animate, onAnimationComplete, onAnimationStart, triggerAnimation, customAnimation])\r\n\r\n  return (\r\n    <motion.div\r\n      className={className}\r\n      initial={initial}\r\n      animate={controls}\r\n      exit={exit}\r\n      variants={variants}\r\n      transition={transition}\r\n    >\r\n      {children}\r\n    </motion.div>\r\n  )\r\n}\r\n\r\n// Predefined animation variants\r\nexport const fadeInVariants = {\r\n  hidden: { opacity: 0 },\r\n  visible: { opacity: 1 },\r\n  exit: { opacity: 0 },\r\n}\r\n\r\nexport const slideInVariants = {\r\n  hidden: { x: -100, opacity: 0 },\r\n  visible: { x: 0, opacity: 1 },\r\n  exit: { x: 100, opacity: 0 },\r\n}\r\n\r\nexport const scaleVariants = {\r\n  hidden: { scale: 0.8, opacity: 0 },\r\n  visible: { scale: 1, opacity: 1 },\r\n  exit: { scale: 0.8, opacity: 0 },\r\n}\r\n\r\nexport default AnimatedComponent\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\animations\\AnimatedModal.tsx",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'framer-motion'.",
        "line": 2,
        "column": 55,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 70
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "The ref value 'animationState.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'animationState.current' to a variable inside the effect, and use that variable in the cleanup function.",
        "line": 54,
        "column": 22,
        "nodeType": "Identifier",
        "endLine": 54,
        "endColumn": 29
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "The ref value 'animationState.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'animationState.current' to a variable inside the effect, and use that variable in the cleanup function.",
        "line": 132,
        "column": 54,
        "nodeType": "Identifier",
        "endLine": 132,
        "endColumn": 61
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// components/animations/AnimatedModal.tsx\r\nimport { motion, AnimatePresence, useAnimation } from 'framer-motion'\r\nimport React, { useEffect, useRef } from 'react'\r\n\r\ninterface AnimatedModalProps {\r\n  isOpen: boolean\r\n  onClose: () => void\r\n  title: string\r\n  children: React.ReactNode\r\n  ariaDescribedby?: string\r\n  className?: string\r\n  showCloseButton?: boolean\r\n  closeOnEsc?: boolean\r\n  closeOnOutsideClick?: boolean\r\n  animationDuration?: number\r\n}\r\n\r\n/**\r\n * An accessible modal component with Framer Motion animations\r\n * and proper cleanup to prevent memory leaks\r\n */\r\nconst AnimatedModal: React.FC<AnimatedModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  title,\r\n  children,\r\n  ariaDescribedby,\r\n  className = '',\r\n  showCloseButton = true,\r\n  closeOnEsc = true,\r\n  closeOnOutsideClick = true,\r\n  animationDuration = 0.3,\r\n}) => {\r\n  const modalRef = useRef<HTMLDivElement>(null)\r\n  const previousFocusRef = useRef<HTMLElement | null>(null)\r\n  const backdropControls = useAnimation()\r\n  const modalControls = useAnimation()\r\n\r\n  // Animation state tracking to prevent memory leaks\r\n  const animationState = useRef({\r\n    isAnimating: false,\r\n    isMounted: false,\r\n  })\r\n\r\n  // Store the element that had focus before opening the modal\r\n  useEffect(() => {\r\n    animationState.current.isMounted = true\r\n\r\n    if (isOpen) {\r\n      previousFocusRef.current = document.activeElement as HTMLElement\r\n    }\r\n\r\n    return () => {\r\n      animationState.current.isMounted = false\r\n    }\r\n  }, [isOpen])\r\n\r\n  // Handle keyboard navigation and focus trap\r\n  useEffect(() => {\r\n    if (!isOpen) return\r\n\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      // Close on ESC key\r\n      if (closeOnEsc && event.key === 'Escape') {\r\n        onClose()\r\n        return\r\n      }\r\n\r\n      // Trap focus inside modal\r\n      if (event.key === 'Tab') {\r\n        if (!modalRef.current) return\r\n\r\n        const focusableElements = modalRef.current.querySelectorAll(\r\n          'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\r\n        )\r\n\r\n        if (focusableElements.length === 0) return\r\n\r\n        const firstElement = focusableElements[0] as HTMLElement\r\n        const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement\r\n\r\n        // Shift + Tab\r\n        if (event.shiftKey) {\r\n          if (document.activeElement === firstElement) {\r\n            lastElement.focus()\r\n            event.preventDefault()\r\n          }\r\n        }\r\n        // Tab\r\n        else {\r\n          if (document.activeElement === lastElement) {\r\n            firstElement.focus()\r\n            event.preventDefault()\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Set focus to the first focusable element in the modal\r\n    const setInitialFocus = () => {\r\n      if (!modalRef.current || !animationState.current.isMounted) return\r\n\r\n      const focusableElement = modalRef.current.querySelector(\r\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\r\n      ) as HTMLElement\r\n\r\n      if (focusableElement) {\r\n        focusableElement.focus()\r\n      } else {\r\n        // If no focusable element, focus the modal itself\r\n        modalRef.current.focus()\r\n      }\r\n    }\r\n\r\n    // Add event listeners\r\n    document.addEventListener('keydown', handleKeyDown)\r\n\r\n    // Set initial focus after a short delay to ensure the modal is fully rendered\r\n    const focusTimer = setTimeout(setInitialFocus, 100)\r\n\r\n    // Prevent scrolling of the body when modal is open\r\n    document.body.style.overflow = 'hidden'\r\n\r\n    return () => {\r\n      document.removeEventListener('keydown', handleKeyDown)\r\n      clearTimeout(focusTimer)\r\n\r\n      // Restore body scrolling when modal closes\r\n      document.body.style.overflow = ''\r\n\r\n      // Restore focus to the element that had focus before the modal was opened\r\n      if (previousFocusRef.current && animationState.current.isMounted) {\r\n        previousFocusRef.current.focus()\r\n      }\r\n    }\r\n  }, [isOpen, onClose, closeOnEsc])\r\n\r\n  // Handle animations\r\n  useEffect(() => {\r\n    const animateModal = async () => {\r\n      if (!animationState.current.isMounted) return\r\n\r\n      if (isOpen) {\r\n        animationState.current.isAnimating = true\r\n\r\n        // Animate backdrop first\r\n        await backdropControls.start({\r\n          opacity: 1,\r\n          transition: { duration: animationDuration * 0.5 },\r\n        })\r\n\r\n        if (!animationState.current.isMounted) return\r\n\r\n        // Then animate modal\r\n        await modalControls.start({\r\n          opacity: 1,\r\n          y: 0,\r\n          scale: 1,\r\n          transition: {\r\n            duration: animationDuration * 0.5,\r\n            type: 'spring',\r\n            damping: 25,\r\n            stiffness: 300,\r\n          },\r\n        })\r\n\r\n        if (!animationState.current.isMounted) return\r\n        animationState.current.isAnimating = false\r\n      } else {\r\n        animationState.current.isAnimating = true\r\n\r\n        // Animate modal out first\r\n        await modalControls.start({\r\n          opacity: 0,\r\n          y: 20,\r\n          scale: 0.95,\r\n          transition: { duration: animationDuration * 0.5 },\r\n        })\r\n\r\n        if (!animationState.current.isMounted) return\r\n\r\n        // Then animate backdrop\r\n        await backdropControls.start({\r\n          opacity: 0,\r\n          transition: { duration: animationDuration * 0.5 },\r\n        })\r\n\r\n        if (!animationState.current.isMounted) return\r\n        animationState.current.isAnimating = false\r\n      }\r\n    }\r\n\r\n    animateModal()\r\n\r\n    return () => {\r\n      // Stop animations on unmount to prevent memory leaks\r\n      backdropControls.stop()\r\n      modalControls.stop()\r\n    }\r\n  }, [isOpen, backdropControls, modalControls, animationDuration])\r\n\r\n  // Handle outside click\r\n  const handleBackdropClick = (event: React.MouseEvent<HTMLDivElement>) => {\r\n    if (closeOnOutsideClick && event.target === event.currentTarget) {\r\n      onClose()\r\n    }\r\n  }\r\n\r\n  if (!isOpen && !animationState.current.isAnimating) return null\r\n\r\n  return (\r\n    <AnimatePresence>\r\n      {(isOpen || animationState.current.isAnimating) && (\r\n        <motion.div\r\n          className=\"fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-50\"\r\n          initial={{ opacity: 0 }}\r\n          animate={backdropControls}\r\n          onClick={handleBackdropClick}\r\n          role=\"presentation\"\r\n        >\r\n          <motion.div\r\n            ref={modalRef}\r\n            role=\"dialog\"\r\n            aria-modal=\"true\"\r\n            aria-labelledby=\"modal-title\"\r\n            aria-describedby={ariaDescribedby}\r\n            className={`bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-auto ${className}`}\r\n            initial={{ opacity: 0, y: 20, scale: 0.95 }}\r\n            animate={modalControls}\r\n            tabIndex={-1} // Make the modal focusable but not in the tab order\r\n          >\r\n            <div className=\"flex justify-between items-center border-b p-4\">\r\n              <h2 id=\"modal-title\" className=\"text-xl font-semibold\">\r\n                {title}\r\n              </h2>\r\n\r\n              {showCloseButton && (\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={onClose}\r\n                  className=\"text-gray-500 hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 rounded-full p-1\"\r\n                  aria-label=\"Close modal\"\r\n                >\r\n                  <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                    <path\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      strokeWidth={2}\r\n                      d=\"M6 18L18 6M6 6l12 12\"\r\n                    />\r\n                  </svg>\r\n                </button>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"p-4\">{children}</div>\r\n          </motion.div>\r\n        </motion.div>\r\n      )}\r\n    </AnimatePresence>\r\n  )\r\n}\r\n\r\nexport default AnimatedModal\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\animations\\AnimatedPropertyCard.tsx",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'framer-motion'.",
        "line": 2,
        "column": 24,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 39
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// components/animations/AnimatedPropertyCard.tsx\r\nimport { motion } from 'framer-motion'\r\nimport React from 'react'\r\n\r\nimport { useScrollAnimation } from '@/hooks/useAnimation'\r\n\r\ninterface Property {\r\n  id: string\r\n  address: string\r\n  price: number\r\n  bedrooms: number\r\n  type: string\r\n  image?: string\r\n}\r\n\r\ninterface AnimatedPropertyCardProps {\r\n  property: Property\r\n  index: number\r\n  onClick?: (property: Property) => void\r\n  className?: string\r\n}\r\n\r\n// Animation variants\r\nconst cardVariants = {\r\n  hidden: { opacity: 0, y: 50 },\r\n  visible: (i: number) => ({\r\n    opacity: 1,\r\n    y: 0,\r\n    transition: {\r\n      delay: i * 0.1,\r\n      duration: 0.5,\r\n      ease: [0.43, 0.13, 0.23, 0.96],\r\n    },\r\n  }),\r\n  hover: {\r\n    y: -10,\r\n    boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',\r\n    transition: {\r\n      duration: 0.3,\r\n      ease: 'easeOut',\r\n    },\r\n  },\r\n  tap: {\r\n    y: -5,\r\n    boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\r\n    transition: {\r\n      duration: 0.1,\r\n      ease: 'easeOut',\r\n    },\r\n  },\r\n}\r\n\r\n/**\r\n * Animated property card component with scroll-triggered animation\r\n * and proper cleanup to prevent memory leaks\r\n */\r\nconst AnimatedPropertyCard: React.FC<AnimatedPropertyCardProps> = ({\r\n  property,\r\n  index,\r\n  onClick,\r\n  className = '',\r\n}) => {\r\n  // Use scroll animation hook with proper cleanup\r\n  const { ref, variants, animate, custom } = useScrollAnimation({\r\n    variants: cardVariants,\r\n    custom: index,\r\n    threshold: 0.1,\r\n    rootMargin: '0px 0px -100px 0px',\r\n  })\r\n\r\n  const handleClick = () => {\r\n    if (onClick) {\r\n      onClick(property)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <motion.div\r\n      ref={ref as React.RefObject<HTMLDivElement>}\r\n      className={`bg-white rounded-lg shadow-md overflow-hidden ${className}`}\r\n      variants={variants}\r\n      initial=\"hidden\"\r\n      animate={animate}\r\n      custom={custom}\r\n      whileHover=\"hover\"\r\n      whileTap=\"tap\"\r\n      onClick={handleClick}\r\n      layout\r\n    >\r\n      {/* Property image */}\r\n      <div className=\"h-48 bg-gray-200 relative overflow-hidden\">\r\n        {property.image ? (\r\n          <img\r\n            src={property.image}\r\n            alt={property.address}\r\n            className=\"w-full h-full object-cover transition-transform hover:scale-105 duration-300\"\r\n          />\r\n        ) : (\r\n          <div className=\"w-full h-full flex items-center justify-center text-gray-400\">\r\n            No image available\r\n          </div>\r\n        )}\r\n\r\n        {/* Price tag */}\r\n        <div className=\"absolute bottom-0 left-0 bg-blue-600 text-white px-3 py-1 rounded-tr-lg font-semibold\">\r\n          ${property.price.toLocaleString()}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Property details */}\r\n      <div className=\"p-4\">\r\n        <h3 className=\"text-lg font-semibold mb-2 line-clamp-1\">{property.address}</h3>\r\n\r\n        <div className=\"flex justify-between text-gray-600\">\r\n          <div className=\"flex items-center\">\r\n            <svg className=\"w-4 h-4 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n              <path d=\"M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z\" />\r\n            </svg>\r\n            <span>{property.type}</span>\r\n          </div>\r\n\r\n          <div className=\"flex items-center\">\r\n            <svg className=\"w-4 h-4 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n              <path d=\"M7 3a1 1 0 00-1 1v12a1 1 0 002 0V4a1 1 0 00-1-1zm6 0a1 1 0 00-1 1v12a1 1 0 002 0V4a1 1 0 00-1-1z\" />\r\n              <path d=\"M3 7a1 1 0 00-1 1v8a1 1 0 002 0V8a1 1 0 00-1-1zm14 0a1 1 0 00-1 1v8a1 1 0 002 0V8a1 1 0 00-1-1z\" />\r\n            </svg>\r\n            <span>\r\n              {property.bedrooms} {property.bedrooms === 1 ? 'bed' : 'beds'}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </motion.div>\r\n  )\r\n}\r\n\r\nexport default AnimatedPropertyCard\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\error-handling\\ApiErrorBoundary.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\error-handling\\EnhancedErrorBoundary.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'children' is assigned a value but never used.",
        "line": 168,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 168,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// components/error-handling/EnhancedErrorBoundary.tsx\r\nimport React, { Component, ErrorInfo, ReactNode, useState, useEffect } from 'react'\r\n\r\nimport logger from '@/lib/logging/logger'\r\n\r\ninterface ErrorBoundaryProps {\r\n  children: ReactNode\r\n  fallback?: ReactNode | ((error: Error, resetError: () => void) => ReactNode)\r\n  onError?: (error: Error, errorInfo: ErrorInfo) => void\r\n  errorTypes?: Array<string>\r\n}\r\n\r\ninterface ErrorBoundaryState {\r\n  hasError: boolean\r\n  error: Error | null\r\n}\r\n\r\n/**\r\n * Enhanced error boundary component that catches render errors\r\n */\r\nclass ErrorBoundaryBase extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\r\n  constructor(props: ErrorBoundaryProps) {\r\n    super(props)\r\n    this.state = {\r\n      hasError: false,\r\n      error: null,\r\n    }\r\n  }\r\n\r\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\r\n    return {\r\n      hasError: true,\r\n      error,\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {\r\n    // Log the error with structured logging\r\n    logger.error(\r\n      'Error caught by boundary',\r\n      error,\r\n      {\r\n        componentStack: errorInfo.componentStack,\r\n        errorName: error.name,\r\n        errorMessage: error.message,\r\n      },\r\n      ['error-boundary', 'render-error']\r\n    )\r\n\r\n    // Call the optional onError callback\r\n    if (this.props.onError) {\r\n      this.props.onError(error, errorInfo)\r\n    }\r\n  }\r\n\r\n  resetError = () => {\r\n    this.setState({\r\n      hasError: false,\r\n      error: null,\r\n    })\r\n  }\r\n\r\n  render(): ReactNode {\r\n    const { hasError, error } = this.state\r\n    const { children, fallback, errorTypes } = this.props\r\n\r\n    if (hasError && error) {\r\n      // Check if we should handle this type of error\r\n      if (errorTypes && !errorTypes.includes(error.name)) {\r\n        // Re-throw errors we don't want to handle\r\n        throw error\r\n      }\r\n\r\n      // Render custom fallback if provided\r\n      if (fallback) {\r\n        if (typeof fallback === 'function') {\r\n          return fallback(error, this.resetError)\r\n        }\r\n        return fallback\r\n      }\r\n\r\n      // Default error UI\r\n      return (\r\n        <div className=\"p-6 bg-red-50 border border-red-200 rounded-lg\">\r\n          <h2 className=\"text-xl font-semibold text-red-700 mb-2\">Something went wrong</h2>\r\n          <p className=\"text-red-600 mb-4\">\r\n            Please try again later or contact support if the problem persists.\r\n          </p>\r\n          <div className=\"mb-4 p-3 bg-white rounded border border-red-100 text-sm text-gray-700 overflow-auto max-h-32\">\r\n            <p className=\"font-semibold\">\r\n              {error.name}: {error.message}\r\n            </p>\r\n          </div>\r\n          <button\r\n            onClick={this.resetError}\r\n            className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2\"\r\n          >\r\n            Try again\r\n          </button>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return children\r\n  }\r\n}\r\n\r\n/**\r\n * Hook to catch and handle async errors\r\n */\r\nfunction useAsyncErrorHandler(onError?: (error: Error) => void, errorTypes?: Array<string>) {\r\n  const [asyncError, setAsyncError] = useState<Error | null>(null)\r\n\r\n  // Set up global error handler for unhandled promise rejections\r\n  useEffect(() => {\r\n    const handleUnhandledRejection = (event: PromiseRejectionEvent) => {\r\n      const error = event.reason\r\n\r\n      // Check if we should handle this type of error\r\n      if (errorTypes && error.name && !errorTypes.includes(error.name)) {\r\n        return\r\n      }\r\n\r\n      // Log the error\r\n      logger.error(\r\n        'Unhandled promise rejection',\r\n        error,\r\n        {\r\n          errorName: error.name,\r\n          errorMessage: error.message,\r\n        },\r\n        ['error-boundary', 'async-error', 'unhandled-rejection']\r\n      )\r\n\r\n      // Set the error state\r\n      setAsyncError(error)\r\n\r\n      // Call the optional onError callback\r\n      if (onError) {\r\n        onError(error)\r\n      }\r\n\r\n      // Prevent the default handler\r\n      event.preventDefault()\r\n    }\r\n\r\n    // Add event listener\r\n    window.addEventListener('unhandledrejection', handleUnhandledRejection)\r\n\r\n    // Clean up\r\n    return () => {\r\n      window.removeEventListener('unhandledrejection', handleUnhandledRejection)\r\n    }\r\n  }, [onError, errorTypes])\r\n\r\n  // Reset the error state\r\n  const resetAsyncError = () => {\r\n    setAsyncError(null)\r\n  }\r\n\r\n  return { asyncError, resetAsyncError }\r\n}\r\n\r\n/**\r\n * Enhanced error boundary that catches both render errors and async errors\r\n */\r\nconst EnhancedErrorBoundary: React.FC<ErrorBoundaryProps> = props => {\r\n  const { children, fallback, onError, errorTypes } = props\r\n\r\n  // Use the async error handler hook\r\n  const { asyncError, resetAsyncError } = useAsyncErrorHandler(error => {\r\n    if (onError) {\r\n      onError(error, { componentStack: '' })\r\n    }\r\n  }, errorTypes)\r\n\r\n  // If there's an async error, render the fallback\r\n  if (asyncError) {\r\n    if (fallback) {\r\n      if (typeof fallback === 'function') {\r\n        return <>{fallback(asyncError, resetAsyncError)}</>\r\n      }\r\n      return <>{fallback}</>\r\n    }\r\n\r\n    // Default error UI for async errors\r\n    return (\r\n      <div className=\"p-6 bg-red-50 border border-red-200 rounded-lg\">\r\n        <h2 className=\"text-xl font-semibold text-red-700 mb-2\">Something went wrong</h2>\r\n        <p className=\"text-red-600 mb-4\">\r\n          An error occurred while processing your request. Please try again.\r\n        </p>\r\n        <div className=\"mb-4 p-3 bg-white rounded border border-red-100 text-sm text-gray-700 overflow-auto max-h-32\">\r\n          <p className=\"font-semibold\">\r\n            {asyncError.name}: {asyncError.message}\r\n          </p>\r\n        </div>\r\n        <button\r\n          onClick={resetAsyncError}\r\n          className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2\"\r\n        >\r\n          Try again\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // If no async error, use the base error boundary for render errors\r\n  return <ErrorBoundaryBase {...props} />\r\n}\r\n\r\nexport default EnhancedErrorBoundary\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\error-handling\\FormErrorBoundary.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\error-handling\\GlobalErrorHandler.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\error-handling\\RouteErrorBoundary.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\error-handling\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\examples\\ApiFormExample.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'data' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 68,
        "column": 21,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 68,
        "endColumn": 25
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport React, { useState } from 'react'\r\nimport { z } from 'zod'\r\n\r\nimport { ApiError } from '@/lib/api/error-handling'\r\n\r\nimport { TextField, FormError } from '@/components/forms'\r\nimport { useApi } from '@/hooks/useApi'\r\nimport { useFormValidation } from '@/hooks/useFormValidation'\r\n\r\n// Define the form schema using Zod\r\nconst loginFormSchema = z.object({\r\n  email: z.string().min(1, 'Email is required').email('Please enter a valid email address'),\r\n  password: z\r\n    .string()\r\n    .min(1, 'Password is required')\r\n    .min(8, 'Password must be at least 8 characters'),\r\n})\r\n\r\n// Infer the form data type from the schema\r\ntype LoginFormData = z.infer<typeof loginFormSchema>\r\n\r\n// Initial form values\r\nconst initialValues: LoginFormData = {\r\n  email: '',\r\n  password: '',\r\n}\r\n\r\n/**\r\n * API form example component\r\n */\r\nconst ApiFormExample: React.FC = () => {\r\n  const [serverError, setServerError] = useState<string | null>(null)\r\n\r\n  // Use our API hook\r\n  const api = useApi({\r\n    onError: (error: ApiError) => {\r\n      // Handle API errors\r\n      if (error.isValidationError()) {\r\n        // Get validation errors from the API\r\n        const validationErrors = error.getValidationErrors()\r\n\r\n        // Set field errors\r\n        Object.entries(validationErrors).forEach(([field, message]) => {\r\n          setFieldError(field as keyof LoginFormData, message)\r\n        })\r\n      } else {\r\n        // Set a generic server error\r\n        setServerError(error.message)\r\n      }\r\n    },\r\n  })\r\n\r\n  // Use our form validation hook\r\n  const {\r\n    values,\r\n    errors,\r\n    touched,\r\n    isSubmitting,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n    setFieldError,\r\n  } = useFormValidation({\r\n    initialValues,\r\n    schema: loginFormSchema,\r\n    onSubmit: async data => {\r\n      setServerError(null)\r\n\r\n      // Simulate API call\r\n      try {\r\n        // This is a simulated API call that will always fail with validation errors\r\n        // In a real app, you would use api.post('/api/login', data)\r\n        await new Promise(resolve => setTimeout(resolve, 1000))\r\n\r\n        // Simulate a validation error from the API\r\n        throw new ApiError('Validation failed', 422, 'VALIDATION_ERROR', {\r\n          email: 'This email is not registered',\r\n          password: 'Incorrect password',\r\n        })\r\n      } catch (error) {\r\n        if (error instanceof ApiError) {\r\n          if (error.isValidationError()) {\r\n            // Get validation errors from the API\r\n            const validationErrors = error.getValidationErrors()\r\n\r\n            // Set field errors\r\n            Object.entries(validationErrors).forEach(([field, message]) => {\r\n              setFieldError(field as keyof LoginFormData, message)\r\n            })\r\n          } else {\r\n            // Set a generic server error\r\n            setServerError(error.message)\r\n          }\r\n        } else {\r\n          setServerError('An unexpected error occurred. Please try again.')\r\n        }\r\n      }\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className=\"max-w-md mx-auto bg-white p-6 rounded-lg shadow-md\">\r\n      <h2 className=\"text-2xl font-bold mb-6\">Login Example</h2>\r\n\r\n      {/* Form-level errors */}\r\n      <FormError error={errors._form || serverError} />\r\n\r\n      {/* API loading state */}\r\n      {api.isLoading && (\r\n        <div className=\"p-3 mb-4 bg-blue-50 border border-blue-200 text-blue-700 rounded-md\">\r\n          <div className=\"flex items-center\">\r\n            <svg\r\n              className=\"animate-spin h-5 w-5 mr-3 text-blue-500\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 24 24\"\r\n            >\r\n              <circle\r\n                className=\"opacity-25\"\r\n                cx=\"12\"\r\n                cy=\"12\"\r\n                r=\"10\"\r\n                stroke=\"currentColor\"\r\n                strokeWidth=\"4\"\r\n              ></circle>\r\n              <path\r\n                className=\"opacity-75\"\r\n                fill=\"currentColor\"\r\n                d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\r\n              ></path>\r\n            </svg>\r\n            <span>Processing request...</span>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <form onSubmit={handleSubmit} noValidate className=\"space-y-4\">\r\n        <TextField\r\n          id=\"email\"\r\n          name=\"email\"\r\n          label=\"Email\"\r\n          type=\"email\"\r\n          value={values.email}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n          error={errors.email}\r\n          touched={touched.email}\r\n          required\r\n          placeholder=\"you@example.com\"\r\n          autoComplete=\"email\"\r\n        />\r\n\r\n        <TextField\r\n          id=\"password\"\r\n          name=\"password\"\r\n          label=\"Password\"\r\n          type=\"password\"\r\n          value={values.password}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n          error={errors.password}\r\n          touched={touched.password}\r\n          required\r\n          placeholder=\"••••••••\"\r\n          autoComplete=\"current-password\"\r\n        />\r\n\r\n        <div className=\"pt-2\">\r\n          <button\r\n            type=\"submit\"\r\n            className=\"w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50\"\r\n            disabled={isSubmitting || api.isLoading}\r\n          >\r\n            {isSubmitting || api.isLoading ? 'Logging in...' : 'Log In'}\r\n          </button>\r\n        </div>\r\n      </form>\r\n\r\n      <div className=\"mt-6 text-sm text-gray-600\">\r\n        <p>This example demonstrates handling API validation errors.</p>\r\n        <p className=\"mt-2\">Try submitting the form to see simulated API validation errors.</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ApiFormExample\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\examples\\CentralizedErrorHandlingExample.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ErrorType' is defined but never used.",
        "line": 9,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport React, { useState } from 'react'\r\n\r\nimport { ApiError } from '@/lib/api/error-handling'\r\n\r\nimport { useCentralizedErrorHandler } from '@/hooks/useCentralizedErrorHandler'\r\nimport { ValidationError } from '@/lib/api/validation'\r\nimport { ErrorType, ErrorSeverity } from '@/lib/error/error-service'\r\n\r\n/**\r\n * Example component that demonstrates the centralized error handling\r\n */\r\nconst CentralizedErrorHandlingExample: React.FC = () => {\r\n  const [count, setCount] = useState(0)\r\n\r\n  // Use the centralized error handler hook\r\n  const {\r\n    hasError,\r\n    errorMessage,\r\n    errorCode,\r\n    errorDetails,\r\n    isApiError,\r\n    isValidationError,\r\n    errorType,\r\n    errorSeverity,\r\n    handleError,\r\n    resetError,\r\n    withErrorHandling,\r\n    withAsyncErrorHandling,\r\n  } = useCentralizedErrorHandler({\r\n    component: 'CentralizedErrorHandlingExample',\r\n    tags: ['example', 'error-handling'],\r\n  })\r\n\r\n  // Function that throws a regular error\r\n  const throwError = () => {\r\n    throw new Error('This is a regular error')\r\n  }\r\n\r\n  // Function that throws an API error\r\n  const throwApiError = () => {\r\n    throw new ApiError('This is an API error', 500, 'API_ERROR', {\r\n      details: 'Some API error details',\r\n    })\r\n  }\r\n\r\n  // Function that throws a validation error\r\n  const throwValidationError = () => {\r\n    throw new ValidationError('This is a validation error', 'VALIDATION_ERROR', {\r\n      name: 'Name is required',\r\n      email: 'Email is invalid',\r\n    })\r\n  }\r\n\r\n  // Async function that throws an error\r\n  const throwAsyncError = async () => {\r\n    await new Promise(resolve => setTimeout(resolve, 500))\r\n    throw new Error('This is an async error')\r\n  }\r\n\r\n  // Safe versions of the error-throwing functions\r\n  const safeThrowError = withErrorHandling(throwError, {\r\n    action: 'throwRegularError',\r\n    severity: ErrorSeverity.MEDIUM,\r\n  })\r\n\r\n  const safeThrowApiError = withErrorHandling(throwApiError, {\r\n    action: 'throwApiError',\r\n    severity: ErrorSeverity.HIGH,\r\n  })\r\n\r\n  const safeThrowValidationError = withErrorHandling(throwValidationError, {\r\n    action: 'throwValidationError',\r\n    severity: ErrorSeverity.LOW,\r\n  })\r\n\r\n  const safeThrowAsyncError = withAsyncErrorHandling(throwAsyncError, {\r\n    action: 'throwAsyncError',\r\n    severity: ErrorSeverity.CRITICAL,\r\n  })\r\n\r\n  // Safe function that doesn't throw\r\n  const safeIncrement = withErrorHandling(\r\n    () => {\r\n      setCount(prev => prev + 1)\r\n    },\r\n    { action: 'increment' }\r\n  )\r\n\r\n  // Get the appropriate color for the error severity\r\n  const getSeverityColor = () => {\r\n    switch (errorSeverity) {\r\n      case ErrorSeverity.LOW:\r\n        return 'text-yellow-600'\r\n      case ErrorSeverity.MEDIUM:\r\n        return 'text-orange-600'\r\n      case ErrorSeverity.HIGH:\r\n        return 'text-red-600'\r\n      case ErrorSeverity.CRITICAL:\r\n        return 'text-purple-600'\r\n      default:\r\n        return 'text-gray-600'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-6 bg-white rounded-lg shadow-sm\">\r\n      <h3 className=\"text-lg font-semibold mb-4\">Centralized Error Handling Example</h3>\r\n\r\n      {/* Display error if there is one */}\r\n      {hasError && (\r\n        <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n          <div className=\"flex items-center justify-between mb-2\">\r\n            <h4 className=\"font-semibold text-red-700\">\r\n              {isApiError ? 'API Error' : isValidationError ? 'Validation Error' : 'Error'}\r\n              {errorCode && ` (${errorCode})`}\r\n            </h4>\r\n\r\n            <span className={`px-2 py-1 text-xs rounded-full ${getSeverityColor()} bg-opacity-10`}>\r\n              {errorType} - {errorSeverity}\r\n            </span>\r\n          </div>\r\n\r\n          <p className={`mb-2 ${getSeverityColor()}`}>{errorMessage}</p>\r\n\r\n          {isValidationError && errorDetails && (\r\n            <div className=\"mt-2 p-2 bg-white rounded border border-red-100 text-sm\">\r\n              <ul className=\"list-disc pl-5\">\r\n                {Object.entries(errorDetails as Record<string, string>).map(([field, message]) => (\r\n                  <li key={field}>\r\n                    <span className=\"font-semibold\">{field}:</span> {message}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          )}\r\n\r\n          <button\r\n            onClick={resetError}\r\n            className=\"mt-3 px-3 py-1 bg-red-600 text-white text-sm rounded hover:bg-red-700\"\r\n          >\r\n            Clear Error\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"mb-4\">\r\n        <p className=\"text-gray-600 mb-2\">\r\n          Current count: <span className=\"font-semibold\">{count}</span>\r\n        </p>\r\n\r\n        <button\r\n          onClick={safeIncrement}\r\n          className=\"px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700 mr-2\"\r\n        >\r\n          Safe Increment\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-2 gap-3 mb-4\">\r\n        <div>\r\n          <h4 className=\"text-sm font-semibold mb-2\">Synchronous Errors</h4>\r\n          <div className=\"flex flex-col space-y-2\">\r\n            <button\r\n              onClick={() => safeThrowError()}\r\n              className=\"px-3 py-1 bg-yellow-600 text-white text-sm rounded hover:bg-yellow-700\"\r\n            >\r\n              Throw Regular Error (Medium)\r\n            </button>\r\n\r\n            <button\r\n              onClick={() => safeThrowApiError()}\r\n              className=\"px-3 py-1 bg-red-600 text-white text-sm rounded hover:bg-red-700\"\r\n            >\r\n              Throw API Error (High)\r\n            </button>\r\n\r\n            <button\r\n              onClick={() => safeThrowValidationError()}\r\n              className=\"px-3 py-1 bg-orange-600 text-white text-sm rounded hover:bg-orange-700\"\r\n            >\r\n              Throw Validation Error (Low)\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <h4 className=\"text-sm font-semibold mb-2\">Asynchronous Errors</h4>\r\n          <div className=\"flex flex-col space-y-2\">\r\n            <button\r\n              onClick={() => safeThrowAsyncError()}\r\n              className=\"px-3 py-1 bg-purple-600 text-white text-sm rounded hover:bg-purple-700\"\r\n            >\r\n              Throw Async Error (Critical)\r\n            </button>\r\n\r\n            <button\r\n              onClick={() =>\r\n                handleError(new Error('Manually handled error'), {\r\n                  action: 'manualError',\r\n                  severity: ErrorSeverity.LOW,\r\n                })\r\n              }\r\n              className=\"px-3 py-1 bg-gray-600 text-white text-sm rounded hover:bg-gray-700\"\r\n            >\r\n              Manual Error (Low)\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"text-sm text-gray-600 mt-4 p-3 bg-gray-50 rounded\">\r\n        <p className=\"mb-2\">\r\n          This example demonstrates the centralized error handling system. All errors are:\r\n        </p>\r\n        <ul className=\"list-disc pl-5 space-y-1\">\r\n          <li>Caught and displayed in a consistent way</li>\r\n          <li>Logged with structured metadata (component, action, severity)</li>\r\n          <li>Categorized by type and severity</li>\r\n          <li>Handled without crashing the application</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CentralizedErrorHandlingExample\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\examples\\ErrorHandlingHookExample.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\examples\\PropertyForm.tsx",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: ',' expected.",
        "line": 68,
        "column": 68,
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport React, { useState } from 'react'\r\nimport { z } from 'zod'\r\n\r\nimport { getPostcodeCoordinates } from '@/app/actions/geocoding'\r\nimport {\r\n  TextField,\r\n  TextAreaField,\r\n  SelectField,\r\n  CheckboxField,\r\n  FormError,\r\n  PostcodeLookup,\r\n} from '@/components/forms'\r\nimport { useFormValidation } from '@/hooks/useFormValidation'\r\nimport { isValidUKPostcode } from '@/lib/utils/geocoding'\r\n\r\n// Define the form schema using Zod\r\nconst propertyFormSchema = z.object({\r\n  address: z.string().min(1, 'Address is required'),\r\n  city: z.string().min(1, 'City is required'),\r\n  state: z.string().min(1, 'State is required'),\r\n  zipCode: z\r\n    .string()\r\n    .min(1, 'ZIP code is required')\r\n    .regex(/^\\d{5}(-\\d{4})?$/, 'ZIP code must be in format 12345 or 12345-6789'),\r\n  postcode: z\r\n    .string()\r\n    .optional()\r\n    .refine(val => !val || /^[A-Z]{1,2}\\d[A-Z\\d]? ?\\d[A-Z]{2}$/i.test(val), {\r\n      message: 'Postcode must be in a valid UK format (e.g., SW1A 1AA)',\r\n    }),\r\n  // Geolocation coordinates\r\n  lat: z.number().optional(),\r\n  lng: z.number().optional(),\r\n  price: z.preprocess(\r\n    val => (val === '' ? undefined : Number(val)),\r\n    z\r\n      .number({ invalid_type_error: 'Price must be a number' })\r\n      .positive('Price must be greater than zero')\r\n      .optional()\r\n      .or(z.literal(undefined))\r\n  ),\r\n  bedrooms: z.preprocess(\r\n    val => (val === '' ? undefined : Number(val)),\r\n    z\r\n      .number({ invalid_type_error: 'Bedrooms must be a number' })\r\n      .int('Bedrooms must be a whole number')\r\n      .nonnegative('Bedrooms cannot be negative')\r\n      .optional()\r\n      .or(z.literal(undefined))\r\n  ),\r\n  bathrooms: z.preprocess(\r\n    val => (val === '' ? undefined : Number(val)),\r\n    z\r\n      .number({ invalid_type_error: 'Bathrooms must be a number' })\r\n      .nonnegative('Bathrooms cannot be negative')\r\n      .optional()\r\n      .or(z.literal(undefined))\r\n  ),\r\n  propertyType: z.enum(['house', 'apartment', 'condo', 'townhouse', 'land', 'other'], {\r\n    errorMap: () => ({ message: 'Please select a property type' }),\r\n  }),\r\n  description: z.string().optional(),\r\n  featured: z.boolean().optional().default(false),\r\n\r\n  // UK-specific fields\r\n  councilTaxBand: z.enum(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', '').optional(),\r\n  tenure: z.enum(['Freehold', 'Leasehold', 'Share of Freehold', '']).optional(),\r\n  epcRating: z.enum(['A', 'B', 'C', 'D', 'E', 'F', 'G', '']).optional(),\r\n\r\n  agreeToTerms: z.literal(true, {\r\n    errorMap: () => ({ message: 'You must agree to the terms and conditions' }),\r\n  }),\r\n})\r\n\r\n// Infer the form data type from the schema\r\ntype PropertyFormData = z.infer<typeof propertyFormSchema>\r\n\r\n// Initial form values\r\nconst initialValues: PropertyFormData = {\r\n  address: '',\r\n  city: '',\r\n  state: '',\r\n  zipCode: '',\r\n  postcode: '',\r\n  lat: undefined,\r\n  lng: undefined,\r\n  price: undefined,\r\n  bedrooms: undefined,\r\n  bathrooms: undefined,\r\n  propertyType: 'house',\r\n  description: '',\r\n  featured: false,\r\n  councilTaxBand: '',\r\n  tenure: '',\r\n  epcRating: '',\r\n  agreeToTerms: false,\r\n}\r\n\r\n// Property type options\r\nconst propertyTypeOptions = [\r\n  { value: 'house', label: 'House' },\r\n  { value: 'apartment', label: 'Apartment' },\r\n  { value: 'condo', label: 'Condominium' },\r\n  { value: 'townhouse', label: 'Townhouse' },\r\n  { value: 'land', label: 'Land' },\r\n  { value: 'other', label: 'Other' },\r\n]\r\n\r\n// State options (abbreviated)\r\nconst stateOptions = [\r\n  { value: 'AL', label: 'Alabama' },\r\n  { value: 'AK', label: 'Alaska' },\r\n  { value: 'AZ', label: 'Arizona' },\r\n  { value: 'CA', label: 'California' },\r\n  { value: 'CO', label: 'Colorado' },\r\n  { value: 'FL', label: 'Florida' },\r\n  { value: 'GA', label: 'Georgia' },\r\n  { value: 'NY', label: 'New York' },\r\n  { value: 'TX', label: 'Texas' },\r\n  { value: 'WA', label: 'Washington' },\r\n]\r\n\r\n// UK Council Tax Band options\r\nconst councilTaxBandOptions = [\r\n  { value: '', label: 'Select Council Tax Band' },\r\n  { value: 'A', label: 'Band A' },\r\n  { value: 'B', label: 'Band B' },\r\n  { value: 'C', label: 'Band C' },\r\n  { value: 'D', label: 'Band D' },\r\n  { value: 'E', label: 'Band E' },\r\n  { value: 'F', label: 'Band F' },\r\n  { value: 'G', label: 'Band G' },\r\n  { value: 'H', label: 'Band H' },\r\n]\r\n\r\n// UK Tenure options\r\nconst tenureOptions = [\r\n  { value: '', label: 'Select Tenure' },\r\n  { value: 'Freehold', label: 'Freehold' },\r\n  { value: 'Leasehold', label: 'Leasehold' },\r\n  { value: 'Share of Freehold', label: 'Share of Freehold' },\r\n]\r\n\r\n// UK EPC Rating options\r\nconst epcRatingOptions = [\r\n  { value: '', label: 'Select EPC Rating' },\r\n  { value: 'A', label: 'A (Most efficient)' },\r\n  { value: 'B', label: 'B' },\r\n  { value: 'C', label: 'C' },\r\n  { value: 'D', label: 'D' },\r\n  { value: 'E', label: 'E' },\r\n  { value: 'F', label: 'F' },\r\n  { value: 'G', label: 'G (Least efficient)' },\r\n]\r\n\r\ninterface PropertyFormProps {\r\n  onSubmit?: (data: PropertyFormData) => Promise<void>\r\n  initialData?: Partial<PropertyFormData>\r\n}\r\n\r\n/**\r\n * Property form with validation\r\n */\r\nconst PropertyForm: React.FC<PropertyFormProps> = ({ onSubmit, initialData }) => {\r\n  const [serverError, setServerError] = useState<string | null>(null)\r\n  const [submitSuccess, setSubmitSuccess] = useState(false)\r\n\r\n  // Merge initial data with default values\r\n  const mergedInitialValues = {\r\n    ...initialValues,\r\n    ...initialData,\r\n  }\r\n\r\n  // Use our form validation hook\r\n  const {\r\n    values,\r\n    errors,\r\n    touched,\r\n    isSubmitting,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n    setFieldValue,\r\n    resetForm,\r\n  } = useFormValidation({\r\n    initialValues: mergedInitialValues,\r\n    schema: propertyFormSchema,\r\n    onSubmit: async data => {\r\n      setServerError(null)\r\n      setSubmitSuccess(false)\r\n\r\n      try {\r\n        if (onSubmit) {\r\n          await onSubmit(data)\r\n        } else {\r\n          // Simulate API call\r\n          await new Promise(resolve => setTimeout(resolve, 1000))\r\n          console.log('Form submitted:', data)\r\n        }\r\n\r\n        setSubmitSuccess(true)\r\n        resetForm()\r\n      } catch (error) {\r\n        console.error('Form submission error:', error)\r\n        setServerError(\r\n          error instanceof Error ? error.message : 'An unexpected error occurred. Please try again.'\r\n        )\r\n      }\r\n    },\r\n  })\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} noValidate className=\"space-y-6\">\r\n      {/* Form-level errors */}\r\n      <FormError error={errors._form || serverError} />\r\n\r\n      {/* Success message */}\r\n      {submitSuccess && (\r\n        <div\r\n          className=\"p-3 mb-4 bg-green-50 border border-green-200 text-green-700 rounded-md\"\r\n          role=\"alert\"\r\n        >\r\n          <div className=\"flex\">\r\n            <div className=\"flex-shrink-0\">\r\n              <svg\r\n                className=\"h-5 w-5 text-green-400\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                viewBox=\"0 0 20 20\"\r\n                fill=\"currentColor\"\r\n                aria-hidden=\"true\"\r\n              >\r\n                <path\r\n                  fillRule=\"evenodd\"\r\n                  d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\"\r\n                  clipRule=\"evenodd\"\r\n                />\r\n              </svg>\r\n            </div>\r\n            <div className=\"ml-3\">\r\n              <p className=\"text-sm font-medium\">Property submitted successfully!</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Property address section */}\r\n      <div className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\r\n        <h2 className=\"text-lg font-semibold mb-4\">Property Location</h2>\r\n\r\n        <div className=\"grid grid-cols-1 gap-4\">\r\n          <TextField\r\n            id=\"address\"\r\n            name=\"address\"\r\n            label=\"Street Address\"\r\n            value={values.address}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={errors.address}\r\n            touched={touched.address}\r\n            required\r\n            placeholder=\"123 Main St\"\r\n          />\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n            <TextField\r\n              id=\"city\"\r\n              name=\"city\"\r\n              label=\"City\"\r\n              value={values.city}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              error={errors.city}\r\n              touched={touched.city}\r\n              required\r\n              placeholder=\"New York\"\r\n            />\r\n\r\n            <SelectField\r\n              id=\"state\"\r\n              name=\"state\"\r\n              label=\"State\"\r\n              value={values.state}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              error={errors.state}\r\n              touched={touched.state}\r\n              required\r\n              options={stateOptions}\r\n              placeholder=\"Select a state\"\r\n            />\r\n\r\n            <TextField\r\n              id=\"zipCode\"\r\n              name=\"zipCode\"\r\n              label=\"ZIP Code\"\r\n              value={values.zipCode}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              error={errors.zipCode}\r\n              touched={touched.zipCode}\r\n              required\r\n              placeholder=\"12345\"\r\n            />\r\n          </div>\r\n\r\n          {/* UK-specific address fields */}\r\n          <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded-md\">\r\n            <h3 className=\"text-sm font-medium text-blue-800 mb-2\">UK Property Details</h3>\r\n            <div className=\"grid grid-cols-1 gap-4\">\r\n              <PostcodeLookup\r\n                postcode={values.postcode || ''}\r\n                onPostcodeChange={handleChange}\r\n                onCoordinatesFound={(lat, lng) => {\r\n                  setFieldValue('lat', lat)\r\n                  setFieldValue('lng', lng)\r\n                  setServerError(null)\r\n                }}\r\n                error={errors.postcode}\r\n                touched={touched.postcode}\r\n              />\r\n\r\n              {/* Display coordinates if available */}\r\n              {values.lat !== undefined && values.lng !== undefined && (\r\n                <div className=\"text-sm text-gray-600 mt-1\">\r\n                  <p>\r\n                    Coordinates: {values.lat.toFixed(6)}, {values.lng.toFixed(6)}\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Property details section */}\r\n      <div className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\r\n        <h2 className=\"text-lg font-semibold mb-4\">Property Details</h2>\r\n\r\n        <div className=\"grid grid-cols-1 gap-4\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n            <TextField\r\n              id=\"price\"\r\n              name=\"price\"\r\n              label=\"Price\"\r\n              type=\"number\"\r\n              value={values.price === undefined ? '' : values.price}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              error={errors.price}\r\n              touched={touched.price}\r\n              placeholder=\"300000\"\r\n              min={0}\r\n              step={1000}\r\n            />\r\n\r\n            <TextField\r\n              id=\"bedrooms\"\r\n              name=\"bedrooms\"\r\n              label=\"Bedrooms\"\r\n              type=\"number\"\r\n              value={values.bedrooms === undefined ? '' : values.bedrooms}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              error={errors.bedrooms}\r\n              touched={touched.bedrooms}\r\n              placeholder=\"3\"\r\n              min={0}\r\n              step={1}\r\n            />\r\n\r\n            <TextField\r\n              id=\"bathrooms\"\r\n              name=\"bathrooms\"\r\n              label=\"Bathrooms\"\r\n              type=\"number\"\r\n              value={values.bathrooms === undefined ? '' : values.bathrooms}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              error={errors.bathrooms}\r\n              touched={touched.bathrooms}\r\n              placeholder=\"2\"\r\n              min={0}\r\n              step={0.5}\r\n            />\r\n          </div>\r\n\r\n          <SelectField\r\n            id=\"propertyType\"\r\n            name=\"propertyType\"\r\n            label=\"Property Type\"\r\n            value={values.propertyType}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={errors.propertyType}\r\n            touched={touched.propertyType}\r\n            required\r\n            options={propertyTypeOptions}\r\n          />\r\n\r\n          <TextAreaField\r\n            id=\"description\"\r\n            name=\"description\"\r\n            label=\"Description\"\r\n            value={values.description || ''}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={errors.description}\r\n            touched={touched.description}\r\n            rows={4}\r\n            placeholder=\"Describe the property...\"\r\n            helpText=\"Provide a detailed description of the property to attract potential buyers.\"\r\n          />\r\n\r\n          {/* UK-specific property details */}\r\n          <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-md\">\r\n            <h3 className=\"text-sm font-medium text-blue-800 mb-2\">UK Property Information</h3>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n              <SelectField\r\n                id=\"councilTaxBand\"\r\n                name=\"councilTaxBand\"\r\n                label=\"Council Tax Band\"\r\n                value={values.councilTaxBand}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                error={errors.councilTaxBand}\r\n                touched={touched.councilTaxBand}\r\n                options={councilTaxBandOptions}\r\n                helpText=\"UK property tax band\"\r\n              />\r\n\r\n              <SelectField\r\n                id=\"tenure\"\r\n                name=\"tenure\"\r\n                label=\"Tenure\"\r\n                value={values.tenure}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                error={errors.tenure}\r\n                touched={touched.tenure}\r\n                options={tenureOptions}\r\n                helpText=\"Ownership type\"\r\n              />\r\n\r\n              <SelectField\r\n                id=\"epcRating\"\r\n                name=\"epcRating\"\r\n                label=\"EPC Rating\"\r\n                value={values.epcRating}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                error={errors.epcRating}\r\n                touched={touched.epcRating}\r\n                options={epcRatingOptions}\r\n                helpText=\"Energy Performance Certificate rating\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <CheckboxField\r\n            id=\"featured\"\r\n            name=\"featured\"\r\n            label=\"Feature this property in search results\"\r\n            checked={values.featured}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={errors.featured}\r\n            touched={touched.featured}\r\n            helpText=\"Featured properties appear at the top of search results.\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Terms and submission */}\r\n      <div className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-200\">\r\n        <CheckboxField\r\n          id=\"agreeToTerms\"\r\n          name=\"agreeToTerms\"\r\n          label=\"I agree to the terms and conditions\"\r\n          checked={values.agreeToTerms}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n          error={errors.agreeToTerms}\r\n          touched={touched.agreeToTerms}\r\n          required\r\n        />\r\n\r\n        <div className=\"mt-6 flex items-center justify-end gap-4\">\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => resetForm()}\r\n            className=\"px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n            disabled={isSubmitting}\r\n          >\r\n            Reset\r\n          </button>\r\n\r\n          <button\r\n            type=\"submit\"\r\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50\"\r\n            disabled={isSubmitting}\r\n          >\r\n            {isSubmitting ? 'Submitting...' : 'Submit Property'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default PropertyForm\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\forms\\CheckboxField.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\forms\\FormError.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\forms\\FormField.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'name' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 21,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 7
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// components/forms/FormField.tsx\r\nimport React from 'react'\r\n\r\ninterface FormFieldProps {\r\n  id: string\r\n  name: string\r\n  label: string\r\n  error?: string\r\n  touched?: boolean\r\n  required?: boolean\r\n  children: React.ReactNode\r\n  helpText?: string\r\n  className?: string\r\n}\r\n\r\n/**\r\n * Form field wrapper component with label and error handling\r\n */\r\nconst FormField: React.FC<FormFieldProps> = ({\r\n  id,\r\n  name,\r\n  label,\r\n  error,\r\n  touched,\r\n  required,\r\n  children,\r\n  helpText,\r\n  className = '',\r\n}) => {\r\n  const showError = error && touched\r\n\r\n  return (\r\n    <div className={`mb-4 ${className}`}>\r\n      <label htmlFor={id} className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n        {label}\r\n        {required && <span className=\"text-red-500 ml-1\">*</span>}\r\n      </label>\r\n\r\n      {children}\r\n\r\n      {helpText && !showError && <p className=\"mt-1 text-sm text-gray-500\">{helpText}</p>}\r\n\r\n      {showError && (\r\n        <p className=\"mt-1 text-sm text-red-600\" id={`${id}-error`}>\r\n          {error}\r\n        </p>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FormField\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\forms\\PostcodeLookup.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'err' is defined but never used.",
        "line": 60,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 60,
        "endColumn": 10,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\forms\\SelectField.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\forms\\TextAreaField.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\forms\\TextField.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\forms\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\loaders\\PropertyCardSkeleton.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\loaders\\Skeleton.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\loaders\\Spinner.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\monitoring\\PerformanceMonitor.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\search\\SemanticSearch.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setOptions' is assigned a value but never used.",
        "line": 39,
        "column": 19,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 39,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 62,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 62,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1367, 1370], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1367, 1370], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "react/no-unknown-property",
        "severity": 2,
        "message": "Unknown property 'jsx' found",
        "line": 257,
        "column": 14,
        "nodeType": "JSXAttribute",
        "messageId": "unknownProp",
        "endLine": 257,
        "endColumn": 17
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import axios from 'axios'\nimport React, { useState } from 'react'\n\n// Define types\ninterface Property {\n  id: string\n  title: string\n  description: string\n  price: number\n  location: string\n  bedrooms: number\n  bathrooms: number\n  squareFeet: number\n  propertyType: string\n  status: string\n  similarity?: number\n}\n\ninterface SearchFilters {\n  minPrice?: number\n  maxPrice?: number\n  location?: string\n  bedrooms?: number\n  bathrooms?: number\n  propertyType?: string\n}\n\ninterface SearchOptions {\n  limit?: number\n  offset?: number\n  similarityThreshold?: number\n}\n\n// Semantic Search Component\nconst SemanticSearch: React.FC = () => {\n  // State\n  const [query, setQuery] = useState('')\n  const [filters, setFilters] = useState<SearchFilters>({})\n  const [options, setOptions] = useState<SearchOptions>({ limit: 10 })\n  const [results, setResults] = useState<Property[]>([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  // Handle search\n  const handleSearch = async () => {\n    if (!query.trim()) {\n      setError('Please enter a search query')\n      return\n    }\n\n    setLoading(true)\n    setError(null)\n\n    try {\n      const response = await axios.post('/api/search/semantic', {\n        query,\n        filters,\n        options,\n      })\n\n      setResults(response.data.data.results)\n    } catch (err: any) {\n      if (err.response?.status === 429) {\n        setError('Too many requests. Please try again later.')\n      } else {\n        setError(err.message || 'An error occurred')\n      }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // Handle filter changes\n  const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value, type } = e.target as HTMLInputElement\n\n    // Convert numeric values\n    const parsedValue = type === 'number' && value ? parseFloat(value) : value\n\n    setFilters(prev => ({\n      ...prev,\n      [name]: parsedValue === '' ? undefined : parsedValue,\n    }))\n  }\n\n  // Handle retry after rate limit\n  const handleRetry = () => {\n    handleSearch()\n  }\n\n  return (\n    <div className=\"semantic-search\">\n      <h2>Semantic Property Search</h2>\n\n      {/* Search query input */}\n      <div className=\"search-input\">\n        <input\n          type=\"text\"\n          value={query}\n          onChange={e => setQuery(e.target.value)}\n          placeholder=\"Describe your ideal property...\"\n          className=\"query-input\"\n          data-testid=\"search-input\"\n        />\n        <button\n          onClick={handleSearch}\n          disabled={loading}\n          className=\"search-button\"\n          data-testid=\"search-button\"\n        >\n          {loading ? 'Searching...' : 'Search'}\n        </button>\n      </div>\n\n      {/* Filters */}\n      <div className=\"filters\">\n        <h3>Filters</h3>\n        <div className=\"filter-grid\">\n          <div className=\"filter-item\">\n            <label htmlFor=\"minPrice\">Min Price</label>\n            <input\n              type=\"number\"\n              id=\"minPrice\"\n              name=\"minPrice\"\n              value={filters.minPrice || ''}\n              onChange={handleFilterChange}\n              placeholder=\"Min Price\"\n              data-testid=\"min-price\"\n            />\n          </div>\n\n          <div className=\"filter-item\">\n            <label htmlFor=\"maxPrice\">Max Price</label>\n            <input\n              type=\"number\"\n              id=\"maxPrice\"\n              name=\"maxPrice\"\n              value={filters.maxPrice || ''}\n              onChange={handleFilterChange}\n              placeholder=\"Max Price\"\n              data-testid=\"max-price\"\n            />\n          </div>\n\n          <div className=\"filter-item\">\n            <label htmlFor=\"location\">Location</label>\n            <input\n              type=\"text\"\n              id=\"location\"\n              name=\"location\"\n              value={filters.location || ''}\n              onChange={handleFilterChange}\n              placeholder=\"Location\"\n              data-testid=\"location\"\n            />\n          </div>\n\n          <div className=\"filter-item\">\n            <label htmlFor=\"bedrooms\">Bedrooms</label>\n            <select\n              id=\"bedrooms\"\n              name=\"bedrooms\"\n              value={filters.bedrooms || ''}\n              onChange={handleFilterChange}\n              data-testid=\"bedrooms\"\n            >\n              <option value=\"\">Any</option>\n              <option value=\"1\">1+</option>\n              <option value=\"2\">2+</option>\n              <option value=\"3\">3+</option>\n              <option value=\"4\">4+</option>\n            </select>\n          </div>\n\n          <div className=\"filter-item\">\n            <label htmlFor=\"bathrooms\">Bathrooms</label>\n            <select\n              id=\"bathrooms\"\n              name=\"bathrooms\"\n              value={filters.bathrooms || ''}\n              onChange={handleFilterChange}\n              data-testid=\"bathrooms\"\n            >\n              <option value=\"\">Any</option>\n              <option value=\"1\">1+</option>\n              <option value=\"2\">2+</option>\n              <option value=\"3\">3+</option>\n            </select>\n          </div>\n\n          <div className=\"filter-item\">\n            <label htmlFor=\"propertyType\">Property Type</label>\n            <select\n              id=\"propertyType\"\n              name=\"propertyType\"\n              value={filters.propertyType || ''}\n              onChange={handleFilterChange}\n              data-testid=\"property-type\"\n            >\n              <option value=\"\">Any Type</option>\n              <option value=\"apartment\">Apartment</option>\n              <option value=\"house\">House</option>\n              <option value=\"condo\">Condo</option>\n              <option value=\"townhouse\">Townhouse</option>\n              <option value=\"land\">Land</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* Error message */}\n      {error && (\n        <div className=\"error-message\" data-testid=\"error-message\">\n          {error}\n          {error.includes('Too many requests') && (\n            <button onClick={handleRetry} className=\"retry-button\" data-testid=\"retry-button\">\n              Retry\n            </button>\n          )}\n        </div>\n      )}\n\n      {/* Results */}\n      <div className=\"search-results\">\n        <h3>Results ({results.length})</h3>\n\n        {results.length === 0 && !loading && !error ? (\n          <p className=\"no-results\" data-testid=\"no-results\">\n            No properties found. Try a different search.\n          </p>\n        ) : (\n          <div className=\"results-grid\">\n            {results.map(property => (\n              <div key={property.id} className=\"property-card\" data-testid=\"property-card\">\n                <h4>{property.title}</h4>\n                <p className=\"property-location\" data-testid=\"property-location\">\n                  {property.location}\n                </p>\n                <p className=\"property-price\" data-testid=\"property-price\">\n                  £{property.price.toLocaleString()}\n                </p>\n                <p className=\"property-details\">\n                  {property.bedrooms} beds • {property.bathrooms} baths • {property.squareFeet} sq\n                  ft\n                </p>\n                {property.similarity !== undefined && (\n                  <div className=\"similarity-score\" data-testid=\"similarity-score\">\n                    {Math.round(property.similarity * 100)}% match\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <style jsx>{`\n        .semantic-search {\n          max-width: 1200px;\n          margin: 0 auto;\n          padding: 20px;\n        }\n\n        .search-input {\n          display: flex;\n          margin-bottom: 20px;\n        }\n\n        .query-input {\n          flex: 1;\n          padding: 12px;\n          font-size: 16px;\n          border: 1px solid #ddd;\n          border-radius: 4px 0 0 4px;\n        }\n\n        .search-button {\n          padding: 12px 24px;\n          background-color: #0070f3;\n          color: white;\n          border: none;\n          border-radius: 0 4px 4px 0;\n          cursor: pointer;\n        }\n\n        .search-button:disabled {\n          background-color: #ccc;\n        }\n\n        .filters {\n          margin-bottom: 20px;\n          padding: 15px;\n          background-color: #f9f9f9;\n          border-radius: 4px;\n        }\n\n        .filter-grid {\n          display: grid;\n          grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n          gap: 15px;\n        }\n\n        .filter-item {\n          display: flex;\n          flex-direction: column;\n        }\n\n        .filter-item label {\n          margin-bottom: 5px;\n          font-weight: 500;\n        }\n\n        .filter-item input,\n        .filter-item select {\n          padding: 8px;\n          border: 1px solid #ddd;\n          border-radius: 4px;\n        }\n\n        .error-message {\n          padding: 10px;\n          background-color: #ffebee;\n          color: #c62828;\n          border-radius: 4px;\n          margin-bottom: 20px;\n        }\n\n        .retry-button {\n          margin-left: 10px;\n          padding: 5px 10px;\n          background-color: #0070f3;\n          color: white;\n          border: none;\n          border-radius: 4px;\n          cursor: pointer;\n        }\n\n        .results-grid {\n          display: grid;\n          grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n          gap: 20px;\n        }\n\n        .property-card {\n          border: 1px solid #eee;\n          border-radius: 4px;\n          padding: 15px;\n          position: relative;\n        }\n\n        .property-card h4 {\n          margin-top: 0;\n          margin-bottom: 10px;\n        }\n\n        .property-location {\n          color: #666;\n          margin-bottom: 10px;\n        }\n\n        .property-price {\n          font-weight: bold;\n          font-size: 18px;\n          margin-bottom: 10px;\n        }\n\n        .property-details {\n          color: #666;\n          margin-bottom: 0;\n        }\n\n        .similarity-score {\n          position: absolute;\n          top: 15px;\n          right: 15px;\n          background-color: #0070f3;\n          color: white;\n          padding: 4px 8px;\n          border-radius: 4px;\n          font-size: 12px;\n          font-weight: bold;\n        }\n\n        .no-results {\n          text-align: center;\n          padding: 20px;\n          color: #666;\n        }\n      `}</style>\n    </div>\n  )\n}\n\nexport default SemanticSearch\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\components\\search\\SimilarProperties.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 42,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 42,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1089, 1092], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1089, 1092], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "react/no-unknown-property",
        "severity": 2,
        "message": "Unknown property 'jsx' found",
        "line": 89,
        "column": 14,
        "nodeType": "JSXAttribute",
        "messageId": "unknownProp",
        "endLine": 89,
        "endColumn": 17
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import axios from 'axios'\nimport React, { useState, useEffect } from 'react'\n\n// Define types\ninterface Property {\n  id: string\n  title: string\n  description: string\n  price: number\n  location: string\n  bedrooms: number\n  bathrooms: number\n  squareFeet: number\n  propertyType: string\n  status: string\n  similarity?: number\n}\n\ninterface SimilarPropertiesProps {\n  propertyId: string\n  limit?: number\n}\n\n// Similar Properties Component\nconst SimilarProperties: React.FC<SimilarPropertiesProps> = ({ propertyId, limit = 4 }) => {\n  // State\n  const [similarProperties, setSimilarProperties] = useState<Property[]>([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  // Fetch similar properties\n  useEffect(() => {\n    const fetchSimilarProperties = async () => {\n      if (!propertyId) return\n\n      setLoading(true)\n      setError(null)\n\n      try {\n        const response = await axios.get(`/api/search/similar/${propertyId}?limit=${limit}`)\n        setSimilarProperties(response.data.data.similarProperties)\n      } catch (err: any) {\n        setError(err.message || 'Failed to load similar properties')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchSimilarProperties()\n  }, [propertyId, limit])\n\n  // If loading\n  if (loading) {\n    return <div className=\"loading\">Loading similar properties...</div>\n  }\n\n  // If error\n  if (error) {\n    return <div className=\"error\">{error}</div>\n  }\n\n  // If no similar properties\n  if (similarProperties.length === 0) {\n    return null\n  }\n\n  return (\n    <div className=\"similar-properties\" data-testid=\"similar-properties\">\n      <h3>Similar Properties</h3>\n\n      <div className=\"similar-grid\">\n        {similarProperties.map(property => (\n          <div key={property.id} className=\"similar-card\" data-testid=\"similar-property-card\">\n            <h4>{property.title}</h4>\n            <p className=\"property-location\">{property.location}</p>\n            <p className=\"property-price\">£{property.price.toLocaleString()}</p>\n            <p className=\"property-details\">\n              {property.bedrooms} beds • {property.bathrooms} baths\n            </p>\n            {property.similarity !== undefined && (\n              <div className=\"similarity-badge\" data-testid=\"similarity-score\">\n                {Math.round(property.similarity * 100)}% similar\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n\n      <style jsx>{`\n        .similar-properties {\n          margin-top: 30px;\n          padding: 20px;\n          background-color: #f9f9f9;\n          border-radius: 4px;\n        }\n\n        .similar-properties h3 {\n          margin-top: 0;\n          margin-bottom: 20px;\n        }\n\n        .similar-grid {\n          display: grid;\n          grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n          gap: 15px;\n        }\n\n        .similar-card {\n          border: 1px solid #eee;\n          border-radius: 4px;\n          padding: 15px;\n          position: relative;\n          background-color: white;\n        }\n\n        .similar-card h4 {\n          margin-top: 0;\n          margin-bottom: 10px;\n          font-size: 16px;\n        }\n\n        .property-location {\n          color: #666;\n          margin-bottom: 10px;\n        }\n\n        .property-price {\n          font-weight: bold;\n          font-size: 18px;\n          margin-bottom: 10px;\n        }\n\n        .property-details {\n          color: #666;\n          margin-bottom: 0;\n        }\n\n        .similarity-badge {\n          position: absolute;\n          top: 10px;\n          right: 10px;\n          background-color: #4caf50;\n          color: white;\n          padding: 3px 6px;\n          border-radius: 4px;\n          font-size: 11px;\n        }\n\n        .loading,\n        .error {\n          padding: 20px;\n          text-align: center;\n        }\n\n        .error {\n          color: #c62828;\n        }\n      `}</style>\n    </div>\n  )\n}\n\nexport default SimilarProperties\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\cypress\\e2e\\auth-flow.cy.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-expressions",
        "severity": 2,
        "message": "Expected an assignment or function call and instead saw an expression.",
        "line": 141,
        "column": 7,
        "nodeType": "ExpressionStatement",
        "messageId": "unusedExpression",
        "endLine": 141,
        "endColumn": 61
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "describe('Authentication Flows', () => {\n  beforeEach(() => {\n    // Reset any previous authentication state\n    cy.clearCookies()\n    cy.clearLocalStorage()\n  })\n\n  it('should navigate to sign-in page from homepage', () => {\n    cy.visit('/')\n    cy.contains('Sign In').click()\n    cy.url().should('include', '/sign-in')\n    cy.get('h1').should('contain', 'Sign In')\n  })\n\n  it('should navigate to sign-up page from homepage', () => {\n    cy.visit('/')\n    cy.contains('Sign Up').click()\n    cy.url().should('include', '/sign-up')\n    cy.get('h1').should('contain', 'Sign Up')\n  })\n\n  it('should show validation errors on sign-in form', () => {\n    cy.visit('/sign-in')\n\n    // Submit empty form\n    cy.get('button[type=\"submit\"]').click()\n\n    // Check for validation errors\n    cy.contains('Email is required').should('be.visible')\n\n    // Fill email but not password\n    cy.get('input[name=\"email\"]').type('test@example.com')\n    cy.get('button[type=\"submit\"]').click()\n\n    // Check for password validation error\n    cy.contains('Password is required').should('be.visible')\n  })\n\n  it('should show validation errors on sign-up form', () => {\n    cy.visit('/sign-up')\n\n    // Submit empty form\n    cy.get('button[type=\"submit\"]').click()\n\n    // Check for validation errors\n    cy.contains('Email is required').should('be.visible')\n\n    // Fill email but not other required fields\n    cy.get('input[name=\"email\"]').type('test@example.com')\n    cy.get('button[type=\"submit\"]').click()\n\n    // Check for other validation errors\n    cy.contains('Password is required').should('be.visible')\n    cy.contains('First name is required').should('be.visible')\n  })\n\n  it('should show error message for invalid credentials', () => {\n    cy.visit('/sign-in')\n\n    // Fill in invalid credentials\n    cy.get('input[name=\"email\"]').type('invalid@example.com')\n    cy.get('input[name=\"password\"]').type('wrongpassword')\n    cy.get('button[type=\"submit\"]').click()\n\n    // Check for error message\n    cy.contains('Invalid email or password').should('be.visible')\n  })\n\n  it('should redirect to dashboard after successful sign-in', () => {\n    // This test requires a mock or a test user\n    // For this example, we'll use cy.intercept to mock the authentication API\n    cy.intercept('POST', '**/api/auth/signin', {\n      statusCode: 200,\n      body: {\n        success: true,\n        user: {\n          id: '123',\n          email: 'test@example.com',\n          name: 'Test User',\n          role: 'user',\n        },\n        token: 'mock-jwt-token',\n      },\n    }).as('signInRequest')\n\n    cy.visit('/sign-in')\n\n    // Fill in credentials\n    cy.get('input[name=\"email\"]').type('test@example.com')\n    cy.get('input[name=\"password\"]').type('password123')\n    cy.get('button[type=\"submit\"]').click()\n\n    // Wait for the request to complete\n    cy.wait('@signInRequest')\n\n    // Check redirection to dashboard\n    cy.url().should('include', '/dashboard')\n    cy.contains('Welcome, Test User').should('be.visible')\n  })\n\n  it('should allow password reset request', () => {\n    cy.visit('/sign-in')\n\n    // Click on forgot password link\n    cy.contains('Forgot password?').click()\n\n    // Check we're on the reset password page\n    cy.url().should('include', '/reset-password')\n\n    // Enter email for password reset\n    cy.get('input[name=\"email\"]').type('test@example.com')\n    cy.get('button[type=\"submit\"]').click()\n\n    // Check for success message\n    cy.contains('Password reset email sent').should('be.visible')\n  })\n\n  it('should allow user to sign out', () => {\n    // Mock authenticated state\n    cy.window().then(window => {\n      window.localStorage.setItem(\n        'auth',\n        JSON.stringify({\n          token: 'mock-token',\n          user: { id: '123', name: 'Test User', email: 'test@example.com' },\n        })\n      )\n    })\n\n    // Visit dashboard as authenticated user\n    cy.visit('/dashboard')\n\n    // Click sign out button\n    cy.contains('Sign Out').click()\n\n    // Verify redirect to home page\n    cy.url().should('eq', Cypress.config().baseUrl + '/')\n\n    // Verify authentication state is cleared\n    cy.window().then(window => {\n      expect(window.localStorage.getItem('auth')).to.be.null\n    })\n  })\n})\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\cypress\\e2e\\property-detail.cy.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/ban-ts-comment",
        "severity": 2,
        "message": "Do not use \"@ts-nocheck\" because it alters compilation errors.",
        "line": 1,
        "column": 1,
        "nodeType": "Line",
        "messageId": "tsDirectiveComment",
        "endLine": 1,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// @ts-nocheck\ndescribe('Property Detail Page', () => {\n  // Test valid property detail page\n  it('displays property details correctly', () => {\n    // Visit a known property ID\n    cy.visit('/properties/1')\n\n    // Check that the page loads with the correct title\n    cy.get('h1').should('exist')\n\n    // Check for essential property information\n    cy.contains('Back to all properties').should('exist')\n    cy.get('img').should('be.visible') // Property image\n    cy.contains('$').should('exist') // Price\n\n    // Check for property attributes\n    cy.contains('Council Tax Band').should('exist')\n    cy.contains('Tenure').should('exist')\n    cy.contains('EPC Rating').should('exist')\n\n    // Check for map\n    cy.get('[aria-label=\"Map\"]').should('exist')\n\n    // Check for nearby amenities\n    cy.contains('Nearby Amenities').should('exist')\n\n    // Check for nearby properties (might not always exist)\n    cy.contains('Nearby Properties').should('exist')\n  })\n\n  // Test property not found\n  it('shows not found page for invalid property ID', () => {\n    cy.visit('/properties/999999', { failOnStatusCode: false })\n    cy.contains('Property Not Found').should('exist')\n    cy.contains('Back to Properties').should('exist')\n  })\n\n  // Test navigation from property card\n  it('navigates from property card to detail page', () => {\n    // Start at the search page\n    cy.visit('/properties')\n\n    // Click on the first property card\n    cy.get('article')\n      .first()\n      .within(() => {\n        cy.contains('View Details').click()\n      })\n\n    // Verify we're on a property detail page\n    cy.url().should('include', '/properties/')\n    cy.get('h1').should('exist')\n  })\n\n  // Test back button functionality\n  it('navigates back to properties list', () => {\n    cy.visit('/properties/1')\n    cy.contains('Back to all properties').click()\n    cy.url().should('include', '/properties')\n    cy.url().should('not.include', '/properties/1')\n  })\n\n  // Test loading state\n  it('shows loading state before content loads', () => {\n    // Intercept API calls to delay response\n    cy.intercept('GET', '**/api/properties/**', req => {\n      req.on('response', res => {\n        // Delay the response to ensure loading state is visible\n        res.setDelay(1000)\n      })\n    }).as('propertyData')\n\n    cy.visit('/properties/1')\n\n    // Check for loading skeleton\n    cy.get('.animate-pulse').should('exist')\n\n    // Wait for data to load\n    cy.wait('@propertyData')\n\n    // Verify loading state is gone\n    cy.get('h1').should('exist')\n    cy.get('.animate-pulse').should('not.exist')\n  })\n\n  // Test redirect from old route\n  it('redirects from old route to new route', () => {\n    cy.visit('/1')\n    cy.url().should('include', '/properties/1')\n  })\n})\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\cypress\\e2e\\property-search.cy.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\cypress\\e2e\\property-upload.cy.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\cypress\\e2e\\search.cy.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/ban-ts-comment",
        "severity": 2,
        "message": "Do not use \"@ts-nocheck\" because it alters compilation errors.",
        "line": 1,
        "column": 1,
        "nodeType": "Line",
        "messageId": "tsDirectiveComment",
        "endLine": 1,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// @ts-nocheck\r\ndescribe('Search Page', () => {\r\n  it('filters properties via search bar', () => {\r\n    cy.visit('/search')\r\n    cy.get('input[aria-label=\"Search Properties\"]').type('malibu')\r\n    cy.contains('Showing results for: malibu', { matchCase: false }).should('exist')\r\n    cy.contains('Ocean View Villa').should('exist')\r\n    cy.contains('Urban Apartment').should('not.exist')\r\n  })\r\n})\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\cypress\\support\\e2e.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\db\\run-migration.js",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 18,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 18,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [421, 471], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 40,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 40,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1043, 1107], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// db/run-migration.js\nconst fs = require('fs')\nconst path = require('path')\n\nconst { Pool } = require('pg')\nrequire('dotenv').config()\n\n// Create a connection pool\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,\n})\n\nasync function runMigration(migrationFile) {\n  const client = await pool.connect()\n\n  try {\n    console.log(`Running migration: ${migrationFile}`)\n\n    // Read the migration file\n    const filePath = path.join(__dirname, 'migrations', migrationFile)\n    const sql = fs.readFileSync(filePath, 'utf8')\n\n    // Start a transaction\n    await client.query('BEGIN')\n\n    // Run the migration\n    await client.query(sql)\n\n    // Record the migration in the migrations table\n    await client.query(\n      `INSERT INTO migrations (name, applied_at) VALUES ($1, NOW()) \n       ON CONFLICT (name) DO UPDATE SET applied_at = NOW()`,\n      [migrationFile]\n    )\n\n    // Commit the transaction\n    await client.query('COMMIT')\n\n    console.log(`Migration ${migrationFile} completed successfully`)\n  } catch (error) {\n    // Rollback the transaction on error\n    await client.query('ROLLBACK')\n    console.error(`Migration ${migrationFile} failed:`, error)\n    throw error\n  } finally {\n    // Release the client back to the pool\n    client.release()\n  }\n}\n\nasync function ensureMigrationsTable() {\n  const client = await pool.connect()\n\n  try {\n    // Create migrations table if it doesn't exist\n    await client.query(`\n      CREATE TABLE IF NOT EXISTS migrations (\n        name VARCHAR(255) PRIMARY KEY,\n        applied_at TIMESTAMP NOT NULL\n      )\n    `)\n  } catch (error) {\n    console.error('Failed to create migrations table:', error)\n    throw error\n  } finally {\n    client.release()\n  }\n}\n\nasync function main() {\n  try {\n    // Ensure migrations table exists\n    await ensureMigrationsTable()\n\n    // Get migration file from command line argument\n    const migrationFile = process.argv[2]\n\n    if (!migrationFile) {\n      console.error('Please specify a migration file')\n      process.exit(1)\n    }\n\n    // Run the migration\n    await runMigration(migrationFile)\n\n    // Close the pool\n    await pool.end()\n  } catch (error) {\n    console.error('Migration failed:', error)\n    process.exit(1)\n  }\n}\n\n// Run the script\nmain()\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\embedding_server\\venv\\Lib\\site-packages\\torch\\utils\\model_dump\\code.js",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'https://unpkg.com/htm?module'.",
        "line": 1,
        "column": 17,
        "nodeType": "Literal",
        "endLine": 1,
        "endColumn": 47
      },
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'https://unpkg.com/preact?module'.",
        "line": 2,
        "column": 38,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 71
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'blame_on_click' is not in camel case.",
        "line": 23,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 23,
        "endColumn": 24
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'aux_content_pane' is not in camel case.",
        "line": 24,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 24,
        "endColumn": 26
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'aux_content_pane' is not in camel case.",
        "line": 28,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 28,
        "endColumn": 26
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'blame_on_click' is not in camel case.",
        "line": 32,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 32,
        "endColumn": 24
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'blame_on_click' is not in camel case.",
        "line": 39,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 39,
        "endColumn": 24
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'my_caret' is not in camel case.",
        "line": 60,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 60,
        "endColumn": 17
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'my_caret' is not in camel case.",
        "line": 62,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 62,
        "endColumn": 21
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'file_size' is not in camel case.",
        "line": 72,
        "column": 38,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 72,
        "endColumn": 47
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'zip_files' is not in camel case.",
        "line": 72,
        "column": 49,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 72,
        "endColumn": 58
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'store_size' is not in camel case.",
        "line": 73,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 73,
        "endColumn": 17
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'compr_size' is not in camel case.",
        "line": 74,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 74,
        "endColumn": 17
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'zip_files' is not in camel case.",
        "line": 75,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 75,
        "endColumn": 29
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'store_size' is not in camel case.",
        "line": 78,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 78,
        "endColumn": 17
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'compr_size' is not in camel case.",
        "line": 80,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 80,
        "endColumn": 17
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'zip_overhead' is not in camel case.",
        "line": 83,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 83,
        "endColumn": 19
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'file_size' is not in camel case.",
        "line": 83,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 83,
        "endColumn": 31
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'store_size' is not in camel case.",
        "line": 83,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 83,
        "endColumn": 44
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'compr_size' is not in camel case.",
        "line": 83,
        "column": 47,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 83,
        "endColumn": 57
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'file_size' is not in camel case.",
        "line": 88,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 88,
        "endColumn": 30
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'store_size' is not in camel case.",
        "line": 89,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 89,
        "endColumn": 33
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'compr_size' is not in camel case.",
        "line": 90,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 90,
        "endColumn": 37
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'zip_overhead' is not in camel case.",
        "line": 91,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 91,
        "endColumn": 35
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'extra_parts' is not in camel case.",
        "line": 185,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 185,
        "endColumn": 22
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'extra_parts' is not in camel case.",
        "line": 187,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 187,
        "endColumn": 20
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'extra_parts' is not in camel case.",
        "line": 188,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 188,
        "endColumn": 20
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'extra_parts' is not in camel case.",
        "line": 190,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 190,
        "endColumn": 20
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'storage_key' is not in camel case.",
        "line": 211,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 211,
        "endColumn": 16
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'storage_numel' is not in camel case.",
        "line": 213,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 213,
        "endColumn": 18
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'extra_parts' is not in camel case.",
        "line": 218,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 218,
        "endColumn": 16
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'extra_parts' is not in camel case.",
        "line": 221,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 221,
        "endColumn": 30
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'storage_key' is not in camel case.",
        "line": 234,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 234,
        "endColumn": 21
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'storage_numel' is not in camel case.",
        "line": 235,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 235,
        "endColumn": 23
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'new_indent' is not in camel case.",
        "line": 247,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 247,
        "endColumn": 21
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'new_indent' is not in camel case.",
        "line": 254,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 254,
        "endColumn": 34
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'new_indent' is not in camel case.",
        "line": 266,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 266,
        "endColumn": 21
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'new_indent' is not in camel case.",
        "line": 270,
        "column": 35,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 270,
        "endColumn": 45
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'new_indent' is not in camel case.",
        "line": 275,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 275,
        "endColumn": 36
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'new_indent' is not in camel case.",
        "line": 288,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 288,
        "endColumn": 21
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'new_indent' is not in camel case.",
        "line": 294,
        "column": 37,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 294,
        "endColumn": 47
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'new_indent' is not in camel case.",
        "line": 301,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 301,
        "endColumn": 38
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'new_indent' is not in camel case.",
        "line": 308,
        "column": 69,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 308,
        "endColumn": 79
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'new_indent' is not in camel case.",
        "line": 313,
        "column": 69,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 313,
        "endColumn": 79
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'zip_files' is not in camel case.",
        "line": 338,
        "column": 40,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 338,
        "endColumn": 49
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'zip_files' is not in camel case.",
        "line": 353,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 353,
        "endColumn": 20
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'code_files' is not in camel case.",
        "line": 367,
        "column": 33,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 367,
        "endColumn": 43
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'ist_file' is not in camel case.",
        "line": 404,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 404,
        "endColumn": 30
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'ist_s_text' is not in camel case.",
        "line": 404,
        "column": 38,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 404,
        "endColumn": 48
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_start' is not in camel case.",
        "line": 404,
        "column": 50,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 404,
        "endColumn": 57
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_end' is not in camel case.",
        "line": 404,
        "column": 59,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 404,
        "endColumn": 64
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'ist_file' is not in camel case.",
        "line": 406,
        "column": 42,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 406,
        "endColumn": 50
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'ist_s_text' is not in camel case.",
        "line": 406,
        "column": 58,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 406,
        "endColumn": 68
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_start' is not in camel case.",
        "line": 406,
        "column": 70,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 406,
        "endColumn": 77
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_end' is not in camel case.",
        "line": 406,
        "column": 79,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 406,
        "endColumn": 84
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'old_storage' is not in camel case.",
        "line": 547,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 547,
        "endColumn": 28
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'all_tensors' is not in camel case.",
        "line": 577,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 577,
        "endColumn": 18
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'all_tensors' is not in camel case.",
        "line": 580,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 580,
        "endColumn": 16
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'all_tensors' is not in camel case.",
        "line": 583,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 583,
        "endColumn": 36
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'model_data' is not in camel case.",
        "line": 593,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 593,
        "endColumn": 31
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'model_data' is not in camel case.",
        "line": 596,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 596,
        "endColumn": 28
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'blame_info' is not in camel case.",
        "line": 632,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 632,
        "endColumn": 17
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'blame_info' is not in camel case.",
        "line": 637,
        "column": 36,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 637,
        "endColumn": 46
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'interned_strings' is not in camel case.",
        "line": 640,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 640,
        "endColumn": 37
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'blame_info' is not in camel case.",
        "line": 640,
        "column": 45,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 640,
        "endColumn": 55
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'blame_content' is not in camel case.",
        "line": 641,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 641,
        "endColumn": 22
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'blame_info' is not in camel case.",
        "line": 642,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 642,
        "endColumn": 19
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'ist_file' is not in camel case.",
        "line": 643,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 643,
        "endColumn": 23
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'ist_s_text' is not in camel case.",
        "line": 643,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 643,
        "endColumn": 41
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_start' is not in camel case.",
        "line": 643,
        "column": 43,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 643,
        "endColumn": 50
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_end' is not in camel case.",
        "line": 643,
        "column": 52,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 643,
        "endColumn": 57
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'blame_info' is not in camel case.",
        "line": 643,
        "column": 62,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 643,
        "endColumn": 72
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_text' is not in camel case.",
        "line": 644,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 644,
        "endColumn": 17
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'interned_strings' is not in camel case.",
        "line": 644,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 644,
        "endColumn": 36
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'ist_s_text' is not in camel case.",
        "line": 644,
        "column": 37,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 644,
        "endColumn": 47
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_start' is not in camel case.",
        "line": 645,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 645,
        "endColumn": 18
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_end' is not in camel case.",
        "line": 645,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 645,
        "endColumn": 32
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_text' is not in camel case.",
        "line": 645,
        "column": 36,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 645,
        "endColumn": 42
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_text' is not in camel case.",
        "line": 646,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 646,
        "endColumn": 28
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_text' is not in camel case.",
        "line": 647,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 647,
        "endColumn": 26
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_text' is not in camel case.",
        "line": 648,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 648,
        "endColumn": 28
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_text' is not in camel case.",
        "line": 649,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 649,
        "endColumn": 15
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'blame_content' is not in camel case.",
        "line": 651,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 651,
        "endColumn": 20
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'interned_strings' is not in camel case.",
        "line": 652,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 652,
        "endColumn": 31
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'ist_file' is not in camel case.",
        "line": 652,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 652,
        "endColumn": 40
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_start' is not in camel case.",
        "line": 653,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 653,
        "endColumn": 23
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_end' is not in camel case.",
        "line": 653,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 653,
        "endColumn": 32
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 's_text' is not in camel case.",
        "line": 654,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 654,
        "endColumn": 22
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'blame_content' is not in camel case.",
        "line": 661,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 661,
        "endColumn": 22
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 691,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 691,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [18732, 18771], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'error_msg' is not in camel case.",
        "line": 708,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 708,
        "endColumn": 18
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'error_msg' is not in camel case.",
        "line": 710,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 710,
        "endColumn": 16
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'error_msg' is not in camel case.",
        "line": 714,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 714,
        "endColumn": 18
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 717,
        "column": 33,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 717,
        "endColumn": 44
      }
    ],
    "suppressedMessages": [],
    "errorCount": 92,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import htm from 'https://unpkg.com/htm?module'\r\nimport { h, Component, render } from 'https://unpkg.com/preact?module'\r\n\r\nconst html = htm.bind(h)\r\n\r\nconst BURNED_IN_MODEL_INFO = null\r\n\r\n// https://stackoverflow.com/a/20732091\r\nfunction humanFileSize(size) {\r\n  if (size == 0) {\r\n    return '0 B'\r\n  }\r\n  var i = Math.floor(Math.log(size) / Math.log(1024))\r\n  return (size / Math.pow(1024, i)).toFixed(2) * 1 + ' ' + ['B', 'kB', 'MB', 'GB', 'TB'][i]\r\n}\r\n\r\nfunction caret(down) {\r\n  return down ? '\\u25BE' : '\\u25B8'\r\n}\r\n\r\nclass Blamer {\r\n  constructor() {\r\n    this.blame_on_click = false\r\n    this.aux_content_pane = null\r\n  }\r\n\r\n  setAuxContentPane(pane) {\r\n    this.aux_content_pane = pane\r\n  }\r\n\r\n  readyBlame() {\r\n    this.blame_on_click = true\r\n  }\r\n\r\n  maybeBlame(arg) {\r\n    if (!this.blame_on_click) {\r\n      return\r\n    }\r\n    this.blame_on_click = false\r\n    if (!this.aux_content_pane) {\r\n      return\r\n    }\r\n    this.aux_content_pane.doBlame(arg)\r\n  }\r\n}\r\n\r\nlet blame = new Blamer()\r\n\r\nclass Hider extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = { shown: null }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ shown: this.props.shown === 'true' })\r\n  }\r\n\r\n  render({ name, children }, { shown }) {\r\n    let my_caret = html`<span class=\"caret\" onClick=${() => this.click()}>${caret(shown)}</span>`\r\n    return html`<div data-hider-title=${name} data-shown=${shown}>\r\n      <h2>${my_caret} ${name}</h2>\r\n      <div>${shown ? this.props.children : []}</div>\r\n    </div>`\r\n  }\r\n\r\n  click() {\r\n    this.setState({ shown: !this.state.shown })\r\n  }\r\n}\r\n\r\nfunction ModelSizeSection({ model: { file_size, zip_files } }) {\r\n  let store_size = 0\r\n  let compr_size = 0\r\n  for (const zi of zip_files) {\r\n    if (zi.compression === 0) {\r\n      // TODO: Maybe check that compressed_size === file_size.\r\n      store_size += zi.compressed_size\r\n    } else {\r\n      compr_size += zi.compressed_size\r\n    }\r\n  }\r\n  let zip_overhead = file_size - store_size - compr_size\r\n  // TODO: Better formatting.  Right-align this.\r\n  return html` <${Hider} name=\"Model Size\" shown=\"true\">\r\n    <pre>\r\n.\r\n      Model size: ${file_size} (${humanFileSize(file_size)})\r\n      Stored files: ${store_size} (${humanFileSize(store_size)})\r\n      Compressed files: ${compr_size} (${humanFileSize(compr_size)})\r\n      Zip overhead: ${zip_overhead} (${humanFileSize(zip_overhead)})\r\n    </pre\r\n    >\r\n  <//>`\r\n}\r\n\r\nfunction StructuredDataSection({ name, data, shown }) {\r\n  return html` <${Hider} name=${name} shown=${shown}>\r\n    <div style=\"font-family:monospace;\">\r\n      <${StructuredData} data=${data} indent=\"\" prefix=\"\" /></div\r\n  ><//>`\r\n}\r\n\r\nclass StructuredData extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = { shown: false }\r\n\r\n    this.INLINE_TYPES = new Set(['boolean', 'number', 'string'])\r\n    this.IGNORED_STATE_KEYS = new Set(['training', '_is_full_backward_hook'])\r\n  }\r\n\r\n  click() {\r\n    this.setState({ shown: !this.state.shown })\r\n  }\r\n\r\n  expando(data) {\r\n    if (data === null || this.INLINE_TYPES.has(typeof data)) {\r\n      return false\r\n    }\r\n    if (typeof data != 'object') {\r\n      throw new Error('Not an object')\r\n    }\r\n    if (Array.isArray(data)) {\r\n      // TODO: Maybe show simple lists and tuples on one line.\r\n      return true\r\n    }\r\n    if (data.__tuple_values__) {\r\n      // TODO: Maybe show simple lists and tuples on one line.\r\n      return true\r\n    }\r\n    if (data.__is_dict__) {\r\n      // TODO: Maybe show simple (empty?) dicts on one line.\r\n      return true\r\n    }\r\n    if (data.__module_type__) {\r\n      return true\r\n    }\r\n    if (data.__tensor_v2__) {\r\n      return false\r\n    }\r\n    if (data.__qtensor__) {\r\n      return false\r\n    }\r\n    throw new Error(\"Can't handle data type.\", data)\r\n  }\r\n\r\n  renderHeadline(data) {\r\n    if (data === null) {\r\n      return 'None'\r\n    }\r\n    if (typeof data == 'boolean') {\r\n      const sd = String(data)\r\n      return sd.charAt(0).toUpperCase() + sd.slice(1)\r\n    }\r\n    if (typeof data == 'number') {\r\n      return JSON.stringify(data)\r\n    }\r\n    if (typeof data == 'string') {\r\n      return JSON.stringify(data)\r\n    }\r\n    if (typeof data != 'object') {\r\n      throw new Error('Not an object')\r\n    }\r\n    if (Array.isArray(data)) {\r\n      return 'list(['\r\n    }\r\n    if (data.__tuple_values__) {\r\n      return 'tuple(('\r\n    }\r\n    if (data.__is_dict__) {\r\n      return 'dict({'\r\n    }\r\n    if (data.__module_type__) {\r\n      return data.__module_type__ + '()'\r\n    }\r\n    if (data.__tensor_v2__) {\r\n      const [storage, offset, size, stride, grad] = data.__tensor_v2__\r\n      const [dtype, key, device, numel] = storage\r\n      return this.renderTensor('tensor', dtype, key, device, numel, offset, size, stride, grad, [])\r\n    }\r\n    if (data.__qtensor__) {\r\n      const [storage, offset, size, stride, quantizer, grad] = data.__qtensor__\r\n      const [dtype, key, device, numel] = storage\r\n      let extra_parts = []\r\n      if (quantizer[0] == 'per_tensor_affine') {\r\n        extra_parts.push(`scale=${quantizer[1]}`)\r\n        extra_parts.push(`zero_point=${quantizer[2]}`)\r\n      } else {\r\n        extra_parts.push(`quantizer=${quantizer[0]}`)\r\n      }\r\n      return this.renderTensor(\r\n        'qtensor',\r\n        dtype,\r\n        key,\r\n        device,\r\n        numel,\r\n        offset,\r\n        size,\r\n        stride,\r\n        grad,\r\n        extra_parts\r\n      )\r\n    }\r\n    throw new Error(\"Can't handle data type.\", data)\r\n  }\r\n\r\n  renderTensor(\r\n    prefix,\r\n    dtype,\r\n    storage_key,\r\n    device,\r\n    storage_numel,\r\n    offset,\r\n    size,\r\n    stride,\r\n    grad,\r\n    extra_parts\r\n  ) {\r\n    let parts = ['(' + size.join(',') + ')', dtype]\r\n    parts.push(...extra_parts)\r\n    if (device != 'cpu') {\r\n      parts.push(device)\r\n    }\r\n    if (grad) {\r\n      parts.push('grad')\r\n    }\r\n    // TODO: Check stride and indicate if the tensor is channels-last or non-contiguous\r\n    // TODO: Check size, stride, offset, and numel and indicate if\r\n    // the tensor doesn't use all data in storage.\r\n    // TODO: Maybe show key?\r\n    void offset\r\n    void stride\r\n    void storage_key\r\n    void storage_numel\r\n    return prefix + '(' + parts.join(', ') + ')'\r\n  }\r\n\r\n  renderBody(indent, data) {\r\n    if (data === null || this.INLINE_TYPES.has(typeof data)) {\r\n      throw 'Should not reach here.'\r\n    }\r\n    if (typeof data != 'object') {\r\n      throw new Error('Not an object')\r\n    }\r\n    if (Array.isArray(data)) {\r\n      let new_indent = indent + '\\u00A0\\u00A0'\r\n      let parts = []\r\n      for (let idx = 0; idx < data.length; idx++) {\r\n        // Does it make sense to put explicit index numbers here?\r\n        parts.push(\r\n          html`<br /><${StructuredData}\r\n              prefix=${idx + ': '}\r\n              indent=${new_indent}\r\n              data=${data[idx]}\r\n            />`\r\n        )\r\n      }\r\n      return parts\r\n    }\r\n    if (data.__tuple_values__) {\r\n      // Handled the same as lists.\r\n      return this.renderBody(indent, data.__tuple_values__)\r\n    }\r\n    if (data.__is_dict__) {\r\n      let new_indent = indent + '\\u00A0\\u00A0'\r\n      let parts = []\r\n      for (let idx = 0; idx < data.keys.length; idx++) {\r\n        if (typeof data.keys[idx] != 'string') {\r\n          parts.push(html`<br />${new_indent}Non-string key`)\r\n        } else {\r\n          parts.push(\r\n            html`<br /><${StructuredData}\r\n                prefix=${data.keys[idx] + ': '}\r\n                indent=${new_indent}\r\n                data=${data.values[idx]}\r\n              />`\r\n          )\r\n        }\r\n      }\r\n      return parts\r\n    }\r\n    if (data.__module_type__) {\r\n      const mstate = data.state\r\n      if (mstate === null || typeof mstate != 'object') {\r\n        throw new Error('Bad module state')\r\n      }\r\n      let new_indent = indent + '\\u00A0\\u00A0'\r\n      let parts = []\r\n      if (mstate.__is_dict__) {\r\n        // TODO: Less copy/paste between this and normal dicts.\r\n        for (let idx = 0; idx < mstate.keys.length; idx++) {\r\n          if (typeof mstate.keys[idx] != 'string') {\r\n            parts.push(html`<br />${new_indent}Non-string key`)\r\n          } else if (this.IGNORED_STATE_KEYS.has(mstate.keys[idx])) {\r\n            // Do nothing.\r\n          } else {\r\n            parts.push(\r\n              html`<br /><${StructuredData}\r\n                  prefix=${mstate.keys[idx] + ': '}\r\n                  indent=${new_indent}\r\n                  data=${mstate.values[idx]}\r\n                />`\r\n            )\r\n          }\r\n        }\r\n      } else if (mstate.__tuple_values__) {\r\n        parts.push(html`<br /><${StructuredData} prefix=\"\" indent=${new_indent} data=${mstate} />`)\r\n      } else if (mstate.__module_type__) {\r\n        // We normally wouldn't have the state of a module be another module,\r\n        // but we use \"modules\" to encode special values (like Unicode decode\r\n        // errors) that might be valid states.  Just go with it.\r\n        parts.push(html`<br /><${StructuredData} prefix=\"\" indent=${new_indent} data=${mstate} />`)\r\n      } else {\r\n        throw new Error('Bad module state')\r\n      }\r\n      return parts\r\n    }\r\n    if (data.__tensor_v2__) {\r\n      throw 'Should not reach here.'\r\n    }\r\n    if (data.__qtensor__) {\r\n      throw 'Should not reach here.'\r\n    }\r\n    throw new Error(\"Can't handle data type.\", data)\r\n  }\r\n\r\n  render({ data, indent, prefix }, { shown }) {\r\n    const exp = this.expando(data)\r\n      ? html`<span class=\"caret\" onClick=${() => this.click()}>${caret(shown)} </span>`\r\n      : ''\r\n    const headline = this.renderHeadline(data)\r\n    const body = shown ? this.renderBody(indent, data) : ''\r\n    return html`${indent}${exp}${prefix}${headline}${body}`\r\n  }\r\n}\r\n\r\nfunction ZipContentsSection({ model: { zip_files } }) {\r\n  // TODO: Add human-readable sizes?\r\n  // TODO: Add sorting options?\r\n  // TODO: Add hierarchical collapsible tree?\r\n  return html` <${Hider} name=\"Zip Contents\" shown=\"false\">\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Mode</th>\r\n          <th>Size</th>\r\n          <th>Compressed</th>\r\n          <th>Name</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody style=\"font-family:monospace;\">\r\n        ${zip_files.map(\r\n          zf =>\r\n            html`<tr>\r\n              <td>${{ 0: 'store', 8: 'deflate' }[zf.compression] || zf.compression}</td>\r\n              <td>${zf.file_size}</td>\r\n              <td>${zf.compressed_size}</td>\r\n              <td>${zf.filename}</td>\r\n            </tr>`\r\n        )}\r\n      </tbody>\r\n    </table><//\r\n  >`\r\n}\r\n\r\nfunction CodeSection({ model: { code_files } }) {\r\n  return html` <${Hider} name=\"Code\" shown=\"false\">\r\n    <div>\r\n      ${Object.entries(code_files).map(\r\n        ([fn, code]) => html`<${OneCodeSection} filename=${fn} code=${code} />`\r\n      )}\r\n    </div><//\r\n  >`\r\n}\r\n\r\nclass OneCodeSection extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = { shown: false }\r\n  }\r\n\r\n  click() {\r\n    const shown = !this.state.shown\r\n    this.setState({ shown: shown })\r\n  }\r\n\r\n  render({ filename, code }, { shown }) {\r\n    const header = html`\r\n      <h3 style=\"font-family:monospace;\">\r\n        <span class=\"caret\" onClick=${() => this.click()}>${caret(shown)} </span>\r\n        ${filename}\r\n      </h3>\r\n    `\r\n    if (!shown) {\r\n      return header\r\n    }\r\n    return html`\r\n      ${header}\r\n      <pre>${code.map(c => this.renderBlock(c))}</pre>\r\n    `\r\n  }\r\n\r\n  renderBlock([text, ist_file, line, ist_s_text, s_start, s_end]) {\r\n    return html`<span\r\n      onClick=${() => blame.maybeBlame({ ist_file, line, ist_s_text, s_start, s_end })}\r\n      >${text}</span\r\n    >`\r\n  }\r\n}\r\n\r\nfunction ExtraJsonSection({ files }) {\r\n  return html` <${Hider} name=\"Extra files (JSON)\" shown=\"false\">\r\n    <div>\r\n      <p>Use \"Log Raw Model Info\" for hierarchical view in browser console.</p>\r\n      ${Object.entries(files).map(\r\n        ([fn, json]) => html`<${OneJsonSection} filename=${fn} json=${json} />`\r\n      )}\r\n    </div><//\r\n  >`\r\n}\r\n\r\nclass OneJsonSection extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = { shown: false }\r\n  }\r\n\r\n  click() {\r\n    const shown = !this.state.shown\r\n    this.setState({ shown: shown })\r\n  }\r\n\r\n  render({ filename, json }, { shown }) {\r\n    const header = html`\r\n      <h3 style=\"font-family:monospace;\">\r\n        <span class=\"caret\" onClick=${() => this.click()}>${caret(shown)} </span>\r\n        ${filename}\r\n      </h3>\r\n    `\r\n    if (!shown) {\r\n      return header\r\n    }\r\n    return html`\r\n      ${header}\r\n      <pre>${JSON.stringify(json, null, 2)}</pre>\r\n    `\r\n  }\r\n}\r\n\r\nfunction ExtraPicklesSection({ files }) {\r\n  return html` <${Hider} name=\"Extra Pickles\" shown=\"false\">\r\n    <div>\r\n      ${Object.entries(files).map(\r\n        ([fn, content]) => html`<${OnePickleSection} filename=${fn} content=${content} />`\r\n      )}\r\n    </div><//\r\n  >`\r\n}\r\n\r\nclass OnePickleSection extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = { shown: false }\r\n  }\r\n\r\n  click() {\r\n    const shown = !this.state.shown\r\n    this.setState({ shown: shown })\r\n  }\r\n\r\n  render({ filename, content }, { shown }) {\r\n    const header = html`\r\n      <h3 style=\"font-family:monospace;\">\r\n        <span class=\"caret\" onClick=${() => this.click()}>${caret(shown)} </span>\r\n        ${filename}\r\n      </h3>\r\n    `\r\n    if (!shown) {\r\n      return header\r\n    }\r\n    return html`\r\n      ${header}\r\n      <pre>${content}</pre>\r\n    `\r\n  }\r\n}\r\n\r\nfunction assertStorageAreEqual(key, lhs, rhs) {\r\n  if (lhs.length !== rhs.length || !lhs.every((val, idx) => val === rhs[idx])) {\r\n    throw new Error(\"Storage mismatch for key '\" + key + \"'\")\r\n  }\r\n}\r\n\r\nfunction computeTensorMemory(numel, dtype) {\r\n  const sizes = {\r\n    Byte: 1,\r\n    Char: 1,\r\n    Short: 2,\r\n    Int: 4,\r\n    Long: 8,\r\n    Half: 2,\r\n    Float: 4,\r\n    Double: 8,\r\n    ComplexHalf: 4,\r\n    ComplexFloat: 8,\r\n    ComplexDouble: 16,\r\n    Bool: 1,\r\n    QInt8: 1,\r\n    QUInt8: 1,\r\n    QInt32: 4,\r\n    BFloat16: 2,\r\n  }\r\n  let dtsize = sizes[dtype]\r\n  if (!dtsize) {\r\n    throw new Error('Unrecognized dtype: ' + dtype)\r\n  }\r\n  return numel * dtsize\r\n}\r\n\r\n// TODO: Maybe track by dtype as well.\r\n// TODO: Maybe distinguish between visible size and storage size.\r\nfunction getTensorStorages(data) {\r\n  if (data === null) {\r\n    return new Map()\r\n  }\r\n  if (typeof data == 'boolean') {\r\n    return new Map()\r\n  }\r\n  if (typeof data == 'number') {\r\n    return new Map()\r\n  }\r\n  if (typeof data == 'string') {\r\n    return new Map()\r\n  }\r\n  if (typeof data != 'object') {\r\n    throw new Error('Not an object')\r\n  }\r\n  if (Array.isArray(data)) {\r\n    let result = new Map()\r\n    for (const item of data) {\r\n      const tensors = getTensorStorages(item)\r\n      for (const [key, storage] of tensors.entries()) {\r\n        if (!result.has(key)) {\r\n          result.set(key, storage)\r\n        } else {\r\n          const old_storage = result.get(key)\r\n          assertStorageAreEqual(key, old_storage, storage)\r\n        }\r\n      }\r\n    }\r\n    return result\r\n  }\r\n  if (data.__tuple_values__) {\r\n    return getTensorStorages(data.__tuple_values__)\r\n  }\r\n  if (data.__is_dict__) {\r\n    return getTensorStorages(data.values)\r\n  }\r\n  if (data.__module_type__) {\r\n    return getTensorStorages(data.state)\r\n  }\r\n  if (data.__tensor_v2__) {\r\n    const [storage, offset, size, stride, grad] = data.__tensor_v2__\r\n    const [dtype, key, device, numel] = storage\r\n    return new Map([[key, storage]])\r\n  }\r\n  if (data.__qtensor__) {\r\n    const [storage, offset, size, stride, quantizer, grad] = data.__qtensor__\r\n    const [dtype, key, device, numel] = storage\r\n    return new Map([[key, storage]])\r\n  }\r\n  throw new Error(\"Can't handle data type.\", data)\r\n}\r\n\r\nfunction getTensorMemoryByDevice(pickles) {\r\n  let all_tensors = []\r\n  for (const [name, pickle] of pickles) {\r\n    const tensors = getTensorStorages(pickle)\r\n    all_tensors.push(...tensors.values())\r\n  }\r\n  let result = {}\r\n  for (const storage of all_tensors.values()) {\r\n    const [dtype, key, device, numel] = storage\r\n    const size = computeTensorMemory(numel, dtype)\r\n    result[device] = (result[device] || 0) + size\r\n  }\r\n  return result\r\n}\r\n\r\n// Make this a separate component so it is rendered lazily.\r\nclass OpenTensorMemorySection extends Component {\r\n  render({ model: { model_data, constants } }) {\r\n    let sizes = getTensorMemoryByDevice(\r\n      new Map([\r\n        ['data', model_data],\r\n        ['constants', constants],\r\n      ])\r\n    )\r\n    return html` <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Device</th>\r\n          <th>Bytes</th>\r\n          <th>Human</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody style=\"font-family:monospace;\">\r\n        ${Object.entries(sizes).map(\r\n          ([dev, size]) =>\r\n            html`<tr>\r\n              <td>${dev}</td>\r\n              <td>${size}</td>\r\n              <td>${humanFileSize(size)}</td>\r\n            </tr>`\r\n        )}\r\n      </tbody>\r\n    </table>`\r\n  }\r\n}\r\n\r\nfunction TensorMemorySection({ model }) {\r\n  return html` <${Hider} name=\"Tensor Memory\" shown=\"false\">\r\n    <${OpenTensorMemorySection} model=${model}\r\n  /><//>`\r\n}\r\n\r\nclass AuxContentPane extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      blame_info: null,\r\n    }\r\n  }\r\n\r\n  doBlame(arg) {\r\n    this.setState({ ...this.state, blame_info: arg })\r\n  }\r\n\r\n  render({ model: { interned_strings } }, { blame_info }) {\r\n    let blame_content = ''\r\n    if (blame_info) {\r\n      const { ist_file, line, ist_s_text, s_start, s_end } = blame_info\r\n      let s_text = interned_strings[ist_s_text]\r\n      if (s_start != 0 || s_end != s_text.length) {\r\n        let prefix = s_text.slice(0, s_start)\r\n        let main = s_text.slice(s_start, s_end)\r\n        let suffix = s_text.slice(s_end)\r\n        s_text = html`${prefix}<strong>${main}</strong>${suffix}`\r\n      }\r\n      blame_content = html`\r\n        <h3>${interned_strings[ist_file]}:${line}</h3>\r\n        <pre>${s_start}:${s_end}</pre>\r\n        <pre>${s_text}</pre>\r\n        <br />\r\n      `\r\n    }\r\n    return html`\r\n      <button onClick=${() => blame.readyBlame()}>Blame Code</button>\r\n      <br />\r\n      ${blame_content}\r\n    `\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      err: false,\r\n      model: null,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const app = this\r\n    if (BURNED_IN_MODEL_INFO !== null) {\r\n      app.setState({ model: BURNED_IN_MODEL_INFO })\r\n    } else {\r\n      fetch('./model_info.json')\r\n        .then(function (response) {\r\n          if (!response.ok) {\r\n            throw new Error('Response not ok.')\r\n          }\r\n          return response.json()\r\n        })\r\n        .then(function (body) {\r\n          app.setState({ model: body })\r\n        })\r\n        .catch(function (error) {\r\n          console.log('Top-level error: ', error)\r\n        })\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error) {\r\n    void error\r\n    this.setState({ ...this.state, err: true })\r\n  }\r\n\r\n  render(_, { err }) {\r\n    if (this.state.model === null) {\r\n      return html`<h1>Loading...</h1>`\r\n    }\r\n\r\n    const model = this.state.model.model\r\n\r\n    let error_msg = ''\r\n    if (err) {\r\n      error_msg = html`<h2 style=\"background:red\">An error occurred. Check console</h2>`\r\n    }\r\n\r\n    return html`\r\n      ${error_msg}\r\n      <div id=\"main_content\" style=\"position:absolute;width:99%;height:79%;overflow:scroll\">\r\n        <h1>TorchScript Model (version ${model.version}): ${model.title}</h1>\r\n        <button onClick=${() => console.log(model)}>Log Raw Model Info</button>\r\n        <${ModelSizeSection} model=${model} />\r\n        <${StructuredDataSection} name=\"Model Data\" data=${model.model_data} shown=\"true\" />\r\n        <${StructuredDataSection} name=\"Constants\" data=${model.constants} shown=\"false\" />\r\n        <${ZipContentsSection} model=${model} />\r\n        <${CodeSection} model=${model} />\r\n        <${ExtraJsonSection} files=${model.extra_files_jsons} />\r\n        <${ExtraPicklesSection} files=${model.extra_pickles} />\r\n        <${TensorMemorySection} model=${model} />\r\n      </div>\r\n      <div id=\"aux_content\" style=\"position:absolute;width:99%;top:80%;height:20%;overflow:scroll\">\r\n        <${AuxContentPane}\r\n          err=${this.state.error}\r\n          model=${model}\r\n          ref=${p => blame.setAuxContentPane(p)}\r\n        />\r\n      </div>\r\n    `\r\n  }\r\n}\r\n\r\nrender(h(App), document.body)\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\embedding_server\\venv\\Lib\\site-packages\\torch\\utils\\model_dump\\htm.mjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\embedding_server\\venv\\Lib\\site-packages\\torch\\utils\\model_dump\\preact.mjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\embedding_server\\venv\\Lib\\site-packages\\urllib3\\contrib\\emscripten\\emscripten_fetch_worker.js",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 39,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 39,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1237, 1277], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 99,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 99,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [3257, 3297], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "let Status = {\n  SUCCESS_HEADER: -1,\n  SUCCESS_EOF: -2,\n  ERROR_TIMEOUT: -3,\n  ERROR_EXCEPTION: -4,\n}\n\nlet connections = {}\nlet nextConnectionID = 1\nconst encoder = new TextEncoder()\n\nself.addEventListener('message', async function (event) {\n  if (event.data.close) {\n    let connectionID = event.data.close\n    delete connections[connectionID]\n    return\n  } else if (event.data.getMore) {\n    let connectionID = event.data.getMore\n    let { curOffset, value, reader, intBuffer, byteBuffer } = connections[connectionID]\n    // if we still have some in buffer, then just send it back straight away\n    if (!value || curOffset >= value.length) {\n      // read another buffer if required\n      try {\n        let readResponse = await reader.read()\n\n        if (readResponse.done) {\n          // read everything - clear connection and return\n          delete connections[connectionID]\n          Atomics.store(intBuffer, 0, Status.SUCCESS_EOF)\n          Atomics.notify(intBuffer, 0)\n          // finished reading successfully\n          // return from event handler\n          return\n        }\n        curOffset = 0\n        connections[connectionID].value = readResponse.value\n        value = readResponse.value\n      } catch (error) {\n        console.log('Request exception:', error)\n        let errorBytes = encoder.encode(error.message)\n        let written = errorBytes.length\n        byteBuffer.set(errorBytes)\n        intBuffer[1] = written\n        Atomics.store(intBuffer, 0, Status.ERROR_EXCEPTION)\n        Atomics.notify(intBuffer, 0)\n      }\n    }\n\n    // send as much buffer as we can\n    let curLen = value.length - curOffset\n    if (curLen > byteBuffer.length) {\n      curLen = byteBuffer.length\n    }\n    byteBuffer.set(value.subarray(curOffset, curOffset + curLen), 0)\n\n    Atomics.store(intBuffer, 0, curLen) // store current length in bytes\n    Atomics.notify(intBuffer, 0)\n    curOffset += curLen\n    connections[connectionID].curOffset = curOffset\n\n    return\n  } else {\n    // start fetch\n    let connectionID = nextConnectionID\n    nextConnectionID += 1\n    const intBuffer = new Int32Array(event.data.buffer)\n    const byteBuffer = new Uint8Array(event.data.buffer, 8)\n    try {\n      const response = await fetch(event.data.url, event.data.fetchParams)\n      // return the headers first via textencoder\n      var headers = []\n      for (const pair of response.headers.entries()) {\n        headers.push([pair[0], pair[1]])\n      }\n      let headerObj = {\n        headers: headers,\n        status: response.status,\n        connectionID,\n      }\n      const headerText = JSON.stringify(headerObj)\n      let headerBytes = encoder.encode(headerText)\n      let written = headerBytes.length\n      byteBuffer.set(headerBytes)\n      intBuffer[1] = written\n      // make a connection\n      connections[connectionID] = {\n        reader: response.body.getReader(),\n        intBuffer: intBuffer,\n        byteBuffer: byteBuffer,\n        value: undefined,\n        curOffset: 0,\n      }\n      // set header ready\n      Atomics.store(intBuffer, 0, Status.SUCCESS_HEADER)\n      Atomics.notify(intBuffer, 0)\n      // all fetching after this goes through a new postmessage call with getMore\n      // this allows for parallel requests\n    } catch (error) {\n      console.log('Request exception:', error)\n      let errorBytes = encoder.encode(error.message)\n      let written = errorBytes.length\n      byteBuffer.set(errorBytes)\n      intBuffer[1] = written\n      Atomics.store(intBuffer, 0, Status.ERROR_EXCEPTION)\n      Atomics.notify(intBuffer, 0)\n    }\n  }\n})\nself.postMessage({ inited: true })\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\examples\\detailed-db-error-handling.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 47,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 47,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1432, 1435], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1432, 1435], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 58,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 58,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1839, 1842], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1839, 1842], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 77,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 77,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2430, 2433], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2430, 2433], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 78,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 78,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2463, 2466], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2463, 2466], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 113,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 113,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3600, 3603], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3600, 3603], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 130,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 130,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4125, 4128], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4125, 4128], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'query' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 166,
        "column": 39,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 166,
        "endColumn": 44
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'params' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 166,
        "column": 54,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 166,
        "endColumn": 60
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 166,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 166,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5166, 5169], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5166, 5169], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'transaction' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 166,
        "column": 69,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 166,
        "endColumn": 80
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 166,
        "column": 83,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 166,
        "endColumn": 86,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5187, 5190], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5187, 5190], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'transaction' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 176,
        "column": 42,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 176,
        "endColumn": 53
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 176,
        "column": 55,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 176,
        "endColumn": 58,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5418, 5421], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5418, 5421], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'transaction' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 181,
        "column": 44,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 181,
        "endColumn": 55
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 181,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 181,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5536, 5539], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5536, 5539], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 186,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 186,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5641, 5644], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5641, 5644], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 188,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 188,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [5693, 5762], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'main' is defined but never used.",
        "line": 192,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 192,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'connection' is assigned a value but never used.",
        "line": 195,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 195,
        "endColumn": 21
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 202,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 202,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [6033, 6070], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'connection' is assigned a value but never used.",
        "line": 209,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 209,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 11,
    "fatalErrorCount": 0,
    "warningCount": 10,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\r\n * Example of detailed database error handling\r\n */\r\n\r\nimport {\r\n  createDetailedDbConnectionErrorMessage,\r\n  createDbConnectionErrorObject,\r\n  getUserFriendlyDbErrorMessage,\r\n} from '../lib/db/error-utils'\r\n\r\n/**\r\n * Example database connection function with improved error handling\r\n */\r\nasync function connectToDatabase(config: {\r\n  host: string\r\n  port: number\r\n  database: string\r\n  user: string\r\n  password: string\r\n}) {\r\n  try {\r\n    // Simulated database connection\r\n    const connection = await simulateDatabaseConnection(config)\r\n    return connection\r\n  } catch (err) {\r\n    // ❌ BAD: Generic error message\r\n    // console.error('Database connection error:', err.message);\r\n    // throw new Error(`Database connection error: ${err.message}`);\r\n\r\n    // ✅ GOOD: Detailed error message with connection details\r\n    const detailedErrorMessage = createDetailedDbConnectionErrorMessage(err)\r\n    console.error(detailedErrorMessage)\r\n\r\n    // For logging systems or error tracking services\r\n    const errorObject = createDbConnectionErrorObject(err)\r\n    logError('database_connection_failed', errorObject)\r\n\r\n    // For user-facing errors, provide a friendly message\r\n    const userFriendlyMessage = getUserFriendlyDbErrorMessage(err)\r\n    throw new Error(userFriendlyMessage)\r\n  }\r\n}\r\n\r\n/**\r\n * Example of handling database query errors with detailed information\r\n */\r\nasync function executeQuery(query: string, params: any[]) {\r\n  try {\r\n    // Simulated query execution\r\n    const result = await simulateQueryExecution(query, params)\r\n    return result\r\n  } catch (err) {\r\n    // ❌ BAD: Generic error message\r\n    // console.error('Query error:', err.message);\r\n    // throw new Error(`Query error: ${err.message}`);\r\n\r\n    // ✅ GOOD: Detailed error message with query information\r\n    const errorObj = err as Record<string, any>\r\n    const detailedErrorMessage = `Database query error: ${errorObj.message || 'Unknown error'} | Query: ${query} | Parameters: ${JSON.stringify(params)}`\r\n\r\n    if (errorObj.code) {\r\n      detailedErrorMessage += ` | Error Code: ${errorObj.code}`\r\n    }\r\n\r\n    if (errorObj.position) {\r\n      detailedErrorMessage += ` | Position: ${errorObj.position}`\r\n    }\r\n\r\n    console.error(detailedErrorMessage)\r\n    throw new Error(detailedErrorMessage)\r\n  }\r\n}\r\n\r\n/**\r\n * Example of handling database transaction errors\r\n */\r\nasync function executeTransaction(queries: { sql: string; params: any[] }[]) {\r\n  let transaction: any = null\r\n\r\n  try {\r\n    // Simulated transaction start\r\n    transaction = await simulateTransactionStart()\r\n\r\n    for (const { sql, params } of queries) {\r\n      await simulateQueryExecution(sql, params, transaction)\r\n    }\r\n\r\n    // Simulated transaction commit\r\n    await simulateTransactionCommit(transaction)\r\n\r\n    return { success: true }\r\n  } catch (err) {\r\n    // Rollback transaction if it exists\r\n    if (transaction) {\r\n      try {\r\n        await simulateTransactionRollback(transaction)\r\n      } catch (rollbackErr) {\r\n        // ❌ BAD: Generic rollback error message\r\n        // console.error('Transaction rollback error:', rollbackErr.message);\r\n\r\n        // ✅ GOOD: Detailed rollback error message\r\n        console.error(\r\n          `Transaction rollback error: ${String(rollbackErr)} | Original error: ${String(err)}`\r\n        )\r\n      }\r\n    }\r\n\r\n    // ❌ BAD: Generic error message\r\n    // console.error('Transaction error:', err.message);\r\n    // throw new Error(`Transaction error: ${err.message}`);\r\n\r\n    // ✅ GOOD: Detailed error message with transaction information\r\n    const errorObj = err as Record<string, any>\r\n    const detailedErrorMessage = `Database transaction error: ${errorObj.message || 'Unknown error'} | Queries: ${queries.length}`\r\n\r\n    if (errorObj.code) {\r\n      detailedErrorMessage += ` | Error Code: ${errorObj.code}`\r\n    }\r\n\r\n    if (errorObj.query) {\r\n      detailedErrorMessage += ` | Failed Query: ${errorObj.query}`\r\n    }\r\n\r\n    console.error(detailedErrorMessage)\r\n    throw new Error(detailedErrorMessage)\r\n  }\r\n}\r\n\r\n// Mock functions for demonstration\r\nasync function simulateDatabaseConnection(config: any) {\r\n  // Simulate different connection errors based on configuration\r\n  if (config.host === 'localhost' && config.port === 5432) {\r\n    return { connected: true }\r\n  } else if (config.host === 'invalid-host') {\r\n    throw {\r\n      message: 'getaddrinfo ENOTFOUND invalid-host',\r\n      code: 'ENOTFOUND',\r\n      host: 'invalid-host',\r\n      port: config.port,\r\n    }\r\n  } else if (config.port === 1234) {\r\n    throw {\r\n      message: 'connect ECONNREFUSED 127.0.0.1:1234',\r\n      code: 'ECONNREFUSED',\r\n      address: '127.0.0.1',\r\n      port: 1234,\r\n    }\r\n  } else if (config.user === 'invalid-user') {\r\n    throw {\r\n      message: 'password authentication failed for user \"invalid-user\"',\r\n      code: 'AUTHENTICATION_FAILED',\r\n      host: config.host,\r\n      port: config.port,\r\n      user: 'invalid-user',\r\n    }\r\n  } else {\r\n    throw {\r\n      message: 'connection timeout',\r\n      code: 'ETIMEDOUT',\r\n      host: config.host,\r\n      port: config.port,\r\n    }\r\n  }\r\n}\r\n\r\nasync function simulateQueryExecution(query: string, params: any[], transaction?: any) {\r\n  // Simulate query execution\r\n  return { rows: [] }\r\n}\r\n\r\nasync function simulateTransactionStart() {\r\n  // Simulate transaction start\r\n  return { id: 'tx-123' }\r\n}\r\n\r\nasync function simulateTransactionCommit(transaction: any) {\r\n  // Simulate transaction commit\r\n  return true\r\n}\r\n\r\nasync function simulateTransactionRollback(transaction: any) {\r\n  // Simulate transaction rollback\r\n  return true\r\n}\r\n\r\nfunction logError(code: string, details: any) {\r\n  // Simulate error logging to a service\r\n  console.log(`[ERROR_LOG] ${code}:`, JSON.stringify(details, null, 2))\r\n}\r\n\r\n// Example usage\r\nasync function main() {\r\n  try {\r\n    // This will succeed\r\n    const connection = await connectToDatabase({\r\n      host: 'localhost',\r\n      port: 5432,\r\n      database: 'mydb',\r\n      user: 'postgres',\r\n      password: 'password',\r\n    })\r\n    console.log('Connected successfully')\r\n  } catch (err) {\r\n    console.error('Main error handler:', err.message)\r\n  }\r\n\r\n  try {\r\n    // This will fail with a detailed error message\r\n    const connection = await connectToDatabase({\r\n      host: 'invalid-host',\r\n      port: 5432,\r\n      database: 'mydb',\r\n      user: 'postgres',\r\n      password: 'password',\r\n    })\r\n  } catch (err) {\r\n    console.error('Main error handler:', err.message)\r\n  }\r\n}\r\n\r\nexport { connectToDatabase, executeQuery, executeTransaction }\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\examples\\error-handling-example.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'AppError' is defined but never used.",
        "line": 6,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 11
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 102,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 102,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2201, 2246], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 106,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 106,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2345, 2348], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2345, 2348], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// examples/error-handling-example.ts\nimport express from 'express'\n\nimport { winstonLogger as logger } from '../lib/logging/winston-logger'\nimport {\n  AppError,\n  BadRequest,\n  NotFound,\n  errorHandler,\n  requestIdMiddleware,\n} from '../lib/middleware/errorHandler'\n\n// Create Express app\nconst app = express()\n\n// Apply middleware\napp.use(express.json())\napp.use(requestIdMiddleware)\n\n// Example route with try/catch and async error handling\napp.get('/api/properties/:id', async (req, res, next) => {\n  try {\n    const { id } = req.params\n\n    // Validate input\n    if (!id || typeof id !== 'string') {\n      throw BadRequest('Invalid property ID', { providedId: id })\n    }\n\n    // Simulate database lookup\n    const property = await findProperty(id)\n\n    // Handle not found case\n    if (!property) {\n      throw NotFound(`Property with ID ${id} not found`)\n    }\n\n    // Log successful retrieval\n    logger.info(`Property retrieved successfully`, {\n      context: {\n        propertyId: id,\n        requestId: req.id,\n      },\n    })\n\n    // Return successful response\n    res.json({\n      success: true,\n      data: property,\n    })\n  } catch (error) {\n    // Pass error to the error handler middleware\n    next(error)\n  }\n})\n\n// Example route with a custom error\napp.post('/api/properties', (req, res, next) => {\n  const { title, price } = req.body\n\n  // Validate required fields\n  if (!title) {\n    return next(BadRequest('Title is required'))\n  }\n\n  if (price === undefined || isNaN(price) || price <= 0) {\n    return next(\n      BadRequest('Valid price is required', {\n        providedPrice: price,\n        message: 'Price must be a positive number',\n      })\n    )\n  }\n\n  // Process the request (simplified example)\n  try {\n    // Simulate an internal error\n    if (Math.random() > 0.8) {\n      throw new Error('Random internal server error')\n    }\n\n    // Success case\n    res.status(201).json({\n      success: true,\n      data: {\n        id: 'new-property-id',\n        title,\n        price,\n      },\n    })\n  } catch (error) {\n    next(error)\n  }\n})\n\n// Apply error handler middleware\napp.use(errorHandler)\n\n// Start server\nconst PORT = process.env.PORT || 3000\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`)\n})\n\n// Mock function to simulate database lookup\nasync function findProperty(id: string): Promise<any | null> {\n  // Simulate database delay\n  await new Promise(resolve => setTimeout(resolve, 100))\n\n  // Simulate not found for specific IDs\n  if (id === 'not-found' || id === '404') {\n    return null\n  }\n\n  // Return mock property data\n  return {\n    id,\n    title: 'Sample Property',\n    price: 250000,\n    bedrooms: 3,\n    bathrooms: 2,\n    location: 'London, UK',\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\examples\\improved-db-error-handling.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 28,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 28,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [678, 681], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [678, 681], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 50,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 50,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1216, 1219], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1216, 1219], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 114,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 114,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3178, 3181], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3178, 3181], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 181,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 181,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [5153, 5222], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 206,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 206,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6025, 6028], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6025, 6028], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 239,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 239,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [7223, 7292], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 254,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 254,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7688, 7691], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7688, 7691], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 255,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 255,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7721, 7724], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7721, 7724], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 277,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 277,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [8316, 8367], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 303,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 303,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [9349, 9418], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 318,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 318,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9872, 9875], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9872, 9875], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 354,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 354,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10913, 10916], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10913, 10916], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 354,
        "column": 83,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 354,
        "endColumn": 86,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10934, 10937], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10934, 10937], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'transaction' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 392,
        "column": 42,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 392,
        "endColumn": 53
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 392,
        "column": 55,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 392,
        "endColumn": 58,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12044, 12047], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12044, 12047], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'transaction' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 397,
        "column": 44,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 397,
        "endColumn": 55
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 397,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 397,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12162, 12165], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12162, 12165], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'main' is defined but never used.",
        "line": 403,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 403,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'connection' is assigned a value but never used.",
        "line": 406,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 406,
        "endColumn": 21
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 413,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 413,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [12490, 12527], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 11,
    "fatalErrorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\r\n * Example of improved database error handling with error classification\r\n */\r\n\r\nimport { getUserFriendlyDbErrorMessage, DbErrorCode } from '../lib/db/error-utils'\r\n\r\n/**\r\n * Database error categories for better error handling\r\n */\r\nenum DbErrorCategory {\r\n  CONNECTION = 'CONNECTION',\r\n  AUTHENTICATION = 'AUTHENTICATION',\r\n  PERMISSION = 'PERMISSION',\r\n  QUERY = 'QUERY',\r\n  TRANSACTION = 'TRANSACTION',\r\n  TIMEOUT = 'TIMEOUT',\r\n  CONSTRAINT = 'CONSTRAINT',\r\n  UNKNOWN = 'UNKNOWN',\r\n}\r\n\r\n/**\r\n * Interface for classified database errors\r\n */\r\ninterface ClassifiedDbError {\r\n  category: DbErrorCategory\r\n  code: string | null\r\n  message: string\r\n  details: Record<string, any>\r\n  originalError: unknown\r\n  isRetryable: boolean\r\n}\r\n\r\n/**\r\n * Classifies database errors into meaningful categories\r\n * @param err The original error\r\n * @returns A classified error object\r\n */\r\nfunction classifyDbError(err: unknown): ClassifiedDbError {\r\n  if (!err || typeof err !== 'object') {\r\n    return {\r\n      category: DbErrorCategory.UNKNOWN,\r\n      code: null,\r\n      message: String(err),\r\n      details: {},\r\n      originalError: err,\r\n      isRetryable: false,\r\n    }\r\n  }\r\n\r\n  const errorObj = err as Record<string, any>\r\n  const code = errorObj.code\r\n  const message = errorObj.message || 'Unknown database error'\r\n\r\n  // Default classification\r\n  let category = DbErrorCategory.UNKNOWN\r\n  let isRetryable = false\r\n\r\n  // Classify based on error code\r\n  if (code) {\r\n    switch (code) {\r\n      // Connection errors\r\n      case DbErrorCode.CONNECTION_REFUSED:\r\n      case DbErrorCode.CONNECTION_RESET:\r\n      case DbErrorCode.HOST_NOT_FOUND:\r\n        category = DbErrorCategory.CONNECTION\r\n        isRetryable = true\r\n        break\r\n\r\n      // Authentication errors\r\n      case DbErrorCode.AUTHENTICATION_FAILED:\r\n        category = DbErrorCategory.AUTHENTICATION\r\n        isRetryable = false\r\n        break\r\n\r\n      // Permission errors\r\n      case DbErrorCode.PERMISSION_DENIED:\r\n        category = DbErrorCategory.PERMISSION\r\n        isRetryable = false\r\n        break\r\n\r\n      // Timeout errors\r\n      case DbErrorCode.CONNECTION_TIMEOUT:\r\n        category = DbErrorCategory.TIMEOUT\r\n        isRetryable = true\r\n        break\r\n\r\n      // Database-specific error codes\r\n      case '23505': // PostgreSQL unique violation\r\n      case 'ER_DUP_ENTRY': // MySQL duplicate entry\r\n        category = DbErrorCategory.CONSTRAINT\r\n        isRetryable = false\r\n        break\r\n\r\n      // Transaction errors\r\n      case '40001': // PostgreSQL serialization failure\r\n      case 'ER_LOCK_DEADLOCK': // MySQL deadlock\r\n        category = DbErrorCategory.TRANSACTION\r\n        isRetryable = true\r\n        break\r\n\r\n      default:\r\n        // Try to classify based on error message patterns\r\n        if (message.includes('query') || message.includes('sql syntax')) {\r\n          category = DbErrorCategory.QUERY\r\n          isRetryable = false\r\n        } else if (message.includes('transaction')) {\r\n          category = DbErrorCategory.TRANSACTION\r\n          isRetryable = true\r\n        }\r\n    }\r\n  }\r\n\r\n  // Extract relevant details based on the error category\r\n  const details: Record<string, any> = {}\r\n\r\n  // Common details\r\n  if (errorObj.host) details.host = errorObj.host\r\n  if (errorObj.port) details.port = errorObj.port\r\n  if (errorObj.database) details.database = errorObj.database\r\n\r\n  // Category-specific details\r\n  switch (category) {\r\n    case DbErrorCategory.QUERY:\r\n      if (errorObj.query) details.query = errorObj.query\r\n      if (errorObj.parameters) details.parameters = errorObj.parameters\r\n      if (errorObj.position) details.position = errorObj.position\r\n      break\r\n\r\n    case DbErrorCategory.CONSTRAINT:\r\n      if (errorObj.constraint) details.constraint = errorObj.constraint\r\n      if (errorObj.table) details.table = errorObj.table\r\n      if (errorObj.column) details.column = errorObj.column\r\n      break\r\n\r\n    case DbErrorCategory.TRANSACTION:\r\n      if (errorObj.transactionId) details.transactionId = errorObj.transactionId\r\n      break\r\n  }\r\n\r\n  return {\r\n    category,\r\n    code,\r\n    message,\r\n    details,\r\n    originalError: err,\r\n    isRetryable,\r\n  }\r\n}\r\n\r\n/**\r\n * Example database connection function with improved error handling\r\n */\r\nasync function connectToDatabase(config: {\r\n  host: string\r\n  port: number\r\n  database: string\r\n  user: string\r\n  password: string\r\n}) {\r\n  try {\r\n    // Simulated database connection\r\n    const connection = await simulateDatabaseConnection(config)\r\n    return connection\r\n  } catch (err) {\r\n    // Classify the error\r\n    const classifiedError = classifyDbError(err)\r\n\r\n    // Log detailed error information\r\n    console.error(`Database error [${classifiedError.category}]:`, {\r\n      code: classifiedError.code,\r\n      message: classifiedError.message,\r\n      details: classifiedError.details,\r\n      isRetryable: classifiedError.isRetryable,\r\n    })\r\n\r\n    // Handle based on error category\r\n    switch (classifiedError.category) {\r\n      case DbErrorCategory.CONNECTION:\r\n        // For connection errors, we might want to retry\r\n        if (classifiedError.isRetryable) {\r\n          console.log('Connection error is retryable, attempting reconnect...')\r\n          // Implement retry logic here\r\n        }\r\n        break\r\n\r\n      case DbErrorCategory.AUTHENTICATION:\r\n        // For auth errors, we might want to alert administrators\r\n        console.error('Authentication error - credentials may need updating')\r\n        break\r\n\r\n      case DbErrorCategory.PERMISSION:\r\n        // For permission errors, we might need to check user roles\r\n        console.error('Permission error - check database user permissions')\r\n        break\r\n    }\r\n\r\n    // For user-facing errors, provide a friendly message\r\n    const userFriendlyMessage = getUserFriendlyDbErrorMessage(err)\r\n    throw new Error(userFriendlyMessage)\r\n  }\r\n}\r\n\r\n/**\r\n * Example of handling database query errors with improved classification\r\n */\r\nasync function executeQuery(query: string, params: any[]) {\r\n  try {\r\n    // Simulated query execution\r\n    const result = await simulateQueryExecution(query, params)\r\n    return result\r\n  } catch (err) {\r\n    // Classify the error\r\n    const classifiedError = classifyDbError(err)\r\n\r\n    // Log detailed error information\r\n    console.error(`Query error [${classifiedError.category}]:`, {\r\n      code: classifiedError.code,\r\n      message: classifiedError.message,\r\n      query,\r\n      params,\r\n      details: classifiedError.details,\r\n      isRetryable: classifiedError.isRetryable,\r\n    })\r\n\r\n    // Handle specific error categories\r\n    switch (classifiedError.category) {\r\n      case DbErrorCategory.CONSTRAINT:\r\n        // For constraint violations, return a specific error\r\n        throw new Error(`Data validation error: ${classifiedError.message}`)\r\n\r\n      case DbErrorCategory.QUERY:\r\n        // For query syntax errors, this is likely a programming issue\r\n        console.error('Query syntax error - check the query structure')\r\n        throw new Error('Invalid query structure')\r\n\r\n      case DbErrorCategory.TRANSACTION:\r\n        // For transaction errors, we might want to retry\r\n        if (classifiedError.isRetryable) {\r\n          console.log('Transaction error is retryable, could attempt retry...')\r\n          // Implement retry logic here\r\n        }\r\n        break\r\n\r\n      default:\r\n        // For other errors, throw with the classified message\r\n        throw new Error(`Database error: ${classifiedError.message}`)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Example of handling database transaction errors with improved classification\r\n */\r\nasync function executeTransaction(queries: { sql: string; params: any[] }[]) {\r\n  let transaction: any = null\r\n\r\n  try {\r\n    // Simulated transaction start\r\n    transaction = await simulateTransactionStart()\r\n\r\n    for (const { sql, params } of queries) {\r\n      await simulateQueryExecution(sql, params, transaction)\r\n    }\r\n\r\n    // Simulated transaction commit\r\n    await simulateTransactionCommit(transaction)\r\n\r\n    return { success: true }\r\n  } catch (err) {\r\n    // Classify the error\r\n    const classifiedError = classifyDbError(err)\r\n\r\n    // Attempt rollback if transaction exists\r\n    if (transaction) {\r\n      try {\r\n        await simulateTransactionRollback(transaction)\r\n        console.log('Transaction successfully rolled back')\r\n      } catch (rollbackErr) {\r\n        // Classify rollback error\r\n        const rollbackClassifiedError = classifyDbError(rollbackErr)\r\n        console.error(`Rollback failed [${rollbackClassifiedError.category}]:`, {\r\n          code: rollbackClassifiedError.code,\r\n          message: rollbackClassifiedError.message,\r\n          details: rollbackClassifiedError.details,\r\n          originalError: classifiedError.message, // Include original error\r\n        })\r\n      }\r\n    }\r\n\r\n    // Log detailed error information\r\n    console.error(`Transaction error [${classifiedError.category}]:`, {\r\n      code: classifiedError.code,\r\n      message: classifiedError.message,\r\n      details: classifiedError.details,\r\n      isRetryable: classifiedError.isRetryable,\r\n      queryCount: queries.length,\r\n    })\r\n\r\n    // Handle specific error categories\r\n    switch (classifiedError.category) {\r\n      case DbErrorCategory.TRANSACTION:\r\n        if (classifiedError.isRetryable) {\r\n          console.log('Transaction error is retryable, could attempt retry...')\r\n          // Implement retry logic here\r\n        }\r\n        throw new Error(`Transaction failed: ${classifiedError.message}`)\r\n\r\n      case DbErrorCategory.CONSTRAINT:\r\n        throw new Error(`Data validation error: ${classifiedError.message}`)\r\n\r\n      default:\r\n        throw new Error(`Database transaction error: ${classifiedError.message}`)\r\n    }\r\n  }\r\n}\r\n\r\n// Mock functions for demonstration\r\nasync function simulateDatabaseConnection(config: any) {\r\n  // Simulate different connection errors based on configuration\r\n  if (config.host === 'localhost' && config.port === 5432) {\r\n    return { connected: true }\r\n  } else if (config.host === 'invalid-host') {\r\n    throw {\r\n      message: 'getaddrinfo ENOTFOUND invalid-host',\r\n      code: 'ENOTFOUND',\r\n      host: 'invalid-host',\r\n      port: config.port,\r\n    }\r\n  } else if (config.port === 1234) {\r\n    throw {\r\n      message: 'connect ECONNREFUSED 127.0.0.1:1234',\r\n      code: 'ECONNREFUSED',\r\n      address: '127.0.0.1',\r\n      port: 1234,\r\n    }\r\n  } else if (config.user === 'invalid-user') {\r\n    throw {\r\n      message: 'password authentication failed for user \"invalid-user\"',\r\n      code: 'AUTHENTICATION_FAILED',\r\n      host: config.host,\r\n      port: config.port,\r\n      user: 'invalid-user',\r\n    }\r\n  } else {\r\n    throw {\r\n      message: 'connection timeout',\r\n      code: 'ETIMEDOUT',\r\n      host: config.host,\r\n      port: config.port,\r\n    }\r\n  }\r\n}\r\n\r\nasync function simulateQueryExecution(query: string, params: any[], transaction?: any) {\r\n  // Simulate different query errors based on the query\r\n  if (query.includes('SELECT * FROM users')) {\r\n    return { rows: [{ id: 1, name: 'Test User' }] }\r\n  } else if (query.includes('SYNTAX ERROR')) {\r\n    throw {\r\n      message: 'syntax error at or near \"SYNTAX\"',\r\n      code: '42601', // PostgreSQL syntax error\r\n      position: '8',\r\n      query,\r\n    }\r\n  } else if (query.includes('DUPLICATE')) {\r\n    throw {\r\n      message: 'duplicate key value violates unique constraint \"users_email_key\"',\r\n      code: '23505', // PostgreSQL unique violation\r\n      constraint: 'users_email_key',\r\n      table: 'users',\r\n      column: 'email',\r\n      query,\r\n    }\r\n  } else if (query.includes('DEADLOCK')) {\r\n    throw {\r\n      message: 'deadlock detected',\r\n      code: '40001', // PostgreSQL serialization failure\r\n      transactionId: transaction?.id,\r\n      query,\r\n    }\r\n  }\r\n\r\n  // Default success case\r\n  return { rows: [] }\r\n}\r\n\r\nasync function simulateTransactionStart() {\r\n  // Simulate transaction start\r\n  return { id: 'tx-123' }\r\n}\r\n\r\nasync function simulateTransactionCommit(transaction: any) {\r\n  // Simulate transaction commit\r\n  return true\r\n}\r\n\r\nasync function simulateTransactionRollback(transaction: any) {\r\n  // Simulate transaction rollback\r\n  return true\r\n}\r\n\r\n// Example usage\r\nasync function main() {\r\n  try {\r\n    // This will succeed\r\n    const connection = await connectToDatabase({\r\n      host: 'localhost',\r\n      port: 5432,\r\n      database: 'mydb',\r\n      user: 'postgres',\r\n      password: 'password',\r\n    })\r\n    console.log('Connected successfully')\r\n\r\n    // Test query execution with different scenarios\r\n    await executeQuery('SELECT * FROM users', [])\r\n\r\n    try {\r\n      await executeQuery('SELECT * FROM users WHERE SYNTAX ERROR', [])\r\n    } catch (err) {\r\n      console.error('Expected syntax error:', err.message)\r\n    }\r\n\r\n    try {\r\n      await executeQuery('INSERT INTO users (email) VALUES (?) DUPLICATE', ['test@example.com'])\r\n    } catch (err) {\r\n      console.error('Expected constraint error:', err.message)\r\n    }\r\n\r\n    // Test transaction with deadlock\r\n    try {\r\n      await executeTransaction([\r\n        { sql: 'UPDATE users SET status = ? WHERE id = ?', params: ['active', 1] },\r\n        { sql: 'UPDATE accounts SET status = ? WHERE user_id = ? DEADLOCK', params: ['active', 1] },\r\n      ])\r\n    } catch (err) {\r\n      console.error('Expected transaction error:', err.message)\r\n    }\r\n  } catch (err) {\r\n    console.error('Main error handler:', err.message)\r\n  }\r\n}\r\n\r\nexport { connectToDatabase, executeQuery, executeTransaction, classifyDbError, DbErrorCategory }\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\examples\\safe-error-handling.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 37,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 37,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [953, 956], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [953, 956], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 55,
        "column": 12,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 55,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Safe Error Handling Examples\r\n\r\n/**\r\n * Safely converts any error to a string representation\r\n * Works with any type of error (Error objects, strings, numbers, etc.)\r\n */\r\nexport function normalizeError(error: unknown): string {\r\n  // Simply use String() to safely convert any error type\r\n  return String(error)\r\n}\r\n\r\n/**\r\n * Safely extracts error message from any error type\r\n */\r\nexport function getErrorMessage(error: unknown): string {\r\n  if (error instanceof Error) {\r\n    return error.message\r\n  }\r\n  return String(error)\r\n}\r\n\r\n/**\r\n * Safely extracts error details from any error type\r\n */\r\nexport function getErrorDetails(error: unknown): {\r\n  message: string\r\n  stack?: string\r\n  code?: string\r\n  name?: string\r\n} {\r\n  if (error instanceof Error) {\r\n    return {\r\n      message: error.message,\r\n      stack: error.stack,\r\n      name: error.name,\r\n      // Handle common error types with codes\r\n      code: 'code' in error ? String((error as any).code) : undefined,\r\n    }\r\n  }\r\n\r\n  return {\r\n    message: String(error),\r\n  }\r\n}\r\n\r\n// Example usage:\r\n\r\n// ❌ BAD: Unsafe error handling\r\nfunction unsafeErrorHandling(parseError: unknown) {\r\n  try {\r\n    // This assumes parseError is an Error object\r\n    // Will fail if parseError is a string, number, or other type\r\n    console.error('CSV Parse Error:', (parseError as Error).message)\r\n    console.error('Stack:', (parseError as Error).stack)\r\n  } catch (e) {\r\n    // Have to add another try/catch to handle the case where parseError isn't an Error\r\n    console.error('Failed to log error')\r\n  }\r\n}\r\n\r\n// ✅ GOOD: Safe error handling with instanceof check\r\nfunction betterErrorHandling(parseError: unknown) {\r\n  if (parseError instanceof Error) {\r\n    console.error('CSV Parse Error:', parseError.message)\r\n    console.error('Stack:', parseError.stack)\r\n  } else {\r\n    console.error('CSV Parse Error:', String(parseError))\r\n  }\r\n}\r\n\r\n// ✅ BEST: Simple and safe error handling with String()\r\nfunction bestErrorHandling(parseError: unknown) {\r\n  // No need for instanceof checks or type assertions\r\n  console.error('CSV Parse Error:', String(parseError))\r\n}\r\n\r\n// Example with CSV parsing\r\nasync function processCSV(filePath: string) {\r\n  try {\r\n    // Simulated CSV parsing\r\n    const result = await simulateCSVParsing(filePath)\r\n    return result\r\n  } catch (parseError) {\r\n    // ✅ GOOD: Safe error logging\r\n    console.error('CSV Parse Error:', String(parseError))\r\n\r\n    // You can still get structured error info if needed\r\n    const errorDetails = getErrorDetails(parseError)\r\n    console.error('Error details:', errorDetails)\r\n\r\n    // Re-throw or handle as needed\r\n    throw new Error(`Failed to parse CSV: ${String(parseError)}`)\r\n  }\r\n}\r\n\r\n// Simulated function for example\r\nasync function simulateCSVParsing(filePath: string) {\r\n  // Simulation only\r\n  if (filePath.includes('invalid')) {\r\n    throw new Error('Invalid CSV format')\r\n  }\r\n  if (!filePath.endsWith('.csv')) {\r\n    // This throws a non-Error object\r\n    throw 'Unsupported file format'\r\n  }\r\n  return [{ name: 'John', age: 30 }]\r\n}\r\n\r\nexport { unsafeErrorHandling, betterErrorHandling, bestErrorHandling, processCSV }\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\examples\\safe-file-handling.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\examples\\type-safe-db-updates.ts",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module '~/db'.",
        "line": 6,
        "column": 20,
        "nodeType": "Literal",
        "endLine": 6,
        "endColumn": 26
      },
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module '~/db/schema'.",
        "line": 7,
        "column": 23,
        "nodeType": "Literal",
        "endLine": 7,
        "endColumn": 36
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// ✅ Type-Safe Database Updates with Drizzle ORM\r\n\r\n// Import the schema objects directly\r\nimport { eq } from 'drizzle-orm'\r\n\r\nimport { db } from '~/db'\r\nimport { users } from '~/db/schema'\r\n\r\n// Example 1: Update a user with type safety\r\nasync function updateUserName(userId: string, newName: string) {\r\n  // ✅ Good: Using the schema object for type safety\r\n  await db.update(users).set({ name: newName }).where(eq(users.id, userId))\r\n}\r\n\r\n// Example 2: Update multiple fields with type safety\r\nasync function updateUserProfile(\r\n  userId: string,\r\n  data: {\r\n    name?: string\r\n    email?: string\r\n    role?: string\r\n  }\r\n) {\r\n  // ✅ Good: Type-safe updates with proper filtering\r\n  await db.update(users).set(data).where(eq(users.id, userId))\r\n}\r\n\r\n// Example 3: Conditional updates with type safety\r\nasync function promoteUserIfActive(userId: string) {\r\n  // ✅ Good: Complex conditions with type safety\r\n  await db\r\n    .update(users)\r\n    .set({ role: 'admin' })\r\n    .where(eq(users.id, userId), eq(users.isActive, true))\r\n}\r\n\r\n// ❌ Bad: Using string literals (avoid this approach)\r\n// async function updateUserUnsafe(userId: string, newName: string) {\r\n//   await db.execute(\r\n//     sql`UPDATE \"users\" SET name = ${newName} WHERE id = ${userId}`\r\n//   );\r\n// }\r\n\r\n// ❌ Bad: Using raw SQL queries (avoid this approach)\r\n// async function updateUserRoleUnsafe(userId: string) {\r\n//   await db.execute(\r\n//     `UPDATE users SET role = 'admin' WHERE id = '${userId}'`\r\n//   );\r\n// }\r\n\r\nexport { updateUserName, updateUserProfile, promoteUserIfActive }\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\examples\\upload-error-handling.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 95,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 95,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2639, 2642], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2639, 2642], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 95,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 95,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2649, 2652], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2649, 2652], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\r\n * Example of improved upload error handling\r\n */\r\nimport {\r\n  createPropertyCountFallback,\r\n  createUploadErrorResponse,\r\n  sanitizeUploadData,\r\n  logUploadError,\r\n  UploadData,\r\n} from '../lib/uploads/error-handling'\r\n\r\n/**\r\n * Example function to get property count for an upload\r\n */\r\nasync function getPropertyCountForUpload(uploadId: string): Promise<number> {\r\n  try {\r\n    // Simulated database query to get property count\r\n    const count = await simulatePropertyCountQuery(uploadId)\r\n    return count\r\n  } catch (error) {\r\n    // ❌ BAD: Inconsistent error handling with potential privacy issues\r\n    /*\r\n    console.error(\"Failed to get property count for upload:\", uploadId, error);\r\n    return 0;\r\n    */\r\n\r\n    // ❌ BAD: Environment-specific logging with string concatenation\r\n    /*\r\n    if (process.env.NODE_ENV === \"development\") {\r\n      console.error(\"Property count error (uploadId: \" + uploadId + \"):\", error);\r\n    }\r\n    */\r\n\r\n    // ✅ GOOD: Use the utility function for consistent error handling\r\n    logUploadError(error, {\r\n      operation: 'getPropertyCount',\r\n      uploadId,\r\n      additionalInfo: { attemptedOperation: 'database query' },\r\n    })\r\n\r\n    // Re-throw to be handled by the caller\r\n    throw error\r\n  }\r\n}\r\n\r\n/**\r\n * Example function to get upload details with property count\r\n */\r\nasync function getUploadWithPropertyCount(uploadId: string): Promise<UploadData> {\r\n  try {\r\n    // Get basic upload information\r\n    const upload = await simulateGetUpload(uploadId)\r\n\r\n    // Get property count\r\n    try {\r\n      const propertyCount = await getPropertyCountForUpload(uploadId)\r\n      return {\r\n        ...upload,\r\n        propertyCount,\r\n      }\r\n    } catch (error) {\r\n      // ❌ BAD: Inconsistent error handling\r\n      /*\r\n      console.error(\"Failed to get property count for upload:\", upload?.id, error);\r\n      return {\r\n        ...upload,\r\n        propertyCount: 0,\r\n        countError: true,\r\n        uploaderId: undefined,\r\n      };\r\n      */\r\n\r\n      // ✅ GOOD: Use the utility function for consistent fallback\r\n      return createPropertyCountFallback(upload, error)\r\n    }\r\n  } catch (error) {\r\n    // ❌ BAD: Inconsistent error handling\r\n    /*\r\n    console.error(\"Failed to get upload:\", uploadId, error);\r\n    return {\r\n      id: uploadId,\r\n      error: true,\r\n      status: 'error'\r\n    };\r\n    */\r\n\r\n    // ✅ GOOD: Use the utility function for consistent error response\r\n    return createUploadErrorResponse({ id: uploadId }, error, 'getUploadWithPropertyCount')\r\n  }\r\n}\r\n\r\n/**\r\n * Example API handler for getting upload details\r\n */\r\nasync function handleGetUploadRequest(req: any, res: any) {\r\n  const uploadId = req.params.id\r\n  const isAdmin = req.user?.role === 'admin'\r\n\r\n  try {\r\n    const upload = await getUploadWithPropertyCount(uploadId)\r\n\r\n    // ❌ BAD: Inconsistent handling of private data\r\n    /*\r\n    if (!isAdmin) {\r\n      delete upload.uploaderId;\r\n    }\r\n    res.json(upload);\r\n    */\r\n\r\n    // ✅ GOOD: Use the utility function for consistent data sanitization\r\n    const sanitizedUpload = sanitizeUploadData(upload, isAdmin)\r\n    res.json(sanitizedUpload)\r\n  } catch (error) {\r\n    // ❌ BAD: Inconsistent error response\r\n    /*\r\n    console.error(\"API error:\", error);\r\n    res.status(500).json({ error: \"Failed to get upload\" });\r\n    */\r\n\r\n    // ✅ GOOD: Use the utility function for consistent error response\r\n    logUploadError(error, {\r\n      operation: 'handleGetUploadRequest',\r\n      uploadId,\r\n      additionalInfo: { userRole: req.user?.role },\r\n    })\r\n\r\n    res.status(500).json({\r\n      error: true,\r\n      message:\r\n        process.env.NODE_ENV === 'development'\r\n          ? String(error)\r\n          : 'Failed to retrieve upload information',\r\n    })\r\n  }\r\n}\r\n\r\n// Simulated functions for demonstration\r\nasync function simulatePropertyCountQuery(uploadId: string): Promise<number> {\r\n  // Simulate different scenarios based on uploadId\r\n  if (uploadId === 'valid-id') {\r\n    return 42\r\n  } else if (uploadId === 'empty-id') {\r\n    return 0\r\n  } else if (uploadId === 'error-id') {\r\n    throw new Error('Database query failed')\r\n  } else {\r\n    throw new Error('Upload not found')\r\n  }\r\n}\r\n\r\nasync function simulateGetUpload(uploadId: string): Promise<UploadData> {\r\n  // Simulate different scenarios based on uploadId\r\n  if (uploadId === 'valid-id' || uploadId === 'empty-id') {\r\n    return {\r\n      id: uploadId,\r\n      fileName: 'properties.csv',\r\n      fileSize: 1024,\r\n      uploaderId: 'user-123',\r\n      status: 'processed',\r\n      createdAt: new Date(),\r\n      updatedAt: new Date(),\r\n    }\r\n  } else if (uploadId === 'error-id') {\r\n    throw new Error('Database query failed')\r\n  } else {\r\n    throw new Error('Upload not found')\r\n  }\r\n}\r\n\r\nexport { getPropertyCountForUpload, getUploadWithPropertyCount, handleGetUploadRequest }\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\examples\\vector-search-client.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setOptions' is assigned a value but never used.",
        "line": 40,
        "column": 19,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 40,
        "endColumn": 29
      },
      {
        "ruleId": "react/no-unknown-property",
        "severity": 2,
        "message": "Unknown property 'jsx' found",
        "line": 215,
        "column": 14,
        "nodeType": "JSXAttribute",
        "messageId": "unknownProp",
        "endLine": 215,
        "endColumn": 17
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook React.useEffect has a missing dependency: 'fetchSimilarProperties'. Either include it or remove the dependency array.",
        "line": 369,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 369,
        "endColumn": 18,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [fetchSimilarProperties, propertyId]",
            "fix": { "range": [9835, 9847], "text": "[fetchSimilarProperties, propertyId]" }
          }
        ]
      },
      {
        "ruleId": "react/no-unknown-property",
        "severity": 2,
        "message": "Unknown property 'jsx' found",
        "line": 405,
        "column": 14,
        "nodeType": "JSXAttribute",
        "messageId": "unknownProp",
        "endLine": 405,
        "endColumn": 17
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// examples/vector-search-client.tsx\nimport axios from 'axios'\nimport React, { useState } from 'react'\n\n// Define types\ninterface Property {\n  id: string\n  title: string\n  description: string\n  price: number\n  location: string\n  bedrooms: number\n  bathrooms: number\n  squareFeet: number\n  propertyType: string\n  status: string\n  similarity?: number\n}\n\ninterface SearchFilters {\n  minPrice?: number\n  maxPrice?: number\n  location?: string\n  bedrooms?: number\n  bathrooms?: number\n  propertyType?: string\n}\n\ninterface SearchOptions {\n  limit?: number\n  offset?: number\n  similarityThreshold?: number\n}\n\n// Example component for semantic search\nconst SemanticSearchExample: React.FC = () => {\n  // State\n  const [query, setQuery] = useState('')\n  const [filters, setFilters] = useState<SearchFilters>({})\n  const [options, setOptions] = useState<SearchOptions>({ limit: 10 })\n  const [results, setResults] = useState<Property[]>([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  // Handle search\n  const handleSearch = async () => {\n    if (!query.trim()) {\n      setError('Please enter a search query')\n      return\n    }\n\n    setLoading(true)\n    setError(null)\n\n    try {\n      const response = await axios.post('/api/search/semantic', {\n        query,\n        filters,\n        options,\n      })\n\n      setResults(response.data.data.results)\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // Handle filter changes\n  const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value, type } = e.target as HTMLInputElement\n\n    // Convert numeric values\n    const parsedValue = type === 'number' && value ? parseFloat(value) : value\n\n    setFilters(prev => ({\n      ...prev,\n      [name]: parsedValue === '' ? undefined : parsedValue,\n    }))\n  }\n\n  return (\n    <div className=\"semantic-search\">\n      <h2>Semantic Property Search</h2>\n\n      {/* Search query input */}\n      <div className=\"search-input\">\n        <input\n          type=\"text\"\n          value={query}\n          onChange={e => setQuery(e.target.value)}\n          placeholder=\"Describe your ideal property...\"\n          className=\"query-input\"\n        />\n        <button onClick={handleSearch} disabled={loading} className=\"search-button\">\n          {loading ? 'Searching...' : 'Search'}\n        </button>\n      </div>\n\n      {/* Filters */}\n      <div className=\"filters\">\n        <h3>Filters</h3>\n        <div className=\"filter-grid\">\n          <div className=\"filter-item\">\n            <label htmlFor=\"minPrice\">Min Price</label>\n            <input\n              type=\"number\"\n              id=\"minPrice\"\n              name=\"minPrice\"\n              value={filters.minPrice || ''}\n              onChange={handleFilterChange}\n              placeholder=\"Min Price\"\n            />\n          </div>\n\n          <div className=\"filter-item\">\n            <label htmlFor=\"maxPrice\">Max Price</label>\n            <input\n              type=\"number\"\n              id=\"maxPrice\"\n              name=\"maxPrice\"\n              value={filters.maxPrice || ''}\n              onChange={handleFilterChange}\n              placeholder=\"Max Price\"\n            />\n          </div>\n\n          <div className=\"filter-item\">\n            <label htmlFor=\"location\">Location</label>\n            <input\n              type=\"text\"\n              id=\"location\"\n              name=\"location\"\n              value={filters.location || ''}\n              onChange={handleFilterChange}\n              placeholder=\"Location\"\n            />\n          </div>\n\n          <div className=\"filter-item\">\n            <label htmlFor=\"bedrooms\">Bedrooms</label>\n            <input\n              type=\"number\"\n              id=\"bedrooms\"\n              name=\"bedrooms\"\n              value={filters.bedrooms || ''}\n              onChange={handleFilterChange}\n              placeholder=\"Min Bedrooms\"\n            />\n          </div>\n\n          <div className=\"filter-item\">\n            <label htmlFor=\"bathrooms\">Bathrooms</label>\n            <input\n              type=\"number\"\n              id=\"bathrooms\"\n              name=\"bathrooms\"\n              value={filters.bathrooms || ''}\n              onChange={handleFilterChange}\n              placeholder=\"Min Bathrooms\"\n            />\n          </div>\n\n          <div className=\"filter-item\">\n            <label htmlFor=\"propertyType\">Property Type</label>\n            <select\n              id=\"propertyType\"\n              name=\"propertyType\"\n              value={filters.propertyType || ''}\n              onChange={handleFilterChange}\n            >\n              <option value=\"\">Any Type</option>\n              <option value=\"apartment\">Apartment</option>\n              <option value=\"house\">House</option>\n              <option value=\"condo\">Condo</option>\n              <option value=\"townhouse\">Townhouse</option>\n              <option value=\"land\">Land</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* Error message */}\n      {error && <div className=\"error-message\">{error}</div>}\n\n      {/* Results */}\n      <div className=\"search-results\">\n        <h3>Results ({results.length})</h3>\n\n        {results.length === 0 && !loading && !error ? (\n          <p className=\"no-results\">No properties found. Try a different search.</p>\n        ) : (\n          <div className=\"results-grid\">\n            {results.map(property => (\n              <div key={property.id} className=\"property-card\">\n                <h4>{property.title}</h4>\n                <p className=\"property-location\">{property.location}</p>\n                <p className=\"property-price\">${property.price.toLocaleString()}</p>\n                <p className=\"property-details\">\n                  {property.bedrooms} beds • {property.bathrooms} baths • {property.squareFeet} sq\n                  ft\n                </p>\n                {property.similarity !== undefined && (\n                  <div className=\"similarity-score\">\n                    {Math.round(property.similarity * 100)}% match\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <style jsx>{`\n        .semantic-search {\n          max-width: 1200px;\n          margin: 0 auto;\n          padding: 20px;\n        }\n\n        .search-input {\n          display: flex;\n          margin-bottom: 20px;\n        }\n\n        .query-input {\n          flex: 1;\n          padding: 12px;\n          font-size: 16px;\n          border: 1px solid #ddd;\n          border-radius: 4px 0 0 4px;\n        }\n\n        .search-button {\n          padding: 12px 24px;\n          background-color: #0070f3;\n          color: white;\n          border: none;\n          border-radius: 0 4px 4px 0;\n          cursor: pointer;\n        }\n\n        .search-button:disabled {\n          background-color: #ccc;\n        }\n\n        .filters {\n          margin-bottom: 20px;\n          padding: 15px;\n          background-color: #f9f9f9;\n          border-radius: 4px;\n        }\n\n        .filter-grid {\n          display: grid;\n          grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n          gap: 15px;\n        }\n\n        .filter-item {\n          display: flex;\n          flex-direction: column;\n        }\n\n        .filter-item label {\n          margin-bottom: 5px;\n          font-weight: 500;\n        }\n\n        .filter-item input,\n        .filter-item select {\n          padding: 8px;\n          border: 1px solid #ddd;\n          border-radius: 4px;\n        }\n\n        .error-message {\n          padding: 10px;\n          background-color: #ffebee;\n          color: #c62828;\n          border-radius: 4px;\n          margin-bottom: 20px;\n        }\n\n        .results-grid {\n          display: grid;\n          grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n          gap: 20px;\n        }\n\n        .property-card {\n          border: 1px solid #eee;\n          border-radius: 4px;\n          padding: 15px;\n          position: relative;\n        }\n\n        .property-card h4 {\n          margin-top: 0;\n          margin-bottom: 10px;\n        }\n\n        .property-location {\n          color: #666;\n          margin-bottom: 10px;\n        }\n\n        .property-price {\n          font-weight: bold;\n          font-size: 18px;\n          margin-bottom: 10px;\n        }\n\n        .property-details {\n          color: #666;\n          margin-bottom: 0;\n        }\n\n        .similarity-score {\n          position: absolute;\n          top: 15px;\n          right: 15px;\n          background-color: #0070f3;\n          color: white;\n          padding: 4px 8px;\n          border-radius: 4px;\n          font-size: 12px;\n          font-weight: bold;\n        }\n\n        .no-results {\n          text-align: center;\n          padding: 20px;\n          color: #666;\n        }\n      `}</style>\n    </div>\n  )\n}\n\n// Example component for similar properties\nconst SimilarPropertiesExample: React.FC<{ propertyId: string }> = ({ propertyId }) => {\n  // State\n  const [similarProperties, setSimilarProperties] = useState<Property[]>([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  // Fetch similar properties\n  const fetchSimilarProperties = async () => {\n    setLoading(true)\n    setError(null)\n\n    try {\n      const response = await axios.get(`/api/search/similar/${propertyId}?limit=4`)\n      setSimilarProperties(response.data.data.similarProperties)\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // Fetch on mount\n  React.useEffect(() => {\n    if (propertyId) {\n      fetchSimilarProperties()\n    }\n  }, [propertyId])\n\n  if (loading) {\n    return <div className=\"loading\">Loading similar properties...</div>\n  }\n\n  if (error) {\n    return <div className=\"error\">{error}</div>\n  }\n\n  return (\n    <div className=\"similar-properties\">\n      <h3>Similar Properties</h3>\n\n      {similarProperties.length === 0 ? (\n        <p>No similar properties found.</p>\n      ) : (\n        <div className=\"similar-grid\">\n          {similarProperties.map(property => (\n            <div key={property.id} className=\"similar-card\">\n              <h4>{property.title}</h4>\n              <p className=\"property-location\">{property.location}</p>\n              <p className=\"property-price\">${property.price.toLocaleString()}</p>\n              <p className=\"property-details\">\n                {property.bedrooms} beds • {property.bathrooms} baths\n              </p>\n              {property.similarity !== undefined && (\n                <div className=\"similarity-badge\">\n                  {Math.round(property.similarity * 100)}% similar\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n\n      <style jsx>{`\n        .similar-properties {\n          margin-top: 30px;\n        }\n\n        .similar-grid {\n          display: grid;\n          grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n          gap: 15px;\n        }\n\n        .similar-card {\n          border: 1px solid #eee;\n          border-radius: 4px;\n          padding: 15px;\n          position: relative;\n        }\n\n        .similar-card h4 {\n          margin-top: 0;\n          margin-bottom: 10px;\n          font-size: 16px;\n        }\n\n        .similarity-badge {\n          position: absolute;\n          top: 10px;\n          right: 10px;\n          background-color: #4caf50;\n          color: white;\n          padding: 3px 6px;\n          border-radius: 4px;\n          font-size: 11px;\n        }\n\n        .loading,\n        .error {\n          padding: 20px;\n          text-align: center;\n        }\n\n        .error {\n          color: #c62828;\n        }\n      `}</style>\n    </div>\n  )\n}\n\nexport { SemanticSearchExample, SimilarPropertiesExample }\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\hooks\\setup-eslint.js",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 37,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 37,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1150, 1200], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 43,
        "column": 1,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 43,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1286, 1315], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const { execSync } = require('child_process')\r\nconst fs = require('fs')\r\nconst path = require('path')\r\n\r\n// Check if node_modules exists\r\nconst nodeModulesPath = path.join(__dirname, 'node_modules')\r\nif (!fs.existsSync(nodeModulesPath)) {\r\n  fs.mkdirSync(nodeModulesPath, { recursive: true })\r\n}\r\n\r\n// Create a simple package.json if it doesn't exist\r\nconst packageJsonPath = path.join(__dirname, 'package.json')\r\nif (!fs.existsSync(packageJsonPath)) {\r\n  const packageJson = {\r\n    name: '@property-portal/hooks',\r\n    version: '1.0.0',\r\n    private: true,\r\n    dependencies: {\r\n      leaflet: '^1.9.4',\r\n    },\r\n    devDependencies: {\r\n      eslint: '^8.57.1',\r\n    },\r\n  }\r\n\r\n  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2))\r\n}\r\n\r\n// Create a symlink for ESLint\r\nconst eslintPath = path.join(__dirname, '..', 'node_modules', 'eslint')\r\nconst localEslintPath = path.join(nodeModulesPath, 'eslint')\r\n\r\nif (fs.existsSync(eslintPath) && !fs.existsSync(localEslintPath)) {\r\n  try {\r\n    // On Windows, we need to use junction instead of symlink for directories\r\n    fs.symlinkSync(eslintPath, localEslintPath, 'junction')\r\n    console.log('ESLint symlink created successfully')\r\n  } catch (error) {\r\n    console.error('Error creating symlink:', error)\r\n  }\r\n}\r\n\r\nconsole.log('Setup complete')\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\hooks\\useAnimation.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'AnimationControls' is defined but never used.",
        "line": 2,
        "column": 24,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 41
      },
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'framer-motion'.",
        "line": 2,
        "column": 59,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 74
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 10,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 10,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [280, 283], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [280, 283], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'play' and 'stop'. Either include them or remove the dependency array.",
        "line": 102,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 102,
        "endColumn": 16,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [autoPlay, play, stop]",
            "fix": { "range": [2234, 2244], "text": "[autoPlay, play, stop]" }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// hooks/useAnimation.ts\r\nimport { useAnimation, AnimationControls, Variants } from 'framer-motion'\r\nimport { useEffect, useRef, useState } from 'react'\r\n\r\ninterface UseAnimationOptions {\r\n  variants?: Variants\r\n  initial?: string\r\n  animate?: string\r\n  exit?: string\r\n  custom?: any\r\n  onComplete?: () => void\r\n  onStart?: () => void\r\n  autoPlay?: boolean\r\n  delay?: number\r\n}\r\n\r\n/**\r\n * Custom hook for managing Framer Motion animations with proper cleanup\r\n * to prevent memory leaks\r\n */\r\nexport function useAnimationWithCleanup(options: UseAnimationOptions = {}) {\r\n  const {\r\n    variants,\r\n    initial = 'hidden',\r\n    animate = 'visible',\r\n    exit = 'exit',\r\n    custom,\r\n    onComplete,\r\n    onStart,\r\n    autoPlay = true,\r\n    delay = 0,\r\n  } = options\r\n\r\n  const controls = useAnimation()\r\n  const [isAnimating, setIsAnimating] = useState(false)\r\n\r\n  // Use a ref to track mounted state to prevent memory leaks\r\n  const isMounted = useRef(false)\r\n\r\n  // Initialize animation state\r\n  useEffect(() => {\r\n    isMounted.current = true\r\n\r\n    return () => {\r\n      isMounted.current = false\r\n      controls.stop()\r\n    }\r\n  }, [controls])\r\n\r\n  // Function to play animation\r\n  const play = async (animationName?: string) => {\r\n    if (!isMounted.current) return\r\n\r\n    setIsAnimating(true)\r\n\r\n    if (onStart) {\r\n      onStart()\r\n    }\r\n\r\n    try {\r\n      if (delay > 0) {\r\n        await new Promise(resolve => setTimeout(resolve, delay))\r\n        if (!isMounted.current) return\r\n      }\r\n\r\n      await controls.start(animationName || animate, { custom })\r\n\r\n      if (!isMounted.current) return\r\n\r\n      if (onComplete) {\r\n        onComplete()\r\n      }\r\n    } catch (error) {\r\n      // Only log errors if component is still mounted\r\n      if (isMounted.current) {\r\n        console.error('Animation error:', error)\r\n      }\r\n    } finally {\r\n      if (isMounted.current) {\r\n        setIsAnimating(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Function to stop animation\r\n  const stop = () => {\r\n    if (!isMounted.current) return\r\n\r\n    controls.stop()\r\n    setIsAnimating(false)\r\n  }\r\n\r\n  // Auto-play animation if enabled\r\n  useEffect(() => {\r\n    if (autoPlay) {\r\n      play()\r\n    }\r\n\r\n    return () => {\r\n      stop()\r\n    }\r\n  }, [autoPlay]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return {\r\n    controls,\r\n    isAnimating,\r\n    play,\r\n    stop,\r\n    initial,\r\n    animate: controls,\r\n    exit,\r\n    variants,\r\n    custom,\r\n  }\r\n}\r\n\r\n/**\r\n * Custom hook for scroll-triggered animations with proper cleanup\r\n */\r\nexport function useScrollAnimation(\r\n  options: UseAnimationOptions & {\r\n    threshold?: number\r\n    rootMargin?: string\r\n  } = {}\r\n) {\r\n  const { threshold = 0.1, rootMargin = '0px', ...animationOptions } = options\r\n\r\n  const animation = useAnimationWithCleanup({\r\n    ...animationOptions,\r\n    autoPlay: false,\r\n  })\r\n\r\n  const ref = useRef<HTMLElement>(null)\r\n  const observerRef = useRef<IntersectionObserver | null>(null)\r\n\r\n  useEffect(() => {\r\n    const element = ref.current\r\n    if (!element) return\r\n\r\n    // Cleanup previous observer\r\n    if (observerRef.current) {\r\n      observerRef.current.disconnect()\r\n    }\r\n\r\n    // Create new observer\r\n    observerRef.current = new IntersectionObserver(\r\n      entries => {\r\n        const [entry] = entries\r\n        if (entry.isIntersecting) {\r\n          animation.play()\r\n\r\n          // Optionally unobserve after animation is triggered\r\n          // observerRef.current?.unobserve(element);\r\n        }\r\n      },\r\n      { threshold, rootMargin }\r\n    )\r\n\r\n    // Start observing\r\n    observerRef.current.observe(element)\r\n\r\n    return () => {\r\n      if (observerRef.current) {\r\n        observerRef.current.disconnect()\r\n        observerRef.current = null\r\n      }\r\n    }\r\n  }, [threshold, rootMargin, animation])\r\n\r\n  return {\r\n    ...animation,\r\n    ref,\r\n  }\r\n}\r\n\r\nexport default useAnimationWithCleanup\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\hooks\\useApi.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 21,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 21,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [492, 495], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [492, 495], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 75,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 75,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1951, 1954], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1951, 1954], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 114,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 114,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3014, 3017], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3014, 3017], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// hooks/useApi.ts\r\nimport { ApiError, createApiClient } from '@/lib/api/error-handling'\r\nimport { useState, useCallback } from 'react'\r\n\r\ninterface UseApiOptions {\r\n  baseUrl?: string\r\n  onError?: (error: ApiError) => void\r\n}\r\n\r\ninterface ApiState<T> {\r\n  data: T | null\r\n  isLoading: boolean\r\n  error: ApiError | null\r\n}\r\n\r\n/**\r\n * Hook for making API requests with error handling\r\n * @param options API options\r\n * @returns API state and request functions\r\n */\r\nexport function useApi<T = any>(options: UseApiOptions = {}) {\r\n  const { baseUrl = '', onError } = options\r\n\r\n  const [state, setState] = useState<ApiState<T>>({\r\n    data: null,\r\n    isLoading: false,\r\n    error: null,\r\n  })\r\n\r\n  const apiClient = createApiClient(baseUrl)\r\n\r\n  /**\r\n   * Make a GET request\r\n   * @param url API endpoint URL\r\n   * @param params Query parameters\r\n   * @returns Response data\r\n   */\r\n  const get = useCallback(\r\n    async (url: string, params?: Record<string, string>): Promise<T | null> => {\r\n      setState(prev => ({ ...prev, isLoading: true, error: null }))\r\n\r\n      try {\r\n        // Add query parameters to URL\r\n        const urlWithParams = params ? `${url}?${new URLSearchParams(params)}` : url\r\n\r\n        const data = await apiClient<T>(urlWithParams)\r\n\r\n        setState({ data, isLoading: false, error: null })\r\n        return data\r\n      } catch (error) {\r\n        const apiError =\r\n          error instanceof ApiError\r\n            ? error\r\n            : new ApiError(error instanceof Error ? error.message : 'Unknown error', 500)\r\n\r\n        setState({ data: null, isLoading: false, error: apiError })\r\n\r\n        if (onError) {\r\n          onError(apiError)\r\n        }\r\n\r\n        return null\r\n      }\r\n    },\r\n    [apiClient, onError]\r\n  )\r\n\r\n  /**\r\n   * Make a POST request\r\n   * @param url API endpoint URL\r\n   * @param data Request body data\r\n   * @returns Response data\r\n   */\r\n  const post = useCallback(\r\n    async (url: string, data?: any): Promise<T | null> => {\r\n      setState(prev => ({ ...prev, isLoading: true, error: null }))\r\n\r\n      try {\r\n        const responseData = await apiClient<T>(url, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: data ? JSON.stringify(data) : undefined,\r\n        })\r\n\r\n        setState({ data: responseData, isLoading: false, error: null })\r\n        return responseData\r\n      } catch (error) {\r\n        const apiError =\r\n          error instanceof ApiError\r\n            ? error\r\n            : new ApiError(error instanceof Error ? error.message : 'Unknown error', 500)\r\n\r\n        setState({ data: null, isLoading: false, error: apiError })\r\n\r\n        if (onError) {\r\n          onError(apiError)\r\n        }\r\n\r\n        return null\r\n      }\r\n    },\r\n    [apiClient, onError]\r\n  )\r\n\r\n  /**\r\n   * Make a PUT request\r\n   * @param url API endpoint URL\r\n   * @param data Request body data\r\n   * @returns Response data\r\n   */\r\n  const put = useCallback(\r\n    async (url: string, data?: any): Promise<T | null> => {\r\n      setState(prev => ({ ...prev, isLoading: true, error: null }))\r\n\r\n      try {\r\n        const responseData = await apiClient<T>(url, {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: data ? JSON.stringify(data) : undefined,\r\n        })\r\n\r\n        setState({ data: responseData, isLoading: false, error: null })\r\n        return responseData\r\n      } catch (error) {\r\n        const apiError =\r\n          error instanceof ApiError\r\n            ? error\r\n            : new ApiError(error instanceof Error ? error.message : 'Unknown error', 500)\r\n\r\n        setState({ data: null, isLoading: false, error: apiError })\r\n\r\n        if (onError) {\r\n          onError(apiError)\r\n        }\r\n\r\n        return null\r\n      }\r\n    },\r\n    [apiClient, onError]\r\n  )\r\n\r\n  /**\r\n   * Make a DELETE request\r\n   * @param url API endpoint URL\r\n   * @returns Response data\r\n   */\r\n  const del = useCallback(\r\n    async (url: string): Promise<T | null> => {\r\n      setState(prev => ({ ...prev, isLoading: true, error: null }))\r\n\r\n      try {\r\n        const responseData = await apiClient<T>(url, {\r\n          method: 'DELETE',\r\n        })\r\n\r\n        setState({ data: responseData, isLoading: false, error: null })\r\n        return responseData\r\n      } catch (error) {\r\n        const apiError =\r\n          error instanceof ApiError\r\n            ? error\r\n            : new ApiError(error instanceof Error ? error.message : 'Unknown error', 500)\r\n\r\n        setState({ data: null, isLoading: false, error: apiError })\r\n\r\n        if (onError) {\r\n          onError(apiError)\r\n        }\r\n\r\n        return null\r\n      }\r\n    },\r\n    [apiClient, onError]\r\n  )\r\n\r\n  /**\r\n   * Reset API state\r\n   */\r\n  const reset = useCallback(() => {\r\n    setState({\r\n      data: null,\r\n      isLoading: false,\r\n      error: null,\r\n    })\r\n  }, [])\r\n\r\n  return {\r\n    ...state,\r\n    get,\r\n    post,\r\n    put,\r\n    delete: del,\r\n    reset,\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\hooks\\useCentralizedErrorHandler.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\hooks\\useCentralizedErrorHandler.ts",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "The 'defaultContext' object makes the dependencies of useCallback Hook (at line 126) change on every render. Move it inside the useCallback callback. Alternatively, wrap the initialization of 'defaultContext' in its own useMemo() Hook.",
        "line": 50,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "endLine": 56,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// hooks/useCentralizedErrorHandler.ts\r\nimport { ApiError } from '@/lib/api/error-handling'\r\nimport { usePathname } from 'next/navigation'\r\nimport { useState, useCallback, useEffect } from 'react'\r\n\r\nimport { ValidationError } from '@/lib/api/validation'\r\nimport { errorService, ErrorContext, ErrorType, ErrorSeverity } from '@/lib/error/error-service'\r\n\r\ninterface ErrorState {\r\n  hasError: boolean\r\n  error: Error | null\r\n  errorMessage: string\r\n  errorCode?: string\r\n  errorDetails?: Record<string, unknown>\r\n  isApiError: boolean\r\n  isValidationError: boolean\r\n  errorType: ErrorType\r\n  errorSeverity: ErrorSeverity\r\n}\r\n\r\ninterface UseCentralizedErrorHandlerOptions {\r\n  component?: string\r\n  action?: string\r\n  tags?: string[]\r\n  onError?: (error: Error, context: ErrorContext) => void\r\n}\r\n\r\n/**\r\n * Hook for handling errors using the centralized error service\r\n * @param options Error handler options\r\n * @returns Error state and handler functions\r\n */\r\nexport function useCentralizedErrorHandler(options: UseCentralizedErrorHandlerOptions = {}) {\r\n  const { component, action, tags, onError } = options\r\n  const pathname = usePathname()\r\n\r\n  const [errorState, setErrorState] = useState<ErrorState>({\r\n    hasError: false,\r\n    error: null,\r\n    errorMessage: '',\r\n    errorCode: undefined,\r\n    errorDetails: undefined,\r\n    isApiError: false,\r\n    isValidationError: false,\r\n    errorType: ErrorType.UNKNOWN,\r\n    errorSeverity: ErrorSeverity.LOW,\r\n  })\r\n\r\n  // Create a default context for all errors\r\n  const defaultContext = {\r\n    component,\r\n    action,\r\n    tags,\r\n    url: typeof window !== 'undefined' ? window.location.href : undefined,\r\n    pathname,\r\n  }\r\n\r\n  /**\r\n   * Handle an error\r\n   * @param error Error to handle\r\n   * @param additionalContext Additional context for the error\r\n   */\r\n  const handleError = useCallback(\r\n    (error: unknown, additionalContext?: Omit<ErrorContext, 'type' | 'severity'>) => {\r\n      // Convert to Error object if needed\r\n      const errorObject =\r\n        error instanceof Error\r\n          ? error\r\n          : new Error(typeof error === 'string' ? error : 'Unknown error')\r\n\r\n      // Determine error type and details\r\n      const isApiError = errorObject instanceof ApiError\r\n      const isValidationError = errorObject instanceof ValidationError\r\n      const errorType = isApiError\r\n        ? ErrorType.API\r\n        : isValidationError\r\n          ? ErrorType.VALIDATION\r\n          : ErrorType.UNKNOWN\r\n\r\n      // Get error details\r\n      const errorMessage = errorObject.message\r\n      const errorCode = isApiError\r\n        ? (errorObject as ApiError).code\r\n        : isValidationError\r\n          ? (errorObject as ValidationError).code\r\n          : undefined\r\n      const errorDetails = isApiError\r\n        ? (errorObject as ApiError).details\r\n        : isValidationError\r\n          ? (errorObject as ValidationError).details\r\n          : undefined\r\n\r\n      // Create context for the error service\r\n      const context: ErrorContext = {\r\n        ...defaultContext,\r\n        ...additionalContext,\r\n        type: errorType,\r\n        metadata: {\r\n          ...(additionalContext?.metadata || {}),\r\n          errorCode,\r\n          errorDetails,\r\n        },\r\n      }\r\n\r\n      // Update error state\r\n      setErrorState({\r\n        hasError: true,\r\n        error: errorObject,\r\n        errorMessage,\r\n        errorCode,\r\n        errorDetails,\r\n        isApiError,\r\n        isValidationError,\r\n        errorType,\r\n        errorSeverity: context.severity || ErrorSeverity.LOW,\r\n      })\r\n\r\n      // Handle the error with the error service\r\n      errorService.handleError(errorObject, context)\r\n\r\n      // Call the optional onError callback\r\n      if (onError) {\r\n        onError(errorObject, context)\r\n      }\r\n    },\r\n    [defaultContext, onError]\r\n  )\r\n\r\n  /**\r\n   * Reset the error state\r\n   */\r\n  const resetError = useCallback(() => {\r\n    setErrorState({\r\n      hasError: false,\r\n      error: null,\r\n      errorMessage: '',\r\n      errorCode: undefined,\r\n      errorDetails: undefined,\r\n      isApiError: false,\r\n      isValidationError: false,\r\n      errorType: ErrorType.UNKNOWN,\r\n      errorSeverity: ErrorSeverity.LOW,\r\n    })\r\n  }, [])\r\n\r\n  /**\r\n   * Create a try/catch wrapper for a function\r\n   * @param fn Function to wrap\r\n   * @param additionalContext Additional context for errors\r\n   * @returns Wrapped function\r\n   */\r\n  const withErrorHandling = useCallback(\r\n    <T extends Array<unknown>, R>(\r\n      fn: (...args: T) => R,\r\n      additionalContext?: Omit<ErrorContext, 'type' | 'severity'>\r\n    ) => {\r\n      return (...args: T): R | undefined => {\r\n        try {\r\n          return fn(...args)\r\n        } catch (error) {\r\n          handleError(error, additionalContext)\r\n          return undefined\r\n        }\r\n      }\r\n    },\r\n    [handleError]\r\n  )\r\n\r\n  /**\r\n   * Create a try/catch wrapper for an async function\r\n   * @param fn Async function to wrap\r\n   * @param additionalContext Additional context for errors\r\n   * @returns Wrapped async function\r\n   */\r\n  const withAsyncErrorHandling = useCallback(\r\n    <T extends Array<unknown>, R>(\r\n      fn: (...args: T) => Promise<R>,\r\n      additionalContext?: Omit<ErrorContext, 'type' | 'severity'>\r\n    ) => {\r\n      return async (...args: T): Promise<R | undefined> => {\r\n        try {\r\n          return await fn(...args)\r\n        } catch (error) {\r\n          handleError(error, additionalContext)\r\n          return undefined\r\n        }\r\n      }\r\n    },\r\n    [handleError]\r\n  )\r\n\r\n  // Reset error state when component or pathname changes\r\n  useEffect(() => {\r\n    resetError()\r\n  }, [component, pathname, resetError])\r\n\r\n  return {\r\n    ...errorState,\r\n    handleError,\r\n    resetError,\r\n    withErrorHandling,\r\n    withAsyncErrorHandling,\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\hooks\\useErrorHandler.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 13,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 13,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [363, 366], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [363, 366], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 49,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 49,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1330, 1333], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1330, 1333], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 136,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 136,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3625, 3628], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3625, 3628], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 136,
        "column": 74,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 136,
        "endColumn": 77,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3683, 3686], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3683, 3686], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 157,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 157,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4263, 4266], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4263, 4266], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 159,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 159,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4345, 4348], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4345, 4348], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// hooks/useErrorHandler.ts\r\nimport { ApiError } from '@/lib/api/error-handling'\r\nimport { useState, useCallback } from 'react'\r\n\r\nimport { ValidationError } from '@/lib/api/validation'\r\nimport logger from '@/lib/logging/logger'\r\n\r\ninterface ErrorState {\r\n  hasError: boolean\r\n  error: Error | null\r\n  errorMessage: string\r\n  errorCode?: string\r\n  errorDetails?: any\r\n  isApiError: boolean\r\n  isValidationError: boolean\r\n}\r\n\r\ninterface UseErrorHandlerOptions {\r\n  logErrors?: boolean\r\n  rethrow?: boolean\r\n  onError?: (error: Error) => void\r\n}\r\n\r\n/**\r\n * Hook for handling errors in React components\r\n * @param options Error handler options\r\n * @returns Error state and handler functions\r\n */\r\nexport function useErrorHandler(options: UseErrorHandlerOptions = {}) {\r\n  const { logErrors = true, rethrow = false, onError } = options\r\n\r\n  const [errorState, setErrorState] = useState<ErrorState>({\r\n    hasError: false,\r\n    error: null,\r\n    errorMessage: '',\r\n    errorCode: undefined,\r\n    errorDetails: undefined,\r\n    isApiError: false,\r\n    isValidationError: false,\r\n  })\r\n\r\n  /**\r\n   * Handle an error\r\n   * @param error Error to handle\r\n   * @param context Additional context for logging\r\n   * @param tags Tags for categorizing logs\r\n   */\r\n  const handleError = useCallback(\r\n    (error: unknown, context?: Record<string, any>, tags?: string[]) => {\r\n      // Convert to Error object if needed\r\n      const errorObject =\r\n        error instanceof Error\r\n          ? error\r\n          : new Error(typeof error === 'string' ? error : 'Unknown error')\r\n\r\n      // Determine error type\r\n      const isApiError = errorObject instanceof ApiError\r\n      const isValidationError = errorObject instanceof ValidationError\r\n\r\n      // Get error details\r\n      const errorMessage = errorObject.message\r\n      const errorCode = isApiError\r\n        ? (errorObject as ApiError).code\r\n        : isValidationError\r\n          ? (errorObject as ValidationError).code\r\n          : undefined\r\n      const errorDetails = isApiError\r\n        ? (errorObject as ApiError).details\r\n        : isValidationError\r\n          ? (errorObject as ValidationError).details\r\n          : undefined\r\n\r\n      // Update error state\r\n      setErrorState({\r\n        hasError: true,\r\n        error: errorObject,\r\n        errorMessage,\r\n        errorCode,\r\n        errorDetails,\r\n        isApiError,\r\n        isValidationError,\r\n      })\r\n\r\n      // Log the error\r\n      if (logErrors) {\r\n        logger.error(\r\n          'Error caught by useErrorHandler',\r\n          errorObject,\r\n          {\r\n            ...context,\r\n            isApiError,\r\n            isValidationError,\r\n            errorCode,\r\n            errorDetails,\r\n          },\r\n          [...(tags || []), 'error-handler']\r\n        )\r\n      }\r\n\r\n      // Call the optional onError callback\r\n      if (onError) {\r\n        onError(errorObject)\r\n      }\r\n\r\n      // Rethrow the error if requested\r\n      if (rethrow) {\r\n        throw errorObject\r\n      }\r\n    },\r\n    [logErrors, rethrow, onError]\r\n  )\r\n\r\n  /**\r\n   * Reset the error state\r\n   */\r\n  const resetError = useCallback(() => {\r\n    setErrorState({\r\n      hasError: false,\r\n      error: null,\r\n      errorMessage: '',\r\n      errorCode: undefined,\r\n      errorDetails: undefined,\r\n      isApiError: false,\r\n      isValidationError: false,\r\n    })\r\n  }, [])\r\n\r\n  /**\r\n   * Create a try/catch wrapper for a function\r\n   * @param fn Function to wrap\r\n   * @param context Additional context for logging\r\n   * @param tags Tags for categorizing logs\r\n   * @returns Wrapped function\r\n   */\r\n  const withErrorHandling = useCallback(\r\n    <T extends any[], R>(fn: (...args: T) => R, context?: Record<string, any>, tags?: string[]) => {\r\n      return (...args: T): R | undefined => {\r\n        try {\r\n          return fn(...args)\r\n        } catch (error) {\r\n          handleError(error, context, tags)\r\n          return undefined\r\n        }\r\n      }\r\n    },\r\n    [handleError]\r\n  )\r\n\r\n  /**\r\n   * Create a try/catch wrapper for an async function\r\n   * @param fn Async function to wrap\r\n   * @param context Additional context for logging\r\n   * @param tags Tags for categorizing logs\r\n   * @returns Wrapped async function\r\n   */\r\n  const withAsyncErrorHandling = useCallback(\r\n    <T extends any[], R>(\r\n      fn: (...args: T) => Promise<R>,\r\n      context?: Record<string, any>,\r\n      tags?: string[]\r\n    ) => {\r\n      return async (...args: T): Promise<R | undefined> => {\r\n        try {\r\n          return await fn(...args)\r\n        } catch (error) {\r\n          handleError(error, context, tags)\r\n          return undefined\r\n        }\r\n      }\r\n    },\r\n    [handleError]\r\n  )\r\n\r\n  return {\r\n    ...errorState,\r\n    handleError,\r\n    resetError,\r\n    withErrorHandling,\r\n    withAsyncErrorHandling,\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\hooks\\useFormValidation.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 29,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 29,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [927, 930], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [927, 930], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 42,
        "column": 60,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 42,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1398, 1401], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1398, 1401], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 101,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 101,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3225, 3228], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3225, 3228], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 152,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 152,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4545, 4548], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4545, 4548], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// hooks/useFormValidation.ts\r\nimport { useState, useCallback, useEffect } from 'react'\r\nimport { z } from 'zod'\r\n\r\nimport { validateForm, FormErrors, ValidationResult } from '@/lib/validation/form-validation'\r\n\r\ninterface UseFormValidationOptions<T> {\r\n  initialValues: T\r\n  schema: z.ZodType<T>\r\n  onSubmit?: (data: T) => void | Promise<void>\r\n  validateOnChange?: boolean\r\n  validateOnBlur?: boolean\r\n}\r\n\r\ninterface UseFormValidationResult<T> {\r\n  values: T\r\n  errors: FormErrors<T>\r\n  touched: Partial<Record<keyof T, boolean>>\r\n  isSubmitting: boolean\r\n  isValid: boolean\r\n  isDirty: boolean\r\n  handleChange: (\r\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>\r\n  ) => void\r\n  handleBlur: (\r\n    e: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>\r\n  ) => void\r\n  handleSubmit: (e: React.FormEvent) => Promise<void>\r\n  setFieldValue: (field: keyof T, value: any) => void\r\n  setFieldTouched: (field: keyof T, isTouched?: boolean) => void\r\n  setFieldError: (field: keyof T, error?: string) => void\r\n  resetForm: () => void\r\n  validateField: (field: keyof T) => string | undefined\r\n  validateForm: () => boolean\r\n}\r\n\r\n/**\r\n * Custom hook for form validation using Zod schemas\r\n * @param options Form validation options\r\n * @returns Form validation state and handlers\r\n */\r\nexport function useFormValidation<T extends Record<string, any>>(\r\n  options: UseFormValidationOptions<T>\r\n): UseFormValidationResult<T> {\r\n  const {\r\n    initialValues,\r\n    schema,\r\n    onSubmit,\r\n    validateOnChange = false,\r\n    validateOnBlur = true,\r\n  } = options\r\n\r\n  const [values, setValues] = useState<T>(initialValues)\r\n  const [errors, setErrors] = useState<FormErrors<T>>({})\r\n  const [touched, setTouched] = useState<Partial<Record<keyof T, boolean>>>({})\r\n  const [isSubmitting, setIsSubmitting] = useState(false)\r\n  const [isDirty, setIsDirty] = useState(false)\r\n\r\n  // Reset form to initial values\r\n  const resetForm = useCallback(() => {\r\n    setValues(initialValues)\r\n    setErrors({})\r\n    setTouched({})\r\n    setIsSubmitting(false)\r\n    setIsDirty(false)\r\n  }, [initialValues])\r\n\r\n  // Validate the entire form\r\n  const validateFormData = useCallback((): ValidationResult<T> => {\r\n    return validateForm(schema, values)\r\n  }, [schema, values])\r\n\r\n  // Check if the form is valid\r\n  const isValid = Object.keys(errors).length === 0\r\n\r\n  // Validate a single field\r\n  const validateField = useCallback(\r\n    (field: keyof T): string | undefined => {\r\n      try {\r\n        // Create a schema for just this field\r\n        const fieldSchema = z.object({ [field]: schema.shape[field] })\r\n        const result = fieldSchema.safeParse({ [field]: values[field] })\r\n\r\n        if (!result.success) {\r\n          const fieldErrors = result.error.flatten().fieldErrors\r\n          const errorMessage = fieldErrors[field as string]?.[0]\r\n          return errorMessage\r\n        }\r\n\r\n        return undefined\r\n      } catch (error) {\r\n        console.error(`Error validating field ${String(field)}:`, error)\r\n        return 'Validation error'\r\n      }\r\n    },\r\n    [schema, values]\r\n  )\r\n\r\n  // Set a field value\r\n  const setFieldValue = useCallback(\r\n    (field: keyof T, value: any) => {\r\n      setValues(prev => {\r\n        const newValues = { ...prev, [field]: value }\r\n        return newValues\r\n      })\r\n      setIsDirty(true)\r\n\r\n      if (validateOnChange) {\r\n        const errorMessage = validateField(field)\r\n        setErrors(prev => ({\r\n          ...prev,\r\n          [field]: errorMessage,\r\n        }))\r\n      }\r\n    },\r\n    [validateField, validateOnChange]\r\n  )\r\n\r\n  // Set a field as touched\r\n  const setFieldTouched = useCallback(\r\n    (field: keyof T, isTouched: boolean = true) => {\r\n      setTouched(prev => ({\r\n        ...prev,\r\n        [field]: isTouched,\r\n      }))\r\n\r\n      if (validateOnBlur && isTouched) {\r\n        const errorMessage = validateField(field)\r\n        setErrors(prev => ({\r\n          ...prev,\r\n          [field]: errorMessage,\r\n        }))\r\n      }\r\n    },\r\n    [validateField, validateOnBlur]\r\n  )\r\n\r\n  // Set a field error manually\r\n  const setFieldError = useCallback((field: keyof T, error?: string) => {\r\n    setErrors(prev => ({\r\n      ...prev,\r\n      [field]: error,\r\n    }))\r\n  }, [])\r\n\r\n  // Handle input change\r\n  const handleChange = useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\r\n      const { name, value, type } = e.target\r\n\r\n      // Handle different input types\r\n      let parsedValue: any = value\r\n\r\n      if (type === 'number') {\r\n        parsedValue = value === '' ? '' : Number(value)\r\n      } else if (type === 'checkbox') {\r\n        parsedValue = (e.target as HTMLInputElement).checked\r\n      }\r\n\r\n      setFieldValue(name as keyof T, parsedValue)\r\n    },\r\n    [setFieldValue]\r\n  )\r\n\r\n  // Handle input blur\r\n  const handleBlur = useCallback(\r\n    (e: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\r\n      const { name } = e.target\r\n      setFieldTouched(name as keyof T, true)\r\n    },\r\n    [setFieldTouched]\r\n  )\r\n\r\n  // Validate the entire form\r\n  const validateFormValues = useCallback(() => {\r\n    const result = validateFormData()\r\n\r\n    if (!result.success && result.errors) {\r\n      setErrors(result.errors)\r\n      return false\r\n    }\r\n\r\n    setErrors({})\r\n    return true\r\n  }, [validateFormData])\r\n\r\n  // Handle form submission\r\n  const handleSubmit = useCallback(\r\n    async (e: React.FormEvent) => {\r\n      e.preventDefault()\r\n\r\n      // Mark all fields as touched\r\n      const allTouched = Object.keys(values).reduce(\r\n        (acc, key) => {\r\n          acc[key as keyof T] = true\r\n          return acc\r\n        },\r\n        {} as Record<keyof T, boolean>\r\n      )\r\n\r\n      setTouched(allTouched)\r\n\r\n      // Validate the form\r\n      const isValid = validateFormValues()\r\n\r\n      if (!isValid || !onSubmit) {\r\n        return\r\n      }\r\n\r\n      setIsSubmitting(true)\r\n\r\n      try {\r\n        await onSubmit(values)\r\n      } catch (error) {\r\n        console.error('Form submission error:', error)\r\n\r\n        // Set a generic form error\r\n        setErrors(prev => ({\r\n          ...prev,\r\n          _form: 'An error occurred during submission. Please try again.',\r\n        }))\r\n      } finally {\r\n        setIsSubmitting(false)\r\n      }\r\n    },\r\n    [values, validateFormValues, onSubmit]\r\n  )\r\n\r\n  // Validate form when schema changes\r\n  useEffect(() => {\r\n    if (isDirty) {\r\n      validateFormValues()\r\n    }\r\n  }, [schema, isDirty, validateFormValues])\r\n\r\n  return {\r\n    values,\r\n    errors,\r\n    touched,\r\n    isSubmitting,\r\n    isValid,\r\n    isDirty,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n    setFieldValue,\r\n    setFieldTouched,\r\n    setFieldError,\r\n    resetForm,\r\n    validateField,\r\n    validateForm: validateFormValues,\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\hooks\\useLeafletMap.test.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 40,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 40,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1057, 1060], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1057, 1060], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 52,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 52,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1415, 1418], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1415, 1418], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 69,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 69,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1930, 1933], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1930, 1933], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { renderHook } from '@testing-library/react'\r\n\r\nimport { useLeafletMap } from './useLeafletMap'\r\n\r\n// Mock Leaflet\r\njest.mock('leaflet', () => {\r\n  // Create mock implementations for Leaflet objects and methods\r\n  const mockMap = {\r\n    setView: jest.fn().mockReturnThis(),\r\n    off: jest.fn(),\r\n    remove: jest.fn(),\r\n  }\r\n\r\n  const mockLayerGroup = {\r\n    addTo: jest.fn().mockReturnThis(),\r\n    clearLayers: jest.fn(),\r\n  }\r\n\r\n  const mockMarker = {\r\n    addTo: jest.fn().mockReturnThis(),\r\n    on: jest.fn(),\r\n  }\r\n\r\n  return {\r\n    map: jest.fn().mockReturnValue(mockMap),\r\n    tileLayer: jest.fn().mockReturnValue({\r\n      addTo: jest.fn(),\r\n    }),\r\n    layerGroup: jest.fn().mockReturnValue(mockLayerGroup),\r\n    marker: jest.fn().mockReturnValue(mockMarker),\r\n  }\r\n})\r\n\r\ndescribe('useLeafletMap', () => {\r\n  const mockContainerRef = { current: document.createElement('div') }\r\n\r\n  it('should initialize with default values', () => {\r\n    const { result } = renderHook(() =>\r\n      useLeafletMap({\r\n        containerRef: mockContainerRef as any,\r\n      })\r\n    )\r\n\r\n    expect(result.current.isMapReady).toBe(true)\r\n    expect(typeof result.current.setView).toBe('function')\r\n    expect(typeof result.current.updateMarkers).toBe('function')\r\n  })\r\n\r\n  it('should set view correctly', () => {\r\n    const { result } = renderHook(() =>\r\n      useLeafletMap({\r\n        containerRef: mockContainerRef as any,\r\n      })\r\n    )\r\n\r\n    const location = { lat: 52.5, lng: 13.4 }\r\n    result.current.setView(location, 10)\r\n\r\n    // In a real test, we would verify that the map's setView was called correctly\r\n    // This is just a placeholder since we're mocking Leaflet\r\n    expect(result.current.isMapReady).toBe(true)\r\n  })\r\n\r\n  it('should update markers correctly', () => {\r\n    const onMarkerClick = jest.fn()\r\n\r\n    const { result } = renderHook(() =>\r\n      useLeafletMap({\r\n        containerRef: mockContainerRef as any,\r\n        onMarkerClick,\r\n      })\r\n    )\r\n\r\n    const markers = [\r\n      { lat: 52.5, lng: 13.4 },\r\n      { lat: 48.9, lng: 2.3 },\r\n    ]\r\n\r\n    result.current.updateMarkers(markers)\r\n\r\n    // In a real test, we would verify that the markers were added correctly\r\n    // This is just a placeholder since we're mocking Leaflet\r\n    expect(result.current.isMapReady).toBe(true)\r\n  })\r\n\r\n  // Additional tests would verify cleanup, event handling, etc.\r\n})\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\hooks\\useLeafletMap.ts",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'updateMarkers'. Either include it or remove the dependency array.",
        "line": 122,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 122,
        "endColumn": 42,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [markers, onMarkerClick, isMapReady, updateMarkers]",
            "fix": {
              "range": [3695, 3731],
              "text": "[markers, onMarkerClick, isMapReady, updateMarkers]"
            }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import L from 'leaflet'\r\nimport { useEffect, useRef, useState } from 'react'\r\n\r\n// Define the location type\r\nexport interface Location {\r\n  lat: number\r\n  lng: number\r\n}\r\n\r\ninterface UseLeafletMapProps {\r\n  containerRef: React.RefObject<HTMLDivElement>\r\n  initialLocation?: Location\r\n  markers?: Location[]\r\n  onMarkerClick?: (location: Location) => void\r\n  zoom?: number\r\n}\r\n\r\ninterface UseLeafletMapReturn {\r\n  isMapReady: boolean\r\n  setView: (location: Location, zoom?: number) => void\r\n  updateMarkers: (newMarkers: Location[]) => void\r\n}\r\n\r\n/**\r\n * Custom hook for managing a Leaflet map\r\n *\r\n * This hook handles:\r\n * - Map initialization and cleanup\r\n * - Setting the map view\r\n * - Managing markers\r\n * - Handling marker clicks\r\n */\r\nexport function useLeafletMap({\r\n  containerRef,\r\n  initialLocation = { lat: 51.505, lng: -0.09 }, // Default to London\r\n  markers = [],\r\n  onMarkerClick,\r\n  zoom = 13,\r\n}: UseLeafletMapProps): UseLeafletMapReturn {\r\n  const mapRef = useRef<L.Map | null>(null)\r\n  const markersLayerRef = useRef<L.LayerGroup | null>(null)\r\n  const [isMapReady, setIsMapReady] = useState(false)\r\n\r\n  // Initialize map\r\n  useEffect(() => {\r\n    if (!containerRef.current || mapRef.current) return\r\n\r\n    // Create map instance\r\n    const map = L.map(containerRef.current).setView(\r\n      [initialLocation.lat, initialLocation.lng],\r\n      zoom\r\n    )\r\n\r\n    // Add MapTiler UK-optimized tiles or fallback to OpenStreetMap\r\n    const maptilerKey = process.env.NEXT_PUBLIC_MAPTILER_KEY\r\n\r\n    if (maptilerKey) {\r\n      // Use MapTiler with UK-optimized layer\r\n      L.tileLayer(`https://api.maptiler.com/maps/streets/256/{z}/{x}/{y}.png?key=${maptilerKey}`, {\r\n        attribution:\r\n          '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, <a href=\"https://www.maptiler.com/\">MapTiler</a>',\r\n      }).addTo(map)\r\n    } else {\r\n      // Fallback to OpenStreetMap if no MapTiler key is available\r\n      console.warn('MapTiler API key not found. Using OpenStreetMap as fallback.')\r\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n        attribution:\r\n          '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n      }).addTo(map)\r\n    }\r\n\r\n    // Create a layer group for markers\r\n    markersLayerRef.current = L.layerGroup().addTo(map)\r\n\r\n    // Store map reference\r\n    mapRef.current = map\r\n    setIsMapReady(true)\r\n\r\n    // Cleanup on unmount - IMPORTANT to prevent memory leaks\r\n    return () => {\r\n      if (mapRef.current) {\r\n        // Remove all event listeners\r\n        mapRef.current.off()\r\n        mapRef.current.remove()\r\n        mapRef.current = null\r\n        markersLayerRef.current = null\r\n        setIsMapReady(false)\r\n      }\r\n    }\r\n  }, [containerRef, initialLocation.lat, initialLocation.lng, zoom])\r\n\r\n  // Function to set the map view\r\n  const setView = (location: Location, newZoom?: number) => {\r\n    if (!mapRef.current) return\r\n    mapRef.current.setView([location.lat, location.lng], newZoom || zoom)\r\n  }\r\n\r\n  // Function to update markers\r\n  const updateMarkers = (newMarkers: Location[]) => {\r\n    if (!markersLayerRef.current) return\r\n\r\n    // Clear existing markers\r\n    markersLayerRef.current.clearLayers()\r\n\r\n    // Add new markers\r\n    newMarkers.forEach(location => {\r\n      const marker = L.marker([location.lat, location.lng])\r\n\r\n      if (onMarkerClick) {\r\n        marker.on('click', () => onMarkerClick(location))\r\n      }\r\n\r\n      marker.addTo(markersLayerRef.current!)\r\n    })\r\n  }\r\n\r\n  // Update markers when markers array changes\r\n  useEffect(() => {\r\n    if (isMapReady) {\r\n      updateMarkers(markers)\r\n    }\r\n  }, [markers, onMarkerClick, isMapReady])\r\n\r\n  return {\r\n    isMapReady,\r\n    setView,\r\n    updateMarkers,\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\hooks\\usePostcodeLookup.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\jest.setup.js",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'jest-fetch-mock'.",
        "line": 5,
        "column": 34,
        "nodeType": "Literal",
        "endLine": 5,
        "endColumn": 51
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Import Jest DOM matchers\r\nimport '@testing-library/jest-dom'\r\n\r\n// Mock fetch\r\nimport { enableFetchMocks } from 'jest-fetch-mock'\r\nenableFetchMocks()\r\n\r\n// Mock Next.js router\r\njest.mock('next/navigation', () => ({\r\n  useRouter: () => ({\r\n    push: jest.fn(),\r\n    replace: jest.fn(),\r\n    prefetch: jest.fn(),\r\n    back: jest.fn(),\r\n    forward: jest.fn(),\r\n    refresh: jest.fn(),\r\n    pathname: '/',\r\n    query: {},\r\n  }),\r\n  usePathname: () => '/',\r\n  useSearchParams: () => new URLSearchParams(),\r\n}))\r\n\r\n// Mock environment variables\r\nprocess.env = {\r\n  ...process.env,\r\n  NEXT_PUBLIC_APP_URL: 'http://localhost:3000',\r\n  DATABASE_URL: 'postgres://test:test@localhost:5432/test_db',\r\n}\r\n\r\n// Suppress console errors during tests\r\nconst originalConsoleError = console.error\r\nconsole.error = (...args) => {\r\n  if (\r\n    typeof args[0] === 'string' &&\r\n    (args[0].includes('Warning: ReactDOM.render') ||\r\n      args[0].includes('Warning: React.createElement') ||\r\n      args[0].includes('Error: Uncaught [Error: expected'))\r\n  ) {\r\n    return\r\n  }\r\n  originalConsoleError(...args)\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\amenities.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\api.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\api\\error-handling.test.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 181,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 181,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5584, 5587], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5584, 5587], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 202,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 202,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6189, 6192], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6189, 6192], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 211,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 211,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6525, 6528], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6525, 6528], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 227,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 227,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7024, 7027], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7024, 7027], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/api/error-handling.test.ts\r\nimport { describe, it, expect, vi, beforeEach } from 'vitest'\r\n\r\nimport { ApiError, handleFetchError, parseApiResponse, createApiClient } from './error-handling'\r\n\r\ndescribe('ApiError', () => {\r\n  it('should create an ApiError with the correct properties', () => {\r\n    const error = new ApiError('Test error', 400, 'BAD_REQUEST', { field: 'value' })\r\n\r\n    expect(error.message).toBe('Test error')\r\n    expect(error.status).toBe(400)\r\n    expect(error.code).toBe('BAD_REQUEST')\r\n    expect(error.details).toEqual({ field: 'value' })\r\n    expect(error.name).toBe('ApiError')\r\n  })\r\n\r\n  it('should identify validation errors correctly', () => {\r\n    const validationError = new ApiError('Validation error', 422, 'VALIDATION_ERROR')\r\n    const otherError = new ApiError('Other error', 500)\r\n\r\n    expect(validationError.isValidationError()).toBe(true)\r\n    expect(otherError.isValidationError()).toBe(false)\r\n  })\r\n\r\n  it('should get validation errors as a record', () => {\r\n    const error = new ApiError('Validation error', 422, 'VALIDATION_ERROR', {\r\n      name: 'Name is required',\r\n      email: 'Email is invalid',\r\n    })\r\n\r\n    expect(error.getValidationErrors()).toEqual({\r\n      name: 'Name is required',\r\n      email: 'Email is invalid',\r\n    })\r\n  })\r\n\r\n  it('should handle array format validation errors', () => {\r\n    const error = new ApiError('Validation error', 422, 'VALIDATION_ERROR', [\r\n      { path: 'name', message: 'Name is required' },\r\n      { path: 'email', message: 'Email is invalid' },\r\n    ])\r\n\r\n    expect(error.getValidationErrors()).toEqual({\r\n      name: 'Name is required',\r\n      email: 'Email is invalid',\r\n    })\r\n  })\r\n\r\n  it('should return empty object for non-validation errors', () => {\r\n    const error = new ApiError('Other error', 500)\r\n\r\n    expect(error.getValidationErrors()).toEqual({})\r\n  })\r\n\r\n  it('should create an ApiError from a Response object', async () => {\r\n    const mockResponse = {\r\n      status: 400,\r\n      json: vi.fn().mockResolvedValue({\r\n        error: {\r\n          message: 'Bad request',\r\n          code: 'BAD_REQUEST',\r\n          details: { field: 'value' },\r\n        },\r\n      }),\r\n    } as unknown as Response\r\n\r\n    const error = await ApiError.fromResponse(mockResponse)\r\n\r\n    expect(error.message).toBe('Bad request')\r\n    expect(error.status).toBe(400)\r\n    expect(error.code).toBe('BAD_REQUEST')\r\n    expect(error.details).toEqual({ field: 'value' })\r\n  })\r\n\r\n  it('should handle responses without error details', async () => {\r\n    const mockResponse = {\r\n      status: 500,\r\n      json: vi.fn().mockResolvedValue({}),\r\n    } as unknown as Response\r\n\r\n    const error = await ApiError.fromResponse(mockResponse)\r\n\r\n    expect(error.message).toBe('An unexpected error occurred')\r\n    expect(error.status).toBe(500)\r\n  })\r\n\r\n  it('should handle JSON parse errors', async () => {\r\n    const mockResponse = {\r\n      status: 500,\r\n      json: vi.fn().mockRejectedValue(new Error('Invalid JSON')),\r\n    } as unknown as Response\r\n\r\n    const error = await ApiError.fromResponse(mockResponse)\r\n\r\n    expect(error.message).toBe('Failed to parse error response')\r\n    expect(error.status).toBe(500)\r\n  })\r\n})\r\n\r\ndescribe('handleFetchError', () => {\r\n  it('should not throw for successful responses', async () => {\r\n    const mockResponse = {\r\n      ok: true,\r\n    } as Response\r\n\r\n    await expect(handleFetchError(mockResponse)).resolves.not.toThrow()\r\n  })\r\n\r\n  it('should throw ApiError for unsuccessful responses', async () => {\r\n    const mockResponse = {\r\n      ok: false,\r\n      status: 400,\r\n      json: vi.fn().mockResolvedValue({\r\n        error: {\r\n          message: 'Bad request',\r\n          code: 'BAD_REQUEST',\r\n        },\r\n      }),\r\n    } as unknown as Response\r\n\r\n    await expect(handleFetchError(mockResponse)).rejects.toThrow(ApiError)\r\n    await expect(handleFetchError(mockResponse)).rejects.toThrow('Bad request')\r\n  })\r\n})\r\n\r\ndescribe('parseApiResponse', () => {\r\n  it('should parse successful responses', async () => {\r\n    const mockResponse = {\r\n      ok: true,\r\n      json: vi.fn().mockResolvedValue({\r\n        data: { id: 1, name: 'Test' },\r\n      }),\r\n    } as unknown as Response\r\n\r\n    const result = await parseApiResponse(mockResponse)\r\n\r\n    expect(result).toEqual({ id: 1, name: 'Test' })\r\n  })\r\n\r\n  it('should throw ApiError for unsuccessful responses', async () => {\r\n    const mockResponse = {\r\n      ok: false,\r\n      status: 400,\r\n      json: vi.fn().mockResolvedValue({\r\n        error: {\r\n          message: 'Bad request',\r\n          code: 'BAD_REQUEST',\r\n        },\r\n      }),\r\n    } as unknown as Response\r\n\r\n    await expect(parseApiResponse(mockResponse)).rejects.toThrow(ApiError)\r\n    await expect(parseApiResponse(mockResponse)).rejects.toThrow('Bad request')\r\n  })\r\n\r\n  it('should throw ApiError for JSON parse errors', async () => {\r\n    const mockResponse = {\r\n      ok: true,\r\n      json: vi.fn().mockRejectedValue(new Error('Invalid JSON')),\r\n    } as unknown as Response\r\n\r\n    await expect(parseApiResponse(mockResponse)).rejects.toThrow(ApiError)\r\n    await expect(parseApiResponse(mockResponse)).rejects.toThrow('Failed to parse response data')\r\n  })\r\n})\r\n\r\ndescribe('createApiClient', () => {\r\n  beforeEach(() => {\r\n    vi.clearAllMocks()\r\n    global.fetch = vi.fn()\r\n  })\r\n\r\n  it('should create a fetch wrapper with the correct base URL', async () => {\r\n    const mockResponse = {\r\n      ok: true,\r\n      json: vi.fn().mockResolvedValue({\r\n        data: { id: 1, name: 'Test' },\r\n      }),\r\n    }\r\n\r\n    ;(global.fetch as any).mockResolvedValue(mockResponse)\r\n\r\n    const apiClient = createApiClient('https://api.example.com')\r\n    const result = await apiClient('/users/1')\r\n\r\n    expect(global.fetch).toHaveBeenCalledWith('https://api.example.com/users/1', undefined)\r\n    expect(result).toEqual({ id: 1, name: 'Test' })\r\n  })\r\n\r\n  it('should handle API errors', async () => {\r\n    const mockResponse = {\r\n      ok: false,\r\n      status: 404,\r\n      json: vi.fn().mockResolvedValue({\r\n        error: {\r\n          message: 'User not found',\r\n          code: 'NOT_FOUND',\r\n        },\r\n      }),\r\n    }\r\n\r\n    ;(global.fetch as any).mockResolvedValue(mockResponse)\r\n\r\n    const apiClient = createApiClient('https://api.example.com')\r\n\r\n    await expect(apiClient('/users/999')).rejects.toThrow(ApiError)\r\n    await expect(apiClient('/users/999')).rejects.toThrow('User not found')\r\n  })\r\n\r\n  it('should handle network errors', async () => {\r\n    ;(global.fetch as any).mockRejectedValue(new Error('Network error'))\r\n\r\n    const apiClient = createApiClient('https://api.example.com')\r\n\r\n    await expect(apiClient('/users/1')).rejects.toThrow(ApiError)\r\n    await expect(apiClient('/users/1')).rejects.toThrow('Network error')\r\n  })\r\n\r\n  it('should pass request options to fetch', async () => {\r\n    const mockResponse = {\r\n      ok: true,\r\n      json: vi.fn().mockResolvedValue({\r\n        data: { id: 1, name: 'Test' },\r\n      }),\r\n    }\r\n\r\n    ;(global.fetch as any).mockResolvedValue(mockResponse)\r\n\r\n    const apiClient = createApiClient('https://api.example.com')\r\n    await apiClient('/users', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ name: 'New User' }),\r\n    })\r\n\r\n    expect(global.fetch).toHaveBeenCalledWith('https://api.example.com/users', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ name: 'New User' }),\r\n    })\r\n  })\r\n})\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\api\\error-handling.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 10,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 10,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [208, 211], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [208, 211], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 12,
        "column": 73,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 12,
        "endColumn": 76,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [287, 290], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [287, 290], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 73,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 73,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 102,
        "column": 12,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 102,
        "endColumn": 17
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/api/error-handling.ts\r\nimport { ApiResponse } from './response'\r\n\r\n/**\r\n * Custom error class for API errors\r\n */\r\nexport class ApiError extends Error {\r\n  status: number\r\n  code?: string\r\n  details?: any\r\n\r\n  constructor(message: string, status: number, code?: string, details?: any) {\r\n    super(message)\r\n    this.name = 'ApiError'\r\n    this.status = status\r\n    this.code = code\r\n    this.details = details\r\n  }\r\n\r\n  /**\r\n   * Check if the error is a validation error\r\n   */\r\n  isValidationError(): boolean {\r\n    return this.status === 422 || this.code === 'VALIDATION_ERROR'\r\n  }\r\n\r\n  /**\r\n   * Get validation errors as a record of field names to error messages\r\n   */\r\n  getValidationErrors(): Record<string, string> {\r\n    if (!this.isValidationError() || !this.details) {\r\n      return {}\r\n    }\r\n\r\n    // Handle different validation error formats\r\n    if (Array.isArray(this.details)) {\r\n      // Zod error format from the server\r\n      return this.details.reduce(\r\n        (acc, error) => {\r\n          if (error.path) {\r\n            const path = Array.isArray(error.path) ? error.path.join('.') : error.path\r\n            acc[path] = error.message\r\n          }\r\n          return acc\r\n        },\r\n        {} as Record<string, string>\r\n      )\r\n    } else if (typeof this.details === 'object') {\r\n      // Already formatted errors\r\n      return this.details as Record<string, string>\r\n    }\r\n\r\n    return {}\r\n  }\r\n\r\n  /**\r\n   * Create an ApiError from a Response object\r\n   */\r\n  static async fromResponse(response: Response): Promise<ApiError> {\r\n    try {\r\n      const data = (await response.json()) as ApiResponse\r\n\r\n      if (data.error) {\r\n        return new ApiError(\r\n          data.error.message,\r\n          response.status,\r\n          data.error.code,\r\n          data.error.details\r\n        )\r\n      }\r\n\r\n      return new ApiError('An unexpected error occurred', response.status)\r\n    } catch (error) {\r\n      return new ApiError('Failed to parse error response', response.status)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Handle fetch errors and convert them to ApiError\r\n * @param response Fetch response object\r\n * @throws ApiError if the response is not ok\r\n */\r\nexport async function handleFetchError(response: Response): Promise<void> {\r\n  if (!response.ok) {\r\n    throw await ApiError.fromResponse(response)\r\n  }\r\n}\r\n\r\n/**\r\n * Parse API response data\r\n * @param response Fetch response object\r\n * @returns Parsed response data\r\n * @throws ApiError if the response is not ok\r\n */\r\nexport async function parseApiResponse<T>(response: Response): Promise<T> {\r\n  await handleFetchError(response)\r\n\r\n  try {\r\n    const data = (await response.json()) as ApiResponse<T>\r\n    return data.data as T\r\n  } catch (error) {\r\n    throw new ApiError('Failed to parse response data', 500)\r\n  }\r\n}\r\n\r\n/**\r\n * Create a fetch wrapper with error handling\r\n * @param baseUrl Base URL for API requests\r\n * @returns Fetch function with error handling\r\n */\r\nexport function createApiClient(baseUrl: string = '') {\r\n  return async function fetchWithErrorHandling<T>(url: string, options?: RequestInit): Promise<T> {\r\n    try {\r\n      const fullUrl = `${baseUrl}${url}`\r\n      const response = await fetch(fullUrl, options)\r\n      return await parseApiResponse<T>(response)\r\n    } catch (error) {\r\n      if (error instanceof ApiError) {\r\n        throw error\r\n      }\r\n\r\n      throw new ApiError(\r\n        error instanceof Error ? error.message : 'Network error',\r\n        0,\r\n        'NETWORK_ERROR'\r\n      )\r\n    }\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\api\\fetchUtils.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 126,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 126,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [3458, 3535], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `axios` also has a named export `isAxiosError`. Check if you meant to write `import {isAxiosError} from 'axios'` instead.",
        "line": 164,
        "column": 11,
        "nodeType": "MemberExpression",
        "endLine": 164,
        "endColumn": 29
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 185,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 185,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [5246, 5331], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 229,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 229,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [6545, 6608], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 248,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 248,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [7031, 7091], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 261,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 261,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [7375, 7433], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 264,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 264,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [7524, 7600], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 283,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 283,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [7990, 8051], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 302,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 302,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [8572, 8626], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 316,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 316,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [8928, 8982], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 10,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// fetchUtils.ts\r\nimport axios, { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'\r\n\r\n// Custom error types\r\nexport class NetworkError extends Error {\r\n  constructor(message: string) {\r\n    super(message)\r\n    this.name = 'NetworkError'\r\n  }\r\n}\r\n\r\nexport class TimeoutError extends Error {\r\n  constructor(message: string) {\r\n    super(message)\r\n    this.name = 'TimeoutError'\r\n  }\r\n}\r\n\r\nexport class ApiError extends Error {\r\n  status: number\r\n\r\n  constructor(message: string, status: number) {\r\n    super(message)\r\n    this.name = 'ApiError'\r\n    this.status = status\r\n  }\r\n}\r\n\r\n// Default options\r\nconst defaultOptions = {\r\n  timeout: 10000, // 10 seconds\r\n  maxRetries: 3,\r\n  backoffFactor: 2,\r\n  retryStatusCodes: [408, 429, 500, 502, 503, 504],\r\n}\r\n\r\n/**\r\n * Fetch with timeout utility function\r\n * @param url URL to fetch\r\n * @param options Fetch options\r\n * @param timeout Timeout in milliseconds\r\n * @returns Response object\r\n */\r\nexport const fetchWithTimeout = async (\r\n  url: string,\r\n  options: RequestInit = {},\r\n  timeout = defaultOptions.timeout\r\n): Promise<Response> => {\r\n  const controller = new AbortController()\r\n  const { signal } = controller\r\n\r\n  const timeoutId = setTimeout(() => controller.abort(), timeout)\r\n\r\n  try {\r\n    const response = await fetch(url, { ...options, signal })\r\n    clearTimeout(timeoutId)\r\n    return response\r\n  } catch (error) {\r\n    clearTimeout(timeoutId)\r\n    if (error instanceof Error) {\r\n      if (error.name === 'AbortError') {\r\n        throw new TimeoutError(`Request timed out after ${timeout}ms`)\r\n      }\r\n      throw new NetworkError(`Network error: ${error.message}`)\r\n    }\r\n    throw error\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch with retry and exponential backoff\r\n * @param url URL to fetch\r\n * @param options Fetch options\r\n * @param retries Maximum number of retries\r\n * @param backoff Initial backoff in milliseconds\r\n * @param timeout Timeout in milliseconds\r\n * @returns Parsed JSON response\r\n */\r\nexport const fetchWithRetry = async <T>(\r\n  url: string,\r\n  options: RequestInit = {},\r\n  retries = defaultOptions.maxRetries,\r\n  backoff = defaultOptions.backoffFactor * 100,\r\n  timeout = defaultOptions.timeout\r\n): Promise<T> => {\r\n  let lastError: Error\r\n\r\n  for (let attempt = 0; attempt <= retries; attempt++) {\r\n    try {\r\n      const response = await fetchWithTimeout(url, options, timeout)\r\n\r\n      if (!response.ok) {\r\n        const status = response.status\r\n        const shouldRetry = defaultOptions.retryStatusCodes.includes(status)\r\n\r\n        // Don't retry for certain status codes\r\n        if (!shouldRetry && attempt < retries) {\r\n          throw new ApiError(`HTTP error! Status: ${status}`, status)\r\n        }\r\n\r\n        throw new ApiError(`HTTP error! Status: ${status}`, status)\r\n      }\r\n\r\n      return await response.json()\r\n    } catch (err) {\r\n      const error = err as Error\r\n      lastError = error\r\n\r\n      // Don't retry if we've reached max retries\r\n      if (attempt === retries) break\r\n\r\n      // Don't retry for certain errors\r\n      if (error instanceof ApiError) {\r\n        // Don't retry for client errors (except those in retryStatusCodes)\r\n        if (\r\n          error.status >= 400 &&\r\n          error.status < 500 &&\r\n          !defaultOptions.retryStatusCodes.includes(error.status)\r\n        ) {\r\n          break\r\n        }\r\n      }\r\n\r\n      // Wait with exponential backoff before retrying\r\n      const delay = backoff * Math.pow(2, attempt)\r\n      console.log(`Retrying fetch (${attempt + 1}/${retries}) after ${delay}ms...`)\r\n      await new Promise(resolve => setTimeout(resolve, delay))\r\n    }\r\n  }\r\n\r\n  throw lastError\r\n}\r\n\r\n/**\r\n * Axios with retry and exponential backoff\r\n * @param config Axios request config\r\n * @param retries Maximum number of retries\r\n * @param backoff Initial backoff in milliseconds\r\n * @returns Axios response\r\n */\r\nexport const axiosWithRetry = async <T>(\r\n  config: AxiosRequestConfig,\r\n  retries = defaultOptions.maxRetries,\r\n  backoff = defaultOptions.backoffFactor * 100\r\n): Promise<AxiosResponse<T>> => {\r\n  // Set default timeout if not provided\r\n  if (!config.timeout) {\r\n    config.timeout = defaultOptions.timeout\r\n  }\r\n\r\n  let lastError: Error\r\n\r\n  for (let attempt = 0; attempt <= retries; attempt++) {\r\n    try {\r\n      return await axios.request<T>(config)\r\n    } catch (err) {\r\n      const error = err as Error\r\n      lastError = error\r\n\r\n      // Don't retry if we've reached max retries\r\n      if (attempt === retries) break\r\n\r\n      // Handle Axios errors\r\n      if (axios.isAxiosError(error)) {\r\n        const axiosError = error as AxiosError\r\n\r\n        // Don't retry for timeout errors\r\n        if (axiosError.code === 'ECONNABORTED') {\r\n          throw new TimeoutError(`Request timed out after ${config.timeout}ms`)\r\n        }\r\n\r\n        // Don't retry for certain status codes\r\n        if (axiosError.response) {\r\n          const status = axiosError.response.status\r\n          const shouldRetry = defaultOptions.retryStatusCodes.includes(status)\r\n\r\n          if (!shouldRetry && status >= 400 && status < 500) {\r\n            break\r\n          }\r\n        }\r\n      }\r\n\r\n      // Wait with exponential backoff before retrying\r\n      const delay = backoff * Math.pow(2, attempt)\r\n      console.log(`Retrying axios request (${attempt + 1}/${retries}) after ${delay}ms...`)\r\n      await new Promise(resolve => setTimeout(resolve, delay))\r\n    }\r\n  }\r\n\r\n  throw lastError\r\n}\r\n\r\n/**\r\n * Create a circuit breaker for API calls\r\n * @param options Circuit breaker options\r\n * @returns Circuit breaker object\r\n */\r\nexport const createCircuitBreaker = (options: {\r\n  name: string\r\n  failureThreshold?: number\r\n  resetTimeout?: number\r\n}) => {\r\n  const state = {\r\n    failures: 0,\r\n    lastFailure: null as number | null,\r\n    status: 'CLOSED' as 'CLOSED' | 'OPEN' | 'HALF_OPEN',\r\n  }\r\n\r\n  const failureThreshold = options.failureThreshold || 5\r\n  const resetTimeout = options.resetTimeout || 30000 // 30 seconds\r\n\r\n  return {\r\n    /**\r\n     * Check if circuit breaker allows the request\r\n     * @returns Whether the request is allowed\r\n     */\r\n    canMakeRequest(): boolean {\r\n      // If circuit is closed, allow the request\r\n      if (state.status === 'CLOSED') {\r\n        return true\r\n      }\r\n\r\n      // If circuit is open, check if it's time to try again\r\n      if (state.status === 'OPEN') {\r\n        const now = Date.now()\r\n        if (state.lastFailure && now - state.lastFailure > resetTimeout) {\r\n          // Move to half-open state\r\n          state.status = 'HALF_OPEN'\r\n          console.log(`Circuit breaker ${options.name} is now HALF_OPEN`)\r\n          return true\r\n        }\r\n        return false\r\n      }\r\n\r\n      // If circuit is half-open, allow one test request\r\n      return true\r\n    },\r\n\r\n    /**\r\n     * Record a successful request\r\n     */\r\n    recordSuccess(): void {\r\n      if (state.status === 'HALF_OPEN') {\r\n        // Reset the circuit breaker\r\n        state.failures = 0\r\n        state.lastFailure = null\r\n        state.status = 'CLOSED'\r\n        console.log(`Circuit breaker ${options.name} is now CLOSED`)\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Record a failed request\r\n     */\r\n    recordFailure(): void {\r\n      state.failures += 1\r\n      state.lastFailure = Date.now()\r\n\r\n      if (state.status === 'CLOSED' && state.failures >= failureThreshold) {\r\n        state.status = 'OPEN'\r\n        console.log(`Circuit breaker ${options.name} is now OPEN`)\r\n      } else if (state.status === 'HALF_OPEN') {\r\n        state.status = 'OPEN'\r\n        console.log(`Circuit breaker ${options.name} is now OPEN after failed test`)\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Get the current status of the circuit breaker\r\n     * @returns Circuit breaker status\r\n     */\r\n    getStatus(): 'CLOSED' | 'OPEN' | 'HALF_OPEN' {\r\n      return state.status\r\n    },\r\n\r\n    /**\r\n     * Reset the circuit breaker\r\n     */\r\n    reset(): void {\r\n      state.failures = 0\r\n      state.lastFailure = null\r\n      state.status = 'CLOSED'\r\n      console.log(`Circuit breaker ${options.name} has been reset`)\r\n    },\r\n  }\r\n}\r\n\r\n/**\r\n * Execute a function with circuit breaker protection\r\n * @param fn Function to execute\r\n * @param circuitBreaker Circuit breaker object\r\n * @param fallbackFn Optional fallback function\r\n * @returns Result of the function or fallback\r\n */\r\nexport const withCircuitBreaker = async <T>(\r\n  fn: () => Promise<T>,\r\n  circuitBreaker: ReturnType<typeof createCircuitBreaker>,\r\n  fallbackFn?: () => Promise<T>\r\n): Promise<T> => {\r\n  if (!circuitBreaker.canMakeRequest()) {\r\n    if (fallbackFn) {\r\n      console.log('Circuit breaker is OPEN, using fallback')\r\n      return fallbackFn()\r\n    }\r\n    throw new Error('Service is unavailable and no fallback is available')\r\n  }\r\n\r\n  try {\r\n    const result = await fn()\r\n    circuitBreaker.recordSuccess()\r\n    return result\r\n  } catch (error) {\r\n    circuitBreaker.recordFailure()\r\n\r\n    if (fallbackFn) {\r\n      console.log('Primary function failed, using fallback')\r\n      return fallbackFn()\r\n    }\r\n\r\n    throw error\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\api\\response.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 3,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 3,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [74, 77], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [74, 77], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 9,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 9,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [183, 186], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [183, 186], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 37,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 37,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [848, 851], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [848, 851], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextResponse } from 'next/server'\r\n\r\nexport type ApiResponse<T = any> = {\r\n  success: boolean\r\n  data?: T\r\n  error?: {\r\n    message: string\r\n    code?: string\r\n    details?: any\r\n  }\r\n}\r\n\r\n/**\r\n * Create a successful API response\r\n * @param data The data to include in the response\r\n * @returns A NextResponse with standardized format\r\n */\r\nexport function successResponse<T>(data: T): NextResponse<ApiResponse<T>> {\r\n  return NextResponse.json({\r\n    success: true,\r\n    data,\r\n  })\r\n}\r\n\r\n/**\r\n * Create an error API response\r\n * @param message Error message\r\n * @param status HTTP status code\r\n * @param code Optional error code\r\n * @param details Optional error details\r\n * @returns A NextResponse with standardized format\r\n */\r\nexport function errorResponse(\r\n  message: string,\r\n  status: number = 500,\r\n  code?: string,\r\n  details?: any\r\n): NextResponse<ApiResponse<never>> {\r\n  return NextResponse.json(\r\n    {\r\n      success: false,\r\n      error: {\r\n        message,\r\n        ...(code && { code }),\r\n        ...(details && { details }),\r\n      },\r\n    },\r\n    { status }\r\n  )\r\n}\r\n\r\n/**\r\n * HTTP status codes for common API responses\r\n */\r\nexport const HttpStatus = {\r\n  OK: 200,\r\n  CREATED: 201,\r\n  NO_CONTENT: 204,\r\n  BAD_REQUEST: 400,\r\n  UNAUTHORIZED: 401,\r\n  FORBIDDEN: 403,\r\n  NOT_FOUND: 404,\r\n  METHOD_NOT_ALLOWED: 405,\r\n  CONFLICT: 409,\r\n  UNPROCESSABLE_ENTITY: 422,\r\n  INTERNAL_SERVER_ERROR: 500,\r\n  SERVICE_UNAVAILABLE: 503,\r\n} as const\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\api\\validation.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 26,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 26,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [558, 561], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [558, 561], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 140,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 140,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4264, 4267], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4264, 4267], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 205,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 205,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6438, 6441], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6438, 6441], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextRequest } from 'next/server'\r\nimport { z } from 'zod'\r\n\r\nimport { errorResponse, HttpStatus } from './response'\r\n\r\n/**\r\n * Custom error class for JSON parsing errors\r\n */\r\nexport class JsonParseError extends Error {\r\n  constructor(\r\n    message: string,\r\n    public originalError: Error\r\n  ) {\r\n    super(message)\r\n    this.name = 'JsonParseError'\r\n  }\r\n}\r\n\r\n/**\r\n * Custom error class for validation errors\r\n */\r\nexport class ValidationError extends Error {\r\n  constructor(\r\n    message: string,\r\n    public code: string,\r\n    public details?: any\r\n  ) {\r\n    super(message)\r\n    this.name = 'ValidationError'\r\n  }\r\n}\r\n\r\n/**\r\n * Format Zod validation errors into a more user-friendly format\r\n * @param error Zod error object\r\n * @returns Formatted error object with field paths and messages\r\n */\r\nexport function formatZodError(error: z.ZodError): Record<string, string> {\r\n  const formattedErrors: Record<string, string> = {}\r\n\r\n  error.errors.forEach(err => {\r\n    const path = err.path.join('.')\r\n    const fieldName = path || 'value'\r\n\r\n    // Create more specific error messages based on error code\r\n    let message = err.message\r\n\r\n    switch (err.code) {\r\n      case 'invalid_type':\r\n        if (err.expected === 'string' && err.received === 'undefined') {\r\n          message = 'This field is required'\r\n        } else {\r\n          message = `Expected ${err.expected}, received ${err.received}`\r\n        }\r\n        break\r\n      case 'too_small':\r\n        if (err.type === 'string') {\r\n          if (err.minimum === 1) {\r\n            message = 'This field cannot be empty'\r\n          } else {\r\n            message = `Must be at least ${err.minimum} characters`\r\n          }\r\n        } else if (err.type === 'number') {\r\n          message = `Must be greater than or equal to ${err.minimum}`\r\n        } else if (err.type === 'array') {\r\n          message = `Must have at least ${err.minimum} item(s)`\r\n        }\r\n        break\r\n      case 'too_big':\r\n        if (err.type === 'string') {\r\n          message = `Must be at most ${err.maximum} characters`\r\n        } else if (err.type === 'number') {\r\n          message = `Must be less than or equal to ${err.maximum}`\r\n        } else if (err.type === 'array') {\r\n          message = `Must have at most ${err.maximum} item(s)`\r\n        }\r\n        break\r\n      case 'invalid_string':\r\n        if (err.validation === 'email') {\r\n          message = 'Must be a valid email address'\r\n        } else if (err.validation === 'url') {\r\n          message = 'Must be a valid URL'\r\n        } else if (err.validation === 'uuid') {\r\n          message = 'Must be a valid UUID'\r\n        }\r\n        break\r\n      case 'invalid_enum_value':\r\n        message = `Must be one of: ${err.options.map(o => `'${o}'`).join(', ')}`\r\n        break\r\n      case 'invalid_date':\r\n        message = 'Must be a valid date'\r\n        break\r\n    }\r\n\r\n    formattedErrors[fieldName] = message\r\n  })\r\n\r\n  return formattedErrors\r\n}\r\n\r\n/**\r\n * Validate request query parameters against a Zod schema\r\n * @param request The Next.js request object\r\n * @param schema The Zod schema to validate against\r\n * @returns The validated query parameters\r\n * @throws ValidationError if validation fails\r\n */\r\nexport async function validateQuery<T extends z.ZodType>(\r\n  request: NextRequest,\r\n  schema: T\r\n): Promise<z.infer<T>> {\r\n  try {\r\n    const searchParams = Object.fromEntries(request.nextUrl.searchParams.entries())\r\n    return schema.parse(searchParams)\r\n  } catch (error) {\r\n    if (error instanceof z.ZodError) {\r\n      const formattedErrors = formatZodError(error)\r\n      throw new ValidationError(\r\n        'Invalid query parameters',\r\n        'INVALID_QUERY_PARAMETERS',\r\n        formattedErrors\r\n      )\r\n    }\r\n    throw new ValidationError('Failed to process query parameters', 'QUERY_PROCESSING_ERROR')\r\n  }\r\n}\r\n\r\n/**\r\n * Validate request body against a Zod schema\r\n * @param request The Next.js request object\r\n * @param schema The Zod schema to validate against\r\n * @returns The validated body\r\n * @throws JsonParseError if JSON parsing fails\r\n * @throws ValidationError if validation fails\r\n */\r\nexport async function validateBody<T extends z.ZodType>(\r\n  request: NextRequest,\r\n  schema: T\r\n): Promise<z.infer<T>> {\r\n  let body: any\r\n\r\n  try {\r\n    body = await request.json()\r\n  } catch (error) {\r\n    // Handle JSON parsing errors specifically\r\n    const originalError = error instanceof Error ? error : new Error('Unknown error')\r\n\r\n    // Check for common JSON parsing error patterns\r\n    const errorMessage = originalError.message || ''\r\n\r\n    if (errorMessage.includes('Unexpected end of JSON input')) {\r\n      throw new JsonParseError(\r\n        'Incomplete JSON data received. Please check that your request body is complete.',\r\n        originalError\r\n      )\r\n    } else if (errorMessage.includes('Unexpected token')) {\r\n      throw new JsonParseError(\r\n        'Malformed JSON data received. Please check your request syntax.',\r\n        originalError\r\n      )\r\n    } else {\r\n      throw new JsonParseError(\r\n        'Failed to parse request body as JSON. Please ensure your request contains valid JSON data.',\r\n        originalError\r\n      )\r\n    }\r\n  }\r\n\r\n  try {\r\n    return schema.parse(body)\r\n  } catch (error) {\r\n    if (error instanceof z.ZodError) {\r\n      const formattedErrors = formatZodError(error)\r\n      throw new ValidationError('Invalid request data', 'VALIDATION_ERROR', formattedErrors)\r\n    }\r\n    throw new ValidationError('Failed to validate request data', 'VALIDATION_PROCESSING_ERROR')\r\n  }\r\n}\r\n\r\n/**\r\n * Safely validate form data against a Zod schema\r\n * @param request The Next.js request object\r\n * @param schema The Zod schema to validate against\r\n * @returns The validated form data\r\n * @throws ValidationError if validation fails\r\n */\r\nexport async function validateFormData<T extends z.ZodType>(\r\n  request: NextRequest,\r\n  schema: T\r\n): Promise<z.infer<T>> {\r\n  try {\r\n    const formData = await request.formData()\r\n    const data = Object.fromEntries(formData.entries())\r\n\r\n    // Convert numeric strings to numbers if they look like numbers\r\n    const processedData = Object.entries(data).reduce(\r\n      (acc, [key, value]) => {\r\n        if (typeof value === 'string' && /^-?\\d+(\\.\\d+)?$/.test(value.trim())) {\r\n          acc[key] = Number(value)\r\n        } else {\r\n          acc[key] = value\r\n        }\r\n        return acc\r\n      },\r\n      {} as Record<string, any>\r\n    )\r\n\r\n    return schema.parse(processedData)\r\n  } catch (error) {\r\n    if (error instanceof z.ZodError) {\r\n      const formattedErrors = formatZodError(error)\r\n      throw new ValidationError('Invalid form data', 'FORM_VALIDATION_ERROR', formattedErrors)\r\n    }\r\n\r\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error'\r\n    throw new ValidationError(\r\n      `Failed to process form data: ${errorMessage}`,\r\n      'FORM_PROCESSING_ERROR'\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Handle validation errors in API routes\r\n * @param handler The API route handler function\r\n * @returns A wrapped handler that handles validation errors\r\n */\r\nexport function withValidation(handler: (request: NextRequest) => Promise<Response>) {\r\n  return async (request: NextRequest) => {\r\n    try {\r\n      return await handler(request)\r\n    } catch (error) {\r\n      // Handle Zod validation errors\r\n      if (error instanceof z.ZodError) {\r\n        const formattedErrors = formatZodError(error)\r\n        return errorResponse(\r\n          'Validation error',\r\n          HttpStatus.UNPROCESSABLE_ENTITY,\r\n          'VALIDATION_ERROR',\r\n          formattedErrors\r\n        )\r\n      }\r\n\r\n      // Handle custom validation errors\r\n      if (error instanceof ValidationError) {\r\n        return errorResponse(\r\n          error.message,\r\n          HttpStatus.UNPROCESSABLE_ENTITY,\r\n          error.code,\r\n          error.details\r\n        )\r\n      }\r\n\r\n      // Handle JSON parsing errors\r\n      if (error instanceof JsonParseError) {\r\n        return errorResponse(error.message, HttpStatus.BAD_REQUEST, 'INVALID_JSON', {\r\n          originalError: error.originalError.message,\r\n        })\r\n      }\r\n\r\n      // Handle other errors\r\n      console.error('API error:', error)\r\n      return errorResponse(\r\n        error instanceof Error ? error.message : 'An unexpected error occurred',\r\n        HttpStatus.INTERNAL_SERVER_ERROR,\r\n        'SERVER_ERROR'\r\n      )\r\n    }\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\auth\\api-auth.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 21,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 21,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [454, 457], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [454, 457], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 36,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 36,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [823, 826], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [823, 826], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 71,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 71,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1545, 1548], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1545, 1548], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/auth/api-auth.ts\r\nimport { auth } from '@clerk/nextjs/server'\r\nimport { NextRequest, NextResponse } from 'next/server'\r\n\r\n// HTTP status codes\r\nexport const HttpStatus = {\r\n  OK: 200,\r\n  CREATED: 201,\r\n  BAD_REQUEST: 400,\r\n  UNAUTHORIZED: 401,\r\n  FORBIDDEN: 403,\r\n  NOT_FOUND: 404,\r\n  INTERNAL_SERVER_ERROR: 500,\r\n  SERVICE_UNAVAILABLE: 503,\r\n}\r\n\r\n// Error response type\r\ninterface ErrorResponse {\r\n  message: string\r\n  code?: string\r\n  details?: any\r\n}\r\n\r\n/**\r\n * Create an error response\r\n * @param message Error message\r\n * @param status HTTP status code\r\n * @param code Error code\r\n * @param details Additional error details\r\n * @returns NextResponse with error details\r\n */\r\nexport function errorResponse(\r\n  message: string,\r\n  status: number = HttpStatus.INTERNAL_SERVER_ERROR,\r\n  code?: string,\r\n  details?: any\r\n): NextResponse {\r\n  const error: ErrorResponse = {\r\n    message,\r\n  }\r\n\r\n  if (code) error.code = code\r\n  if (details) error.details = details\r\n\r\n  return NextResponse.json({ error }, { status })\r\n}\r\n\r\n/**\r\n * Create a success response\r\n * @param data Response data\r\n * @param status HTTP status code\r\n * @returns NextResponse with data\r\n */\r\nexport function successResponse<T>(data: T, status: number = HttpStatus.OK): NextResponse {\r\n  return NextResponse.json(data, { status })\r\n}\r\n\r\n/**\r\n * Authentication options\r\n */\r\ninterface AuthOptions {\r\n  requireAuth?: boolean\r\n  requiredRoles?: string[]\r\n}\r\n\r\n/**\r\n * Authenticated handler result\r\n */\r\ninterface AuthResult {\r\n  userId: string | null\r\n  sessionClaims: any | null\r\n  roles: string[]\r\n  isAuthenticated: boolean\r\n  isAuthorized: boolean\r\n  error?: NextResponse\r\n}\r\n\r\n/**\r\n * Check authentication and authorization for an API route\r\n * @param req Next.js request\r\n * @param options Authentication options\r\n * @returns Authentication result\r\n */\r\nexport async function checkAuth(req: NextRequest, options: AuthOptions = {}): Promise<AuthResult> {\r\n  const { requireAuth = true, requiredRoles = [] } = options\r\n\r\n  try {\r\n    // Get authentication data from Clerk\r\n    const authResult = await auth()\r\n    const { userId, sessionClaims } = authResult\r\n\r\n    // Extract roles from session claims\r\n    const roles = (sessionClaims?.roles as string[]) || []\r\n\r\n    // Check if user is authenticated\r\n    const isAuthenticated = !!userId\r\n\r\n    // If authentication is required but user is not authenticated\r\n    if (requireAuth && !isAuthenticated) {\r\n      return {\r\n        userId,\r\n        sessionClaims,\r\n        roles,\r\n        isAuthenticated,\r\n        isAuthorized: false,\r\n        error: errorResponse('Authentication required', HttpStatus.UNAUTHORIZED, 'UNAUTHORIZED'),\r\n      }\r\n    }\r\n\r\n    // Check if user has required roles\r\n    const isAuthorized = !requiredRoles.length || roles.some(role => requiredRoles.includes(role))\r\n\r\n    // If user doesn't have required roles\r\n    if (requireAuth && isAuthenticated && !isAuthorized) {\r\n      return {\r\n        userId,\r\n        sessionClaims,\r\n        roles,\r\n        isAuthenticated,\r\n        isAuthorized,\r\n        error: errorResponse('Insufficient permissions', HttpStatus.FORBIDDEN, 'FORBIDDEN', {\r\n          requiredRoles,\r\n        }),\r\n      }\r\n    }\r\n\r\n    // Authentication and authorization successful\r\n    return {\r\n      userId,\r\n      sessionClaims,\r\n      roles,\r\n      isAuthenticated,\r\n      isAuthorized,\r\n    }\r\n  } catch (error) {\r\n    console.error('Authentication error:', error)\r\n\r\n    // Return authentication error\r\n    return {\r\n      userId: null,\r\n      sessionClaims: null,\r\n      roles: [],\r\n      isAuthenticated: false,\r\n      isAuthorized: false,\r\n      error: errorResponse(\r\n        'Authentication service error',\r\n        HttpStatus.SERVICE_UNAVAILABLE,\r\n        'AUTH_SERVICE_ERROR'\r\n      ),\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Higher-order function to wrap API route handlers with authentication\r\n * @param handler API route handler\r\n * @param options Authentication options\r\n * @returns Wrapped handler with authentication\r\n */\r\nexport function withAuth(\r\n  handler: (req: NextRequest, authResult: AuthResult) => Promise<NextResponse>,\r\n  options: AuthOptions = {}\r\n) {\r\n  return async (req: NextRequest): Promise<NextResponse> => {\r\n    try {\r\n      // Check authentication\r\n      const authResult = await checkAuth(req, options)\r\n\r\n      // If authentication failed, return error response\r\n      if (authResult.error) {\r\n        return authResult.error\r\n      }\r\n\r\n      // Call handler with authentication result\r\n      return await handler(req, authResult)\r\n    } catch (error) {\r\n      console.error('API route error:', error)\r\n\r\n      // Return generic error response\r\n      return errorResponse(\r\n        'An unexpected error occurred',\r\n        HttpStatus.INTERNAL_SERVER_ERROR,\r\n        'INTERNAL_SERVER_ERROR'\r\n      )\r\n    }\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\auth\\authUtils.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 10,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 10,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [381, 384], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [381, 384], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { auth } from '@clerk/nextjs/server'\r\nimport { NextResponse } from 'next/server'\r\n\r\n/**\r\n * Checks if a user has any of the allowed roles\r\n * @param sessionClaims The session claims object from Clerk auth\r\n * @param allowed Array of allowed role names\r\n * @returns Boolean indicating if the user has any of the allowed roles\r\n */\r\nexport function userHasRole(sessionClaims: any, allowed: string[]): boolean {\r\n  const roles = (sessionClaims?.roles as string[]) || []\r\n  return roles.some(role => allowed.includes(role))\r\n}\r\n\r\n/**\r\n * Validates user authentication and checks for specific roles\r\n * @param requiredRoles Array of roles that are allowed to access the resource\r\n * @returns Object containing authentication result and response (if auth failed)\r\n */\r\nexport async function validateUserRoles(requiredRoles: string[] = ['agent', 'admin']) {\r\n  // Get the user ID and authentication data from Clerk\r\n  const authResult = await auth()\r\n  const userId = authResult.userId\r\n  const { sessionClaims } = authResult\r\n\r\n  // Check if user is authenticated\r\n  if (!userId) {\r\n    console.warn('Unauthorized access attempt')\r\n    return {\r\n      isAuthorized: false,\r\n      userId: null,\r\n      response: NextResponse.json(\r\n        { message: 'Unauthorized - Authentication required' },\r\n        { status: 401 }\r\n      ),\r\n    }\r\n  }\r\n\r\n  // Check if user has any of the required roles\r\n  const hasRequiredRole = userHasRole(sessionClaims, requiredRoles)\r\n\r\n  if (!hasRequiredRole) {\r\n    console.warn(`User ${userId} attempted access without required role`)\r\n    return {\r\n      isAuthorized: false,\r\n      userId,\r\n      response: NextResponse.json(\r\n        {\r\n          message: 'Forbidden - Insufficient permissions',\r\n          details: `This action requires one of these roles: ${requiredRoles.join(', ')}`,\r\n        },\r\n        { status: 403 }\r\n      ),\r\n    }\r\n  }\r\n\r\n  return {\r\n    isAuthorized: true,\r\n    userId,\r\n    response: null,\r\n  }\r\n}\r\n\r\n/**\r\n * Validates user authentication and role permissions for property uploads\r\n * @returns Object containing authentication result and response (if auth failed)\r\n */\r\nexport async function validateUserAuth() {\r\n  // Use the more generic validateUserRoles function with default roles for property uploads\r\n  return validateUserRoles(['agent', 'admin'])\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\auth\\clerk-wrapper.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 176,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 176,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5237, 5240], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5237, 5240], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'user' is assigned a value but never used.",
        "line": 191,
        "column": 22,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 191,
        "endColumn": 26
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 287,
        "column": 20,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [9627, 9713],
              "text": "\r\n            You don&apos;t have the required permissions to access this page.\r\n          "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [9627, 9713],
              "text": "\r\n            You don&lsquo;t have the required permissions to access this page.\r\n          "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [9627, 9713],
              "text": "\r\n            You don&#39;t have the required permissions to access this page.\r\n          "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [9627, 9713],
              "text": "\r\n            You don&rsquo;t have the required permissions to access this page.\r\n          "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/auth/clerk-wrapper.tsx\r\nimport { ClerkProvider, useUser as useClerkUser, SignedIn, SignedOut, useAuth } from '@clerk/nextjs'\r\nimport { useRouter } from 'next/navigation'\r\nimport React, { useState, useEffect, useCallback, createContext, useContext } from 'react'\r\n\r\n// Define the authentication state\r\ninterface AuthState {\r\n  isLoaded: boolean\r\n  isSignedIn: boolean | null\r\n  isError: boolean\r\n  errorMessage: string | null\r\n  retryCount: number\r\n  isRetrying: boolean\r\n}\r\n\r\n// Define the authentication context\r\ninterface AuthContextType {\r\n  authState: AuthState\r\n  user: ReturnType<typeof useClerkUser>['user'] | null\r\n  retryAuth: () => void\r\n  signOut: () => Promise<void>\r\n  isAuthorized: (requiredRoles?: string[]) => boolean\r\n}\r\n\r\n// Create the authentication context\r\nconst AuthContext = createContext<AuthContextType | null>(null)\r\n\r\n// Custom hook to use the authentication context\r\nexport const useAuthWrapper = () => {\r\n  const context = useContext(AuthContext)\r\n  if (!context) {\r\n    throw new Error('useAuthWrapper must be used within an AuthProvider')\r\n  }\r\n  return context\r\n}\r\n\r\n// Authentication provider component\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const { isLoaded: clerkLoaded, isSignedIn, user } = useClerkUser()\r\n  const { signOut: clerkSignOut } = useAuth()\r\n  const router = useRouter()\r\n\r\n  // Authentication state\r\n  const [authState, setAuthState] = useState<AuthState>({\r\n    isLoaded: false,\r\n    isSignedIn: null,\r\n    isError: false,\r\n    errorMessage: null,\r\n    retryCount: 0,\r\n    isRetrying: false,\r\n  })\r\n\r\n  // Maximum number of retry attempts\r\n  const MAX_RETRY_ATTEMPTS = 3\r\n\r\n  // Retry authentication\r\n  const retryAuth = useCallback(() => {\r\n    if (authState.retryCount >= MAX_RETRY_ATTEMPTS) {\r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        isError: true,\r\n        errorMessage: 'Maximum retry attempts reached. Please refresh the page or try again later.',\r\n        isRetrying: false,\r\n      }))\r\n      return\r\n    }\r\n\r\n    setAuthState(prev => ({\r\n      ...prev,\r\n      isRetrying: true,\r\n      retryCount: prev.retryCount + 1,\r\n    }))\r\n\r\n    // Simulate a retry by forcing a re-render\r\n    // In a real app, you might want to call a specific Clerk method to refresh the session\r\n    setTimeout(() => {\r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        isRetrying: false,\r\n      }))\r\n    }, 1000)\r\n  }, [authState.retryCount])\r\n\r\n  // Sign out with error handling\r\n  const handleSignOut = useCallback(async () => {\r\n    try {\r\n      if (clerkSignOut) {\r\n        await clerkSignOut()\r\n        router.push('/')\r\n      }\r\n    } catch (error) {\r\n      console.error('Error signing out:', error)\r\n      // If sign out fails, we can still clear local state\r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        isSignedIn: false,\r\n        isError: true,\r\n        errorMessage: 'Failed to sign out properly. Please refresh the page.',\r\n      }))\r\n    }\r\n  }, [clerkSignOut, router])\r\n\r\n  // Check if user has required roles\r\n  const isAuthorized = useCallback(\r\n    (requiredRoles?: string[]) => {\r\n      if (!isSignedIn || !user) return false\r\n      if (!requiredRoles || requiredRoles.length === 0) return true\r\n\r\n      // Get user roles from public metadata\r\n      // This assumes roles are stored in publicMetadata.roles\r\n      const userRoles = (user.publicMetadata?.roles as string[]) || []\r\n\r\n      // Check if user has any of the required roles\r\n      return requiredRoles.some(role => userRoles.includes(role))\r\n    },\r\n    [isSignedIn, user]\r\n  )\r\n\r\n  // Update auth state when Clerk state changes\r\n  useEffect(() => {\r\n    // If Clerk is still loading, don't update state yet\r\n    if (!clerkLoaded) return\r\n\r\n    setAuthState(prev => ({\r\n      ...prev,\r\n      isLoaded: true,\r\n      isSignedIn,\r\n      // Clear error state if authentication succeeds\r\n      ...(isSignedIn && { isError: false, errorMessage: null }),\r\n    }))\r\n  }, [clerkLoaded, isSignedIn])\r\n\r\n  // Handle offline/online status\r\n  useEffect(() => {\r\n    const handleOnline = () => {\r\n      // When coming back online, check if we had an error and retry\r\n      if (authState.isError) {\r\n        retryAuth()\r\n      }\r\n    }\r\n\r\n    const handleOffline = () => {\r\n      // When going offline, set an appropriate error message\r\n      setAuthState(prev => ({\r\n        ...prev,\r\n        isError: true,\r\n        errorMessage: 'You are currently offline. Authentication services may be unavailable.',\r\n      }))\r\n    }\r\n\r\n    window.addEventListener('online', handleOnline)\r\n    window.addEventListener('offline', handleOffline)\r\n\r\n    return () => {\r\n      window.removeEventListener('online', handleOnline)\r\n      window.removeEventListener('offline', handleOffline)\r\n    }\r\n  }, [authState.isError, retryAuth])\r\n\r\n  // Context value\r\n  const contextValue: AuthContextType = {\r\n    authState,\r\n    user,\r\n    retryAuth,\r\n    signOut: handleSignOut,\r\n    isAuthorized,\r\n  }\r\n\r\n  return <AuthContext.Provider value={contextValue}>{children}</AuthContext.Provider>\r\n}\r\n\r\n// Enhanced ClerkProvider with error handling\r\nexport const EnhancedClerkProvider: React.FC<{\r\n  children: React.ReactNode\r\n  publishableKey?: string\r\n  appearance?: any\r\n}> = ({ children, publishableKey, appearance }) => {\r\n  return (\r\n    <ClerkProvider publishableKey={publishableKey} appearance={appearance}>\r\n      <AuthProvider>{children}</AuthProvider>\r\n    </ClerkProvider>\r\n  )\r\n}\r\n\r\n// Authentication required component\r\nexport const AuthRequired: React.FC<{\r\n  children: React.ReactNode\r\n  fallback?: React.ReactNode\r\n  requiredRoles?: string[]\r\n}> = ({ children, fallback, requiredRoles }) => {\r\n  const { authState, user, retryAuth, isAuthorized } = useAuthWrapper()\r\n\r\n  // If still loading, show loading state\r\n  if (!authState.isLoaded) {\r\n    return (\r\n      <div className=\"flex justify-center items-center min-h-screen\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-purple-700\"></div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // If authentication error, show error state with retry button\r\n  if (authState.isError) {\r\n    return (\r\n      <div className=\"flex flex-col justify-center items-center min-h-screen p-4\">\r\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-6 max-w-md text-center\">\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            className=\"h-12 w-12 text-red-500 mx-auto mb-4\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            stroke=\"currentColor\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth={2}\r\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"\r\n            />\r\n          </svg>\r\n          <h2 className=\"text-xl font-semibold text-red-700 mb-2\">Authentication Error</h2>\r\n          <p className=\"text-red-600 mb-4\">\r\n            {authState.errorMessage || 'There was a problem authenticating your account.'}\r\n          </p>\r\n          <button\r\n            onClick={retryAuth}\r\n            disabled={authState.isRetrying}\r\n            className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 disabled:opacity-50\"\r\n          >\r\n            {authState.isRetrying ? 'Retrying...' : 'Retry Authentication'}\r\n          </button>\r\n          <p className=\"mt-4 text-sm text-gray-600\">\r\n            If the problem persists, please try refreshing the page or contact support.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // If not signed in, show fallback or default message\r\n  if (!authState.isSignedIn) {\r\n    return (\r\n      <>\r\n        <SignedOut>\r\n          {fallback || (\r\n            <div className=\"flex flex-col justify-center items-center min-h-screen p-4\">\r\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-6 max-w-md text-center\">\r\n                <h2 className=\"text-xl font-semibold text-blue-700 mb-2\">\r\n                  Authentication Required\r\n                </h2>\r\n                <p className=\"text-blue-600 mb-4\">Please sign in to access this page.</p>\r\n                <a\r\n                  href=\"/sign-in\"\r\n                  className=\"inline-block px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\r\n                >\r\n                  Sign In\r\n                </a>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </SignedOut>\r\n      </>\r\n    )\r\n  }\r\n\r\n  // If roles are required but user doesn't have them\r\n  if (requiredRoles && requiredRoles.length > 0 && !isAuthorized(requiredRoles)) {\r\n    return (\r\n      <div className=\"flex flex-col justify-center items-center min-h-screen p-4\">\r\n        <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-6 max-w-md text-center\">\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            className=\"h-12 w-12 text-yellow-500 mx-auto mb-4\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            stroke=\"currentColor\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth={2}\r\n              d=\"M12 15v2m0 0v2m0-2h2m-2 0H9m3-3V9m0 0V7m0 2h2m-2 0H9\"\r\n            />\r\n          </svg>\r\n          <h2 className=\"text-xl font-semibold text-yellow-700 mb-2\">Access Denied</h2>\r\n          <p className=\"text-yellow-600 mb-4\">\r\n            You don't have the required permissions to access this page.\r\n          </p>\r\n          <a\r\n            href=\"/\"\r\n            className=\"inline-block px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2\"\r\n          >\r\n            Go to Home\r\n          </a>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // If signed in and authorized, show children\r\n  return <SignedIn>{children}</SignedIn>\r\n}\r\n\r\n// Export a hook for checking authorization\r\nexport const useAuthorization = () => {\r\n  const { isAuthorized } = useAuthWrapper()\r\n  return { isAuthorized }\r\n}\r\n\r\n// Export a hook for getting authentication state\r\nexport const useAuthentication = () => {\r\n  const { authState, user, retryAuth, signOut } = useAuthWrapper()\r\n  return {\r\n    isLoaded: authState.isLoaded,\r\n    isSignedIn: authState.isSignedIn,\r\n    isError: authState.isError,\r\n    errorMessage: authState.errorMessage,\r\n    isRetrying: authState.isRetrying,\r\n    user,\r\n    retryAuth,\r\n    signOut,\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\csv\\csvUtils.ts",
    "messages": [
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `info`. Check if you meant to write `import {info} from '../../lib/logging/logger'` instead.",
        "line": 124,
        "column": 3,
        "nodeType": "MemberExpression",
        "endLine": 124,
        "endColumn": 14
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `info`. Check if you meant to write `import {info} from '../../lib/logging/logger'` instead.",
        "line": 137,
        "column": 7,
        "nodeType": "MemberExpression",
        "endLine": 137,
        "endColumn": 18
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `info`. Check if you meant to write `import {info} from '../../lib/logging/logger'` instead.",
        "line": 144,
        "column": 5,
        "nodeType": "MemberExpression",
        "endLine": 144,
        "endColumn": 16
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `warn`. Check if you meant to write `import {warn} from '../../lib/logging/logger'` instead.",
        "line": 148,
        "column": 7,
        "nodeType": "MemberExpression",
        "endLine": 148,
        "endColumn": 18
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `error`. Check if you meant to write `import {error} from '../../lib/logging/logger'` instead.",
        "line": 160,
        "column": 5,
        "nodeType": "MemberExpression",
        "endLine": 160,
        "endColumn": 17
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `info`. Check if you meant to write `import {info} from '../../lib/logging/logger'` instead.",
        "line": 223,
        "column": 3,
        "nodeType": "MemberExpression",
        "endLine": 223,
        "endColumn": 14
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `warn`. Check if you meant to write `import {warn} from '../../lib/logging/logger'` instead.",
        "line": 228,
        "column": 7,
        "nodeType": "MemberExpression",
        "endLine": 228,
        "endColumn": 18
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `info`. Check if you meant to write `import {info} from '../../lib/logging/logger'` instead.",
        "line": 247,
        "column": 3,
        "nodeType": "MemberExpression",
        "endLine": 247,
        "endColumn": 14
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `warn`. Check if you meant to write `import {warn} from '../../lib/logging/logger'` instead.",
        "line": 259,
        "column": 9,
        "nodeType": "MemberExpression",
        "endLine": 259,
        "endColumn": 20
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `warn`. Check if you meant to write `import {warn} from '../../lib/logging/logger'` instead.",
        "line": 282,
        "column": 7,
        "nodeType": "MemberExpression",
        "endLine": 282,
        "endColumn": 18
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `info`. Check if you meant to write `import {info} from '../../lib/logging/logger'` instead.",
        "line": 300,
        "column": 3,
        "nodeType": "MemberExpression",
        "endLine": 300,
        "endColumn": 14
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `info`. Check if you meant to write `import {info} from '../../lib/logging/logger'` instead.",
        "line": 310,
        "column": 3,
        "nodeType": "MemberExpression",
        "endLine": 310,
        "endColumn": 14
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `debug`. Check if you meant to write `import {debug} from '../../lib/logging/logger'` instead.",
        "line": 334,
        "column": 3,
        "nodeType": "MemberExpression",
        "endLine": 334,
        "endColumn": 15
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `info`. Check if you meant to write `import {info} from '../../lib/logging/logger'` instead.",
        "line": 352,
        "column": 7,
        "nodeType": "MemberExpression",
        "endLine": 352,
        "endColumn": 18
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `info`. Check if you meant to write `import {info} from '../../lib/logging/logger'` instead.",
        "line": 371,
        "column": 11,
        "nodeType": "MemberExpression",
        "endLine": 371,
        "endColumn": 22
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `error`. Check if you meant to write `import {error} from '../../lib/logging/logger'` instead.",
        "line": 376,
        "column": 11,
        "nodeType": "MemberExpression",
        "endLine": 376,
        "endColumn": 23
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `info`. Check if you meant to write `import {info} from '../../lib/logging/logger'` instead.",
        "line": 388,
        "column": 7,
        "nodeType": "MemberExpression",
        "endLine": 388,
        "endColumn": 18
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `error`. Check if you meant to write `import {error} from '../../lib/logging/logger'` instead.",
        "line": 393,
        "column": 7,
        "nodeType": "MemberExpression",
        "endLine": 393,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 18,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import * as csvParse from 'csv-parse/sync'\r\nimport { NextResponse } from 'next/server'\r\n\r\nimport logger from '../../lib/logging/logger'\r\n\r\n// Security constants\r\nexport const MAX_FILE_SIZE = 10 * 1024 * 1024 // 10MB\r\nexport const VALID_FILENAME_REGEX = /^[\\w\\.-]+$/ // Only allow alphanumeric, underscore, dot, and hyphen\r\nexport const STREAMING_THRESHOLD = 5 * 1024 * 1024 // 5MB threshold for streaming\r\n\r\nexport interface CsvRecord {\r\n  [key: string]: string | number | boolean | null\r\n}\r\n\r\nexport interface CsvValidationResult {\r\n  isValid: boolean\r\n  records?: CsvRecord[]\r\n  response?: NextResponse\r\n}\r\n\r\n/**\r\n * Validates a file for CSV upload\r\n * @param file The file to validate\r\n * @returns Validation result with error response if invalid\r\n */\r\nexport function validateCsvFile(file: File): { isValid: boolean; response?: NextResponse } {\r\n  // Check if file exists\r\n  if (!file) {\r\n    return {\r\n      isValid: false,\r\n      response: NextResponse.json({ message: 'No file provided' }, { status: 400 }),\r\n    }\r\n  }\r\n\r\n  // Validate filename to prevent path traversal attacks\r\n  const fileName = file.name\r\n  if (!fileName.match(VALID_FILENAME_REGEX)) {\r\n    console.warn(`Rejected file with invalid filename: ${fileName}`)\r\n    return {\r\n      isValid: false,\r\n      response: NextResponse.json(\r\n        {\r\n          message: 'Invalid filename',\r\n          details: 'Filename can only contain letters, numbers, underscores, dots, and hyphens',\r\n        },\r\n        { status: 400 }\r\n      ),\r\n    }\r\n  }\r\n\r\n  // Validate file size\r\n  if (file.size > MAX_FILE_SIZE) {\r\n    console.warn(`Rejected oversized file: ${fileName} (${file.size} bytes)`)\r\n    return {\r\n      isValid: false,\r\n      response: NextResponse.json(\r\n        {\r\n          message: 'File too large',\r\n          details: `Maximum file size is ${MAX_FILE_SIZE / (1024 * 1024)}MB, received ${(\r\n            file.size /\r\n            (1024 * 1024)\r\n          ).toFixed(2)}MB`,\r\n        },\r\n        { status: 400 }\r\n      ),\r\n    }\r\n  }\r\n\r\n  // Check file type\r\n  if (!file.name.endsWith('.csv')) {\r\n    console.warn(`Rejected non-CSV file: ${fileName} (${file.type})`)\r\n    return {\r\n      isValid: false,\r\n      response: NextResponse.json(\r\n        {\r\n          message: 'Only CSV files are allowed',\r\n          details: 'Please upload a file with .csv extension',\r\n        },\r\n        { status: 400 }\r\n      ),\r\n    }\r\n  }\r\n\r\n  // Verify the file is not empty\r\n  if (file.size === 0) {\r\n    console.warn(`Rejected empty file: ${fileName} (0 bytes)`)\r\n    return {\r\n      isValid: false,\r\n      response: NextResponse.json(\r\n        {\r\n          message: 'File is empty',\r\n          details: 'The uploaded file contains no data',\r\n        },\r\n        { status: 400 }\r\n      ),\r\n    }\r\n  }\r\n\r\n  // Basic size validation\r\n  if (file.size < 10) {\r\n    // Arbitrary minimum for a valid CSV with headers\r\n    console.warn(`Rejected file with insufficient content: ${fileName} (${file.size} bytes)`)\r\n    return {\r\n      isValid: false,\r\n      response: NextResponse.json(\r\n        {\r\n          message: 'Invalid CSV content',\r\n          details: 'The file appears to be too small to be a valid CSV with headers',\r\n        },\r\n        { status: 400 }\r\n      ),\r\n    }\r\n  }\r\n\r\n  return { isValid: true }\r\n}\r\n\r\n/**\r\n * Parses a CSV file and returns the records\r\n * @param file The CSV file to parse\r\n * @returns Parsed records or error response\r\n */\r\nexport async function parseCsvFile(file: File): Promise<CsvValidationResult> {\r\n  logger.info(`Starting to process CSV file: ${file.name} (${file.size} bytes)`)\r\n\r\n  try {\r\n    let records: CsvRecord[] = []\r\n\r\n    // For files under the threshold, use the direct parsing approach\r\n    if (file.size < STREAMING_THRESHOLD) {\r\n      // Use the direct parsing approach for smaller files\r\n      const fileBuffer = await file.arrayBuffer()\r\n      const fileContent = new TextDecoder().decode(fileBuffer)\r\n\r\n      // Parse CSV\r\n      records = parseCsv(fileContent)\r\n      logger.info(`Parsed ${records.length} records from CSV file using direct parsing`)\r\n    } else {\r\n      // For larger files, use a chunked processing approach\r\n      records = await parseChunkedCsvFile(file)\r\n    }\r\n\r\n    // Log successful parsing\r\n    logger.info(`Successfully parsed CSV with ${records.length} records from file: ${file.name}`)\r\n\r\n    // Validate CSV structure\r\n    if (records.length === 0) {\r\n      logger.warn(`Rejected empty CSV file: ${file.name}`)\r\n      return {\r\n        isValid: false,\r\n        response: NextResponse.json(\r\n          { message: 'CSV file is empty. Please provide a file with at least one record.' },\r\n          { status: 400 }\r\n        ),\r\n      }\r\n    }\r\n\r\n    return { isValid: true, records }\r\n  } catch (error) {\r\n    logger.error(`Error parsing CSV file: ${file.name}`, error as Error)\r\n    return {\r\n      isValid: false,\r\n      response: NextResponse.json(\r\n        {\r\n          message: 'Failed to parse CSV file',\r\n          details: error instanceof Error ? error.message : 'Unknown error',\r\n        },\r\n        { status: 400 }\r\n      ),\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Parse a CSV string into records\r\n * @param content CSV content as string\r\n * @returns Parsed records\r\n */\r\nexport function parseCsv(content: string): CsvRecord[] {\r\n  return csvParse.parse(content, {\r\n    columns: true,\r\n    skipEmptyLines: true,\r\n    trim: true,\r\n  })\r\n}\r\n\r\n/**\r\n * Validates that a CSV record has all required headers\r\n * @param record The first record from the CSV to check headers\r\n * @param requiredFields Array of required field names\r\n * @returns Array of missing field names (empty if all fields are present)\r\n */\r\nexport function validateCsvHeaders(record: CsvRecord, requiredFields: string[]): string[] {\r\n  if (!record || typeof record !== 'object') {\r\n    return requiredFields // All fields are missing if record is invalid\r\n  }\r\n\r\n  const missingFields: string[] = []\r\n\r\n  for (const field of requiredFields) {\r\n    if (!(field in record)) {\r\n      missingFields.push(field)\r\n    }\r\n  }\r\n\r\n  return missingFields\r\n}\r\n\r\n/**\r\n * Validates that all required fields exist in the CSV records\r\n * @param records The CSV records to validate\r\n * @param requiredFields Array of required field names\r\n * @returns Validation result with error response if invalid\r\n */\r\nexport function validateCsvRecords(\r\n  records: CsvRecord[],\r\n  requiredFields: string[]\r\n): { isValid: boolean; response?: NextResponse } {\r\n  // First, check if all required fields exist in the CSV structure (using first record)\r\n  const firstRecord = records[0]\r\n\r\n  // Log the first record structure for debugging (excluding sensitive data)\r\n  logger.info('First record structure:', { fields: Object.keys(firstRecord) })\r\n\r\n  // Check if all required fields exist in the CSV structure\r\n  for (const field of requiredFields) {\r\n    if (!(field in firstRecord)) {\r\n      logger.warn(`CSV missing required field: ${field}`, {\r\n        availableFields: Object.keys(firstRecord),\r\n        requiredFields,\r\n      })\r\n      return {\r\n        isValid: false,\r\n        response: NextResponse.json(\r\n          {\r\n            message: `CSV is missing required field: ${field}`,\r\n            availableFields: Object.keys(firstRecord),\r\n            requiredFields: requiredFields,\r\n          },\r\n          { status: 400 }\r\n        ),\r\n      }\r\n    }\r\n  }\r\n\r\n  // Now validate all records to ensure consistency throughout the file\r\n  logger.info(`Validating all ${records.length} records for required fields...`)\r\n\r\n  for (let i = 0; i < records.length; i++) {\r\n    const record = records[i]\r\n\r\n    for (const field of requiredFields) {\r\n      if (\r\n        !(field in record) ||\r\n        record[field] === null ||\r\n        record[field] === undefined ||\r\n        record[field] === ''\r\n      ) {\r\n        logger.warn(`Record at index ${i} is missing required field \"${field}\"`, {\r\n          recordIndex: i,\r\n          fieldName: field,\r\n        })\r\n        return {\r\n          isValid: false,\r\n          response: NextResponse.json(\r\n            {\r\n              message: `Missing or empty required field \"${field}\" in record ${i + 1}`,\r\n              details: `All records must contain non-empty values for fields: ${requiredFields.join(\r\n                ', '\r\n              )}`,\r\n              recordIndex: i,\r\n              fieldName: field,\r\n            },\r\n            { status: 400 }\r\n          ),\r\n        }\r\n      }\r\n    }\r\n\r\n    // Validate price field is a valid number\r\n    if ('price' in record && isNaN(parseInt(String(record.price), 10))) {\r\n      logger.warn(`Record at index ${i} has invalid price value`, {\r\n        recordIndex: i,\r\n        priceValue: record.price,\r\n      })\r\n      return {\r\n        isValid: false,\r\n        response: NextResponse.json(\r\n          {\r\n            message: `Invalid price value in record ${i + 1}`,\r\n            details: `Price must be a valid number, found: \"${record.price}\"`,\r\n            recordIndex: i,\r\n          },\r\n          { status: 400 }\r\n        ),\r\n      }\r\n    }\r\n  }\r\n\r\n  logger.info('All records successfully validated for required fields')\r\n  return { isValid: true }\r\n}\r\n\r\n/**\r\n * Processes a large CSV file in chunks to avoid memory issues\r\n * @param file The large CSV file to process\r\n * @returns Array of parsed records\r\n */\r\nasync function parseChunkedCsvFile(file: File): Promise<CsvRecord[]> {\r\n  logger.info(`Using chunked processing for large file: ${file.name} (${file.size} bytes)`)\r\n\r\n  // Get the file as an ArrayBuffer but process it in chunks\r\n  const fileBuffer = await file.arrayBuffer()\r\n  const CHUNK_SIZE = 1024 * 1024 // 1MB chunks\r\n  const decoder = new TextDecoder()\r\n\r\n  let csvContent = ''\r\n  let processedBytes = 0\r\n  let records: CsvRecord[] = []\r\n\r\n  // Process the first chunk to extract headers\r\n  const firstChunkSize = Math.min(CHUNK_SIZE, fileBuffer.byteLength)\r\n  const firstChunk = new Uint8Array(fileBuffer, 0, firstChunkSize)\r\n  const firstChunkText = decoder.decode(firstChunk, { stream: true })\r\n\r\n  // Extract the header row\r\n  const headerEndIndex = firstChunkText.indexOf('\\n')\r\n  if (headerEndIndex === -1) {\r\n    throw new Error('Could not find header row in CSV file')\r\n  }\r\n\r\n  // We only need to extract the header to validate the file structure\r\n  const headerLine = firstChunkText.substring(0, headerEndIndex).trim()\r\n  logger.debug('CSV header line extracted', { headerLine })\r\n\r\n  csvContent = firstChunkText\r\n  processedBytes = firstChunkSize\r\n\r\n  // Process the rest of the file in chunks\r\n  while (processedBytes < fileBuffer.byteLength) {\r\n    const chunkSize = Math.min(CHUNK_SIZE, fileBuffer.byteLength - processedBytes)\r\n    const chunk = new Uint8Array(fileBuffer, processedBytes, chunkSize)\r\n    const chunkText = decoder.decode(chunk, {\r\n      stream: processedBytes + chunkSize < fileBuffer.byteLength,\r\n    })\r\n\r\n    csvContent += chunkText\r\n    processedBytes += chunkSize\r\n\r\n    // Log progress for very large files\r\n    if (processedBytes % (10 * CHUNK_SIZE) === 0) {\r\n      logger.info(`Processed ${processedBytes} of ${fileBuffer.byteLength} bytes`, {\r\n        processedBytes,\r\n        totalBytes: fileBuffer.byteLength,\r\n        percentComplete: Math.round((processedBytes / fileBuffer.byteLength) * 100),\r\n      })\r\n    }\r\n\r\n    // If we've accumulated enough data, parse and clear the buffer\r\n    if (csvContent.length > 5 * CHUNK_SIZE) {\r\n      // Make sure we break at a newline to avoid splitting records\r\n      const lastNewlineIndex = csvContent.lastIndexOf('\\n')\r\n      if (lastNewlineIndex !== -1) {\r\n        const contentToParse = csvContent.substring(0, lastNewlineIndex + 1)\r\n        csvContent = csvContent.substring(lastNewlineIndex + 1)\r\n\r\n        // Parse this chunk of CSV data\r\n        try {\r\n          const chunkRecords = parseCsv(contentToParse)\r\n          records = records.concat(chunkRecords)\r\n          logger.info(`Parsed records from chunk`, {\r\n            chunkRecords: chunkRecords.length,\r\n            totalRecords: records.length,\r\n          })\r\n        } catch (chunkError) {\r\n          logger.error('Error parsing CSV chunk', chunkError as Error)\r\n          throw chunkError\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Parse any remaining content\r\n  if (csvContent.length > 0) {\r\n    try {\r\n      const finalRecords = parseCsv(csvContent)\r\n      records = records.concat(finalRecords)\r\n      logger.info(`Parsed records from final chunk`, {\r\n        finalRecords: finalRecords.length,\r\n        totalRecords: records.length,\r\n      })\r\n    } catch (finalError) {\r\n      logger.error('Error parsing final CSV chunk', finalError as Error)\r\n      throw finalError\r\n    }\r\n  }\r\n\r\n  return records\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\db.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\db\\connection-manager.ts",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module '../../drizzle/schema'.",
        "line": 5,
        "column": 25,
        "nodeType": "Literal",
        "endLine": 5,
        "endColumn": 47
      },
      {
        "ruleId": "@typescript-eslint/no-empty-object-type",
        "severity": 2,
        "message": "The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.",
        "line": 15,
        "column": 32,
        "nodeType": "TSTypeLiteral",
        "messageId": "noEmptyObject",
        "endLine": 15,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "replaceEmptyObjectType",
            "data": { "replacement": "object" },
            "fix": { "range": [473, 475], "text": "object" },
            "desc": "Replace `{}` with `object`."
          },
          {
            "messageId": "replaceEmptyObjectType",
            "data": { "replacement": "unknown" },
            "fix": { "range": [473, 475], "text": "unknown" },
            "desc": "Replace `{}` with `unknown`."
          }
        ]
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'idle_timeout' is not in camel case.",
        "line": 62,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 62,
        "endColumn": 21
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'connect_timeout' is not in camel case.",
        "line": 63,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 63,
        "endColumn": 24
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'max_lifetime' is not in camel case.",
        "line": 64,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 64,
        "endColumn": 21
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 65,
        "column": 57,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 65,
        "endColumn": 68
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 66,
        "column": 29,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 66,
        "endColumn": 40
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 68,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 68,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2321, 2362], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 80,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 80,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2639, 2698], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 160,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 160,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [4778, 4819], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 184,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 184,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [5461, 5557], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 190,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 190,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [5668, 5805], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 194,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 194,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [5848, 5895], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// db/connection-manager.ts\r\nimport { drizzle } from 'drizzle-orm/postgres-js'\r\nimport postgres from 'postgres'\r\n\r\nimport * as schema from '../../drizzle/schema'\r\n\r\nimport { DatabaseConnectionError } from './error-handler'\r\n\r\n// Connection pool status\r\ntype ConnectionStatus = 'INITIALIZING' | 'CONNECTED' | 'DISCONNECTED' | 'ERROR'\r\n\r\n// Connection manager singleton\r\nclass ConnectionManager {\r\n  private static instance: ConnectionManager\r\n  private client: postgres.Sql<{}> | null = null\r\n  private status: ConnectionStatus = 'INITIALIZING'\r\n  private connectionError: Error | null = null\r\n  private reconnectAttempts = 0\r\n  private maxReconnectAttempts = 10\r\n  private reconnectDelay = 1000 // Start with 1 second\r\n  private reconnectTimer: NodeJS.Timeout | null = null\r\n  private healthCheckInterval: NodeJS.Timeout | null = null\r\n\r\n  private constructor() {\r\n    // Private constructor to enforce singleton pattern\r\n  }\r\n\r\n  public static getInstance(): ConnectionManager {\r\n    if (!ConnectionManager.instance) {\r\n      ConnectionManager.instance = new ConnectionManager()\r\n    }\r\n    return ConnectionManager.instance\r\n  }\r\n\r\n  /**\r\n   * Initialize the database connection\r\n   * @param connectionString Database connection string\r\n   * @param options Connection options\r\n   */\r\n  public async initialize(\r\n    connectionString: string = process.env.DATABASE_URL || '',\r\n    options: {\r\n      ssl?: boolean\r\n      max?: number\r\n      idle_timeout?: number\r\n      connect_timeout?: number\r\n      max_lifetime?: number\r\n      healthCheckIntervalMs?: number\r\n    } = {}\r\n  ): Promise<void> {\r\n    if (!connectionString) {\r\n      throw new DatabaseConnectionError('DATABASE_URL is not defined')\r\n    }\r\n\r\n    try {\r\n      this.status = 'INITIALIZING'\r\n\r\n      // Create postgres connection with connection pooling\r\n      this.client = postgres(connectionString, {\r\n        ssl: options.ssl ?? process.env.NODE_ENV === 'production',\r\n        max: options.max ?? 10,\r\n        idle_timeout: options.idle_timeout ?? 30,\r\n        connect_timeout: options.connect_timeout ?? 10,\r\n        max_lifetime: options.max_lifetime ?? 60 * 60,\r\n        debug: process.env.NODE_ENV === 'development' ? console.log : undefined,\r\n        onnotice: notice => console.log('Database notice:', notice),\r\n        onclose: () => {\r\n          console.log('Database connection closed')\r\n          this.status = 'DISCONNECTED'\r\n          this.scheduleReconnect()\r\n        },\r\n      })\r\n\r\n      // Test the connection\r\n      await this.client`SELECT 1`\r\n\r\n      this.status = 'CONNECTED'\r\n      this.connectionError = null\r\n      this.reconnectAttempts = 0\r\n      console.log('Database connection established successfully')\r\n\r\n      // Start health check interval\r\n      this.startHealthCheck(options.healthCheckIntervalMs ?? 30000)\r\n    } catch (error) {\r\n      this.status = 'ERROR'\r\n      this.connectionError = error instanceof Error ? error : new Error(String(error))\r\n\r\n      // Use detailed error message for better debugging\r\n      console.error('Failed to initialize database connection:', error)\r\n\r\n      // Schedule reconnect\r\n      this.scheduleReconnect()\r\n\r\n      // The DatabaseConnectionError constructor will use createDetailedDbConnectionErrorMessage\r\n      // to generate a detailed error message that includes connection details\r\n      throw new DatabaseConnectionError('Failed to initialize database connection', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the database client\r\n   * @returns Drizzle ORM instance\r\n   */\r\n  public getDb() {\r\n    if (!this.client || this.status !== 'CONNECTED') {\r\n      throw new DatabaseConnectionError(\r\n        'Database connection is not available',\r\n        this.connectionError || undefined\r\n      )\r\n    }\r\n\r\n    return drizzle(this.client, { schema })\r\n  }\r\n\r\n  /**\r\n   * Get the raw postgres client\r\n   * @returns Postgres client\r\n   */\r\n  public getRawClient() {\r\n    if (!this.client || this.status !== 'CONNECTED') {\r\n      throw new DatabaseConnectionError(\r\n        'Database connection is not available',\r\n        this.connectionError || undefined\r\n      )\r\n    }\r\n\r\n    return this.client\r\n  }\r\n\r\n  /**\r\n   * Get the current connection status\r\n   * @returns Connection status\r\n   */\r\n  public getStatus(): ConnectionStatus {\r\n    return this.status\r\n  }\r\n\r\n  /**\r\n   * Get the last connection error\r\n   * @returns Connection error or null\r\n   */\r\n  public getError(): Error | null {\r\n    return this.connectionError\r\n  }\r\n\r\n  /**\r\n   * Close the database connection\r\n   */\r\n  public async close(): Promise<void> {\r\n    this.stopHealthCheck()\r\n\r\n    if (this.reconnectTimer) {\r\n      clearTimeout(this.reconnectTimer)\r\n      this.reconnectTimer = null\r\n    }\r\n\r\n    if (this.client) {\r\n      try {\r\n        await this.client.end()\r\n        console.log('Database connection closed')\r\n      } catch (error) {\r\n        console.error('Error closing database connection:', error)\r\n      } finally {\r\n        this.client = null\r\n        this.status = 'DISCONNECTED'\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Schedule a reconnection attempt\r\n   */\r\n  private scheduleReconnect(): void {\r\n    if (this.reconnectTimer) {\r\n      clearTimeout(this.reconnectTimer)\r\n    }\r\n\r\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n      console.error(`Max reconnect attempts (${this.maxReconnectAttempts}) reached. Giving up.`)\r\n      return\r\n    }\r\n\r\n    const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts)\r\n    console.log(`Scheduling database reconnect attempt ${this.reconnectAttempts + 1} in ${delay}ms`)\r\n\r\n    this.reconnectTimer = setTimeout(async () => {\r\n      this.reconnectAttempts++\r\n\r\n      try {\r\n        console.log(\r\n          `Attempting to reconnect to database (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})`\r\n        )\r\n        await this.initialize()\r\n        console.log('Database reconnection successful')\r\n      } catch (error) {\r\n        console.error('Database reconnection failed:', error)\r\n        this.scheduleReconnect()\r\n      }\r\n    }, delay)\r\n  }\r\n\r\n  /**\r\n   * Start periodic health checks\r\n   * @param intervalMs Interval in milliseconds\r\n   */\r\n  private startHealthCheck(intervalMs: number): void {\r\n    this.stopHealthCheck()\r\n\r\n    this.healthCheckInterval = setInterval(async () => {\r\n      if (this.status !== 'CONNECTED' || !this.client) {\r\n        return\r\n      }\r\n\r\n      try {\r\n        // Simple query to check connection\r\n        await this.client`SELECT 1`\r\n      } catch (error) {\r\n        console.error('Database health check failed:', error)\r\n        this.status = 'ERROR'\r\n        this.connectionError = error instanceof Error ? error : new Error(String(error))\r\n\r\n        // Try to close the connection and reconnect\r\n        await this.close()\r\n        this.scheduleReconnect()\r\n      }\r\n    }, intervalMs)\r\n  }\r\n\r\n  /**\r\n   * Stop health checks\r\n   */\r\n  private stopHealthCheck(): void {\r\n    if (this.healthCheckInterval) {\r\n      clearInterval(this.healthCheckInterval)\r\n      this.healthCheckInterval = null\r\n    }\r\n  }\r\n}\r\n\r\n// Export the singleton instance\r\nexport const connectionManager = ConnectionManager.getInstance()\r\n\r\n/**\r\n * Initialize the database connection\r\n * @param connectionString Database connection string\r\n * @param options Connection options\r\n */\r\nexport async function initializeDatabase(\r\n  connectionString?: string,\r\n  options?: {\r\n    ssl?: boolean\r\n    max?: number\r\n    idle_timeout?: number\r\n    connect_timeout?: number\r\n    max_lifetime?: number\r\n    healthCheckIntervalMs?: number\r\n  }\r\n): Promise<void> {\r\n  await connectionManager.initialize(connectionString, options)\r\n}\r\n\r\n/**\r\n * Get the database client\r\n * @returns Drizzle ORM instance\r\n */\r\nexport function getDb() {\r\n  return connectionManager.getDb()\r\n}\r\n\r\n/**\r\n * Close the database connection\r\n */\r\nexport async function closeDatabase(): Promise<void> {\r\n  await connectionManager.close()\r\n}\r\n\r\n/**\r\n * Get the database connection status\r\n * @returns Connection status\r\n */\r\nexport function getDatabaseStatus(): {\r\n  status: 'INITIALIZING' | 'CONNECTED' | 'DISCONNECTED' | 'ERROR'\r\n  error: Error | null\r\n} {\r\n  return {\r\n    status: connectionManager.getStatus(),\r\n    error: connectionManager.getError(),\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\db\\error-handler.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\db\\error-utils.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 47,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 47,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1211, 1214], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1211, 1214], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 102,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 102,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2977, 2980], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2977, 2980], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 133,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 133,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3838, 3841], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3838, 3841], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 147,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 147,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4272, 4275], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4272, 4275], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\r\n * Database error handling utilities\r\n */\r\n\r\nimport { normalizeError } from '../error/error-utils'\r\n\r\n/**\r\n * Error codes that might be present in database connection errors\r\n */\r\nexport enum DbErrorCode {\r\n  CONNECTION_REFUSED = 'ECONNREFUSED',\r\n  CONNECTION_RESET = 'ECONNRESET',\r\n  CONNECTION_TIMEOUT = 'ETIMEDOUT',\r\n  HOST_NOT_FOUND = 'ENOTFOUND',\r\n  AUTHENTICATION_FAILED = 'AUTHENTICATION_FAILED',\r\n  PERMISSION_DENIED = 'PERMISSION_DENIED',\r\n  DATABASE_NOT_FOUND = 'DATABASE_NOT_FOUND',\r\n}\r\n\r\n/**\r\n * Interface for database error details\r\n */\r\nexport interface DbErrorDetails {\r\n  message: string\r\n  code?: string\r\n  errno?: number\r\n  sqlState?: string\r\n  host?: string\r\n  port?: number\r\n  database?: string\r\n  user?: string\r\n  query?: string\r\n  stack?: string\r\n}\r\n\r\n/**\r\n * Creates a detailed database connection error message\r\n * @param err The original error object\r\n * @returns A detailed error message string\r\n */\r\nexport function createDetailedDbConnectionErrorMessage(err: unknown): string {\r\n  // Handle case where err is not an object\r\n  if (!err || typeof err !== 'object') {\r\n    return `Database connection error: ${normalizeError(err)}`\r\n  }\r\n\r\n  const errorObj = err as Record<string, any>\r\n  const details: DbErrorDetails = {\r\n    message: errorObj.message || 'Unknown error',\r\n    code: errorObj.code,\r\n    errno: errorObj.errno,\r\n    sqlState: errorObj.sqlState,\r\n    host: errorObj.host || errorObj.address,\r\n    port: errorObj.port,\r\n    database: errorObj.database,\r\n    user: errorObj.user,\r\n  }\r\n\r\n  // Build a detailed error message\r\n  let errorMessage = `Database connection error: ${details.message}`\r\n\r\n  // Add error code if available\r\n  if (details.code) {\r\n    errorMessage += ` (Code: ${details.code})`\r\n  }\r\n\r\n  // Add connection details if available\r\n  const connectionDetails = []\r\n  if (details.host) connectionDetails.push(`Host: ${details.host}`)\r\n  if (details.port) connectionDetails.push(`Port: ${details.port}`)\r\n  if (details.database) connectionDetails.push(`Database: ${details.database}`)\r\n  if (details.user) connectionDetails.push(`User: ${details.user}`)\r\n\r\n  if (connectionDetails.length > 0) {\r\n    errorMessage += ` | Connection details: ${connectionDetails.join(', ')}`\r\n  }\r\n\r\n  // Add SQL state if available (useful for SQL standard errors)\r\n  if (details.sqlState) {\r\n    errorMessage += ` | SQL State: ${details.sqlState}`\r\n  }\r\n\r\n  return errorMessage\r\n}\r\n\r\n/**\r\n * Creates a structured error object for database connection errors\r\n * @param err The original error object\r\n * @returns A structured error object with detailed information\r\n */\r\nexport function createDbConnectionErrorObject(\r\n  err: unknown\r\n): DbErrorDetails & { originalError: unknown } {\r\n  // Handle case where err is not an object\r\n  if (!err || typeof err !== 'object') {\r\n    return {\r\n      message: `Database connection error: ${normalizeError(err)}`,\r\n      originalError: err,\r\n    }\r\n  }\r\n\r\n  const errorObj = err as Record<string, any>\r\n  const details: DbErrorDetails = {\r\n    message: errorObj.message || 'Unknown error',\r\n    code: errorObj.code,\r\n    errno: errorObj.errno,\r\n    sqlState: errorObj.sqlState,\r\n    host: errorObj.host || errorObj.address,\r\n    port: errorObj.port,\r\n    database: errorObj.database,\r\n    user: errorObj.user,\r\n    stack: errorObj.stack,\r\n  }\r\n\r\n  // Add the original error for reference\r\n  return {\r\n    ...details,\r\n    originalError: err,\r\n  }\r\n}\r\n\r\n/**\r\n * Determines if an error is a specific type of database error\r\n * @param err The error to check\r\n * @param errorCode The error code to check for\r\n * @returns True if the error matches the specified code\r\n */\r\nexport function isDbErrorOfType(err: unknown, errorCode: DbErrorCode): boolean {\r\n  if (!err || typeof err !== 'object') {\r\n    return false\r\n  }\r\n\r\n  const errorObj = err as Record<string, any>\r\n  return errorObj.code === errorCode\r\n}\r\n\r\n/**\r\n * Provides a user-friendly message for common database errors\r\n * @param err The database error\r\n * @returns A user-friendly error message\r\n */\r\nexport function getUserFriendlyDbErrorMessage(err: unknown): string {\r\n  if (!err || typeof err !== 'object') {\r\n    return 'Unable to connect to the database. Please try again later.'\r\n  }\r\n\r\n  const errorObj = err as Record<string, any>\r\n  const code = errorObj.code\r\n\r\n  switch (code) {\r\n    case DbErrorCode.CONNECTION_REFUSED:\r\n      return 'Database server is not accepting connections. Please check if the database server is running.'\r\n    case DbErrorCode.CONNECTION_RESET:\r\n      return 'Database connection was reset. This might be due to network issues or server restart.'\r\n    case DbErrorCode.CONNECTION_TIMEOUT:\r\n      return 'Database connection timed out. Please check network connectivity and server load.'\r\n    case DbErrorCode.HOST_NOT_FOUND:\r\n      return 'Database host not found. Please check the hostname and DNS configuration.'\r\n    case DbErrorCode.AUTHENTICATION_FAILED:\r\n      return 'Failed to authenticate with the database. Please check credentials.'\r\n    case DbErrorCode.PERMISSION_DENIED:\r\n      return 'Permission denied when connecting to database. Please check user permissions.'\r\n    case DbErrorCode.DATABASE_NOT_FOUND:\r\n      return 'The specified database was not found on the server.'\r\n    default:\r\n      return `Database error: ${errorObj.message || 'Unknown error'}`\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\db\\generate-embeddings.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 10,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 10,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [189, 257], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 12,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 12,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [304, 362], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import dotenv from 'dotenv'\r\n\r\nimport { processAllMissingEmbeddings } from './property-processor'\r\n\r\n// Load environment variables\r\ndotenv.config()\r\n\r\nasync function main() {\r\n  try {\r\n    console.log('Starting to generate embeddings for all properties...')\r\n    await processAllMissingEmbeddings()\r\n    console.log('Embedding generation completed successfully')\r\n  } catch (error) {\r\n    console.error('Error generating embeddings:', error)\r\n    process.exit(1)\r\n  }\r\n}\r\n\r\n// Run the script\r\nmain()\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\db\\getFavorites.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\db\\getNearby.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\db\\getProperties.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\db\\index.ts",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module '../../drizzle/schema'.",
        "line": 3,
        "column": 25,
        "nodeType": "Literal",
        "endLine": 3,
        "endColumn": 47
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'connectionManager' is defined but never used.",
        "line": 6,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 20
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'idle_timeout' is not in camel case.",
        "line": 26,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 26,
        "endColumn": 21
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'connect_timeout' is not in camel case.",
        "line": 27,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 27,
        "endColumn": 24
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'max_lifetime' is not in camel case.",
        "line": 28,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 28,
        "endColumn": 21
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 108,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 108,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [3157, 3225], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import * as dotenv from 'dotenv'\r\n\r\nimport * as schema from '../../drizzle/schema'\r\n\r\nimport {\r\n  connectionManager,\r\n  getDb,\r\n  initializeDatabase,\r\n  closeDatabase,\r\n  getDatabaseStatus,\r\n} from './connection-manager'\r\nimport { DatabaseConnectionError } from './error-handler'\r\n\r\n// Load environment variables\r\ndotenv.config()\r\n\r\n// Initialize the database connection\r\ntry {\r\n  // This will be executed when this module is imported\r\n  // We use a self-invoking async function to handle the async initialization\r\n  ;(async () => {\r\n    try {\r\n      await initializeDatabase(process.env.DATABASE_URL, {\r\n        ssl: process.env.NODE_ENV === 'production',\r\n        max: 10, // Default pool size\r\n        idle_timeout: 30, // 30 seconds\r\n        connect_timeout: 10, // 10 seconds\r\n        max_lifetime: 60 * 60, // 1 hour\r\n        healthCheckIntervalMs: 30000, // 30 seconds\r\n      })\r\n    } catch (error) {\r\n      console.error('Database initialization error:', error)\r\n      // We don't throw here to allow the application to start\r\n      // The connection manager will attempt to reconnect\r\n    }\r\n  })()\r\n} catch (error) {\r\n  console.error('Error in database initialization:', error)\r\n}\r\n\r\n// Export the database client\r\n// This will throw an error if the connection is not available\r\n// Consumers should handle this error appropriately\r\nexport const db = getDb()\r\n\r\n// Export schema for convenience\r\nexport { schema }\r\n\r\n// Export connection management functions\r\nexport { initializeDatabase, closeDatabase, getDatabaseStatus }\r\n\r\n/**\r\n * Check if the database connection is healthy\r\n * @returns True if the connection is healthy, false otherwise\r\n */\r\nexport function isDatabaseHealthy(): boolean {\r\n  const status = getDatabaseStatus()\r\n  return status.status === 'CONNECTED'\r\n}\r\n\r\n/**\r\n * Get a database client with connection check\r\n * @param throwOnError Whether to throw an error if the connection is not available\r\n * @returns Database client or null if not available and throwOnError is false\r\n */\r\nexport function getDatabase(throwOnError = true) {\r\n  try {\r\n    return getDb()\r\n  } catch (error) {\r\n    if (throwOnError) {\r\n      throw error\r\n    }\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * Execute a function with a database connection\r\n * @param fn Function to execute with the database connection\r\n * @param retries Number of retries if the connection fails\r\n * @returns Result of the function\r\n */\r\nexport async function withDatabase<T>(\r\n  fn: (db: ReturnType<typeof getDb>) => Promise<T>,\r\n  retries = 3\r\n): Promise<T> {\r\n  let lastError: Error | null = null\r\n\r\n  for (let attempt = 0; attempt <= retries; attempt++) {\r\n    try {\r\n      const database = getDb()\r\n      return await fn(database)\r\n    } catch (error) {\r\n      lastError = error instanceof Error ? error : new Error(String(error))\r\n\r\n      // If it's not a connection error, just throw it\r\n      if (!(error instanceof DatabaseConnectionError)) {\r\n        throw error\r\n      }\r\n\r\n      // Don't retry if we've reached max retries\r\n      if (attempt === retries) {\r\n        break\r\n      }\r\n\r\n      // Wait before retrying\r\n      const delay = 1000 * Math.pow(2, attempt)\r\n      console.log(`Database connection failed, retrying in ${delay}ms...`)\r\n      await new Promise(resolve => setTimeout(resolve, delay))\r\n    }\r\n  }\r\n\r\n  throw (\r\n    lastError || new DatabaseConnectionError('Failed to execute database operation after retries')\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\db\\nextjs-utils.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 16,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 16,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [361, 364], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [361, 364], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 22,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 22,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [470, 473], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [470, 473], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 50,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 50,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1135, 1138], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1135, 1138], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// db/nextjs-utils.ts\r\nimport { NextRequest, NextResponse } from 'next/server'\r\n\r\nimport {\r\n  DatabaseConnectionError,\r\n  DatabaseQueryError,\r\n  DatabaseConstraintError,\r\n  DatabaseTimeoutError,\r\n} from './error-handler'\r\n\r\nimport { isDatabaseHealthy, getDatabaseStatus, withDatabase } from './index'\r\n\r\n/**\r\n * Type for API response\r\n */\r\ntype ApiResponse<T = any> = {\r\n  success: boolean\r\n  data?: T\r\n  error?: {\r\n    message: string\r\n    code?: string\r\n    details?: any\r\n  }\r\n}\r\n\r\n/**\r\n * Create a successful API response\r\n * @param data The data to include in the response\r\n * @returns A NextResponse with standardized format\r\n */\r\nexport function successResponse<T>(data: T): NextResponse<ApiResponse<T>> {\r\n  return NextResponse.json({\r\n    success: true,\r\n    data,\r\n  })\r\n}\r\n\r\n/**\r\n * Create an error API response\r\n * @param message Error message\r\n * @param status HTTP status code\r\n * @param code Optional error code\r\n * @param details Optional error details\r\n * @returns A NextResponse with standardized format\r\n */\r\nexport function errorResponse(\r\n  message: string,\r\n  status: number = 500,\r\n  code?: string,\r\n  details?: any\r\n): NextResponse<ApiResponse<never>> {\r\n  return NextResponse.json(\r\n    {\r\n      success: false,\r\n      error: {\r\n        message,\r\n        ...(code && { code }),\r\n        ...(details && { details }),\r\n      },\r\n    },\r\n    { status }\r\n  )\r\n}\r\n\r\n/**\r\n * HTTP status codes for common API responses\r\n */\r\nexport const HttpStatus = {\r\n  OK: 200,\r\n  CREATED: 201,\r\n  NO_CONTENT: 204,\r\n  BAD_REQUEST: 400,\r\n  UNAUTHORIZED: 401,\r\n  FORBIDDEN: 403,\r\n  NOT_FOUND: 404,\r\n  METHOD_NOT_ALLOWED: 405,\r\n  CONFLICT: 409,\r\n  UNPROCESSABLE_ENTITY: 422,\r\n  INTERNAL_SERVER_ERROR: 500,\r\n  SERVICE_UNAVAILABLE: 503,\r\n  GATEWAY_TIMEOUT: 504,\r\n} as const\r\n\r\n/**\r\n * Check database health before processing requests\r\n * @param req Next.js request\r\n * @returns NextResponse if database is unhealthy, null otherwise\r\n */\r\nexport function checkDatabaseHealth(req: NextRequest): NextResponse | null {\r\n  // Skip health check endpoint\r\n  if (req.nextUrl.pathname === '/api/health' || req.nextUrl.pathname.startsWith('/api/health/')) {\r\n    return null\r\n  }\r\n\r\n  if (!isDatabaseHealthy()) {\r\n    const status = getDatabaseStatus()\r\n\r\n    // Return 503 Service Unavailable\r\n    return errorResponse(\r\n      'Database service is currently unavailable',\r\n      HttpStatus.SERVICE_UNAVAILABLE,\r\n      'DATABASE_UNAVAILABLE',\r\n      {\r\n        status: status.status,\r\n        error: status.error ? status.error.message : null,\r\n      }\r\n    )\r\n  }\r\n\r\n  return null\r\n}\r\n\r\n/**\r\n * Handle database errors in Next.js API routes\r\n * @param error The error to handle\r\n * @returns NextResponse with appropriate error details\r\n */\r\nexport function handleDatabaseError(error: unknown): NextResponse {\r\n  // Handle database connection errors\r\n  if (error instanceof DatabaseConnectionError) {\r\n    console.error('Database connection error:', error)\r\n    return errorResponse(\r\n      'Database connection error',\r\n      HttpStatus.SERVICE_UNAVAILABLE,\r\n      'DATABASE_CONNECTION_ERROR'\r\n    )\r\n  }\r\n\r\n  // Handle database constraint errors\r\n  if (error instanceof DatabaseConstraintError) {\r\n    console.error('Database constraint error:', error)\r\n    return errorResponse(\r\n      'Database constraint violation',\r\n      HttpStatus.BAD_REQUEST,\r\n      'DATABASE_CONSTRAINT_ERROR',\r\n      {\r\n        constraint: error.constraint,\r\n      }\r\n    )\r\n  }\r\n\r\n  // Handle database timeout errors\r\n  if (error instanceof DatabaseTimeoutError) {\r\n    console.error('Database timeout error:', error)\r\n    return errorResponse(\r\n      'Database operation timed out',\r\n      HttpStatus.GATEWAY_TIMEOUT,\r\n      'DATABASE_TIMEOUT_ERROR'\r\n    )\r\n  }\r\n\r\n  // Handle database query errors\r\n  if (error instanceof DatabaseQueryError) {\r\n    console.error('Database query error:', error)\r\n    return errorResponse(\r\n      'Database query error',\r\n      HttpStatus.INTERNAL_SERVER_ERROR,\r\n      'DATABASE_QUERY_ERROR'\r\n    )\r\n  }\r\n\r\n  // Handle other errors\r\n  console.error('Unhandled error:', error)\r\n  return errorResponse(\r\n    'An unexpected error occurred',\r\n    HttpStatus.INTERNAL_SERVER_ERROR,\r\n    'INTERNAL_SERVER_ERROR'\r\n  )\r\n}\r\n\r\n/**\r\n * Higher-order function to wrap Next.js API route handlers with database error handling\r\n * @param handler The API route handler\r\n * @returns A wrapped handler with database error handling\r\n */\r\nexport function withDatabaseHandler(handler: (req: NextRequest) => Promise<NextResponse>) {\r\n  return async (req: NextRequest) => {\r\n    // Check database health\r\n    const healthCheck = checkDatabaseHealth(req)\r\n    if (healthCheck) {\r\n      return healthCheck\r\n    }\r\n\r\n    try {\r\n      // Execute the handler with database connection\r\n      return await withDatabase(async () => {\r\n        return await handler(req)\r\n      })\r\n    } catch (error) {\r\n      return handleDatabaseError(error)\r\n    }\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\db\\property-processor.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 18,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 18,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [582, 585], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [582, 585], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 58,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 58,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1710, 1771], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 65,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 65,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1921, 1988], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 84,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 84,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2539, 2617], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 98,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 98,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2884, 2964], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 126,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 126,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [3872, 3991], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 148,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 148,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [4722, 4855], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 208,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 208,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [6671, 6726], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 212,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 212,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [6749, 6827], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 237,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 237,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [7621, 7733], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 247,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 247,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [7919, 7990], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 10,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import dotenv from 'dotenv'\r\nimport { eq, and, isNull } from 'drizzle-orm'\r\n\r\nimport { generateEmbedding, generateEmbeddingBatch } from '../embedding'\r\n\r\nimport { db, schema } from './index'\r\n\r\n// Load environment variables\r\ndotenv.config()\r\n\r\n// Get embedding provider from environment variables\r\nconst embeddingProvider = (process.env.EMBEDDING_PROVIDER as 'openai' | 'lmstudio') || 'lmstudio'\r\nconst embeddingModel = process.env.LLM_MODEL || 'bge-base-en'\r\n\r\n/**\r\n * Generate a text representation of a property for embedding\r\n */\r\nexport function generatePropertyText(property: any): string {\r\n  const parts = [\r\n    property.address,\r\n    `${property.bedrooms || ''} bedroom`,\r\n    property.type || '',\r\n    `£${property.price || ''}`,\r\n  ]\r\n\r\n  return parts.filter(Boolean).join(', ')\r\n}\r\n\r\n/**\r\n * Process a single property to generate and store its embedding\r\n */\r\nexport async function processPropertyEmbedding(propertyId: string): Promise<void> {\r\n  // Get the property from the database\r\n  const properties = await db\r\n    .select()\r\n    .from(schema.property)\r\n    .where(eq(schema.property.id, propertyId))\r\n\r\n  if (properties.length === 0) {\r\n    throw new Error(`Property not found: ${propertyId}`)\r\n  }\r\n\r\n  const property = properties[0]\r\n\r\n  // Generate text representation\r\n  const text = generatePropertyText(property)\r\n\r\n  // Generate embedding\r\n  const embedding = await generateEmbedding(text, {\r\n    provider: embeddingProvider,\r\n    model: embeddingModel,\r\n  })\r\n\r\n  // Update property with embedding\r\n  // The vector column will be updated automatically by the trigger if it exists\r\n  await db.update(schema.property).set({ embedding }).where(eq(schema.property.id, propertyId))\r\n\r\n  console.log(`Generated embedding for property ${propertyId}`)\r\n}\r\n\r\n/**\r\n * Process all properties for a specific upload\r\n */\r\nexport async function processUploadEmbeddings(uploadId: string): Promise<void> {\r\n  console.log(`Starting embedding generation for upload ${uploadId}`)\r\n\r\n  try {\r\n    // First, update the upload status to processing\r\n    await db\r\n      .update(schema.uploads)\r\n      .set({\r\n        status: 'processing_embeddings',\r\n        updatedAt: new Date(),\r\n      })\r\n      .where(eq(schema.uploads.id, uploadId))\r\n\r\n    // Get all properties for this upload that don't have embeddings yet\r\n    const properties = await db\r\n      .select()\r\n      .from(schema.property)\r\n      .where(and(eq(schema.property.uploadId, uploadId), isNull(schema.property.embedding)))\r\n\r\n    if (properties.length === 0) {\r\n      console.log(`No properties found for upload ${uploadId} that need embeddings`)\r\n\r\n      // Update upload status to complete\r\n      await db\r\n        .update(schema.uploads)\r\n        .set({\r\n          status: 'complete',\r\n          updatedAt: new Date(),\r\n        })\r\n        .where(eq(schema.uploads.id, uploadId))\r\n\r\n      return\r\n    }\r\n\r\n    console.log(`Processing ${properties.length} properties for upload ${uploadId}`)\r\n\r\n    // Process in batches to avoid potential memory issues with large uploads\r\n    const batchSize = 100\r\n    let processedCount = 0\r\n\r\n    for (let i = 0; i < properties.length; i += batchSize) {\r\n      const batch = properties.slice(i, i + batchSize)\r\n\r\n      try {\r\n        // Generate text representations for this batch\r\n        const texts = batch.map(generatePropertyText)\r\n\r\n        // Generate embeddings in batch\r\n        const embeddings = await generateEmbeddingBatch(texts, {\r\n          provider: embeddingProvider,\r\n          model: embeddingModel,\r\n        })\r\n\r\n        // Update each property with its embedding\r\n        for (let j = 0; j < batch.length; j++) {\r\n          await db\r\n            .update(schema.property)\r\n            .set({ embedding: embeddings[j] })\r\n            .where(eq(schema.property.id, batch[j].id))\r\n        }\r\n\r\n        processedCount += batch.length\r\n        console.log(\r\n          `Processed ${processedCount}/${properties.length} embeddings for upload ${uploadId}`\r\n        )\r\n      } catch (batchError) {\r\n        console.error(`Error processing batch for upload ${uploadId}:`, {\r\n          error: batchError instanceof Error ? batchError.message : 'Unknown error',\r\n          stack: batchError instanceof Error ? batchError.stack : undefined,\r\n          batchSize: batch.length,\r\n          batchStart: i,\r\n          uploadId,\r\n        })\r\n\r\n        // Continue with the next batch instead of failing the entire process\r\n        // This way we can still process as many properties as possible\r\n      }\r\n\r\n      // Add a small delay between batches to avoid rate limits\r\n      if (i + batchSize < properties.length) {\r\n        await new Promise(resolve => setTimeout(resolve, 1000))\r\n      }\r\n    }\r\n\r\n    console.log(\r\n      `Completed embedding generation for upload ${uploadId}: ${processedCount}/${properties.length} successful`\r\n    )\r\n\r\n    // Update upload status based on success rate\r\n    const status = processedCount === properties.length ? 'complete' : 'partial_embeddings'\r\n\r\n    await db\r\n      .update(schema.uploads)\r\n      .set({\r\n        status,\r\n        updatedAt: new Date(),\r\n        processingStats: JSON.stringify({\r\n          total: properties.length,\r\n          processed: processedCount,\r\n          failed: properties.length - processedCount,\r\n          completedAt: new Date().toISOString(),\r\n        }),\r\n      })\r\n      .where(eq(schema.uploads.id, uploadId))\r\n  } catch (error) {\r\n    console.error(`Failed to process embeddings for upload ${uploadId}:`, {\r\n      error: error instanceof Error ? error.message : 'Unknown error',\r\n      stack: error instanceof Error ? error.stack : undefined,\r\n      uploadId,\r\n    })\r\n\r\n    // Update upload status to failed\r\n    try {\r\n      await db\r\n        .update(schema.uploads)\r\n        .set({\r\n          status: 'embedding_failed',\r\n          updatedAt: new Date(),\r\n          processingStats: JSON.stringify({\r\n            error: error instanceof Error ? error.message : 'Unknown error',\r\n            failedAt: new Date().toISOString(),\r\n          }),\r\n        })\r\n        .where(eq(schema.uploads.id, uploadId))\r\n    } catch (updateError) {\r\n      console.error(`Failed to update status for upload ${uploadId}:`, updateError)\r\n    }\r\n\r\n    // Re-throw the error so the caller can handle it\r\n    throw error\r\n  }\r\n}\r\n\r\n/**\r\n * Process all properties in the database that don't have embeddings\r\n */\r\nexport async function processAllMissingEmbeddings(): Promise<void> {\r\n  // Get all properties that don't have embeddings\r\n  const properties = await db\r\n    .select()\r\n    .from(schema.property)\r\n    .where(isNull(schema.property.embedding))\r\n\r\n  if (properties.length === 0) {\r\n    console.log('No properties found that need embeddings')\r\n    return\r\n  }\r\n\r\n  console.log(`Processing ${properties.length} properties that need embeddings`)\r\n\r\n  // Process in batches of 50\r\n  const batchSize = 50\r\n  for (let i = 0; i < properties.length; i += batchSize) {\r\n    const batch = properties.slice(i, i + batchSize)\r\n\r\n    // Generate text representations for this batch\r\n    const texts = batch.map(generatePropertyText)\r\n\r\n    // Generate embeddings in batch\r\n    const embeddings = await generateEmbeddingBatch(texts, {\r\n      provider: embeddingProvider,\r\n      model: embeddingModel,\r\n    })\r\n\r\n    // Update each property with its embedding\r\n    // The vector column will be updated automatically by the trigger if it exists\r\n    for (let j = 0; j < batch.length; j++) {\r\n      await db\r\n        .update(schema.property)\r\n        .set({ embedding: embeddings[j] })\r\n        .where(eq(schema.property.id, batch[j].id))\r\n    }\r\n\r\n    console.log(\r\n      `Processed batch ${i / batchSize + 1} of ${Math.ceil(properties.length / batchSize)}`\r\n    )\r\n\r\n    // Add a delay between batches to avoid rate limits\r\n    if (i + batchSize < properties.length) {\r\n      await new Promise(resolve => setTimeout(resolve, 2000))\r\n    }\r\n  }\r\n\r\n  console.log(`Generated embeddings for ${properties.length} properties`)\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\db\\propertyService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\db\\queries.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'and' is defined but never used.",
        "line": 1,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'uuidv4' is defined but never used.",
        "line": 2,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'bindJsonbArray' is defined but never used.",
        "line": 5,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'tx' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 306,
        "column": 41,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 306,
        "endColumn": 43
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { eq, and, desc, sql } from 'drizzle-orm'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nimport { withDatabaseErrorHandling, DatabaseQueryError } from './error-handler'\r\nimport { bindJsonbArray } from './utils'\r\n\r\nimport { db, schema } from './index'\r\n\r\n// Types based on our schema\r\nexport type UploadRecord = typeof schema.uploadRecord.$inferSelect\r\nexport type NewUploadRecord = typeof schema.uploadRecord.$inferInsert\r\n\r\nexport type Property = typeof schema.property.$inferSelect\r\nexport type NewProperty = typeof schema.property.$inferInsert\r\n\r\n// Upload Record Queries\r\nexport async function createUploadRecord(data: NewUploadRecord): Promise<UploadRecord> {\r\n  return withDatabaseErrorHandling(\r\n    async () => {\r\n      // Validate required fields\r\n      if (!data.uploaderId) {\r\n        throw new Error('uploaderId is required')\r\n      }\r\n\r\n      const result = await db.insert(schema.uploadRecord).values(data).returning()\r\n\r\n      if (!result.length) {\r\n        throw new DatabaseQueryError('Failed to create upload record')\r\n      }\r\n\r\n      return result[0]\r\n    },\r\n    { query: 'createUploadRecord' }\r\n  )\r\n}\r\n\r\nexport async function getUploadRecordById(id: string): Promise<UploadRecord | undefined> {\r\n  return withDatabaseErrorHandling(\r\n    async () => {\r\n      if (!id) {\r\n        throw new Error('id is required')\r\n      }\r\n\r\n      const results = await db\r\n        .select()\r\n        .from(schema.uploadRecord)\r\n        .where(eq(schema.uploadRecord.id, id))\r\n\r\n      return results[0]\r\n    },\r\n    { query: 'getUploadRecordById', params: [id] }\r\n  )\r\n}\r\n\r\nexport async function getUploadRecordsByUploader(uploaderId: string): Promise<UploadRecord[]> {\r\n  return withDatabaseErrorHandling(\r\n    async () => {\r\n      if (!uploaderId) {\r\n        throw new Error('uploaderId is required')\r\n      }\r\n\r\n      return db\r\n        .select()\r\n        .from(schema.uploadRecord)\r\n        .where(eq(schema.uploadRecord.uploaderId, uploaderId))\r\n        .orderBy(desc(schema.uploadRecord.createdAt))\r\n    },\r\n    { query: 'getUploadRecordsByUploader', params: [uploaderId] }\r\n  )\r\n}\r\n\r\nexport async function updateUploadRecordStatus(\r\n  id: string,\r\n  status: string\r\n): Promise<UploadRecord | undefined> {\r\n  return withDatabaseErrorHandling(\r\n    async () => {\r\n      if (!id) {\r\n        throw new Error('id is required')\r\n      }\r\n\r\n      if (!status) {\r\n        throw new Error('status is required')\r\n      }\r\n\r\n      const results = await db\r\n        .update(schema.uploadRecord)\r\n        .set({ status })\r\n        .where(eq(schema.uploadRecord.id, id))\r\n        .returning()\r\n\r\n      return results[0]\r\n    },\r\n    { query: 'updateUploadRecordStatus', params: [id, status] }\r\n  )\r\n}\r\n\r\n// Property Queries\r\nexport async function createProperty(data: NewProperty): Promise<Property> {\r\n  return withDatabaseErrorHandling(\r\n    async () => {\r\n      // Validate required fields\r\n      if (!data.uploadId) {\r\n        throw new Error('uploadId is required')\r\n      }\r\n\r\n      if (!data.address) {\r\n        throw new Error('address is required')\r\n      }\r\n\r\n      const result = await db.insert(schema.property).values(data).returning()\r\n\r\n      if (!result.length) {\r\n        throw new DatabaseQueryError('Failed to create property')\r\n      }\r\n\r\n      return result[0]\r\n    },\r\n    { query: 'createProperty' }\r\n  )\r\n}\r\n\r\n/**\r\n * Get a property by its ID\r\n * @param id The property ID\r\n * @returns The property if found, undefined otherwise\r\n */\r\nexport async function getPropertyById(id: string): Promise<Property | undefined> {\r\n  return withDatabaseErrorHandling(\r\n    async () => {\r\n      if (!id) {\r\n        throw new Error('id is required')\r\n      }\r\n\r\n      const results = await db.select().from(schema.property).where(eq(schema.property.id, id))\r\n\r\n      if (!results.length) {\r\n        return undefined\r\n      }\r\n\r\n      // Ensure the returned object conforms to the Property type\r\n      const property = results[0]\r\n\r\n      // Convert dates to ISO strings if they exist\r\n      return {\r\n        ...property,\r\n        createdAt:\r\n          property.createdAt instanceof Date\r\n            ? property.createdAt.toISOString()\r\n            : property.createdAt,\r\n        updatedAt:\r\n          property.updatedAt instanceof Date\r\n            ? property.updatedAt.toISOString()\r\n            : property.updatedAt,\r\n      } as Property\r\n    },\r\n    { query: 'getPropertyById', params: [id] }\r\n  )\r\n}\r\n\r\n/**\r\n * Get properties by upload ID\r\n * @param uploadId The upload ID\r\n * @returns Array of properties associated with the upload\r\n */\r\nexport async function getPropertiesByUploadId(uploadId: string): Promise<Property[]> {\r\n  return withDatabaseErrorHandling(\r\n    async () => {\r\n      if (!uploadId) {\r\n        throw new Error('uploadId is required')\r\n      }\r\n\r\n      const results = await db\r\n        .select()\r\n        .from(schema.property)\r\n        .where(eq(schema.property.uploadId, uploadId))\r\n\r\n      // Ensure all returned objects conform to the Property type\r\n      return results.map(\r\n        property =>\r\n          ({\r\n            ...property,\r\n            createdAt:\r\n              property.createdAt instanceof Date\r\n                ? property.createdAt.toISOString()\r\n                : property.createdAt,\r\n            updatedAt:\r\n              property.updatedAt instanceof Date\r\n                ? property.updatedAt.toISOString()\r\n                : property.updatedAt,\r\n          }) as Property\r\n      )\r\n    },\r\n    { query: 'getPropertiesByUploadId', params: [uploadId] }\r\n  )\r\n}\r\n\r\n/**\r\n * Update a property by ID\r\n * @param id The property ID\r\n * @param data The data to update\r\n * @returns The updated property if found, undefined otherwise\r\n */\r\nexport async function updateProperty(\r\n  id: string,\r\n  data: Partial<NewProperty>\r\n): Promise<Property | undefined> {\r\n  return withDatabaseErrorHandling(\r\n    async () => {\r\n      if (!id) {\r\n        throw new Error('id is required')\r\n      }\r\n\r\n      if (Object.keys(data).length === 0) {\r\n        throw new Error('No data provided for update')\r\n      }\r\n\r\n      // Add updatedAt if not provided\r\n      const updateData = {\r\n        ...data,\r\n        updatedAt: data.updatedAt ? new Date(data.updatedAt) : new Date(),\r\n      }\r\n\r\n      const results = await db\r\n        .update(schema.property)\r\n        .set(updateData)\r\n        .where(eq(schema.property.id, id))\r\n        .returning()\r\n\r\n      if (!results.length) {\r\n        return undefined\r\n      }\r\n\r\n      // Ensure the returned object conforms to the Property type\r\n      const property = results[0]\r\n\r\n      return {\r\n        ...property,\r\n        createdAt:\r\n          property.createdAt instanceof Date\r\n            ? property.createdAt.toISOString()\r\n            : property.createdAt,\r\n        updatedAt:\r\n          property.updatedAt instanceof Date\r\n            ? property.updatedAt.toISOString()\r\n            : property.updatedAt,\r\n      } as Property\r\n    },\r\n    { query: 'updateProperty', params: [id] }\r\n  )\r\n}\r\n\r\nexport async function deleteProperty(id: string): Promise<void> {\r\n  return withDatabaseErrorHandling(\r\n    async () => {\r\n      if (!id) {\r\n        throw new Error('id is required')\r\n      }\r\n\r\n      await db.delete(schema.property).where(eq(schema.property.id, id))\r\n    },\r\n    { query: 'deleteProperty', params: [id] }\r\n  )\r\n}\r\n\r\n// Count properties by upload ID\r\nexport async function countPropertiesByUploadId(uploadId: string): Promise<number> {\r\n  return withDatabaseErrorHandling(\r\n    async () => {\r\n      if (!uploadId) {\r\n        throw new Error('uploadId is required')\r\n      }\r\n\r\n      const result = await db\r\n        .select({ count: sql<number>`count(*)` })\r\n        .from(schema.property)\r\n        .where(eq(schema.property.uploadId, uploadId))\r\n\r\n      return result[0].count\r\n    },\r\n    { query: 'countPropertiesByUploadId', params: [uploadId] }\r\n  )\r\n}\r\n\r\n// Vector search for properties (if you have embeddings)\r\nexport async function searchPropertiesByEmbedding(\r\n  embedding: number[],\r\n  limit: number = 10\r\n): Promise<Property[]> {\r\n  return await prisma.$queryRaw`\r\n    SELECT * FROM \"Property\"\r\n    WHERE embedding IS NOT NULL\r\n    ORDER BY embedding <-> ${JSON.stringify(embedding)}::vector\r\n    LIMIT ${limit}\r\n  `\r\n}\r\n\r\n/**\r\n * Execute a database transaction with proper error handling\r\n * @param operations Function containing the operations to execute in a transaction\r\n * @returns The result of the transaction\r\n */\r\nexport async function withTransaction<T>(operations: () => Promise<T>): Promise<T> {\r\n  return withDatabaseErrorHandling(\r\n    async () => {\r\n      return await db.transaction(async tx => {\r\n        try {\r\n          return await operations()\r\n        } catch (error) {\r\n          // Ensure transaction is rolled back on error\r\n          throw error\r\n        }\r\n      })\r\n    },\r\n    { query: 'withTransaction' }\r\n  )\r\n}\r\n\r\n/**\r\n * Batch insert properties with error handling and transaction support\r\n * @param properties Array of properties to insert\r\n * @returns Array of inserted properties\r\n */\r\nexport async function batchInsertProperties(properties: NewProperty[]): Promise<Property[]> {\r\n  return withTransaction(async () => {\r\n    if (!properties.length) {\r\n      return []\r\n    }\r\n\r\n    // Validate all properties have required fields\r\n    properties.forEach((property, index) => {\r\n      if (!property.uploadId) {\r\n        throw new Error(`Property at index ${index} is missing uploadId`)\r\n      }\r\n      if (!property.address) {\r\n        throw new Error(`Property at index ${index} is missing address`)\r\n      }\r\n    })\r\n\r\n    const result = await db.insert(schema.property).values(properties).returning()\r\n\r\n    return result\r\n  })\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\db\\utils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\embedding.ts",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'openai'.",
        "line": 3,
        "column": 20,
        "nodeType": "Literal",
        "endLine": 3,
        "endColumn": 28
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 78,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 78,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2006, 2069], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 100,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 100,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2562, 2622], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 116,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 116,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [3000, 3058], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 119,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 119,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [3141, 3217], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 196,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 196,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [5397, 5483], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 222,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 222,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [6462, 6529], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'err' is defined but never used.",
        "line": 331,
        "column": 12,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 331,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// No longer using axios\r\nimport * as dotenv from 'dotenv'\r\nimport OpenAI from 'openai'\r\n\r\n// Load environment variables\r\ndotenv.config()\r\n\r\n// Define embedding model options\r\nexport type EmbeddingProvider = 'openai' | 'lmstudio'\r\n\r\n// Interface for embedding options\r\ninterface EmbeddingOptions {\r\n  provider?: EmbeddingProvider\r\n  model?: string\r\n  apiKey?: string\r\n  apiUrl?: string\r\n  timeout?: number\r\n  maxRetries?: number\r\n  backoffFactor?: number\r\n  fallbackProvider?: EmbeddingProvider\r\n}\r\n\r\n// Default options\r\nconst defaultOptions: EmbeddingOptions = {\r\n  provider: 'openai',\r\n  model: 'text-embedding-3-small',\r\n  apiKey: process.env.OPENAI_API_KEY,\r\n  apiUrl: process.env.LLM_API_URL || 'http://localhost:11434/api/embeddings',\r\n  timeout: 10000, // 10 seconds\r\n  maxRetries: 3,\r\n  backoffFactor: 2,\r\n  fallbackProvider: 'lmstudio',\r\n}\r\n\r\n// Circuit breaker state\r\ninterface CircuitBreakerState {\r\n  failures: number\r\n  lastFailure: number | null\r\n  status: 'CLOSED' | 'OPEN' | 'HALF_OPEN'\r\n}\r\n\r\nconst circuitBreakers: Record<EmbeddingProvider, CircuitBreakerState> = {\r\n  openai: {\r\n    failures: 0,\r\n    lastFailure: null,\r\n    status: 'CLOSED',\r\n  },\r\n  lmstudio: {\r\n    failures: 0,\r\n    lastFailure: null,\r\n    status: 'CLOSED',\r\n  },\r\n}\r\n\r\n// Circuit breaker configuration\r\nconst FAILURE_THRESHOLD = 5\r\nconst RESET_TIMEOUT = 30000 // 30 seconds\r\n\r\n/**\r\n * Check if circuit breaker allows the request\r\n * @param provider The provider to check\r\n * @returns Whether the request is allowed\r\n */\r\nfunction canMakeRequest(provider: EmbeddingProvider): boolean {\r\n  const breaker = circuitBreakers[provider]\r\n\r\n  // If circuit is closed, allow the request\r\n  if (breaker.status === 'CLOSED') {\r\n    return true\r\n  }\r\n\r\n  // If circuit is open, check if it's time to try again\r\n  if (breaker.status === 'OPEN') {\r\n    const now = Date.now()\r\n    if (breaker.lastFailure && now - breaker.lastFailure > RESET_TIMEOUT) {\r\n      // Move to half-open state\r\n      breaker.status = 'HALF_OPEN'\r\n      console.log(`Circuit breaker for ${provider} is now HALF_OPEN`)\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  // If circuit is half-open, allow one test request\r\n  return true\r\n}\r\n\r\n/**\r\n * Record a successful request\r\n * @param provider The provider that succeeded\r\n */\r\nfunction recordSuccess(provider: EmbeddingProvider): void {\r\n  const breaker = circuitBreakers[provider]\r\n\r\n  if (breaker.status === 'HALF_OPEN') {\r\n    // Reset the circuit breaker\r\n    breaker.failures = 0\r\n    breaker.lastFailure = null\r\n    breaker.status = 'CLOSED'\r\n    console.log(`Circuit breaker for ${provider} is now CLOSED`)\r\n  }\r\n}\r\n\r\n/**\r\n * Record a failed request\r\n * @param provider The provider that failed\r\n */\r\nfunction recordFailure(provider: EmbeddingProvider): void {\r\n  const breaker = circuitBreakers[provider]\r\n\r\n  breaker.failures += 1\r\n  breaker.lastFailure = Date.now()\r\n\r\n  if (breaker.status === 'CLOSED' && breaker.failures >= FAILURE_THRESHOLD) {\r\n    breaker.status = 'OPEN'\r\n    console.log(`Circuit breaker for ${provider} is now OPEN`)\r\n  } else if (breaker.status === 'HALF_OPEN') {\r\n    breaker.status = 'OPEN'\r\n    console.log(`Circuit breaker for ${provider} is now OPEN after failed test`)\r\n  }\r\n}\r\n\r\n/**\r\n * Retry a function with exponential backoff\r\n * @param fn The function to retry\r\n * @param maxRetries Maximum number of retries\r\n * @param backoffFactor Backoff factor for exponential backoff\r\n * @returns The result of the function\r\n */\r\nasync function withRetry<T>(\r\n  fn: () => Promise<T>,\r\n  maxRetries: number,\r\n  backoffFactor: number\r\n): Promise<T> {\r\n  let lastError: Error = new Error('Unknown error occurred during retry')\r\n\r\n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\r\n    try {\r\n      return await fn()\r\n    } catch (error) {\r\n      lastError = error as Error\r\n\r\n      // Don't retry if we've reached max retries\r\n      if (attempt === maxRetries) break\r\n\r\n      // Don't retry for certain errors\r\n      if (error instanceof Error) {\r\n        // Don't retry for authentication errors\r\n        if (error.message.includes('authentication') || error.message.includes('API key')) {\r\n          break\r\n        }\r\n      }\r\n\r\n      // Wait with exponential backoff before retrying\r\n      const delay = 1000 * Math.pow(backoffFactor, attempt)\r\n      // Removed console.log statement to avoid unexpected console output\r\n      await new Promise(resolve => setTimeout(resolve, delay))\r\n    }\r\n  }\r\n\r\n  throw lastError\r\n}\r\n\r\n// Cache for embeddings\r\nconst cache = new Map<string, number[]>()\r\n\r\n/**\r\n * Generate embeddings for a text using either OpenAI or LM Studio\r\n * @param text The text to generate embeddings for\r\n * @param options Configuration options\r\n * @returns An array of numbers representing the embedding vector\r\n */\r\nexport async function generateEmbedding(\r\n  text: string,\r\n  options: EmbeddingOptions = {}\r\n): Promise<number[]> {\r\n  // Check cache first\r\n  if (cache.has(text)) {\r\n    return cache.get(text)!\r\n  }\r\n\r\n  // Merge default options with provided options\r\n  const config = { ...defaultOptions, ...options }\r\n\r\n  // Validate input\r\n  if (!text || text.trim() === '') {\r\n    throw new Error('Text cannot be empty')\r\n  }\r\n\r\n  // Try primary provider\r\n  const primaryProvider = config.provider || 'openai'\r\n\r\n  try {\r\n    // Check if circuit breaker allows the request\r\n    if (!canMakeRequest(primaryProvider)) {\r\n      console.log(`Circuit breaker for ${primaryProvider} is OPEN, using fallback provider`)\r\n\r\n      // If fallback provider is specified and different from primary, try it\r\n      if (config.fallbackProvider && config.fallbackProvider !== primaryProvider) {\r\n        const result = await generateEmbeddingWithProvider(text, {\r\n          ...config,\r\n          provider: config.fallbackProvider,\r\n        })\r\n        cache.set(text, result)\r\n        return result\r\n      }\r\n\r\n      throw new Error(`${primaryProvider} service is unavailable and no fallback is available`)\r\n    }\r\n\r\n    // Try with primary provider\r\n    const result = await generateEmbeddingWithProvider(text, config)\r\n    recordSuccess(primaryProvider)\r\n    cache.set(text, result)\r\n    return result\r\n  } catch (error) {\r\n    console.error(`Error with primary provider ${primaryProvider}:`, error)\r\n    recordFailure(primaryProvider)\r\n\r\n    // If fallback provider is specified and different from primary, try it\r\n    if (config.fallbackProvider && config.fallbackProvider !== primaryProvider) {\r\n      console.log(`Trying fallback provider: ${config.fallbackProvider}`)\r\n\r\n      try {\r\n        if (canMakeRequest(config.fallbackProvider)) {\r\n          const result = await generateEmbeddingWithProvider(text, {\r\n            ...config,\r\n            provider: config.fallbackProvider,\r\n          })\r\n          recordSuccess(config.fallbackProvider)\r\n          cache.set(text, result)\r\n          return result\r\n        }\r\n      } catch (fallbackError) {\r\n        console.error(`Error with fallback provider ${config.fallbackProvider}:`, fallbackError)\r\n        recordFailure(config.fallbackProvider)\r\n      }\r\n    }\r\n\r\n    // If we get here, both primary and fallback failed\r\n    throw new Error(`Failed to generate embedding: ${(error as Error).message}`)\r\n  }\r\n}\r\n\r\n/**\r\n * Generate embeddings with a specific provider\r\n */\r\nasync function generateEmbeddingWithProvider(\r\n  text: string,\r\n  options: EmbeddingOptions\r\n): Promise<number[]> {\r\n  // Use OpenAI API\r\n  if (options.provider === 'openai') {\r\n    return await withRetry(\r\n      () => generateOpenAIEmbedding(text, options),\r\n      options.maxRetries || 3,\r\n      options.backoffFactor || 2\r\n    )\r\n  }\r\n  // Use LM Studio API\r\n  else if (options.provider === 'lmstudio') {\r\n    return await withRetry(\r\n      () => generateLMStudioEmbedding(text, options),\r\n      options.maxRetries || 3,\r\n      options.backoffFactor || 2\r\n    )\r\n  } else {\r\n    throw new Error(`Unsupported provider: ${options.provider}`)\r\n  }\r\n}\r\n\r\n/**\r\n * Generate embeddings using OpenAI API\r\n */\r\nasync function generateOpenAIEmbedding(text: string, options: EmbeddingOptions): Promise<number[]> {\r\n  if (!options.apiKey) {\r\n    throw new Error('OpenAI API key is required')\r\n  }\r\n\r\n  const openai = new OpenAI({\r\n    apiKey: options.apiKey,\r\n    timeout: options.timeout || 10000,\r\n    maxRetries: 0, // We handle retries ourselves\r\n  })\r\n\r\n  try {\r\n    const response = await openai.embeddings.create({\r\n      model: options.model || 'text-embedding-3-small',\r\n      input: text,\r\n      encodingFormat: 'float',\r\n    })\r\n\r\n    return response.data[0].embedding\r\n  } catch (error) {\r\n    // Enhance error message with more context\r\n    if (error instanceof Error) {\r\n      if (error.message.includes('429')) {\r\n        throw new Error(`OpenAI rate limit exceeded: ${error.message}`)\r\n      } else if (error.message.includes('401')) {\r\n        throw new Error(`OpenAI authentication error: ${error.message}`)\r\n      } else if (error.message.includes('timeout')) {\r\n        throw new Error(`OpenAI request timed out: ${error.message}`)\r\n      }\r\n    }\r\n    throw error\r\n  }\r\n}\r\n\r\n/**\r\n * Generate embeddings using LM Studio/Ollama API\r\n */\r\nasync function generateLMStudioEmbedding(\r\n  text: string,\r\n  options: EmbeddingOptions\r\n): Promise<number[]> {\r\n  if (!options.apiUrl) {\r\n    throw new Error('LM Studio/Ollama API URL is required')\r\n  }\r\n\r\n  try {\r\n    const res = await fetch('http://localhost:11434/api/embeddings', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ model: 'mistral', prompt: text }),\r\n      headers: { 'Content-Type': 'application/json' },\r\n    })\r\n\r\n    if (!res.ok) throw new Error('Ollama failed')\r\n\r\n    const json = await res.json()\r\n    return json.embedding\r\n  } catch (err) {\r\n    console.warn('Falling back to OpenAI for embedding...')\r\n    const res = await fetch('https://api.openai.com/v1/embeddings', {\r\n      method: 'POST',\r\n      headers: {\r\n        Authorization: `Bearer ${process.env.OPENAI_API_KEY!}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        input: text,\r\n        model: 'text-embedding-ada-002',\r\n      }),\r\n    })\r\n\r\n    const json = await res.json()\r\n    return json.data[0].embedding\r\n  }\r\n}\r\n\r\n/**\r\n * Generate embeddings for multiple texts in batch\r\n * @param texts Array of texts to generate embeddings for\r\n * @param options Configuration options\r\n * @returns Array of embedding vectors\r\n */\r\nexport async function generateEmbeddingBatch(\r\n  texts: string[],\r\n  options: EmbeddingOptions = {}\r\n): Promise<number[][]> {\r\n  // Process in batches to avoid rate limits\r\n  const batchSize = 20\r\n  const results: number[][] = []\r\n  const errors: Error[] = []\r\n\r\n  for (let i = 0; i < texts.length; i += batchSize) {\r\n    const batch = texts.slice(i, i + batchSize)\r\n\r\n    try {\r\n      // Process batch with Promise.allSettled to handle partial failures\r\n      const batchPromises = batch.map(text => generateEmbedding(text, options))\r\n      const batchResults = await Promise.allSettled(batchPromises)\r\n\r\n      // Process results and collect errors\r\n      batchResults.forEach((result, index) => {\r\n        if (result.status === 'fulfilled') {\r\n          results.push(result.value)\r\n        } else {\r\n          console.error(`Error processing item ${i + index}:`, result.reason)\r\n          errors.push(result.reason)\r\n          // Push a placeholder for failed embeddings\r\n          results.push([])\r\n        }\r\n      })\r\n\r\n      // Add a small delay between batches to avoid rate limits\r\n      if (i + batchSize < texts.length) {\r\n        await new Promise(resolve => setTimeout(resolve, 1000))\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error processing batch starting at index ${i}:`, error)\r\n      // For catastrophic batch errors, fill with empty arrays\r\n      for (let j = 0; j < batch.length; j++) {\r\n        results.push([])\r\n      }\r\n    }\r\n  }\r\n\r\n  // If all embeddings failed, throw an error\r\n  if (results.every(arr => arr.length === 0)) {\r\n    throw new Error(`Failed to generate any embeddings: ${errors[0]?.message || 'Unknown error'}`)\r\n  }\r\n\r\n  return results\r\n}\r\n\r\n/**\r\n * Calculate cosine similarity between two vectors\r\n * @param a First vector\r\n * @param b Second vector\r\n * @returns Similarity score between -1 and 1\r\n */\r\nexport function cosineSimilarity(a: number[], b: number[]): number {\r\n  // Validate inputs\r\n  if (!Array.isArray(a) || !Array.isArray(b)) {\r\n    throw new TypeError('Both arguments must be arrays')\r\n  }\r\n\r\n  if (a.length === 0 || b.length === 0) {\r\n    throw new Error('Vectors cannot be empty')\r\n  }\r\n\r\n  if (a.length !== b.length) {\r\n    throw new Error(`Vectors must have the same length: ${a.length} vs ${b.length}`)\r\n  }\r\n\r\n  // Check if vectors contain valid numbers\r\n  for (let i = 0; i < a.length; i++) {\r\n    if (typeof a[i] !== 'number' || isNaN(a[i])) {\r\n      throw new TypeError(`First vector contains non-numeric value at index ${i}`)\r\n    }\r\n    if (typeof b[i] !== 'number' || isNaN(b[i])) {\r\n      throw new TypeError(`Second vector contains non-numeric value at index ${i}`)\r\n    }\r\n  }\r\n\r\n  let dotProduct = 0\r\n  let normA = 0\r\n  let normB = 0\r\n\r\n  for (let i = 0; i < a.length; i++) {\r\n    dotProduct += a[i] * b[i]\r\n    normA += a[i] * a[i]\r\n    normB += b[i] * b[i]\r\n  }\r\n\r\n  if (normA === 0 || normB === 0) {\r\n    return 0\r\n  }\r\n\r\n  const similarity = dotProduct / (Math.sqrt(normA) * Math.sqrt(normB))\r\n\r\n  // Ensure the result is within the valid range\r\n  if (similarity < -1 || similarity > 1) {\r\n    console.warn(\r\n      `Cosine similarity calculation resulted in an out-of-range value: ${similarity}. Clamping to [-1, 1].`\r\n    )\r\n    return Math.max(-1, Math.min(1, similarity))\r\n  }\r\n\r\n  return similarity\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\error\\error-service.test.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'errorService' is defined but never used.",
        "line": 7,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/error/error-service.test.ts\r\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'\r\n\r\nimport { ApiError } from '@/lib/api/error-handling'\r\n\r\nimport {\r\n  errorService,\r\n  ErrorType,\r\n  ErrorSeverity,\r\n  handleError,\r\n  withErrorHandling,\r\n  withAsyncErrorHandling,\r\n} from './error-service'\r\n\r\nimport { ValidationError } from '@/lib/api/validation'\r\nimport logger from '@/lib/logging/logger'\r\n\r\n// Mock the logger\r\nvi.mock('@/lib/logging/logger', () => ({\r\n  default: {\r\n    debug: vi.fn(),\r\n    info: vi.fn(),\r\n    warn: vi.fn(),\r\n    error: vi.fn(),\r\n    fatal: vi.fn(),\r\n  },\r\n}))\r\n\r\ndescribe('ErrorService', () => {\r\n  beforeEach(() => {\r\n    vi.clearAllMocks()\r\n  })\r\n\r\n  afterEach(() => {\r\n    vi.resetAllMocks()\r\n  })\r\n\r\n  describe('handleError', () => {\r\n    it('should log errors with the appropriate severity', () => {\r\n      // Test low severity error\r\n      const lowError = new Error('Low severity error')\r\n      handleError(lowError, { severity: ErrorSeverity.LOW })\r\n      expect(logger.info).toHaveBeenCalledWith(\r\n        'Minor error occurred',\r\n        lowError,\r\n        expect.objectContaining({ errorSeverity: ErrorSeverity.LOW }),\r\n        expect.arrayContaining(['error'])\r\n      )\r\n\r\n      // Test medium severity error\r\n      const mediumError = new Error('Medium severity error')\r\n      handleError(mediumError, { severity: ErrorSeverity.MEDIUM })\r\n      expect(logger.warn).toHaveBeenCalledWith(\r\n        'Error occurred',\r\n        mediumError,\r\n        expect.objectContaining({ errorSeverity: ErrorSeverity.MEDIUM }),\r\n        expect.arrayContaining(['error'])\r\n      )\r\n\r\n      // Test high severity error\r\n      const highError = new Error('High severity error')\r\n      handleError(highError, { severity: ErrorSeverity.HIGH })\r\n      expect(logger.error).toHaveBeenCalledWith(\r\n        'Serious error occurred',\r\n        highError,\r\n        expect.objectContaining({ errorSeverity: ErrorSeverity.HIGH }),\r\n        expect.arrayContaining(['error'])\r\n      )\r\n\r\n      // Test critical severity error\r\n      const criticalError = new Error('Critical severity error')\r\n      handleError(criticalError, { severity: ErrorSeverity.CRITICAL })\r\n      expect(logger.fatal).toHaveBeenCalledWith(\r\n        'Critical error occurred',\r\n        criticalError,\r\n        expect.objectContaining({ errorSeverity: ErrorSeverity.CRITICAL }),\r\n        expect.arrayContaining(['error'])\r\n      )\r\n    })\r\n\r\n    it('should determine error type correctly', () => {\r\n      // Test API error\r\n      const apiError = new ApiError('API error', 500, 'API_ERROR')\r\n      handleError(apiError)\r\n      expect(logger.error).toHaveBeenCalledWith(\r\n        expect.any(String),\r\n        apiError,\r\n        expect.objectContaining({ errorType: ErrorType.API }),\r\n        expect.arrayContaining(['error', ErrorType.API])\r\n      )\r\n\r\n      // Test validation error\r\n      const validationError = new ValidationError('Validation error', 'VALIDATION_ERROR')\r\n      handleError(validationError)\r\n      expect(logger.info).toHaveBeenCalledWith(\r\n        expect.any(String),\r\n        validationError,\r\n        expect.objectContaining({ errorType: ErrorType.VALIDATION }),\r\n        expect.arrayContaining(['error', ErrorType.VALIDATION])\r\n      )\r\n\r\n      // Test database error\r\n      const dbError = new Error('Database connection failed')\r\n      handleError(dbError)\r\n      expect(logger.fatal).toHaveBeenCalledWith(\r\n        expect.any(String),\r\n        dbError,\r\n        expect.objectContaining({ errorType: ErrorType.DATABASE }),\r\n        expect.arrayContaining(['error', ErrorType.DATABASE])\r\n      )\r\n\r\n      // Test authentication error\r\n      const authError = new Error('Authentication failed')\r\n      handleError(authError)\r\n      expect(logger.error).toHaveBeenCalledWith(\r\n        expect.any(String),\r\n        authError,\r\n        expect.objectContaining({ errorType: ErrorType.AUTHENTICATION }),\r\n        expect.arrayContaining(['error', ErrorType.AUTHENTICATION])\r\n      )\r\n    })\r\n\r\n    it('should include additional context in logs', () => {\r\n      const error = new Error('Test error')\r\n      const context = {\r\n        userId: 'user123',\r\n        requestId: 'req456',\r\n        component: 'TestComponent',\r\n        action: 'testAction',\r\n        metadata: { test: 'value' },\r\n        tags: ['test-tag'],\r\n      }\r\n\r\n      handleError(error, context)\r\n\r\n      expect(logger.info).toHaveBeenCalledWith(\r\n        expect.any(String),\r\n        error,\r\n        expect.objectContaining({\r\n          userId: 'user123',\r\n          requestId: 'req456',\r\n          component: 'TestComponent',\r\n          action: 'testAction',\r\n          test: 'value',\r\n        }),\r\n        expect.arrayContaining(['error', 'unknown', 'test-tag'])\r\n      )\r\n    })\r\n  })\r\n\r\n  describe('withErrorHandling', () => {\r\n    it('should return the result of the function if no error occurs', () => {\r\n      const fn = () => 'success'\r\n      const safeFn = withErrorHandling(fn)\r\n\r\n      expect(safeFn()).toBe('success')\r\n      expect(logger.info).not.toHaveBeenCalled()\r\n      expect(logger.error).not.toHaveBeenCalled()\r\n    })\r\n\r\n    it('should handle errors thrown by the function', () => {\r\n      const error = new Error('Test error')\r\n      const fn = () => {\r\n        throw error\r\n      }\r\n      const safeFn = withErrorHandling(fn)\r\n\r\n      expect(safeFn()).toBeUndefined()\r\n      expect(logger.info).toHaveBeenCalledWith(\r\n        expect.any(String),\r\n        error,\r\n        expect.any(Object),\r\n        expect.arrayContaining(['error'])\r\n      )\r\n    })\r\n\r\n    it('should include context in error handling', () => {\r\n      const error = new Error('Test error')\r\n      const fn = () => {\r\n        throw error\r\n      }\r\n      const safeFn = withErrorHandling(fn, { component: 'TestComponent' })\r\n\r\n      expect(safeFn()).toBeUndefined()\r\n      expect(logger.info).toHaveBeenCalledWith(\r\n        expect.any(String),\r\n        error,\r\n        expect.objectContaining({ component: 'TestComponent' }),\r\n        expect.arrayContaining(['error'])\r\n      )\r\n    })\r\n  })\r\n\r\n  describe('withAsyncErrorHandling', () => {\r\n    it('should return the result of the async function if no error occurs', async () => {\r\n      const fn = async () => 'success'\r\n      const safeFn = withAsyncErrorHandling(fn)\r\n\r\n      expect(await safeFn()).toBe('success')\r\n      expect(logger.info).not.toHaveBeenCalled()\r\n      expect(logger.error).not.toHaveBeenCalled()\r\n    })\r\n\r\n    it('should handle errors thrown by the async function', async () => {\r\n      const error = new Error('Test error')\r\n      const fn = async () => {\r\n        throw error\r\n      }\r\n      const safeFn = withAsyncErrorHandling(fn)\r\n\r\n      expect(await safeFn()).toBeUndefined()\r\n      expect(logger.info).toHaveBeenCalledWith(\r\n        expect.any(String),\r\n        error,\r\n        expect.any(Object),\r\n        expect.arrayContaining(['error'])\r\n      )\r\n    })\r\n\r\n    it('should include context in error handling', async () => {\r\n      const error = new Error('Test error')\r\n      const fn = async () => {\r\n        throw error\r\n      }\r\n      const safeFn = withAsyncErrorHandling(fn, { component: 'TestComponent' })\r\n\r\n      expect(await safeFn()).toBeUndefined()\r\n      expect(logger.info).toHaveBeenCalledWith(\r\n        expect.any(String),\r\n        error,\r\n        expect.objectContaining({ component: 'TestComponent' }),\r\n        expect.arrayContaining(['error'])\r\n      )\r\n    })\r\n  })\r\n})\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\error\\error-service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\error\\error-utils.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 41,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 41,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1003, 1006], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1003, 1006], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 49,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 49,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1256, 1259], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1256, 1259], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 61,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 61,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1717, 1720], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1717, 1720], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 107,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 107,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3335, 3338], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3335, 3338], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 118,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 118,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3677, 3680], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3677, 3680], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\r\n * Utility functions for safe error handling\r\n */\r\n\r\n/**\r\n * Safely converts any error to a string representation\r\n * @param error Any type of error\r\n * @returns A string representation of the error\r\n */\r\nexport function normalizeError(error: unknown): string {\r\n  return String(error)\r\n}\r\n\r\n/**\r\n * Safely extracts the message from any error type\r\n * @param error Any type of error\r\n * @returns The error message as a string\r\n */\r\nexport function getErrorMessage(error: unknown): string {\r\n  if (error instanceof Error) {\r\n    return error.message\r\n  }\r\n  return String(error)\r\n}\r\n\r\n/**\r\n * Safely extracts structured information from any error type\r\n * @param error Any type of error\r\n * @returns An object containing error details\r\n */\r\nexport function getErrorDetails(error: unknown): {\r\n  message: string\r\n  stack?: string\r\n  code?: string\r\n  name?: string\r\n  status?: number\r\n  type?: string\r\n} {\r\n  // Handle Error objects\r\n  if (error instanceof Error) {\r\n    const details: Record<string, any> = {\r\n      message: error.message,\r\n      name: error.name,\r\n      stack: error.stack,\r\n    }\r\n\r\n    // Extract additional properties that might exist on error objects\r\n    // Common properties in various error types\r\n    const errorObj = error as any\r\n    if ('code' in errorObj) details.code = String(errorObj.code)\r\n    if ('status' in errorObj) details.status = Number(errorObj.status)\r\n    if ('statusCode' in errorObj) details.status = Number(errorObj.statusCode)\r\n    if ('type' in errorObj) details.type = String(errorObj.type)\r\n\r\n    return details\r\n  }\r\n\r\n  // Handle non-Error objects\r\n  if (error !== null && typeof error === 'object') {\r\n    try {\r\n      const errorObj = error as Record<string, any>\r\n      return {\r\n        message: errorObj.message ? String(errorObj.message) : JSON.stringify(error),\r\n        ...(errorObj.code && { code: String(errorObj.code) }),\r\n        ...(errorObj.status && { status: Number(errorObj.status) }),\r\n        ...(errorObj.type && { type: String(errorObj.type) }),\r\n      }\r\n    } catch {\r\n      return { message: String(error) }\r\n    }\r\n  }\r\n\r\n  // Handle primitive values\r\n  return { message: String(error) }\r\n}\r\n\r\n/**\r\n * Safely logs any type of error with consistent formatting\r\n * @param context Description of where the error occurred\r\n * @param error Any type of error\r\n */\r\nexport function logError(context: string, error: unknown): void {\r\n  console.error(`[ERROR] ${context}:`, String(error))\r\n\r\n  // Log additional details if available\r\n  if (error instanceof Error && error.stack) {\r\n    console.error(`[STACK] ${context}:`, error.stack)\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a new error with the original error information preserved\r\n * @param message New error message\r\n * @param originalError The original error that was caught\r\n * @returns A new Error object with combined information\r\n */\r\nexport function createErrorWithCause(message: string, originalError: unknown): Error {\r\n  const newError = new Error(`${message}: ${String(originalError)}`)\r\n\r\n  // Preserve the original stack if possible\r\n  if (originalError instanceof Error && originalError.stack) {\r\n    // Append original stack to the new error\r\n    newError.stack = `${newError.stack}\\nCaused by: ${originalError.stack}`\r\n  }\r\n\r\n  // Add a cause property (supported in newer JS environments)\r\n  ;(newError as any).cause = originalError\r\n\r\n  return newError\r\n}\r\n\r\n/**\r\n * Wraps an async function with standardized error handling\r\n * @param fn The async function to wrap\r\n * @param errorMessage Optional custom error message prefix\r\n * @returns A wrapped function with standardized error handling\r\n */\r\nexport function withErrorHandling<T, Args extends any[]>(\r\n  fn: (...args: Args) => Promise<T>,\r\n  errorMessage = 'Operation failed'\r\n): (...args: Args) => Promise<T> {\r\n  return async (...args: Args): Promise<T> => {\r\n    try {\r\n      return await fn(...args)\r\n    } catch (error) {\r\n      throw createErrorWithCause(errorMessage, error)\r\n    }\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\getListings.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\logging\\advanced-winston-logger.ts",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'winston'.",
        "line": 2,
        "column": 50,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 59
      },
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'winston-daily-rotate-file'.",
        "line": 4,
        "column": 8,
        "nodeType": "Literal",
        "endLine": 4,
        "endColumn": 35
      },
      {
        "ruleId": "import/order",
        "severity": 2,
        "message": "`path` import should occur before import of `winston`",
        "line": 5,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "endLine": 5,
        "endColumn": 24
      },
      {
        "ruleId": "import/order",
        "severity": 2,
        "message": "`fs` import should occur before import of `winston`",
        "line": 6,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "endLine": 6,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 42,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 42,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [940, 943], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [940, 943], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 42,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 42,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [962, 965], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [962, 965], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 43,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 43,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1007, 1010], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1007, 1010], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 174,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 174,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4399, 4402], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4399, 4402], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 176,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 176,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4467, 4470], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4467, 4470], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 186,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 186,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4713, 4716], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4713, 4716], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 196,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 196,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4958, 4961], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4958, 4961], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 206,
        "column": 66,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 206,
        "endColumn": 69,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5219, 5222], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5219, 5222], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 12,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/logging/advanced-winston-logger.ts\nimport { createLogger, format, transports } from 'winston'\n\nimport 'winston-daily-rotate-file'\nimport path from 'path'\nimport fs from 'fs'\n\n// Create logs directory if it doesn't exist\nconst logsDir = path.join(process.cwd(), 'logs')\nif (!fs.existsSync(logsDir)) {\n  fs.mkdirSync(logsDir, { recursive: true })\n}\n\n/**\n * Sensitive fields that should never be logged\n * Add any field names that might contain sensitive information\n */\nconst SENSITIVE_FIELDS = [\n  'password',\n  'token',\n  'secret',\n  'authorization',\n  'apiKey',\n  'api_key',\n  'key',\n  'credential',\n  'ssn',\n  'socialSecurity',\n  'creditCard',\n  'cardNumber',\n  'cvv',\n]\n\n/**\n * Sanitize data for logging by removing sensitive fields\n */\nconst sanitizeForLogging = format(info => {\n  if (info.context) {\n    const sanitized = { ...info.context }\n\n    // Recursively sanitize objects\n    const sanitizeObject = (obj: Record<string, any>): Record<string, any> => {\n      const result: Record<string, any> = {}\n\n      for (const [key, value] of Object.entries(obj)) {\n        // Check if this is a sensitive field\n        if (SENSITIVE_FIELDS.some(field => key.toLowerCase().includes(field.toLowerCase()))) {\n          result[key] = '[REDACTED]'\n        }\n        // Recursively sanitize nested objects\n        else if (value && typeof value === 'object' && !Array.isArray(value)) {\n          result[key] = sanitizeObject(value)\n        }\n        // Sanitize arrays\n        else if (Array.isArray(value)) {\n          result[key] = value.map(item =>\n            typeof item === 'object' && item !== null ? sanitizeObject(item) : item\n          )\n        }\n        // Pass through other values\n        else {\n          result[key] = value\n        }\n      }\n\n      return result\n    }\n\n    info.context = sanitizeObject(sanitized)\n  }\n\n  return info\n})\n\n/**\n * Custom format for console output\n * Colorizes the level and formats the message in a readable way\n */\nconst consoleFormat = format.combine(\n  sanitizeForLogging(),\n  format.colorize(),\n  format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\n  format.printf(({ level, message, timestamp, context, stack }) => {\n    // Format the context\n    let contextStr = ''\n    if (context) {\n      contextStr = `\\n${JSON.stringify(context, null, 2)}`\n    }\n\n    // Include stack trace for errors if available\n    const stackStr = stack ? `\\n${stack}` : ''\n\n    // Format the log message\n    return `${timestamp} ${level}: ${message}${contextStr}${stackStr}`\n  })\n)\n\n/**\n * Format for file output\n * Includes timestamp, level, message, and metadata in JSON format\n */\nconst fileFormat = format.combine(\n  sanitizeForLogging(),\n  format.timestamp(),\n  format.errors({ stack: true }),\n  format.json()\n)\n\n// Create daily rotate file transports\nconst combinedDailyRotateTransport = new transports.DailyRotateFile({\n  filename: path.join(logsDir, 'combined-%DATE%.log'),\n  datePattern: 'YYYY-MM-DD',\n  zippedArchive: true,\n  maxSize: '20m',\n  maxFiles: '14d',\n  format: fileFormat,\n})\n\nconst errorDailyRotateTransport = new transports.DailyRotateFile({\n  filename: path.join(logsDir, 'error-%DATE%.log'),\n  datePattern: 'YYYY-MM-DD',\n  zippedArchive: true,\n  maxSize: '20m',\n  maxFiles: '30d',\n  level: 'error',\n  format: fileFormat,\n})\n\n/**\n * Create the Winston logger\n */\nexport const advancedLogger = createLogger({\n  level: process.env.LOG_LEVEL || 'info',\n  defaultMeta: {\n    service: 'property-portal',\n    environment: process.env.NODE_ENV || 'development',\n  },\n  transports: [\n    // Console transport with custom format\n    new transports.Console({\n      format: consoleFormat,\n    }),\n\n    // Daily rotate file transports\n    combinedDailyRotateTransport,\n    errorDailyRotateTransport,\n  ],\n\n  // Don't exit on handled exceptions\n  exitOnError: false,\n})\n\n// Add event listeners for transport errors\ncombinedDailyRotateTransport.on('error', error => {\n  console.error('Error in combined log transport:', error)\n})\n\nerrorDailyRotateTransport.on('error', error => {\n  console.error('Error in error log transport:', error)\n})\n\n// Add a stream for Morgan HTTP request logging\nexport const logStream = {\n  write: (message: string) => {\n    advancedLogger.http(message.trim())\n  },\n}\n\n/**\n * Add request context to log entries\n * @param req Express request object\n * @returns Logger with request context\n */\nexport function loggerWithRequest(req: any) {\n  return {\n    debug: (message: string, meta: Record<string, any> = {}) =>\n      advancedLogger.debug(message, {\n        context: {\n          ...meta,\n          requestId: req.id,\n          path: req.path,\n          method: req.method,\n        },\n      }),\n\n    info: (message: string, meta: Record<string, any> = {}) =>\n      advancedLogger.info(message, {\n        context: {\n          ...meta,\n          requestId: req.id,\n          path: req.path,\n          method: req.method,\n        },\n      }),\n\n    warn: (message: string, meta: Record<string, any> = {}) =>\n      advancedLogger.warn(message, {\n        context: {\n          ...meta,\n          requestId: req.id,\n          path: req.path,\n          method: req.method,\n        },\n      }),\n\n    error: (message: string, error?: Error, meta: Record<string, any> = {}) =>\n      advancedLogger.error(message, {\n        context: {\n          ...meta,\n          requestId: req.id,\n          path: req.path,\n          method: req.method,\n        },\n        stack: error?.stack,\n      }),\n  }\n}\n\n// Export default logger\nexport default advancedLogger\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\logging\\fixed-logger.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 39,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 39,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [868, 871], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [868, 871], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'LogLevel'.",
        "line": 43,
        "column": 13,
        "nodeType": "Identifier",
        "endLine": 43,
        "endColumn": 21
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `··`",
        "line": 100,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 100,
        "endColumn": 3,
        "fix": { "range": [2408, 2410], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 110,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 110,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2756, 2759], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2756, 2759], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 111,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 111,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2819, 2822], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2819, 2822], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `,`",
        "line": 111,
        "column": 75,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 111,
        "endColumn": 75,
        "fix": { "range": [2857, 2857], "text": "," }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 113,
        "column": 12,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 113,
        "endColumn": 17
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 115,
        "column": 13,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 115,
        "endColumn": 14,
        "fix": { "range": [2950, 2951], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `,`",
        "line": 117,
        "column": 29,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 117,
        "endColumn": 29,
        "fix": { "range": [3018, 3018], "text": "," }
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'sendPersistedLogs'.",
        "line": 160,
        "column": 23,
        "nodeType": "Identifier",
        "endLine": 160,
        "endColumn": 40
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 187,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 187,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [4958, 5022], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'configureLogger'.",
        "line": 196,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 196,
        "endColumn": 32
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 230,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 230,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [6410, 6489], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 242,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 242,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [6747, 6815], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 283,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 283,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [7765, 7836], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'setLogUser'.",
        "line": 340,
        "column": 23,
        "nodeType": "Identifier",
        "endLine": 340,
        "endColumn": 33
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'setRequestId'.",
        "line": 372,
        "column": 23,
        "nodeType": "Identifier",
        "endLine": 372,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 400,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 400,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10947, 10950], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10947, 10950], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 400,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 400,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10953, 10956], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10953, 10956], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 413,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 413,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11349, 11352], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11349, 11352], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `fn:·()·=>·Promise<T>,·maxRetries·=·loggerConfig.maxRetries·||·3,·baseDelay·=·loggerConfig.retryDelay·||·1000` with `⏎··fn:·()·=>·Promise<T>,⏎··maxRetries·=·loggerConfig.maxRetries·||·3,⏎··baseDelay·=·loggerConfig.retryDelay·||·1000⏎`",
        "line": 433,
        "column": 31,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 433,
        "endColumn": 139,
        "fix": {
          "range": [11907, 12015],
          "text": "\n  fn: () => Promise<T>,\n  maxRetries = loggerConfig.maxRetries || 3,\n  baseDelay = loggerConfig.retryDelay || 1000\n"
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `··`",
        "line": 435,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 435,
        "endColumn": 3,
        "fix": { "range": [12066, 12068], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `······`",
        "line": 441,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 441,
        "endColumn": 7,
        "fix": { "range": [12217, 12223], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `······`",
        "line": 444,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 444,
        "endColumn": 7,
        "fix": { "range": [12368, 12374], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `··`",
        "line": 449,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 449,
        "endColumn": 3,
        "fix": { "range": [12482, 12484], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 459,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 459,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12673, 12676], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12673, 12676], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `····`",
        "line": 491,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 491,
        "endColumn": 5,
        "fix": { "range": [13500, 13504], "text": "" }
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 494,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 494,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [13561, 13608], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 497,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 497,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [13657, 13703], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 519,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 519,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14214, 14217], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14214, 14217], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 581,
        "column": 62,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 581,
        "endColumn": 63,
        "fix": { "range": [15820, 15821], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 588,
        "column": 13,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 588,
        "endColumn": 14,
        "fix": { "range": [16103, 16104], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 590,
        "column": 43,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 590,
        "endColumn": 44,
        "fix": { "range": [16193, 16194], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 592,
        "column": 42,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 592,
        "endColumn": 43,
        "fix": { "range": [16253, 16254], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 594,
        "column": 9,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 594,
        "endColumn": 10,
        "fix": { "range": [16273, 16274], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 596,
        "column": 70,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 596,
        "endColumn": 71,
        "fix": { "range": [16364, 16365], "text": "" }
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'debug'.",
        "line": 604,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 604,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 604,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 604,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16459, 16462], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16459, 16462], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'info'.",
        "line": 611,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 611,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 611,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 611,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16618, 16621], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16618, 16621], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'warn'.",
        "line": 618,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 618,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 618,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 618,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16778, 16781], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16778, 16781], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'error'.",
        "line": 625,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 625,
        "endColumn": 22
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `message:·string,·errorOrContext?:·Error·|·any,·context?:·any,·tags?:·string[]` with `⏎··message:·string,⏎··errorOrContext?:·Error·|·any,⏎··context?:·any,⏎··tags?:·string[]⏎`",
        "line": 625,
        "column": 23,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 625,
        "endColumn": 100,
        "fix": {
          "range": [16911, 16988],
          "text": "\n  message: string,\n  errorOrContext?: Error | any,\n  context?: any,\n  tags?: string[]\n"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 625,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 625,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16953, 16956], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16953, 16956], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 625,
        "column": 80,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 625,
        "endColumn": 83,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16968, 16971], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16968, 16971], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 627,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 627,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17044, 17047], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17044, 17047], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 632,
        "column": 4,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 632,
        "endColumn": 5,
        "fix": { "range": [17190, 17191], "text": "" }
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'fatal'.",
        "line": 644,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 644,
        "endColumn": 22
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `message:·string,·errorOrContext?:·Error·|·any,·context?:·any,·tags?:·string[]` with `⏎··message:·string,⏎··errorOrContext?:·Error·|·any,⏎··context?:·any,⏎··tags?:·string[]⏎`",
        "line": 644,
        "column": 23,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 644,
        "endColumn": 100,
        "fix": {
          "range": [17482, 17559],
          "text": "\n  message: string,\n  errorOrContext?: Error | any,\n  context?: any,\n  tags?: string[]\n"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 644,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 644,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17524, 17527], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17524, 17527], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 644,
        "column": 80,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 644,
        "endColumn": 83,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17539, 17542], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17539, 17542], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 646,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 646,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17615, 17618], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17615, 17618], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 651,
        "column": 4,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 651,
        "endColumn": 5,
        "fix": { "range": [17761, 17762], "text": "" }
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple default exports.",
        "line": 664,
        "column": 1,
        "nodeType": "ExportDefaultDeclaration",
        "endLine": 674,
        "endColumn": 2
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `·`",
        "line": 674,
        "column": 2,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 674,
        "endColumn": 2,
        "fix": { "range": [18234, 18234], "text": " " }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 712,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 712,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19102, 19105], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19102, 19105], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'LogLevel'.",
        "line": 716,
        "column": 13,
        "nodeType": "Identifier",
        "endLine": 716,
        "endColumn": 21
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `··`",
        "line": 773,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 773,
        "endColumn": 3,
        "fix": { "range": [20642, 20644], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 783,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 783,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20990, 20993], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20990, 20993], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 784,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 784,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [21053, 21056], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [21053, 21056], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `,`",
        "line": 784,
        "column": 75,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 784,
        "endColumn": 75,
        "fix": { "range": [21091, 21091], "text": "," }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 786,
        "column": 12,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 786,
        "endColumn": 17
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 788,
        "column": 13,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 788,
        "endColumn": 14,
        "fix": { "range": [21184, 21185], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `,`",
        "line": 790,
        "column": 29,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 790,
        "endColumn": 29,
        "fix": { "range": [21252, 21252], "text": "," }
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'sendPersistedLogs'.",
        "line": 833,
        "column": 23,
        "nodeType": "Identifier",
        "endLine": 833,
        "endColumn": 40
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 860,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 860,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [23192, 23256], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'configureLogger'.",
        "line": 869,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 869,
        "endColumn": 32
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 903,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 903,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [24644, 24723], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 915,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 915,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [24981, 25049], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 956,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 956,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [25999, 26070], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'setLogUser'.",
        "line": 1013,
        "column": 23,
        "nodeType": "Identifier",
        "endLine": 1013,
        "endColumn": 33
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'setRequestId'.",
        "line": 1045,
        "column": 23,
        "nodeType": "Identifier",
        "endLine": 1045,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1073,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1073,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [29181, 29184], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [29181, 29184], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1073,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1073,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [29187, 29190], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [29187, 29190], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1086,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1086,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [29583, 29586], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [29583, 29586], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `fn:·()·=>·Promise<T>,·maxRetries·=·loggerConfig.maxRetries·||·3,·baseDelay·=·loggerConfig.retryDelay·||·1000` with `⏎··fn:·()·=>·Promise<T>,⏎··maxRetries·=·loggerConfig.maxRetries·||·3,⏎··baseDelay·=·loggerConfig.retryDelay·||·1000⏎`",
        "line": 1106,
        "column": 31,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 1106,
        "endColumn": 139,
        "fix": {
          "range": [30141, 30249],
          "text": "\n  fn: () => Promise<T>,\n  maxRetries = loggerConfig.maxRetries || 3,\n  baseDelay = loggerConfig.retryDelay || 1000\n"
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `··`",
        "line": 1108,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1108,
        "endColumn": 3,
        "fix": { "range": [30300, 30302], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `······`",
        "line": 1114,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1114,
        "endColumn": 7,
        "fix": { "range": [30451, 30457], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `······`",
        "line": 1117,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1117,
        "endColumn": 7,
        "fix": { "range": [30602, 30608], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `··`",
        "line": 1122,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1122,
        "endColumn": 3,
        "fix": { "range": [30716, 30718], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1132,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1132,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [30907, 30910], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [30907, 30910], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `····`",
        "line": 1164,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1164,
        "endColumn": 5,
        "fix": { "range": [31734, 31738], "text": "" }
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 1167,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 1167,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [31795, 31842], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 1170,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 1170,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [31891, 31937], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1192,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1192,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [32448, 32451], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [32448, 32451], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 1254,
        "column": 62,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1254,
        "endColumn": 63,
        "fix": { "range": [34054, 34055], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 1261,
        "column": 13,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1261,
        "endColumn": 14,
        "fix": { "range": [34337, 34338], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 1263,
        "column": 43,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1263,
        "endColumn": 44,
        "fix": { "range": [34427, 34428], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 1265,
        "column": 42,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1265,
        "endColumn": 43,
        "fix": { "range": [34487, 34488], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 1267,
        "column": 9,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1267,
        "endColumn": 10,
        "fix": { "range": [34507, 34508], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 1269,
        "column": 70,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1269,
        "endColumn": 71,
        "fix": { "range": [34598, 34599], "text": "" }
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'debug'.",
        "line": 1277,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 1277,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1277,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1277,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [34693, 34696], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [34693, 34696], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'info'.",
        "line": 1284,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 1284,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1284,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1284,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [34852, 34855], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [34852, 34855], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'warn'.",
        "line": 1291,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 1291,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1291,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1291,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [35012, 35015], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [35012, 35015], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'error'.",
        "line": 1298,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 1298,
        "endColumn": 22
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `message:·string,·errorOrContext?:·Error·|·any,·context?:·any,·tags?:·string[]` with `⏎··message:·string,⏎··errorOrContext?:·Error·|·any,⏎··context?:·any,⏎··tags?:·string[]⏎`",
        "line": 1298,
        "column": 23,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 1298,
        "endColumn": 100,
        "fix": {
          "range": [35145, 35222],
          "text": "\n  message: string,\n  errorOrContext?: Error | any,\n  context?: any,\n  tags?: string[]\n"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1298,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1298,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [35187, 35190], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [35187, 35190], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1298,
        "column": 80,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1298,
        "endColumn": 83,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [35202, 35205], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [35202, 35205], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1300,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1300,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [35278, 35281], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [35278, 35281], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 1305,
        "column": 4,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1305,
        "endColumn": 5,
        "fix": { "range": [35424, 35425], "text": "" }
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'fatal'.",
        "line": 1317,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 1317,
        "endColumn": 22
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `message:·string,·errorOrContext?:·Error·|·any,·context?:·any,·tags?:·string[]` with `⏎··message:·string,⏎··errorOrContext?:·Error·|·any,⏎··context?:·any,⏎··tags?:·string[]⏎`",
        "line": 1317,
        "column": 23,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 1317,
        "endColumn": 100,
        "fix": {
          "range": [35716, 35793],
          "text": "\n  message: string,\n  errorOrContext?: Error | any,\n  context?: any,\n  tags?: string[]\n"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1317,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1317,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [35758, 35761], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [35758, 35761], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1317,
        "column": 80,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1317,
        "endColumn": 83,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [35773, 35776], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [35773, 35776], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1319,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1319,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [35849, 35852], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [35849, 35852], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 1324,
        "column": 4,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1324,
        "endColumn": 5,
        "fix": { "range": [35995, 35996], "text": "" }
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple default exports.",
        "line": 1337,
        "column": 1,
        "nodeType": "ExportDefaultDeclaration",
        "endLine": 1347,
        "endColumn": 2
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `⏎`",
        "line": 1347,
        "column": 2,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 1347,
        "endColumn": 2,
        "fix": { "range": [36468, 36468], "text": "\n" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 98,
    "fatalErrorCount": 0,
    "warningCount": 14,
    "fixableErrorCount": 42,
    "fixableWarningCount": 0,
    "source": "/**\n * Sensitive fields that should never be logged\n * Add any field names that might contain sensitive information\n */\nconst SENSITIVE_FIELDS = [\n  'password',\n  'token',\n  'secret',\n  'authorization',\n  'apiKey',\n  'api_key',\n  'key',\n  'credential',\n  'ssn',\n  'socialSecurity',\n  'creditCard',\n  'cardNumber',\n  'cvv',\n]\n\n// Regular expressions to detect sensitive data patterns\nconst SENSITIVE_PATTERNS = [\n  /\\b(?:\\d[ -]*?){13,16}\\b/, // Credit card numbers\n  /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\\b/, // Email addresses\n  /\\b(?:\\d{3}[-.]?){2}\\d{4}\\b/, // SSN\n]\n\n// Maximum number of logs to persist in localStorage\nconst MAX_PERSISTENT_LOGS = 50\n\n// Store persisted logs in memory\nlet persistentLogs: PersistentLog[] = []\n\n// Interface for persisted logs\ninterface PersistentLog {\n  timestamp: number\n  level: LogLevel\n  message: string\n  context?: any\n  error?: string\n}\n\nexport enum LogLevel {\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n  FATAL = 'fatal',\n}\n\ninterface LoggerConfig {\n  enableConsole?: boolean\n  minLevel?: LogLevel\n  sentryDsn?: string\n  logRocketAppId?: string\n  userId?: string\n  userEmail?: string\n  requestId?: string\n  release?: string\n  environment?: 'development' | 'test' | 'production'\n  sampleRate?: number\n  maxRetries?: number\n  retryDelay?: number\n}\n\nconst defaultConfig: LoggerConfig = {\n  enableConsole: true,\n  // Set different default log levels based on environment\n  minLevel: process.env.NODE_ENV === 'production' ? LogLevel.WARN : LogLevel.DEBUG,\n  environment:\n    (process.env.NODE_ENV as unknown as 'development' | 'test' | 'production') || 'development',\n  release: process.env.NEXT_PUBLIC_APP_VERSION,\n  sampleRate: 1.0, // Default to 100% sampling\n  maxRetries: 3, // Default to 3 retry attempts\n  retryDelay: 1000, // Default to 1 second base delay\n}\n\n// Global logger configuration\nlet loggerConfig: LoggerConfig = { ...defaultConfig }\nlet sentryInitialized = false\nlet logRocketInitialized = false\n\n// Flag to track if we've warned about server usage\nlet serverWarningShown = false\n\n/**\n * Check if code is running in browser environment\n */\nfunction isBrowser(): boolean {\n  return typeof window !== 'undefined'\n}\n\n/**\n * @returns Object containing device and browser details\n */\nfunction getDeviceInfo(): Record<string, string | number | null> {\n  if (!isBrowser()) {\n    return { environment: 'server' }\n  }\n  \n  try {\n    return {\n      userAgent: navigator.userAgent,\n      screenWidth: window.screen.width,\n      screenHeight: window.screen.height,\n      language: navigator.language,\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n      platform: navigator.platform,\n      vendor: navigator.vendor,\n      deviceMemory: (navigator as any).deviceMemory || null,\n      connectionType: (navigator as any).connection?.effectiveType || null\n    }\n  } catch (error) {\n    // Fallback if any browser APIs are not available\n    return { \n      userAgent: navigator.userAgent,\n      environment: 'browser'\n    }\n  }\n}\n\n/**\n * Persist critical logs to localStorage for later sending\n */\nfunction persistLog(log: PersistentLog) {\n  if (isBrowser() && typeof localStorage !== 'undefined') {\n    try {\n      // Load existing logs from localStorage\n      const storedLogs = localStorage.getItem('persistentLogs')\n      persistentLogs = storedLogs ? JSON.parse(storedLogs) : []\n\n      // Add new log and limit to maximum number\n      persistentLogs = [log, ...persistentLogs].slice(0, MAX_PERSISTENT_LOGS)\n\n      // Save back to localStorage\n      localStorage.setItem('persistentLogs', JSON.stringify(persistentLogs))\n    } catch (error) {\n      console.error('Failed to persist log:', error)\n    }\n  }\n}\n\n/**\n * Warn if logger is used in server context with client-only features\n */\nfunction warnIfServer() {\n  if (!isBrowser() && !serverWarningShown) {\n    console.warn(\n      'Warning: simplified-logger is being used in a server context. ' +\n        'Sentry and LogRocket integrations will be disabled. ' +\n        'For server-side logging, consider using a server-compatible logger.'\n    )\n    serverWarningShown = true\n  }\n}\n\n/**\n * Send persisted logs to external services\n */\nexport async function sendPersistedLogs() {\n  if (!isBrowser() || typeof localStorage === 'undefined') return\n\n  try {\n    // Get logs from localStorage\n    const storedLogs = localStorage.getItem('persistentLogs')\n    if (!storedLogs) return\n\n    const logs: PersistentLog[] = JSON.parse(storedLogs)\n    if (logs.length === 0) return\n\n    // Attempt to send all persisted logs\n    await Promise.all(\n      logs.map((log: PersistentLog) =>\n        logToExternalServices(\n          log.level,\n          log.message,\n          log.context,\n          undefined,\n          log.error ? new Error(log.error) : undefined\n        )\n      )\n    )\n\n    // Clear persisted logs after successful sending\n    localStorage.removeItem('persistentLogs')\n    persistentLogs = []\n    console.debug(`Successfully sent ${logs.length} persisted logs`)\n  } catch (err) {\n    console.error('Failed to send persisted logs:', err)\n  }\n}\n\n/**\n * Configure the logger\n */\nexport function configureLogger(config: Partial<LoggerConfig>) {\n  loggerConfig = { ...loggerConfig, ...config }\n\n  // Use environment variables for secrets if not explicitly provided\n  const sentryDsn = loggerConfig.sentryDsn || process.env.NEXT_PUBLIC_SENTRY_DSN\n  const logRocketAppId = loggerConfig.logRocketAppId || process.env.NEXT_PUBLIC_LOGROCKET_APP_ID\n\n  // Initialize external logging services if configured and in browser environment\n  if (sentryDsn && isBrowser()) {\n    initSentry(sentryDsn, loggerConfig)\n  } else if (sentryDsn) {\n    warnIfServer()\n  }\n\n  if (logRocketAppId && isBrowser()) {\n    initLogRocket(logRocketAppId, loggerConfig)\n  } else if (logRocketAppId) {\n    warnIfServer()\n  }\n\n  // In production, ensure we're not logging too verbosely\n  if (process.env.NODE_ENV === 'production' && !config.minLevel) {\n    loggerConfig.minLevel = LogLevel.WARN\n  }\n\n  // Set up online event listener to send persisted logs when connection is restored\n  if (isBrowser() && typeof window !== 'undefined' && typeof navigator !== 'undefined') {\n    // Try to send any persisted logs on initialization\n    if (navigator.onLine) {\n      sendPersistedLogs()\n    }\n\n    // Add event listener for online status\n    window.addEventListener('online', () => {\n      console.debug('Network connection restored, attempting to send persisted logs')\n      sendPersistedLogs()\n    })\n  }\n}\n\n/**\n * Initialize Sentry for error tracking\n */\nasync function initSentry(dsn: string, config: LoggerConfig) {\n  // Skip initialization if already initialized or if dsn is missing/empty\n  if (sentryInitialized) {\n    console.debug('Sentry already initialized, skipping initialization')\n    return\n  }\n\n  if (!dsn || dsn.trim() === '') {\n    console.warn('Sentry DSN is empty or missing, skipping initialization')\n    return null\n  }\n\n  try {\n    const Sentry = await import('@sentry/nextjs')\n\n    Sentry.init({\n      dsn,\n      environment: config.environment,\n      release: config.release,\n      tracesSampleRate: config.environment === 'production' ? 0.2 : 1.0,\n    })\n\n    // Set user information if available\n    if (config.userId || config.userEmail) {\n      Sentry.setUser({\n        id: config.userId,\n        email: config.userEmail,\n      })\n    }\n\n    sentryInitialized = true\n    return Sentry\n  } catch (error) {\n    console.error('Failed to initialize Sentry:', error)\n    return null\n  }\n}\n\n/**\n * Initialize LogRocket for session replay\n */\nasync function initLogRocket(appId: string, config: LoggerConfig) {\n  // Skip initialization if already initialized or if appId is missing/empty\n  if (logRocketInitialized) {\n    console.debug('LogRocket already initialized, skipping initialization')\n    return\n  }\n\n  if (!appId || appId.trim() === '') {\n    console.warn('LogRocket App ID is empty or missing, skipping initialization')\n    return null\n  }\n\n  try {\n    const LogRocket = (await import('logrocket')).default as typeof import('logrocket').default\n\n    LogRocket.init(appId, {\n      release: config.release,\n      console: {\n        isEnabled: {\n          error: true,\n          warn: true,\n        },\n      },\n      network: {\n        isEnabled: true,\n        requestSanitizer: request => {\n          // Don't log request bodies for sensitive endpoints\n          if (request.url.includes('/api/auth') || request.url.includes('/api/user')) {\n            request.body = null\n          }\n          return request\n        },\n        responseSanitizer: response => {\n          // Don't log response bodies for sensitive endpoints\n          if (response.url.includes('/api/auth') || response.url.includes('/api/user')) {\n            response.body = null\n          }\n          return response\n        },\n      },\n    })\n\n    // Set user information if available\n    if (config.userId || config.userEmail) {\n      LogRocket.identify(config.userId || 'anonymous', {\n        email: config.userEmail,\n      })\n    }\n\n    logRocketInitialized = true\n    return LogRocket\n  } catch (error) {\n    console.error('Failed to initialize LogRocket:', error)\n    return null\n  }\n}\n\n/**\n * Set user information for logging\n */\nexport async function setLogUser(userId?: string, userEmail?: string) {\n  loggerConfig.userId = userId\n  loggerConfig.userEmail = userEmail\n\n  // Update user information in external services only in browser environment\n  if (sentryInitialized && isBrowser()) {\n    try {\n      const Sentry = await import('@sentry/nextjs')\n      Sentry.setUser({\n        id: userId,\n        email: userEmail,\n      })\n    } catch (err) {\n      console.error('Failed to set user in Sentry:', err)\n    }\n  }\n\n  if (logRocketInitialized && isBrowser()) {\n    try {\n      const LogRocket = (await import('logrocket')).default as typeof import('logrocket').default\n      LogRocket.identify(userId || 'anonymous', {\n        email: userEmail,\n      })\n    } catch (err) {\n      console.error('Failed to set user in LogRocket:', err)\n    }\n  }\n}\n\n/**\n * Set request ID for logging\n */\nexport async function setRequestId(requestId: string) {\n  loggerConfig.requestId = requestId\n\n  // Update request ID in external services\n  if (sentryInitialized && typeof window !== 'undefined') {\n    try {\n      const Sentry = await import('@sentry/nextjs')\n      Sentry.configureScope(scope => {\n        scope.setTag('requestId', requestId)\n      })\n    } catch (err) {\n      console.error('Failed to set request ID in Sentry:', err)\n    }\n  }\n\n  if (logRocketInitialized && typeof window !== 'undefined') {\n    try {\n      const LogRocket = (await import('logrocket')).default\n      LogRocket.setMeta('requestId', requestId)\n    } catch (err) {\n      console.error('Failed to set request ID in LogRocket:', err)\n    }\n  }\n}\n\n/**\n * Sanitize data for logging by removing sensitive fields\n */\nfunction sanitizeForLogging(data: any): any {\n  if (!data) return data\n\n  // Handle string values - apply pattern-based sanitization\n  if (typeof data === 'string') {\n    return SENSITIVE_PATTERNS.reduce((acc, pattern) => acc.replace(pattern, '[REDACTED]'), data)\n  }\n\n  if (typeof data === 'object' && data !== null) {\n    if (Array.isArray(data)) {\n      return data.map(sanitizeForLogging)\n    }\n\n    const sanitized: Record<string, any> = {}\n    for (const [key, value] of Object.entries(data)) {\n      // Field name check - redact based on sensitive field names\n      if (SENSITIVE_FIELDS.some(field => key.toLowerCase().includes(field.toLowerCase()))) {\n        sanitized[key] = '[REDACTED]'\n      }\n      // Value pattern check for strings and recursive sanitization for other types\n      else {\n        sanitized[key] = sanitizeForLogging(value)\n      }\n    }\n    return sanitized\n  }\n\n  return data\n}\n\n/**\n * Retry a function with exponential backoff\n */\nasync function withRetries<T>(fn: () => Promise<T>, maxRetries = loggerConfig.maxRetries || 3, baseDelay = loggerConfig.retryDelay || 1000): Promise<T> {\n  let lastError: Error | undefined\n  \n  for (let attempt = 0; attempt < maxRetries; attempt++) {\n    try {\n      return await fn()\n    } catch (error) {\n      lastError = error as Error\n      \n      // Calculate delay with exponential backoff and jitter\n      const delay = baseDelay * Math.pow(2, attempt) * (0.5 + Math.random() * 0.5)\n      \n      // Wait before next attempt\n      await new Promise(resolve => setTimeout(resolve, delay))\n    }\n  }\n  \n  throw lastError || new Error('Operation failed after retries')\n}\n\n/**\n * Log a message with the specified level\n */\nasync function log(\n  level: LogLevel,\n  message: string,\n  context?: any,\n  tags?: string[],\n  error?: Error\n) {\n  // Skip logging if level is below minimum configured level\n  const levelOrder = {\n    [LogLevel.DEBUG]: 0,\n    [LogLevel.INFO]: 1,\n    [LogLevel.WARN]: 2,\n    [LogLevel.ERROR]: 3,\n    [LogLevel.FATAL]: 4,\n  }\n\n  if (levelOrder[level] < levelOrder[loggerConfig.minLevel || LogLevel.DEBUG]) {\n    return\n  }\n\n  // Add standard context information\n  const enhancedContext = {\n    ...context,\n    timestamp: new Date().toISOString(),\n    requestId: loggerConfig.requestId,\n    userId: loggerConfig.userId,\n    ...getDeviceInfo(),\n  }\n\n  // Sanitize context to remove sensitive information\n  const sanitizedContext = sanitizeForLogging(enhancedContext)\n\n  // Log to console if enabled\n  if (loggerConfig.enableConsole) {\n    const consoleMessage = `[${level.toUpperCase()}] ${message}`\n    \n    switch (level) {\n      case LogLevel.DEBUG:\n        console.debug(consoleMessage, sanitizedContext)\n        break\n      case LogLevel.INFO:\n        console.info(consoleMessage, sanitizedContext)\n        break\n      case LogLevel.WARN:\n        console.warn(consoleMessage, sanitizedContext)\n        break\n      case LogLevel.ERROR:\n      case LogLevel.FATAL:\n        console.error(consoleMessage, sanitizedContext, error)\n        break\n    }\n  }\n\n  // Log to external services\n  await logToExternalServices(level, message, enhancedContext, tags, error)\n}\n\n/**\n * Log to external services like Sentry and LogRocket\n */\nasync function logToExternalServices(\n  level: LogLevel,\n  message: string,\n  context?: any,\n  tags?: string[],\n  error?: Error\n) {\n  // Skip external logging if not in browser environment\n  if (!isBrowser()) {\n    return\n  }\n\n  // Persist critical errors\n  if (level === LogLevel.FATAL || level === LogLevel.ERROR) {\n    persistLog({\n      timestamp: Date.now(),\n      level,\n      message,\n      context: sanitizeForLogging(context),\n      error: error?.toString(),\n    })\n\n    // Try to send persisted logs if online\n    if (typeof navigator !== 'undefined' && navigator.onLine) {\n      sendPersistedLogs()\n    }\n  }\n\n  // Send to Sentry if configured and level is ERROR or FATAL\n  if (sentryInitialized && (level === LogLevel.ERROR || level === LogLevel.FATAL)) {\n    try {\n      await withRetries(async () => {\n        const Sentry = await import('@sentry/nextjs')\n\n        // Set extra context\n        Sentry.configureScope(scope => {\n          if (context) {\n            Object.entries(context).forEach(([key, value]) => {\n              scope.setExtra(key, value)\n            })\n          }\n\n          if (tags) {\n            tags.forEach(tag => {\n              scope.setTag(tag, 'true')\n            })\n          }\n        })\n\n        // Capture the error or message\n        if (error) {\n          Sentry.captureException(error)\n        } else {\n          Sentry.captureMessage(message, level)\n        }\n      })\n    } catch (err) {\n      console.error('Failed to log to Sentry after retries:', err)\n    }\n  }\n\n  // Send to LogRocket if configured\n  if (logRocketInitialized) {\n    try {\n      await withRetries(async () => {\n        const LogRocket = (await import('logrocket')).default;\n\n        // Log the message\n        if (level === LogLevel.ERROR || level === LogLevel.FATAL) {\n          LogRocket.captureException(error || new Error(message), {\n            tags: tags?.reduce((acc, tag) => ({ ...acc, [tag]: true }), {}),\n            extra: context,\n          });\n        } else if (level === LogLevel.WARN) {\n          LogRocket.warn(message, context);\n        } else {\n          LogRocket.log(message, context);\n        }\n      });\n    } catch (err) {\n      console.error('Failed to log to LogRocket after retries:', err);\n    }\n  }\n}\n\n/**\n * Log a debug message\n */\nexport function debug(message: string, context?: any, tags?: string[]) {\n  return log(LogLevel.DEBUG, message, context, tags)\n}\n\n/**\n * Log an info message\n */\nexport function info(message: string, context?: any, tags?: string[]) {\n  return log(LogLevel.INFO, message, context, tags)\n}\n\n/**\n * Log a warning message\n */\nexport function warn(message: string, context?: any, tags?: string[]) {\n  return log(LogLevel.WARN, message, context, tags)\n}\n\n/**\n * Log an error message\n */\nexport function error(message: string, errorOrContext?: Error | any, context?: any, tags?: string[]) {\n  let errorObj: Error | undefined\n  let contextObj: any = context\n\n  // Handle case where errorOrContext is an Error object\n  if (errorOrContext instanceof Error) {\n    errorObj = errorOrContext\n  } \n  // Handle case where errorOrContext is a context object\n  else if (errorOrContext && typeof errorOrContext === 'object') {\n    contextObj = errorOrContext\n  }\n\n  return log(LogLevel.ERROR, message, contextObj, tags, errorObj)\n}\n\n/**\n * Log a fatal error message\n */\nexport function fatal(message: string, errorOrContext?: Error | any, context?: any, tags?: string[]) {\n  let errorObj: Error | undefined\n  let contextObj: any = context\n\n  // Handle case where errorOrContext is an Error object\n  if (errorOrContext instanceof Error) {\n    errorObj = errorOrContext\n  } \n  // Handle case where errorOrContext is a context object\n  else if (errorOrContext && typeof errorOrContext === 'object') {\n    contextObj = errorOrContext\n  }\n\n  return log(LogLevel.FATAL, message, contextObj, tags, errorObj)\n}\n\n// Initialize with default configuration\nconfigureLogger(defaultConfig)\n\n// Export a default logger instance\nexport default {\n  debug,\n  info,\n  warn,\n  error,\n  fatal,\n  configureLogger,\n  setLogUser,\n  setRequestId,\n  sendPersistedLogs,\n}/**\n * Sensitive fields that should never be logged\n * Add any field names that might contain sensitive information\n */\nconst SENSITIVE_FIELDS = [\n  'password',\n  'token',\n  'secret',\n  'authorization',\n  'apiKey',\n  'api_key',\n  'key',\n  'credential',\n  'ssn',\n  'socialSecurity',\n  'creditCard',\n  'cardNumber',\n  'cvv',\n]\n\n// Regular expressions to detect sensitive data patterns\nconst SENSITIVE_PATTERNS = [\n  /\\b(?:\\d[ -]*?){13,16}\\b/, // Credit card numbers\n  /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\\b/, // Email addresses\n  /\\b(?:\\d{3}[-.]?){2}\\d{4}\\b/, // SSN\n]\n\n// Maximum number of logs to persist in localStorage\nconst MAX_PERSISTENT_LOGS = 50\n\n// Store persisted logs in memory\nlet persistentLogs: PersistentLog[] = []\n\n// Interface for persisted logs\ninterface PersistentLog {\n  timestamp: number\n  level: LogLevel\n  message: string\n  context?: any\n  error?: string\n}\n\nexport enum LogLevel {\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n  FATAL = 'fatal',\n}\n\ninterface LoggerConfig {\n  enableConsole?: boolean\n  minLevel?: LogLevel\n  sentryDsn?: string\n  logRocketAppId?: string\n  userId?: string\n  userEmail?: string\n  requestId?: string\n  release?: string\n  environment?: 'development' | 'test' | 'production'\n  sampleRate?: number\n  maxRetries?: number\n  retryDelay?: number\n}\n\nconst defaultConfig: LoggerConfig = {\n  enableConsole: true,\n  // Set different default log levels based on environment\n  minLevel: process.env.NODE_ENV === 'production' ? LogLevel.WARN : LogLevel.DEBUG,\n  environment:\n    (process.env.NODE_ENV as unknown as 'development' | 'test' | 'production') || 'development',\n  release: process.env.NEXT_PUBLIC_APP_VERSION,\n  sampleRate: 1.0, // Default to 100% sampling\n  maxRetries: 3, // Default to 3 retry attempts\n  retryDelay: 1000, // Default to 1 second base delay\n}\n\n// Global logger configuration\nlet loggerConfig: LoggerConfig = { ...defaultConfig }\nlet sentryInitialized = false\nlet logRocketInitialized = false\n\n// Flag to track if we've warned about server usage\nlet serverWarningShown = false\n\n/**\n * Check if code is running in browser environment\n */\nfunction isBrowser(): boolean {\n  return typeof window !== 'undefined'\n}\n\n/**\n * @returns Object containing device and browser details\n */\nfunction getDeviceInfo(): Record<string, string | number | null> {\n  if (!isBrowser()) {\n    return { environment: 'server' }\n  }\n  \n  try {\n    return {\n      userAgent: navigator.userAgent,\n      screenWidth: window.screen.width,\n      screenHeight: window.screen.height,\n      language: navigator.language,\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n      platform: navigator.platform,\n      vendor: navigator.vendor,\n      deviceMemory: (navigator as any).deviceMemory || null,\n      connectionType: (navigator as any).connection?.effectiveType || null\n    }\n  } catch (error) {\n    // Fallback if any browser APIs are not available\n    return { \n      userAgent: navigator.userAgent,\n      environment: 'browser'\n    }\n  }\n}\n\n/**\n * Persist critical logs to localStorage for later sending\n */\nfunction persistLog(log: PersistentLog) {\n  if (isBrowser() && typeof localStorage !== 'undefined') {\n    try {\n      // Load existing logs from localStorage\n      const storedLogs = localStorage.getItem('persistentLogs')\n      persistentLogs = storedLogs ? JSON.parse(storedLogs) : []\n\n      // Add new log and limit to maximum number\n      persistentLogs = [log, ...persistentLogs].slice(0, MAX_PERSISTENT_LOGS)\n\n      // Save back to localStorage\n      localStorage.setItem('persistentLogs', JSON.stringify(persistentLogs))\n    } catch (error) {\n      console.error('Failed to persist log:', error)\n    }\n  }\n}\n\n/**\n * Warn if logger is used in server context with client-only features\n */\nfunction warnIfServer() {\n  if (!isBrowser() && !serverWarningShown) {\n    console.warn(\n      'Warning: simplified-logger is being used in a server context. ' +\n        'Sentry and LogRocket integrations will be disabled. ' +\n        'For server-side logging, consider using a server-compatible logger.'\n    )\n    serverWarningShown = true\n  }\n}\n\n/**\n * Send persisted logs to external services\n */\nexport async function sendPersistedLogs() {\n  if (!isBrowser() || typeof localStorage === 'undefined') return\n\n  try {\n    // Get logs from localStorage\n    const storedLogs = localStorage.getItem('persistentLogs')\n    if (!storedLogs) return\n\n    const logs: PersistentLog[] = JSON.parse(storedLogs)\n    if (logs.length === 0) return\n\n    // Attempt to send all persisted logs\n    await Promise.all(\n      logs.map((log: PersistentLog) =>\n        logToExternalServices(\n          log.level,\n          log.message,\n          log.context,\n          undefined,\n          log.error ? new Error(log.error) : undefined\n        )\n      )\n    )\n\n    // Clear persisted logs after successful sending\n    localStorage.removeItem('persistentLogs')\n    persistentLogs = []\n    console.debug(`Successfully sent ${logs.length} persisted logs`)\n  } catch (err) {\n    console.error('Failed to send persisted logs:', err)\n  }\n}\n\n/**\n * Configure the logger\n */\nexport function configureLogger(config: Partial<LoggerConfig>) {\n  loggerConfig = { ...loggerConfig, ...config }\n\n  // Use environment variables for secrets if not explicitly provided\n  const sentryDsn = loggerConfig.sentryDsn || process.env.NEXT_PUBLIC_SENTRY_DSN\n  const logRocketAppId = loggerConfig.logRocketAppId || process.env.NEXT_PUBLIC_LOGROCKET_APP_ID\n\n  // Initialize external logging services if configured and in browser environment\n  if (sentryDsn && isBrowser()) {\n    initSentry(sentryDsn, loggerConfig)\n  } else if (sentryDsn) {\n    warnIfServer()\n  }\n\n  if (logRocketAppId && isBrowser()) {\n    initLogRocket(logRocketAppId, loggerConfig)\n  } else if (logRocketAppId) {\n    warnIfServer()\n  }\n\n  // In production, ensure we're not logging too verbosely\n  if (process.env.NODE_ENV === 'production' && !config.minLevel) {\n    loggerConfig.minLevel = LogLevel.WARN\n  }\n\n  // Set up online event listener to send persisted logs when connection is restored\n  if (isBrowser() && typeof window !== 'undefined' && typeof navigator !== 'undefined') {\n    // Try to send any persisted logs on initialization\n    if (navigator.onLine) {\n      sendPersistedLogs()\n    }\n\n    // Add event listener for online status\n    window.addEventListener('online', () => {\n      console.debug('Network connection restored, attempting to send persisted logs')\n      sendPersistedLogs()\n    })\n  }\n}\n\n/**\n * Initialize Sentry for error tracking\n */\nasync function initSentry(dsn: string, config: LoggerConfig) {\n  // Skip initialization if already initialized or if dsn is missing/empty\n  if (sentryInitialized) {\n    console.debug('Sentry already initialized, skipping initialization')\n    return\n  }\n\n  if (!dsn || dsn.trim() === '') {\n    console.warn('Sentry DSN is empty or missing, skipping initialization')\n    return null\n  }\n\n  try {\n    const Sentry = await import('@sentry/nextjs')\n\n    Sentry.init({\n      dsn,\n      environment: config.environment,\n      release: config.release,\n      tracesSampleRate: config.environment === 'production' ? 0.2 : 1.0,\n    })\n\n    // Set user information if available\n    if (config.userId || config.userEmail) {\n      Sentry.setUser({\n        id: config.userId,\n        email: config.userEmail,\n      })\n    }\n\n    sentryInitialized = true\n    return Sentry\n  } catch (error) {\n    console.error('Failed to initialize Sentry:', error)\n    return null\n  }\n}\n\n/**\n * Initialize LogRocket for session replay\n */\nasync function initLogRocket(appId: string, config: LoggerConfig) {\n  // Skip initialization if already initialized or if appId is missing/empty\n  if (logRocketInitialized) {\n    console.debug('LogRocket already initialized, skipping initialization')\n    return\n  }\n\n  if (!appId || appId.trim() === '') {\n    console.warn('LogRocket App ID is empty or missing, skipping initialization')\n    return null\n  }\n\n  try {\n    const LogRocket = (await import('logrocket')).default as typeof import('logrocket').default\n\n    LogRocket.init(appId, {\n      release: config.release,\n      console: {\n        isEnabled: {\n          error: true,\n          warn: true,\n        },\n      },\n      network: {\n        isEnabled: true,\n        requestSanitizer: request => {\n          // Don't log request bodies for sensitive endpoints\n          if (request.url.includes('/api/auth') || request.url.includes('/api/user')) {\n            request.body = null\n          }\n          return request\n        },\n        responseSanitizer: response => {\n          // Don't log response bodies for sensitive endpoints\n          if (response.url.includes('/api/auth') || response.url.includes('/api/user')) {\n            response.body = null\n          }\n          return response\n        },\n      },\n    })\n\n    // Set user information if available\n    if (config.userId || config.userEmail) {\n      LogRocket.identify(config.userId || 'anonymous', {\n        email: config.userEmail,\n      })\n    }\n\n    logRocketInitialized = true\n    return LogRocket\n  } catch (error) {\n    console.error('Failed to initialize LogRocket:', error)\n    return null\n  }\n}\n\n/**\n * Set user information for logging\n */\nexport async function setLogUser(userId?: string, userEmail?: string) {\n  loggerConfig.userId = userId\n  loggerConfig.userEmail = userEmail\n\n  // Update user information in external services only in browser environment\n  if (sentryInitialized && isBrowser()) {\n    try {\n      const Sentry = await import('@sentry/nextjs')\n      Sentry.setUser({\n        id: userId,\n        email: userEmail,\n      })\n    } catch (err) {\n      console.error('Failed to set user in Sentry:', err)\n    }\n  }\n\n  if (logRocketInitialized && isBrowser()) {\n    try {\n      const LogRocket = (await import('logrocket')).default as typeof import('logrocket').default\n      LogRocket.identify(userId || 'anonymous', {\n        email: userEmail,\n      })\n    } catch (err) {\n      console.error('Failed to set user in LogRocket:', err)\n    }\n  }\n}\n\n/**\n * Set request ID for logging\n */\nexport async function setRequestId(requestId: string) {\n  loggerConfig.requestId = requestId\n\n  // Update request ID in external services\n  if (sentryInitialized && typeof window !== 'undefined') {\n    try {\n      const Sentry = await import('@sentry/nextjs')\n      Sentry.configureScope(scope => {\n        scope.setTag('requestId', requestId)\n      })\n    } catch (err) {\n      console.error('Failed to set request ID in Sentry:', err)\n    }\n  }\n\n  if (logRocketInitialized && typeof window !== 'undefined') {\n    try {\n      const LogRocket = (await import('logrocket')).default\n      LogRocket.setMeta('requestId', requestId)\n    } catch (err) {\n      console.error('Failed to set request ID in LogRocket:', err)\n    }\n  }\n}\n\n/**\n * Sanitize data for logging by removing sensitive fields\n */\nfunction sanitizeForLogging(data: any): any {\n  if (!data) return data\n\n  // Handle string values - apply pattern-based sanitization\n  if (typeof data === 'string') {\n    return SENSITIVE_PATTERNS.reduce((acc, pattern) => acc.replace(pattern, '[REDACTED]'), data)\n  }\n\n  if (typeof data === 'object' && data !== null) {\n    if (Array.isArray(data)) {\n      return data.map(sanitizeForLogging)\n    }\n\n    const sanitized: Record<string, any> = {}\n    for (const [key, value] of Object.entries(data)) {\n      // Field name check - redact based on sensitive field names\n      if (SENSITIVE_FIELDS.some(field => key.toLowerCase().includes(field.toLowerCase()))) {\n        sanitized[key] = '[REDACTED]'\n      }\n      // Value pattern check for strings and recursive sanitization for other types\n      else {\n        sanitized[key] = sanitizeForLogging(value)\n      }\n    }\n    return sanitized\n  }\n\n  return data\n}\n\n/**\n * Retry a function with exponential backoff\n */\nasync function withRetries<T>(fn: () => Promise<T>, maxRetries = loggerConfig.maxRetries || 3, baseDelay = loggerConfig.retryDelay || 1000): Promise<T> {\n  let lastError: Error | undefined\n  \n  for (let attempt = 0; attempt < maxRetries; attempt++) {\n    try {\n      return await fn()\n    } catch (error) {\n      lastError = error as Error\n      \n      // Calculate delay with exponential backoff and jitter\n      const delay = baseDelay * Math.pow(2, attempt) * (0.5 + Math.random() * 0.5)\n      \n      // Wait before next attempt\n      await new Promise(resolve => setTimeout(resolve, delay))\n    }\n  }\n  \n  throw lastError || new Error('Operation failed after retries')\n}\n\n/**\n * Log a message with the specified level\n */\nasync function log(\n  level: LogLevel,\n  message: string,\n  context?: any,\n  tags?: string[],\n  error?: Error\n) {\n  // Skip logging if level is below minimum configured level\n  const levelOrder = {\n    [LogLevel.DEBUG]: 0,\n    [LogLevel.INFO]: 1,\n    [LogLevel.WARN]: 2,\n    [LogLevel.ERROR]: 3,\n    [LogLevel.FATAL]: 4,\n  }\n\n  if (levelOrder[level] < levelOrder[loggerConfig.minLevel || LogLevel.DEBUG]) {\n    return\n  }\n\n  // Add standard context information\n  const enhancedContext = {\n    ...context,\n    timestamp: new Date().toISOString(),\n    requestId: loggerConfig.requestId,\n    userId: loggerConfig.userId,\n    ...getDeviceInfo(),\n  }\n\n  // Sanitize context to remove sensitive information\n  const sanitizedContext = sanitizeForLogging(enhancedContext)\n\n  // Log to console if enabled\n  if (loggerConfig.enableConsole) {\n    const consoleMessage = `[${level.toUpperCase()}] ${message}`\n    \n    switch (level) {\n      case LogLevel.DEBUG:\n        console.debug(consoleMessage, sanitizedContext)\n        break\n      case LogLevel.INFO:\n        console.info(consoleMessage, sanitizedContext)\n        break\n      case LogLevel.WARN:\n        console.warn(consoleMessage, sanitizedContext)\n        break\n      case LogLevel.ERROR:\n      case LogLevel.FATAL:\n        console.error(consoleMessage, sanitizedContext, error)\n        break\n    }\n  }\n\n  // Log to external services\n  await logToExternalServices(level, message, enhancedContext, tags, error)\n}\n\n/**\n * Log to external services like Sentry and LogRocket\n */\nasync function logToExternalServices(\n  level: LogLevel,\n  message: string,\n  context?: any,\n  tags?: string[],\n  error?: Error\n) {\n  // Skip external logging if not in browser environment\n  if (!isBrowser()) {\n    return\n  }\n\n  // Persist critical errors\n  if (level === LogLevel.FATAL || level === LogLevel.ERROR) {\n    persistLog({\n      timestamp: Date.now(),\n      level,\n      message,\n      context: sanitizeForLogging(context),\n      error: error?.toString(),\n    })\n\n    // Try to send persisted logs if online\n    if (typeof navigator !== 'undefined' && navigator.onLine) {\n      sendPersistedLogs()\n    }\n  }\n\n  // Send to Sentry if configured and level is ERROR or FATAL\n  if (sentryInitialized && (level === LogLevel.ERROR || level === LogLevel.FATAL)) {\n    try {\n      await withRetries(async () => {\n        const Sentry = await import('@sentry/nextjs')\n\n        // Set extra context\n        Sentry.configureScope(scope => {\n          if (context) {\n            Object.entries(context).forEach(([key, value]) => {\n              scope.setExtra(key, value)\n            })\n          }\n\n          if (tags) {\n            tags.forEach(tag => {\n              scope.setTag(tag, 'true')\n            })\n          }\n        })\n\n        // Capture the error or message\n        if (error) {\n          Sentry.captureException(error)\n        } else {\n          Sentry.captureMessage(message, level)\n        }\n      })\n    } catch (err) {\n      console.error('Failed to log to Sentry after retries:', err)\n    }\n  }\n\n  // Send to LogRocket if configured\n  if (logRocketInitialized) {\n    try {\n      await withRetries(async () => {\n        const LogRocket = (await import('logrocket')).default;\n\n        // Log the message\n        if (level === LogLevel.ERROR || level === LogLevel.FATAL) {\n          LogRocket.captureException(error || new Error(message), {\n            tags: tags?.reduce((acc, tag) => ({ ...acc, [tag]: true }), {}),\n            extra: context,\n          });\n        } else if (level === LogLevel.WARN) {\n          LogRocket.warn(message, context);\n        } else {\n          LogRocket.log(message, context);\n        }\n      });\n    } catch (err) {\n      console.error('Failed to log to LogRocket after retries:', err);\n    }\n  }\n}\n\n/**\n * Log a debug message\n */\nexport function debug(message: string, context?: any, tags?: string[]) {\n  return log(LogLevel.DEBUG, message, context, tags)\n}\n\n/**\n * Log an info message\n */\nexport function info(message: string, context?: any, tags?: string[]) {\n  return log(LogLevel.INFO, message, context, tags)\n}\n\n/**\n * Log a warning message\n */\nexport function warn(message: string, context?: any, tags?: string[]) {\n  return log(LogLevel.WARN, message, context, tags)\n}\n\n/**\n * Log an error message\n */\nexport function error(message: string, errorOrContext?: Error | any, context?: any, tags?: string[]) {\n  let errorObj: Error | undefined\n  let contextObj: any = context\n\n  // Handle case where errorOrContext is an Error object\n  if (errorOrContext instanceof Error) {\n    errorObj = errorOrContext\n  } \n  // Handle case where errorOrContext is a context object\n  else if (errorOrContext && typeof errorOrContext === 'object') {\n    contextObj = errorOrContext\n  }\n\n  return log(LogLevel.ERROR, message, contextObj, tags, errorObj)\n}\n\n/**\n * Log a fatal error message\n */\nexport function fatal(message: string, errorOrContext?: Error | any, context?: any, tags?: string[]) {\n  let errorObj: Error | undefined\n  let contextObj: any = context\n\n  // Handle case where errorOrContext is an Error object\n  if (errorOrContext instanceof Error) {\n    errorObj = errorOrContext\n  } \n  // Handle case where errorOrContext is a context object\n  else if (errorOrContext && typeof errorOrContext === 'object') {\n    contextObj = errorOrContext\n  }\n\n  return log(LogLevel.FATAL, message, contextObj, tags, errorObj)\n}\n\n// Initialize with default configuration\nconfigureLogger(defaultConfig)\n\n// Export a default logger instance\nexport default {\n  debug,\n  info,\n  warn,\n  error,\n  fatal,\n  configureLogger,\n  setLogUser,\n  setRequestId,\n  sendPersistedLogs,\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\logging\\logger.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\logging\\simplified-logger.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 39,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 39,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [868, 871], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [868, 871], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'LogLevel'.",
        "line": 43,
        "column": 13,
        "nodeType": "Identifier",
        "endLine": 43,
        "endColumn": 21
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `··`",
        "line": 100,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 100,
        "endColumn": 3,
        "fix": { "range": [2408, 2410], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 110,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 110,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2756, 2759], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2756, 2759], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 111,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 111,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2819, 2822], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2819, 2822], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `,`",
        "line": 111,
        "column": 75,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 111,
        "endColumn": 75,
        "fix": { "range": [2857, 2857], "text": "," }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 113,
        "column": 12,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 113,
        "endColumn": 17
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 115,
        "column": 13,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 115,
        "endColumn": 14,
        "fix": { "range": [2950, 2951], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `,`",
        "line": 117,
        "column": 29,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 117,
        "endColumn": 29,
        "fix": { "range": [3018, 3018], "text": "," }
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'sendPersistedLogs'.",
        "line": 160,
        "column": 23,
        "nodeType": "Identifier",
        "endLine": 160,
        "endColumn": 40
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 187,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 187,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [4958, 5022], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'configureLogger'.",
        "line": 196,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 196,
        "endColumn": 32
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 230,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 230,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [6410, 6489], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 242,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 242,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [6747, 6815], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 283,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 283,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [7765, 7836], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'setLogUser'.",
        "line": 340,
        "column": 23,
        "nodeType": "Identifier",
        "endLine": 340,
        "endColumn": 33
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'setRequestId'.",
        "line": 372,
        "column": 23,
        "nodeType": "Identifier",
        "endLine": 372,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 400,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 400,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10947, 10950], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10947, 10950], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 400,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 400,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10953, 10956], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10953, 10956], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 413,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 413,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11349, 11352], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11349, 11352], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `fn:·()·=>·Promise<T>,·maxRetries·=·loggerConfig.maxRetries·||·3,·baseDelay·=·loggerConfig.retryDelay·||·1000` with `⏎··fn:·()·=>·Promise<T>,⏎··maxRetries·=·loggerConfig.maxRetries·||·3,⏎··baseDelay·=·loggerConfig.retryDelay·||·1000⏎`",
        "line": 433,
        "column": 31,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 433,
        "endColumn": 139,
        "fix": {
          "range": [11907, 12015],
          "text": "\n  fn: () => Promise<T>,\n  maxRetries = loggerConfig.maxRetries || 3,\n  baseDelay = loggerConfig.retryDelay || 1000\n"
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `··`",
        "line": 435,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 435,
        "endColumn": 3,
        "fix": { "range": [12066, 12068], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `······`",
        "line": 441,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 441,
        "endColumn": 7,
        "fix": { "range": [12217, 12223], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `······`",
        "line": 444,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 444,
        "endColumn": 7,
        "fix": { "range": [12368, 12374], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `··`",
        "line": 449,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 449,
        "endColumn": 3,
        "fix": { "range": [12482, 12484], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 459,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 459,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12673, 12676], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12673, 12676], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `····`",
        "line": 491,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 491,
        "endColumn": 5,
        "fix": { "range": [13500, 13504], "text": "" }
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 494,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 494,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [13561, 13608], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 497,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 497,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [13657, 13703], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 519,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 519,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14214, 14217], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14214, 14217], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 581,
        "column": 62,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 581,
        "endColumn": 63,
        "fix": { "range": [15820, 15821], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 588,
        "column": 13,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 588,
        "endColumn": 14,
        "fix": { "range": [16103, 16104], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 590,
        "column": 43,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 590,
        "endColumn": 44,
        "fix": { "range": [16193, 16194], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 592,
        "column": 42,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 592,
        "endColumn": 43,
        "fix": { "range": [16253, 16254], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 594,
        "column": 9,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 594,
        "endColumn": 10,
        "fix": { "range": [16273, 16274], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 596,
        "column": 70,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 596,
        "endColumn": 71,
        "fix": { "range": [16364, 16365], "text": "" }
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'debug'.",
        "line": 604,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 604,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 604,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 604,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16459, 16462], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16459, 16462], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'info'.",
        "line": 611,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 611,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 611,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 611,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16618, 16621], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16618, 16621], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'warn'.",
        "line": 618,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 618,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 618,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 618,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16778, 16781], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16778, 16781], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'error'.",
        "line": 625,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 625,
        "endColumn": 22
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `message:·string,·errorOrContext?:·Error·|·any,·context?:·any,·tags?:·string[]` with `⏎··message:·string,⏎··errorOrContext?:·Error·|·any,⏎··context?:·any,⏎··tags?:·string[]⏎`",
        "line": 625,
        "column": 23,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 625,
        "endColumn": 100,
        "fix": {
          "range": [16911, 16988],
          "text": "\n  message: string,\n  errorOrContext?: Error | any,\n  context?: any,\n  tags?: string[]\n"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 625,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 625,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16953, 16956], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16953, 16956], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 625,
        "column": 80,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 625,
        "endColumn": 83,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16968, 16971], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16968, 16971], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 627,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 627,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17044, 17047], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17044, 17047], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 632,
        "column": 4,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 632,
        "endColumn": 5,
        "fix": { "range": [17190, 17191], "text": "" }
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'fatal'.",
        "line": 644,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 644,
        "endColumn": 22
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `message:·string,·errorOrContext?:·Error·|·any,·context?:·any,·tags?:·string[]` with `⏎··message:·string,⏎··errorOrContext?:·Error·|·any,⏎··context?:·any,⏎··tags?:·string[]⏎`",
        "line": 644,
        "column": 23,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 644,
        "endColumn": 100,
        "fix": {
          "range": [17482, 17559],
          "text": "\n  message: string,\n  errorOrContext?: Error | any,\n  context?: any,\n  tags?: string[]\n"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 644,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 644,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17524, 17527], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17524, 17527], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 644,
        "column": 80,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 644,
        "endColumn": 83,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17539, 17542], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17539, 17542], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 646,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 646,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17615, 17618], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17615, 17618], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 651,
        "column": 4,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 651,
        "endColumn": 5,
        "fix": { "range": [17761, 17762], "text": "" }
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple default exports.",
        "line": 664,
        "column": 1,
        "nodeType": "ExportDefaultDeclaration",
        "endLine": 674,
        "endColumn": 2
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `·`",
        "line": 674,
        "column": 2,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 674,
        "endColumn": 2,
        "fix": { "range": [18234, 18234], "text": " " }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 712,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 712,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19102, 19105], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19102, 19105], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'LogLevel'.",
        "line": 716,
        "column": 13,
        "nodeType": "Identifier",
        "endLine": 716,
        "endColumn": 21
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `··`",
        "line": 773,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 773,
        "endColumn": 3,
        "fix": { "range": [20642, 20644], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 783,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 783,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20990, 20993], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20990, 20993], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 784,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 784,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [21053, 21056], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [21053, 21056], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `,`",
        "line": 784,
        "column": 75,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 784,
        "endColumn": 75,
        "fix": { "range": [21091, 21091], "text": "," }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 786,
        "column": 12,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 786,
        "endColumn": 17
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 788,
        "column": 13,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 788,
        "endColumn": 14,
        "fix": { "range": [21184, 21185], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `,`",
        "line": 790,
        "column": 29,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 790,
        "endColumn": 29,
        "fix": { "range": [21252, 21252], "text": "," }
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'sendPersistedLogs'.",
        "line": 833,
        "column": 23,
        "nodeType": "Identifier",
        "endLine": 833,
        "endColumn": 40
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 860,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 860,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [23192, 23256], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'configureLogger'.",
        "line": 869,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 869,
        "endColumn": 32
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 903,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 903,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [24644, 24723], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 915,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 915,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [24981, 25049], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 956,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 956,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [25999, 26070], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'setLogUser'.",
        "line": 1013,
        "column": 23,
        "nodeType": "Identifier",
        "endLine": 1013,
        "endColumn": 33
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'setRequestId'.",
        "line": 1045,
        "column": 23,
        "nodeType": "Identifier",
        "endLine": 1045,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1073,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1073,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [29181, 29184], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [29181, 29184], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1073,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1073,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [29187, 29190], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [29187, 29190], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1086,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1086,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [29583, 29586], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [29583, 29586], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `fn:·()·=>·Promise<T>,·maxRetries·=·loggerConfig.maxRetries·||·3,·baseDelay·=·loggerConfig.retryDelay·||·1000` with `⏎··fn:·()·=>·Promise<T>,⏎··maxRetries·=·loggerConfig.maxRetries·||·3,⏎··baseDelay·=·loggerConfig.retryDelay·||·1000⏎`",
        "line": 1106,
        "column": 31,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 1106,
        "endColumn": 139,
        "fix": {
          "range": [30141, 30249],
          "text": "\n  fn: () => Promise<T>,\n  maxRetries = loggerConfig.maxRetries || 3,\n  baseDelay = loggerConfig.retryDelay || 1000\n"
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `··`",
        "line": 1108,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1108,
        "endColumn": 3,
        "fix": { "range": [30300, 30302], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `······`",
        "line": 1114,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1114,
        "endColumn": 7,
        "fix": { "range": [30451, 30457], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `······`",
        "line": 1117,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1117,
        "endColumn": 7,
        "fix": { "range": [30602, 30608], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `··`",
        "line": 1122,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1122,
        "endColumn": 3,
        "fix": { "range": [30716, 30718], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1132,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1132,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [30907, 30910], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [30907, 30910], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `····`",
        "line": 1164,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1164,
        "endColumn": 5,
        "fix": { "range": [31734, 31738], "text": "" }
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 1167,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 1167,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [31795, 31842], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 1170,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 1170,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [31891, 31937], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1192,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1192,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [32448, 32451], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [32448, 32451], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 1254,
        "column": 62,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1254,
        "endColumn": 63,
        "fix": { "range": [34054, 34055], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 1261,
        "column": 13,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1261,
        "endColumn": 14,
        "fix": { "range": [34337, 34338], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 1263,
        "column": 43,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1263,
        "endColumn": 44,
        "fix": { "range": [34427, 34428], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 1265,
        "column": 42,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1265,
        "endColumn": 43,
        "fix": { "range": [34487, 34488], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 1267,
        "column": 9,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1267,
        "endColumn": 10,
        "fix": { "range": [34507, 34508], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 1269,
        "column": 70,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1269,
        "endColumn": 71,
        "fix": { "range": [34598, 34599], "text": "" }
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'debug'.",
        "line": 1277,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 1277,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1277,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1277,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [34693, 34696], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [34693, 34696], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'info'.",
        "line": 1284,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 1284,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1284,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1284,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [34852, 34855], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [34852, 34855], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'warn'.",
        "line": 1291,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 1291,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1291,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1291,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [35012, 35015], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [35012, 35015], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'error'.",
        "line": 1298,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 1298,
        "endColumn": 22
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `message:·string,·errorOrContext?:·Error·|·any,·context?:·any,·tags?:·string[]` with `⏎··message:·string,⏎··errorOrContext?:·Error·|·any,⏎··context?:·any,⏎··tags?:·string[]⏎`",
        "line": 1298,
        "column": 23,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 1298,
        "endColumn": 100,
        "fix": {
          "range": [35145, 35222],
          "text": "\n  message: string,\n  errorOrContext?: Error | any,\n  context?: any,\n  tags?: string[]\n"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1298,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1298,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [35187, 35190], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [35187, 35190], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1298,
        "column": 80,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1298,
        "endColumn": 83,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [35202, 35205], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [35202, 35205], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1300,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1300,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [35278, 35281], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [35278, 35281], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 1305,
        "column": 4,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1305,
        "endColumn": 5,
        "fix": { "range": [35424, 35425], "text": "" }
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'fatal'.",
        "line": 1317,
        "column": 17,
        "nodeType": "Identifier",
        "endLine": 1317,
        "endColumn": 22
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `message:·string,·errorOrContext?:·Error·|·any,·context?:·any,·tags?:·string[]` with `⏎··message:·string,⏎··errorOrContext?:·Error·|·any,⏎··context?:·any,⏎··tags?:·string[]⏎`",
        "line": 1317,
        "column": 23,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 1317,
        "endColumn": 100,
        "fix": {
          "range": [35716, 35793],
          "text": "\n  message: string,\n  errorOrContext?: Error | any,\n  context?: any,\n  tags?: string[]\n"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1317,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1317,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [35758, 35761], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [35758, 35761], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1317,
        "column": 80,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1317,
        "endColumn": 83,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [35773, 35776], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [35773, 35776], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1319,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1319,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [35849, 35852], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [35849, 35852], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 1324,
        "column": 4,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1324,
        "endColumn": 5,
        "fix": { "range": [35995, 35996], "text": "" }
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple default exports.",
        "line": 1337,
        "column": 1,
        "nodeType": "ExportDefaultDeclaration",
        "endLine": 1347,
        "endColumn": 2
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `⏎`",
        "line": 1347,
        "column": 2,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 1347,
        "endColumn": 2,
        "fix": { "range": [36468, 36468], "text": "\n" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 98,
    "fatalErrorCount": 0,
    "warningCount": 14,
    "fixableErrorCount": 42,
    "fixableWarningCount": 0,
    "source": "/**\n * Sensitive fields that should never be logged\n * Add any field names that might contain sensitive information\n */\nconst SENSITIVE_FIELDS = [\n  'password',\n  'token',\n  'secret',\n  'authorization',\n  'apiKey',\n  'api_key',\n  'key',\n  'credential',\n  'ssn',\n  'socialSecurity',\n  'creditCard',\n  'cardNumber',\n  'cvv',\n]\n\n// Regular expressions to detect sensitive data patterns\nconst SENSITIVE_PATTERNS = [\n  /\\b(?:\\d[ -]*?){13,16}\\b/, // Credit card numbers\n  /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\\b/, // Email addresses\n  /\\b(?:\\d{3}[-.]?){2}\\d{4}\\b/, // SSN\n]\n\n// Maximum number of logs to persist in localStorage\nconst MAX_PERSISTENT_LOGS = 50\n\n// Store persisted logs in memory\nlet persistentLogs: PersistentLog[] = []\n\n// Interface for persisted logs\ninterface PersistentLog {\n  timestamp: number\n  level: LogLevel\n  message: string\n  context?: any\n  error?: string\n}\n\nexport enum LogLevel {\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n  FATAL = 'fatal',\n}\n\ninterface LoggerConfig {\n  enableConsole?: boolean\n  minLevel?: LogLevel\n  sentryDsn?: string\n  logRocketAppId?: string\n  userId?: string\n  userEmail?: string\n  requestId?: string\n  release?: string\n  environment?: 'development' | 'test' | 'production'\n  sampleRate?: number\n  maxRetries?: number\n  retryDelay?: number\n}\n\nconst defaultConfig: LoggerConfig = {\n  enableConsole: true,\n  // Set different default log levels based on environment\n  minLevel: process.env.NODE_ENV === 'production' ? LogLevel.WARN : LogLevel.DEBUG,\n  environment:\n    (process.env.NODE_ENV as unknown as 'development' | 'test' | 'production') || 'development',\n  release: process.env.NEXT_PUBLIC_APP_VERSION,\n  sampleRate: 1.0, // Default to 100% sampling\n  maxRetries: 3, // Default to 3 retry attempts\n  retryDelay: 1000, // Default to 1 second base delay\n}\n\n// Global logger configuration\nlet loggerConfig: LoggerConfig = { ...defaultConfig }\nlet sentryInitialized = false\nlet logRocketInitialized = false\n\n// Flag to track if we've warned about server usage\nlet serverWarningShown = false\n\n/**\n * Check if code is running in browser environment\n */\nfunction isBrowser(): boolean {\n  return typeof window !== 'undefined'\n}\n\n/**\n * @returns Object containing device and browser details\n */\nfunction getDeviceInfo(): Record<string, string | number | null> {\n  if (!isBrowser()) {\n    return { environment: 'server' }\n  }\n  \n  try {\n    return {\n      userAgent: navigator.userAgent,\n      screenWidth: window.screen.width,\n      screenHeight: window.screen.height,\n      language: navigator.language,\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n      platform: navigator.platform,\n      vendor: navigator.vendor,\n      deviceMemory: (navigator as any).deviceMemory || null,\n      connectionType: (navigator as any).connection?.effectiveType || null\n    }\n  } catch (error) {\n    // Fallback if any browser APIs are not available\n    return { \n      userAgent: navigator.userAgent,\n      environment: 'browser'\n    }\n  }\n}\n\n/**\n * Persist critical logs to localStorage for later sending\n */\nfunction persistLog(log: PersistentLog) {\n  if (isBrowser() && typeof localStorage !== 'undefined') {\n    try {\n      // Load existing logs from localStorage\n      const storedLogs = localStorage.getItem('persistentLogs')\n      persistentLogs = storedLogs ? JSON.parse(storedLogs) : []\n\n      // Add new log and limit to maximum number\n      persistentLogs = [log, ...persistentLogs].slice(0, MAX_PERSISTENT_LOGS)\n\n      // Save back to localStorage\n      localStorage.setItem('persistentLogs', JSON.stringify(persistentLogs))\n    } catch (error) {\n      console.error('Failed to persist log:', error)\n    }\n  }\n}\n\n/**\n * Warn if logger is used in server context with client-only features\n */\nfunction warnIfServer() {\n  if (!isBrowser() && !serverWarningShown) {\n    console.warn(\n      'Warning: simplified-logger is being used in a server context. ' +\n        'Sentry and LogRocket integrations will be disabled. ' +\n        'For server-side logging, consider using a server-compatible logger.'\n    )\n    serverWarningShown = true\n  }\n}\n\n/**\n * Send persisted logs to external services\n */\nexport async function sendPersistedLogs() {\n  if (!isBrowser() || typeof localStorage === 'undefined') return\n\n  try {\n    // Get logs from localStorage\n    const storedLogs = localStorage.getItem('persistentLogs')\n    if (!storedLogs) return\n\n    const logs: PersistentLog[] = JSON.parse(storedLogs)\n    if (logs.length === 0) return\n\n    // Attempt to send all persisted logs\n    await Promise.all(\n      logs.map((log: PersistentLog) =>\n        logToExternalServices(\n          log.level,\n          log.message,\n          log.context,\n          undefined,\n          log.error ? new Error(log.error) : undefined\n        )\n      )\n    )\n\n    // Clear persisted logs after successful sending\n    localStorage.removeItem('persistentLogs')\n    persistentLogs = []\n    console.debug(`Successfully sent ${logs.length} persisted logs`)\n  } catch (err) {\n    console.error('Failed to send persisted logs:', err)\n  }\n}\n\n/**\n * Configure the logger\n */\nexport function configureLogger(config: Partial<LoggerConfig>) {\n  loggerConfig = { ...loggerConfig, ...config }\n\n  // Use environment variables for secrets if not explicitly provided\n  const sentryDsn = loggerConfig.sentryDsn || process.env.NEXT_PUBLIC_SENTRY_DSN\n  const logRocketAppId = loggerConfig.logRocketAppId || process.env.NEXT_PUBLIC_LOGROCKET_APP_ID\n\n  // Initialize external logging services if configured and in browser environment\n  if (sentryDsn && isBrowser()) {\n    initSentry(sentryDsn, loggerConfig)\n  } else if (sentryDsn) {\n    warnIfServer()\n  }\n\n  if (logRocketAppId && isBrowser()) {\n    initLogRocket(logRocketAppId, loggerConfig)\n  } else if (logRocketAppId) {\n    warnIfServer()\n  }\n\n  // In production, ensure we're not logging too verbosely\n  if (process.env.NODE_ENV === 'production' && !config.minLevel) {\n    loggerConfig.minLevel = LogLevel.WARN\n  }\n\n  // Set up online event listener to send persisted logs when connection is restored\n  if (isBrowser() && typeof window !== 'undefined' && typeof navigator !== 'undefined') {\n    // Try to send any persisted logs on initialization\n    if (navigator.onLine) {\n      sendPersistedLogs()\n    }\n\n    // Add event listener for online status\n    window.addEventListener('online', () => {\n      console.debug('Network connection restored, attempting to send persisted logs')\n      sendPersistedLogs()\n    })\n  }\n}\n\n/**\n * Initialize Sentry for error tracking\n */\nasync function initSentry(dsn: string, config: LoggerConfig) {\n  // Skip initialization if already initialized or if dsn is missing/empty\n  if (sentryInitialized) {\n    console.debug('Sentry already initialized, skipping initialization')\n    return\n  }\n\n  if (!dsn || dsn.trim() === '') {\n    console.warn('Sentry DSN is empty or missing, skipping initialization')\n    return null\n  }\n\n  try {\n    const Sentry = await import('@sentry/nextjs')\n\n    Sentry.init({\n      dsn,\n      environment: config.environment,\n      release: config.release,\n      tracesSampleRate: config.environment === 'production' ? 0.2 : 1.0,\n    })\n\n    // Set user information if available\n    if (config.userId || config.userEmail) {\n      Sentry.setUser({\n        id: config.userId,\n        email: config.userEmail,\n      })\n    }\n\n    sentryInitialized = true\n    return Sentry\n  } catch (error) {\n    console.error('Failed to initialize Sentry:', error)\n    return null\n  }\n}\n\n/**\n * Initialize LogRocket for session replay\n */\nasync function initLogRocket(appId: string, config: LoggerConfig) {\n  // Skip initialization if already initialized or if appId is missing/empty\n  if (logRocketInitialized) {\n    console.debug('LogRocket already initialized, skipping initialization')\n    return\n  }\n\n  if (!appId || appId.trim() === '') {\n    console.warn('LogRocket App ID is empty or missing, skipping initialization')\n    return null\n  }\n\n  try {\n    const LogRocket = (await import('logrocket')).default as typeof import('logrocket').default\n\n    LogRocket.init(appId, {\n      release: config.release,\n      console: {\n        isEnabled: {\n          error: true,\n          warn: true,\n        },\n      },\n      network: {\n        isEnabled: true,\n        requestSanitizer: request => {\n          // Don't log request bodies for sensitive endpoints\n          if (request.url.includes('/api/auth') || request.url.includes('/api/user')) {\n            request.body = null\n          }\n          return request\n        },\n        responseSanitizer: response => {\n          // Don't log response bodies for sensitive endpoints\n          if (response.url.includes('/api/auth') || response.url.includes('/api/user')) {\n            response.body = null\n          }\n          return response\n        },\n      },\n    })\n\n    // Set user information if available\n    if (config.userId || config.userEmail) {\n      LogRocket.identify(config.userId || 'anonymous', {\n        email: config.userEmail,\n      })\n    }\n\n    logRocketInitialized = true\n    return LogRocket\n  } catch (error) {\n    console.error('Failed to initialize LogRocket:', error)\n    return null\n  }\n}\n\n/**\n * Set user information for logging\n */\nexport async function setLogUser(userId?: string, userEmail?: string) {\n  loggerConfig.userId = userId\n  loggerConfig.userEmail = userEmail\n\n  // Update user information in external services only in browser environment\n  if (sentryInitialized && isBrowser()) {\n    try {\n      const Sentry = await import('@sentry/nextjs')\n      Sentry.setUser({\n        id: userId,\n        email: userEmail,\n      })\n    } catch (err) {\n      console.error('Failed to set user in Sentry:', err)\n    }\n  }\n\n  if (logRocketInitialized && isBrowser()) {\n    try {\n      const LogRocket = (await import('logrocket')).default as typeof import('logrocket').default\n      LogRocket.identify(userId || 'anonymous', {\n        email: userEmail,\n      })\n    } catch (err) {\n      console.error('Failed to set user in LogRocket:', err)\n    }\n  }\n}\n\n/**\n * Set request ID for logging\n */\nexport async function setRequestId(requestId: string) {\n  loggerConfig.requestId = requestId\n\n  // Update request ID in external services\n  if (sentryInitialized && typeof window !== 'undefined') {\n    try {\n      const Sentry = await import('@sentry/nextjs')\n      Sentry.configureScope(scope => {\n        scope.setTag('requestId', requestId)\n      })\n    } catch (err) {\n      console.error('Failed to set request ID in Sentry:', err)\n    }\n  }\n\n  if (logRocketInitialized && typeof window !== 'undefined') {\n    try {\n      const LogRocket = (await import('logrocket')).default\n      LogRocket.setMeta('requestId', requestId)\n    } catch (err) {\n      console.error('Failed to set request ID in LogRocket:', err)\n    }\n  }\n}\n\n/**\n * Sanitize data for logging by removing sensitive fields\n */\nfunction sanitizeForLogging(data: any): any {\n  if (!data) return data\n\n  // Handle string values - apply pattern-based sanitization\n  if (typeof data === 'string') {\n    return SENSITIVE_PATTERNS.reduce((acc, pattern) => acc.replace(pattern, '[REDACTED]'), data)\n  }\n\n  if (typeof data === 'object' && data !== null) {\n    if (Array.isArray(data)) {\n      return data.map(sanitizeForLogging)\n    }\n\n    const sanitized: Record<string, any> = {}\n    for (const [key, value] of Object.entries(data)) {\n      // Field name check - redact based on sensitive field names\n      if (SENSITIVE_FIELDS.some(field => key.toLowerCase().includes(field.toLowerCase()))) {\n        sanitized[key] = '[REDACTED]'\n      }\n      // Value pattern check for strings and recursive sanitization for other types\n      else {\n        sanitized[key] = sanitizeForLogging(value)\n      }\n    }\n    return sanitized\n  }\n\n  return data\n}\n\n/**\n * Retry a function with exponential backoff\n */\nasync function withRetries<T>(fn: () => Promise<T>, maxRetries = loggerConfig.maxRetries || 3, baseDelay = loggerConfig.retryDelay || 1000): Promise<T> {\n  let lastError: Error | undefined\n  \n  for (let attempt = 0; attempt < maxRetries; attempt++) {\n    try {\n      return await fn()\n    } catch (error) {\n      lastError = error as Error\n      \n      // Calculate delay with exponential backoff and jitter\n      const delay = baseDelay * Math.pow(2, attempt) * (0.5 + Math.random() * 0.5)\n      \n      // Wait before next attempt\n      await new Promise(resolve => setTimeout(resolve, delay))\n    }\n  }\n  \n  throw lastError || new Error('Operation failed after retries')\n}\n\n/**\n * Log a message with the specified level\n */\nasync function log(\n  level: LogLevel,\n  message: string,\n  context?: any,\n  tags?: string[],\n  error?: Error\n) {\n  // Skip logging if level is below minimum configured level\n  const levelOrder = {\n    [LogLevel.DEBUG]: 0,\n    [LogLevel.INFO]: 1,\n    [LogLevel.WARN]: 2,\n    [LogLevel.ERROR]: 3,\n    [LogLevel.FATAL]: 4,\n  }\n\n  if (levelOrder[level] < levelOrder[loggerConfig.minLevel || LogLevel.DEBUG]) {\n    return\n  }\n\n  // Add standard context information\n  const enhancedContext = {\n    ...context,\n    timestamp: new Date().toISOString(),\n    requestId: loggerConfig.requestId,\n    userId: loggerConfig.userId,\n    ...getDeviceInfo(),\n  }\n\n  // Sanitize context to remove sensitive information\n  const sanitizedContext = sanitizeForLogging(enhancedContext)\n\n  // Log to console if enabled\n  if (loggerConfig.enableConsole) {\n    const consoleMessage = `[${level.toUpperCase()}] ${message}`\n    \n    switch (level) {\n      case LogLevel.DEBUG:\n        console.debug(consoleMessage, sanitizedContext)\n        break\n      case LogLevel.INFO:\n        console.info(consoleMessage, sanitizedContext)\n        break\n      case LogLevel.WARN:\n        console.warn(consoleMessage, sanitizedContext)\n        break\n      case LogLevel.ERROR:\n      case LogLevel.FATAL:\n        console.error(consoleMessage, sanitizedContext, error)\n        break\n    }\n  }\n\n  // Log to external services\n  await logToExternalServices(level, message, enhancedContext, tags, error)\n}\n\n/**\n * Log to external services like Sentry and LogRocket\n */\nasync function logToExternalServices(\n  level: LogLevel,\n  message: string,\n  context?: any,\n  tags?: string[],\n  error?: Error\n) {\n  // Skip external logging if not in browser environment\n  if (!isBrowser()) {\n    return\n  }\n\n  // Persist critical errors\n  if (level === LogLevel.FATAL || level === LogLevel.ERROR) {\n    persistLog({\n      timestamp: Date.now(),\n      level,\n      message,\n      context: sanitizeForLogging(context),\n      error: error?.toString(),\n    })\n\n    // Try to send persisted logs if online\n    if (typeof navigator !== 'undefined' && navigator.onLine) {\n      sendPersistedLogs()\n    }\n  }\n\n  // Send to Sentry if configured and level is ERROR or FATAL\n  if (sentryInitialized && (level === LogLevel.ERROR || level === LogLevel.FATAL)) {\n    try {\n      await withRetries(async () => {\n        const Sentry = await import('@sentry/nextjs')\n\n        // Set extra context\n        Sentry.configureScope(scope => {\n          if (context) {\n            Object.entries(context).forEach(([key, value]) => {\n              scope.setExtra(key, value)\n            })\n          }\n\n          if (tags) {\n            tags.forEach(tag => {\n              scope.setTag(tag, 'true')\n            })\n          }\n        })\n\n        // Capture the error or message\n        if (error) {\n          Sentry.captureException(error)\n        } else {\n          Sentry.captureMessage(message, level)\n        }\n      })\n    } catch (err) {\n      console.error('Failed to log to Sentry after retries:', err)\n    }\n  }\n\n  // Send to LogRocket if configured\n  if (logRocketInitialized) {\n    try {\n      await withRetries(async () => {\n        const LogRocket = (await import('logrocket')).default;\n\n        // Log the message\n        if (level === LogLevel.ERROR || level === LogLevel.FATAL) {\n          LogRocket.captureException(error || new Error(message), {\n            tags: tags?.reduce((acc, tag) => ({ ...acc, [tag]: true }), {}),\n            extra: context,\n          });\n        } else if (level === LogLevel.WARN) {\n          LogRocket.warn(message, context);\n        } else {\n          LogRocket.log(message, context);\n        }\n      });\n    } catch (err) {\n      console.error('Failed to log to LogRocket after retries:', err);\n    }\n  }\n}\n\n/**\n * Log a debug message\n */\nexport function debug(message: string, context?: any, tags?: string[]) {\n  return log(LogLevel.DEBUG, message, context, tags)\n}\n\n/**\n * Log an info message\n */\nexport function info(message: string, context?: any, tags?: string[]) {\n  return log(LogLevel.INFO, message, context, tags)\n}\n\n/**\n * Log a warning message\n */\nexport function warn(message: string, context?: any, tags?: string[]) {\n  return log(LogLevel.WARN, message, context, tags)\n}\n\n/**\n * Log an error message\n */\nexport function error(message: string, errorOrContext?: Error | any, context?: any, tags?: string[]) {\n  let errorObj: Error | undefined\n  let contextObj: any = context\n\n  // Handle case where errorOrContext is an Error object\n  if (errorOrContext instanceof Error) {\n    errorObj = errorOrContext\n  } \n  // Handle case where errorOrContext is a context object\n  else if (errorOrContext && typeof errorOrContext === 'object') {\n    contextObj = errorOrContext\n  }\n\n  return log(LogLevel.ERROR, message, contextObj, tags, errorObj)\n}\n\n/**\n * Log a fatal error message\n */\nexport function fatal(message: string, errorOrContext?: Error | any, context?: any, tags?: string[]) {\n  let errorObj: Error | undefined\n  let contextObj: any = context\n\n  // Handle case where errorOrContext is an Error object\n  if (errorOrContext instanceof Error) {\n    errorObj = errorOrContext\n  } \n  // Handle case where errorOrContext is a context object\n  else if (errorOrContext && typeof errorOrContext === 'object') {\n    contextObj = errorOrContext\n  }\n\n  return log(LogLevel.FATAL, message, contextObj, tags, errorObj)\n}\n\n// Initialize with default configuration\nconfigureLogger(defaultConfig)\n\n// Export a default logger instance\nexport default {\n  debug,\n  info,\n  warn,\n  error,\n  fatal,\n  configureLogger,\n  setLogUser,\n  setRequestId,\n  sendPersistedLogs,\n}/**\n * Sensitive fields that should never be logged\n * Add any field names that might contain sensitive information\n */\nconst SENSITIVE_FIELDS = [\n  'password',\n  'token',\n  'secret',\n  'authorization',\n  'apiKey',\n  'api_key',\n  'key',\n  'credential',\n  'ssn',\n  'socialSecurity',\n  'creditCard',\n  'cardNumber',\n  'cvv',\n]\n\n// Regular expressions to detect sensitive data patterns\nconst SENSITIVE_PATTERNS = [\n  /\\b(?:\\d[ -]*?){13,16}\\b/, // Credit card numbers\n  /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\\b/, // Email addresses\n  /\\b(?:\\d{3}[-.]?){2}\\d{4}\\b/, // SSN\n]\n\n// Maximum number of logs to persist in localStorage\nconst MAX_PERSISTENT_LOGS = 50\n\n// Store persisted logs in memory\nlet persistentLogs: PersistentLog[] = []\n\n// Interface for persisted logs\ninterface PersistentLog {\n  timestamp: number\n  level: LogLevel\n  message: string\n  context?: any\n  error?: string\n}\n\nexport enum LogLevel {\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n  FATAL = 'fatal',\n}\n\ninterface LoggerConfig {\n  enableConsole?: boolean\n  minLevel?: LogLevel\n  sentryDsn?: string\n  logRocketAppId?: string\n  userId?: string\n  userEmail?: string\n  requestId?: string\n  release?: string\n  environment?: 'development' | 'test' | 'production'\n  sampleRate?: number\n  maxRetries?: number\n  retryDelay?: number\n}\n\nconst defaultConfig: LoggerConfig = {\n  enableConsole: true,\n  // Set different default log levels based on environment\n  minLevel: process.env.NODE_ENV === 'production' ? LogLevel.WARN : LogLevel.DEBUG,\n  environment:\n    (process.env.NODE_ENV as unknown as 'development' | 'test' | 'production') || 'development',\n  release: process.env.NEXT_PUBLIC_APP_VERSION,\n  sampleRate: 1.0, // Default to 100% sampling\n  maxRetries: 3, // Default to 3 retry attempts\n  retryDelay: 1000, // Default to 1 second base delay\n}\n\n// Global logger configuration\nlet loggerConfig: LoggerConfig = { ...defaultConfig }\nlet sentryInitialized = false\nlet logRocketInitialized = false\n\n// Flag to track if we've warned about server usage\nlet serverWarningShown = false\n\n/**\n * Check if code is running in browser environment\n */\nfunction isBrowser(): boolean {\n  return typeof window !== 'undefined'\n}\n\n/**\n * @returns Object containing device and browser details\n */\nfunction getDeviceInfo(): Record<string, string | number | null> {\n  if (!isBrowser()) {\n    return { environment: 'server' }\n  }\n  \n  try {\n    return {\n      userAgent: navigator.userAgent,\n      screenWidth: window.screen.width,\n      screenHeight: window.screen.height,\n      language: navigator.language,\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n      platform: navigator.platform,\n      vendor: navigator.vendor,\n      deviceMemory: (navigator as any).deviceMemory || null,\n      connectionType: (navigator as any).connection?.effectiveType || null\n    }\n  } catch (error) {\n    // Fallback if any browser APIs are not available\n    return { \n      userAgent: navigator.userAgent,\n      environment: 'browser'\n    }\n  }\n}\n\n/**\n * Persist critical logs to localStorage for later sending\n */\nfunction persistLog(log: PersistentLog) {\n  if (isBrowser() && typeof localStorage !== 'undefined') {\n    try {\n      // Load existing logs from localStorage\n      const storedLogs = localStorage.getItem('persistentLogs')\n      persistentLogs = storedLogs ? JSON.parse(storedLogs) : []\n\n      // Add new log and limit to maximum number\n      persistentLogs = [log, ...persistentLogs].slice(0, MAX_PERSISTENT_LOGS)\n\n      // Save back to localStorage\n      localStorage.setItem('persistentLogs', JSON.stringify(persistentLogs))\n    } catch (error) {\n      console.error('Failed to persist log:', error)\n    }\n  }\n}\n\n/**\n * Warn if logger is used in server context with client-only features\n */\nfunction warnIfServer() {\n  if (!isBrowser() && !serverWarningShown) {\n    console.warn(\n      'Warning: simplified-logger is being used in a server context. ' +\n        'Sentry and LogRocket integrations will be disabled. ' +\n        'For server-side logging, consider using a server-compatible logger.'\n    )\n    serverWarningShown = true\n  }\n}\n\n/**\n * Send persisted logs to external services\n */\nexport async function sendPersistedLogs() {\n  if (!isBrowser() || typeof localStorage === 'undefined') return\n\n  try {\n    // Get logs from localStorage\n    const storedLogs = localStorage.getItem('persistentLogs')\n    if (!storedLogs) return\n\n    const logs: PersistentLog[] = JSON.parse(storedLogs)\n    if (logs.length === 0) return\n\n    // Attempt to send all persisted logs\n    await Promise.all(\n      logs.map((log: PersistentLog) =>\n        logToExternalServices(\n          log.level,\n          log.message,\n          log.context,\n          undefined,\n          log.error ? new Error(log.error) : undefined\n        )\n      )\n    )\n\n    // Clear persisted logs after successful sending\n    localStorage.removeItem('persistentLogs')\n    persistentLogs = []\n    console.debug(`Successfully sent ${logs.length} persisted logs`)\n  } catch (err) {\n    console.error('Failed to send persisted logs:', err)\n  }\n}\n\n/**\n * Configure the logger\n */\nexport function configureLogger(config: Partial<LoggerConfig>) {\n  loggerConfig = { ...loggerConfig, ...config }\n\n  // Use environment variables for secrets if not explicitly provided\n  const sentryDsn = loggerConfig.sentryDsn || process.env.NEXT_PUBLIC_SENTRY_DSN\n  const logRocketAppId = loggerConfig.logRocketAppId || process.env.NEXT_PUBLIC_LOGROCKET_APP_ID\n\n  // Initialize external logging services if configured and in browser environment\n  if (sentryDsn && isBrowser()) {\n    initSentry(sentryDsn, loggerConfig)\n  } else if (sentryDsn) {\n    warnIfServer()\n  }\n\n  if (logRocketAppId && isBrowser()) {\n    initLogRocket(logRocketAppId, loggerConfig)\n  } else if (logRocketAppId) {\n    warnIfServer()\n  }\n\n  // In production, ensure we're not logging too verbosely\n  if (process.env.NODE_ENV === 'production' && !config.minLevel) {\n    loggerConfig.minLevel = LogLevel.WARN\n  }\n\n  // Set up online event listener to send persisted logs when connection is restored\n  if (isBrowser() && typeof window !== 'undefined' && typeof navigator !== 'undefined') {\n    // Try to send any persisted logs on initialization\n    if (navigator.onLine) {\n      sendPersistedLogs()\n    }\n\n    // Add event listener for online status\n    window.addEventListener('online', () => {\n      console.debug('Network connection restored, attempting to send persisted logs')\n      sendPersistedLogs()\n    })\n  }\n}\n\n/**\n * Initialize Sentry for error tracking\n */\nasync function initSentry(dsn: string, config: LoggerConfig) {\n  // Skip initialization if already initialized or if dsn is missing/empty\n  if (sentryInitialized) {\n    console.debug('Sentry already initialized, skipping initialization')\n    return\n  }\n\n  if (!dsn || dsn.trim() === '') {\n    console.warn('Sentry DSN is empty or missing, skipping initialization')\n    return null\n  }\n\n  try {\n    const Sentry = await import('@sentry/nextjs')\n\n    Sentry.init({\n      dsn,\n      environment: config.environment,\n      release: config.release,\n      tracesSampleRate: config.environment === 'production' ? 0.2 : 1.0,\n    })\n\n    // Set user information if available\n    if (config.userId || config.userEmail) {\n      Sentry.setUser({\n        id: config.userId,\n        email: config.userEmail,\n      })\n    }\n\n    sentryInitialized = true\n    return Sentry\n  } catch (error) {\n    console.error('Failed to initialize Sentry:', error)\n    return null\n  }\n}\n\n/**\n * Initialize LogRocket for session replay\n */\nasync function initLogRocket(appId: string, config: LoggerConfig) {\n  // Skip initialization if already initialized or if appId is missing/empty\n  if (logRocketInitialized) {\n    console.debug('LogRocket already initialized, skipping initialization')\n    return\n  }\n\n  if (!appId || appId.trim() === '') {\n    console.warn('LogRocket App ID is empty or missing, skipping initialization')\n    return null\n  }\n\n  try {\n    const LogRocket = (await import('logrocket')).default as typeof import('logrocket').default\n\n    LogRocket.init(appId, {\n      release: config.release,\n      console: {\n        isEnabled: {\n          error: true,\n          warn: true,\n        },\n      },\n      network: {\n        isEnabled: true,\n        requestSanitizer: request => {\n          // Don't log request bodies for sensitive endpoints\n          if (request.url.includes('/api/auth') || request.url.includes('/api/user')) {\n            request.body = null\n          }\n          return request\n        },\n        responseSanitizer: response => {\n          // Don't log response bodies for sensitive endpoints\n          if (response.url.includes('/api/auth') || response.url.includes('/api/user')) {\n            response.body = null\n          }\n          return response\n        },\n      },\n    })\n\n    // Set user information if available\n    if (config.userId || config.userEmail) {\n      LogRocket.identify(config.userId || 'anonymous', {\n        email: config.userEmail,\n      })\n    }\n\n    logRocketInitialized = true\n    return LogRocket\n  } catch (error) {\n    console.error('Failed to initialize LogRocket:', error)\n    return null\n  }\n}\n\n/**\n * Set user information for logging\n */\nexport async function setLogUser(userId?: string, userEmail?: string) {\n  loggerConfig.userId = userId\n  loggerConfig.userEmail = userEmail\n\n  // Update user information in external services only in browser environment\n  if (sentryInitialized && isBrowser()) {\n    try {\n      const Sentry = await import('@sentry/nextjs')\n      Sentry.setUser({\n        id: userId,\n        email: userEmail,\n      })\n    } catch (err) {\n      console.error('Failed to set user in Sentry:', err)\n    }\n  }\n\n  if (logRocketInitialized && isBrowser()) {\n    try {\n      const LogRocket = (await import('logrocket')).default as typeof import('logrocket').default\n      LogRocket.identify(userId || 'anonymous', {\n        email: userEmail,\n      })\n    } catch (err) {\n      console.error('Failed to set user in LogRocket:', err)\n    }\n  }\n}\n\n/**\n * Set request ID for logging\n */\nexport async function setRequestId(requestId: string) {\n  loggerConfig.requestId = requestId\n\n  // Update request ID in external services\n  if (sentryInitialized && typeof window !== 'undefined') {\n    try {\n      const Sentry = await import('@sentry/nextjs')\n      Sentry.configureScope(scope => {\n        scope.setTag('requestId', requestId)\n      })\n    } catch (err) {\n      console.error('Failed to set request ID in Sentry:', err)\n    }\n  }\n\n  if (logRocketInitialized && typeof window !== 'undefined') {\n    try {\n      const LogRocket = (await import('logrocket')).default\n      LogRocket.setMeta('requestId', requestId)\n    } catch (err) {\n      console.error('Failed to set request ID in LogRocket:', err)\n    }\n  }\n}\n\n/**\n * Sanitize data for logging by removing sensitive fields\n */\nfunction sanitizeForLogging(data: any): any {\n  if (!data) return data\n\n  // Handle string values - apply pattern-based sanitization\n  if (typeof data === 'string') {\n    return SENSITIVE_PATTERNS.reduce((acc, pattern) => acc.replace(pattern, '[REDACTED]'), data)\n  }\n\n  if (typeof data === 'object' && data !== null) {\n    if (Array.isArray(data)) {\n      return data.map(sanitizeForLogging)\n    }\n\n    const sanitized: Record<string, any> = {}\n    for (const [key, value] of Object.entries(data)) {\n      // Field name check - redact based on sensitive field names\n      if (SENSITIVE_FIELDS.some(field => key.toLowerCase().includes(field.toLowerCase()))) {\n        sanitized[key] = '[REDACTED]'\n      }\n      // Value pattern check for strings and recursive sanitization for other types\n      else {\n        sanitized[key] = sanitizeForLogging(value)\n      }\n    }\n    return sanitized\n  }\n\n  return data\n}\n\n/**\n * Retry a function with exponential backoff\n */\nasync function withRetries<T>(fn: () => Promise<T>, maxRetries = loggerConfig.maxRetries || 3, baseDelay = loggerConfig.retryDelay || 1000): Promise<T> {\n  let lastError: Error | undefined\n  \n  for (let attempt = 0; attempt < maxRetries; attempt++) {\n    try {\n      return await fn()\n    } catch (error) {\n      lastError = error as Error\n      \n      // Calculate delay with exponential backoff and jitter\n      const delay = baseDelay * Math.pow(2, attempt) * (0.5 + Math.random() * 0.5)\n      \n      // Wait before next attempt\n      await new Promise(resolve => setTimeout(resolve, delay))\n    }\n  }\n  \n  throw lastError || new Error('Operation failed after retries')\n}\n\n/**\n * Log a message with the specified level\n */\nasync function log(\n  level: LogLevel,\n  message: string,\n  context?: any,\n  tags?: string[],\n  error?: Error\n) {\n  // Skip logging if level is below minimum configured level\n  const levelOrder = {\n    [LogLevel.DEBUG]: 0,\n    [LogLevel.INFO]: 1,\n    [LogLevel.WARN]: 2,\n    [LogLevel.ERROR]: 3,\n    [LogLevel.FATAL]: 4,\n  }\n\n  if (levelOrder[level] < levelOrder[loggerConfig.minLevel || LogLevel.DEBUG]) {\n    return\n  }\n\n  // Add standard context information\n  const enhancedContext = {\n    ...context,\n    timestamp: new Date().toISOString(),\n    requestId: loggerConfig.requestId,\n    userId: loggerConfig.userId,\n    ...getDeviceInfo(),\n  }\n\n  // Sanitize context to remove sensitive information\n  const sanitizedContext = sanitizeForLogging(enhancedContext)\n\n  // Log to console if enabled\n  if (loggerConfig.enableConsole) {\n    const consoleMessage = `[${level.toUpperCase()}] ${message}`\n    \n    switch (level) {\n      case LogLevel.DEBUG:\n        console.debug(consoleMessage, sanitizedContext)\n        break\n      case LogLevel.INFO:\n        console.info(consoleMessage, sanitizedContext)\n        break\n      case LogLevel.WARN:\n        console.warn(consoleMessage, sanitizedContext)\n        break\n      case LogLevel.ERROR:\n      case LogLevel.FATAL:\n        console.error(consoleMessage, sanitizedContext, error)\n        break\n    }\n  }\n\n  // Log to external services\n  await logToExternalServices(level, message, enhancedContext, tags, error)\n}\n\n/**\n * Log to external services like Sentry and LogRocket\n */\nasync function logToExternalServices(\n  level: LogLevel,\n  message: string,\n  context?: any,\n  tags?: string[],\n  error?: Error\n) {\n  // Skip external logging if not in browser environment\n  if (!isBrowser()) {\n    return\n  }\n\n  // Persist critical errors\n  if (level === LogLevel.FATAL || level === LogLevel.ERROR) {\n    persistLog({\n      timestamp: Date.now(),\n      level,\n      message,\n      context: sanitizeForLogging(context),\n      error: error?.toString(),\n    })\n\n    // Try to send persisted logs if online\n    if (typeof navigator !== 'undefined' && navigator.onLine) {\n      sendPersistedLogs()\n    }\n  }\n\n  // Send to Sentry if configured and level is ERROR or FATAL\n  if (sentryInitialized && (level === LogLevel.ERROR || level === LogLevel.FATAL)) {\n    try {\n      await withRetries(async () => {\n        const Sentry = await import('@sentry/nextjs')\n\n        // Set extra context\n        Sentry.configureScope(scope => {\n          if (context) {\n            Object.entries(context).forEach(([key, value]) => {\n              scope.setExtra(key, value)\n            })\n          }\n\n          if (tags) {\n            tags.forEach(tag => {\n              scope.setTag(tag, 'true')\n            })\n          }\n        })\n\n        // Capture the error or message\n        if (error) {\n          Sentry.captureException(error)\n        } else {\n          Sentry.captureMessage(message, level)\n        }\n      })\n    } catch (err) {\n      console.error('Failed to log to Sentry after retries:', err)\n    }\n  }\n\n  // Send to LogRocket if configured\n  if (logRocketInitialized) {\n    try {\n      await withRetries(async () => {\n        const LogRocket = (await import('logrocket')).default;\n\n        // Log the message\n        if (level === LogLevel.ERROR || level === LogLevel.FATAL) {\n          LogRocket.captureException(error || new Error(message), {\n            tags: tags?.reduce((acc, tag) => ({ ...acc, [tag]: true }), {}),\n            extra: context,\n          });\n        } else if (level === LogLevel.WARN) {\n          LogRocket.warn(message, context);\n        } else {\n          LogRocket.log(message, context);\n        }\n      });\n    } catch (err) {\n      console.error('Failed to log to LogRocket after retries:', err);\n    }\n  }\n}\n\n/**\n * Log a debug message\n */\nexport function debug(message: string, context?: any, tags?: string[]) {\n  return log(LogLevel.DEBUG, message, context, tags)\n}\n\n/**\n * Log an info message\n */\nexport function info(message: string, context?: any, tags?: string[]) {\n  return log(LogLevel.INFO, message, context, tags)\n}\n\n/**\n * Log a warning message\n */\nexport function warn(message: string, context?: any, tags?: string[]) {\n  return log(LogLevel.WARN, message, context, tags)\n}\n\n/**\n * Log an error message\n */\nexport function error(message: string, errorOrContext?: Error | any, context?: any, tags?: string[]) {\n  let errorObj: Error | undefined\n  let contextObj: any = context\n\n  // Handle case where errorOrContext is an Error object\n  if (errorOrContext instanceof Error) {\n    errorObj = errorOrContext\n  } \n  // Handle case where errorOrContext is a context object\n  else if (errorOrContext && typeof errorOrContext === 'object') {\n    contextObj = errorOrContext\n  }\n\n  return log(LogLevel.ERROR, message, contextObj, tags, errorObj)\n}\n\n/**\n * Log a fatal error message\n */\nexport function fatal(message: string, errorOrContext?: Error | any, context?: any, tags?: string[]) {\n  let errorObj: Error | undefined\n  let contextObj: any = context\n\n  // Handle case where errorOrContext is an Error object\n  if (errorOrContext instanceof Error) {\n    errorObj = errorOrContext\n  } \n  // Handle case where errorOrContext is a context object\n  else if (errorOrContext && typeof errorOrContext === 'object') {\n    contextObj = errorOrContext\n  }\n\n  return log(LogLevel.FATAL, message, contextObj, tags, errorObj)\n}\n\n// Initialize with default configuration\nconfigureLogger(defaultConfig)\n\n// Export a default logger instance\nexport default {\n  debug,\n  info,\n  warn,\n  error,\n  fatal,\n  configureLogger,\n  setLogUser,\n  setRequestId,\n  sendPersistedLogs,\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\logging\\winston-logger.ts",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'winston'.",
        "line": 5,
        "column": 50,
        "nodeType": "Literal",
        "endLine": 5,
        "endColumn": 59
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 41,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 41,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [896, 899], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [896, 899], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 41,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 41,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [918, 921], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [918, 921], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 42,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 42,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [963, 966], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [963, 966], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 172,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 172,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4241, 4244], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4241, 4244], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 174,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 174,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4309, 4312], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4309, 4312], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 184,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 184,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4554, 4557], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4554, 4557], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 194,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 194,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4798, 4801], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4798, 4801], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 204,
        "column": 66,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 204,
        "endColumn": 69,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5058, 5061], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5058, 5061], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/logging/winston-logger.ts\nimport fs from 'fs'\nimport path from 'path'\n\nimport { createLogger, format, transports } from 'winston'\n\n// Create logs directory if it doesn't exist\nconst logsDir = path.join(process.cwd(), 'logs')\nif (!fs.existsSync(logsDir)) {\n  fs.mkdirSync(logsDir, { recursive: true })\n}\n\n/**\n * Sensitive fields that should never be logged\n * Add any field names that might contain sensitive information\n */\nconst SENSITIVE_FIELDS = [\n  'password',\n  'token',\n  'secret',\n  'authorization',\n  'apiKey',\n  'api_key',\n  'key',\n  'credential',\n  'ssn',\n  'socialSecurity',\n  'creditCard',\n  'cardNumber',\n  'cvv',\n]\n\n/**\n * Sanitize data for logging by removing sensitive fields\n */\nconst sanitizeForLogging = format(info => {\n  if (info.context) {\n    const sanitized = { ...info.context }\n\n    // Recursively sanitize objects\n    const sanitizeObject = (obj: Record<string, any>): Record<string, any> => {\n      const result: Record<string, any> = {}\n\n      for (const [key, value] of Object.entries(obj)) {\n        // Check if this is a sensitive field\n        if (SENSITIVE_FIELDS.some(field => key.toLowerCase().includes(field.toLowerCase()))) {\n          result[key] = '[REDACTED]'\n        }\n        // Recursively sanitize nested objects\n        else if (value && typeof value === 'object' && !Array.isArray(value)) {\n          result[key] = sanitizeObject(value)\n        }\n        // Sanitize arrays\n        else if (Array.isArray(value)) {\n          result[key] = value.map(item =>\n            typeof item === 'object' && item !== null ? sanitizeObject(item) : item\n          )\n        }\n        // Pass through other values\n        else {\n          result[key] = value\n        }\n      }\n\n      return result\n    }\n\n    info.context = sanitizeObject(sanitized)\n  }\n\n  return info\n})\n\n/**\n * Custom format for console output\n * Colorizes the level and formats the message in a readable way\n */\nconst consoleFormat = format.combine(\n  sanitizeForLogging(),\n  format.colorize(),\n  format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\n  format.printf(({ level, message, timestamp, context, stack }) => {\n    // Format the context\n    let contextStr = ''\n    if (context) {\n      contextStr = `\\n${JSON.stringify(context, null, 2)}`\n    }\n\n    // Include stack trace for errors if available\n    const stackStr = stack ? `\\n${stack}` : ''\n\n    // Format the log message\n    return `${timestamp} ${level}: ${message}${contextStr}${stackStr}`\n  })\n)\n\n/**\n * Format for file output\n * Includes timestamp, level, message, and metadata in JSON format\n */\nconst fileFormat = format.combine(\n  sanitizeForLogging(),\n  format.timestamp(),\n  format.errors({ stack: true }),\n  format.json()\n)\n\n/**\n * Create the Winston logger\n */\nexport const winstonLogger = createLogger({\n  level: process.env.LOG_LEVEL || 'info',\n  defaultMeta: {\n    service: 'property-portal',\n    environment: process.env.NODE_ENV || 'development',\n  },\n  transports: [\n    // Console transport with custom format\n    new transports.Console({\n      format: consoleFormat,\n    }),\n\n    // Error log file\n    new transports.File({\n      filename: path.join(logsDir, 'error.log'),\n      level: 'error',\n      format: fileFormat,\n      maxsize: 5 * 1024 * 1024, // 5MB\n      maxFiles: 5,\n      tailable: true,\n    }),\n\n    // Combined log file (all levels)\n    new transports.File({\n      filename: path.join(logsDir, 'combined.log'),\n      format: fileFormat,\n      maxsize: 10 * 1024 * 1024, // 10MB\n      maxFiles: 10,\n      tailable: true,\n    }),\n  ],\n\n  // Handle unhandled promise rejections\n  rejectionHandlers: [\n    new transports.File({\n      filename: path.join(logsDir, 'rejections.log'),\n      format: fileFormat,\n      maxsize: 5 * 1024 * 1024, // 5MB\n      maxFiles: 5,\n    }),\n  ],\n\n  // Handle uncaught exceptions\n  exceptionHandlers: [\n    new transports.File({\n      filename: path.join(logsDir, 'exceptions.log'),\n      format: fileFormat,\n      maxsize: 5 * 1024 * 1024, // 5MB\n      maxFiles: 5,\n    }),\n  ],\n\n  // Don't exit on handled exceptions\n  exitOnError: false,\n})\n\n/**\n * Add request context to log entries\n * @param req Express request object\n * @returns Logger with request context\n */\nexport function loggerWithRequest(req: any) {\n  return {\n    debug: (message: string, meta: Record<string, any> = {}) =>\n      winstonLogger.debug(message, {\n        context: {\n          ...meta,\n          requestId: req.id,\n          path: req.path,\n          method: req.method,\n        },\n      }),\n\n    info: (message: string, meta: Record<string, any> = {}) =>\n      winstonLogger.info(message, {\n        context: {\n          ...meta,\n          requestId: req.id,\n          path: req.path,\n          method: req.method,\n        },\n      }),\n\n    warn: (message: string, meta: Record<string, any> = {}) =>\n      winstonLogger.warn(message, {\n        context: {\n          ...meta,\n          requestId: req.id,\n          path: req.path,\n          method: req.method,\n        },\n      }),\n\n    error: (message: string, error?: Error, meta: Record<string, any> = {}) =>\n      winstonLogger.error(message, {\n        context: {\n          ...meta,\n          requestId: req.id,\n          path: req.path,\n          method: req.method,\n        },\n        stack: error?.stack,\n      }),\n  }\n}\n\n// Export default logger\nexport default winstonLogger\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\middleware\\errorHandler.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\middleware\\index.ts",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'compression'.",
        "line": 2,
        "column": 25,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 38
      },
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'helmet'.",
        "line": 5,
        "column": 20,
        "nodeType": "Literal",
        "endLine": 5,
        "endColumn": 28
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/middleware/index.ts\nimport compression from 'compression'\nimport cors from 'cors'\nimport express, { Express } from 'express'\nimport helmet from 'helmet'\n\nimport { winstonLogger as logger } from '../logging/winston-logger'\n\nimport { errorHandler, requestIdMiddleware, notFoundHandler } from './errorHandler'\n\n/**\n * Configure all middleware for the Express application\n * @param app Express application instance\n */\nexport function setupMiddleware(app: Express): void {\n  // Request ID middleware (should be first to ensure all logs have request ID)\n  app.use(requestIdMiddleware)\n\n  // Security middleware\n  app.use(helmet())\n\n  // CORS configuration\n  app.use(\n    cors({\n      origin: process.env.CORS_ORIGIN || '*',\n      methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],\n      allowedHeaders: ['Content-Type', 'Authorization'],\n      exposedHeaders: ['X-Request-ID'],\n      credentials: true,\n    })\n  )\n\n  // Body parsers\n  app.use(express.json({ limit: '1mb' }))\n  app.use(express.urlencoded({ extended: true, limit: '1mb' }))\n\n  // Compression\n  app.use(compression())\n\n  // Request logging middleware\n  app.use((req, res, next) => {\n    // Log at the start of the request\n    const startTime = Date.now()\n\n    logger.info(`Request started: ${req.method} ${req.path}`, {\n      context: {\n        method: req.method,\n        path: req.path,\n        query: req.query,\n        requestId: req.id,\n        userAgent: req.headers['user-agent'],\n        ip: req.ip,\n      },\n    })\n\n    // Log when the response is finished\n    res.on('finish', () => {\n      const duration = Date.now() - startTime\n      const level = res.statusCode >= 400 ? 'warn' : 'info'\n\n      logger[level](\n        `Request completed: ${req.method} ${req.path} ${res.statusCode} (${duration}ms)`,\n        {\n          context: {\n            method: req.method,\n            path: req.path,\n            statusCode: res.statusCode,\n            duration,\n            requestId: req.id,\n          },\n        }\n      )\n    })\n\n    next()\n  })\n\n  // Note: Route handlers would be added here in the actual application\n\n  // 404 handler - should be after all routes\n  app.use(notFoundHandler)\n\n  // Error handler - should be the last middleware\n  app.use(errorHandler)\n}\n\n// Export all error handling utilities\nexport * from './errorHandler'\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\monitoring\\performance.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 225,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 225,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5660, 5663], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5660, 5663], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/monitoring/performance.ts\r\nimport logger from '@/lib/logging/logger'\r\n\r\n/**\r\n * Performance monitoring utility\r\n *\r\n * This module provides utilities for monitoring performance metrics\r\n * and reporting them to the logging system.\r\n */\r\n\r\n// Performance metric types\r\nexport enum MetricType {\r\n  NAVIGATION = 'navigation',\r\n  RESOURCE = 'resource',\r\n  PAINT = 'paint',\r\n  LAYOUT = 'layout',\r\n  FIRST_INPUT = 'first-input',\r\n  CUSTOM = 'custom',\r\n}\r\n\r\n// Performance metric interface\r\nexport interface PerformanceMetric {\r\n  name: string\r\n  type: MetricType\r\n  value: number\r\n  unit: 'ms' | 'bytes' | 'count'\r\n  timestamp: number\r\n}\r\n\r\n/**\r\n * Initialize performance monitoring\r\n */\r\nexport function initPerformanceMonitoring() {\r\n  if (typeof window === 'undefined' || !window.performance) {\r\n    return\r\n  }\r\n\r\n  // Report navigation timing metrics\r\n  reportNavigationTiming()\r\n\r\n  // Set up performance observers\r\n  setupPerformanceObservers()\r\n\r\n  // Report metrics on page unload\r\n  window.addEventListener('unload', () => {\r\n    reportResourceTiming()\r\n  })\r\n}\r\n\r\n/**\r\n * Report navigation timing metrics\r\n */\r\nfunction reportNavigationTiming() {\r\n  if (typeof window === 'undefined' || !window.performance) {\r\n    return\r\n  }\r\n\r\n  // Wait for the page to be fully loaded\r\n  window.addEventListener('load', () => {\r\n    setTimeout(() => {\r\n      const navigation = performance.getEntriesByType(\r\n        'navigation'\r\n      )[0] as PerformanceNavigationTiming\r\n\r\n      if (!navigation) {\r\n        return\r\n      }\r\n\r\n      const metrics: PerformanceMetric[] = [\r\n        {\r\n          name: 'time_to_first_byte',\r\n          type: MetricType.NAVIGATION,\r\n          value: navigation.responseStart - navigation.requestStart,\r\n          unit: 'ms',\r\n          timestamp: Date.now(),\r\n        },\r\n        {\r\n          name: 'dom_load',\r\n          type: MetricType.NAVIGATION,\r\n          value: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,\r\n          unit: 'ms',\r\n          timestamp: Date.now(),\r\n        },\r\n        {\r\n          name: 'page_load',\r\n          type: MetricType.NAVIGATION,\r\n          value: navigation.loadEventEnd - navigation.loadEventStart,\r\n          unit: 'ms',\r\n          timestamp: Date.now(),\r\n        },\r\n        {\r\n          name: 'total_page_load',\r\n          type: MetricType.NAVIGATION,\r\n          value: navigation.loadEventEnd - navigation.startTime,\r\n          unit: 'ms',\r\n          timestamp: Date.now(),\r\n        },\r\n      ]\r\n\r\n      // Log the metrics\r\n      logger.info(\r\n        'Navigation timing metrics',\r\n        {\r\n          metrics,\r\n          url: window.location.href,\r\n          pathname: window.location.pathname,\r\n        },\r\n        ['performance', 'navigation']\r\n      )\r\n    }, 0)\r\n  })\r\n}\r\n\r\n/**\r\n * Report resource timing metrics\r\n */\r\nfunction reportResourceTiming() {\r\n  if (typeof window === 'undefined' || !window.performance) {\r\n    return\r\n  }\r\n\r\n  const resources = performance.getEntriesByType('resource')\r\n\r\n  if (!resources || resources.length === 0) {\r\n    return\r\n  }\r\n\r\n  // Group resources by type\r\n  const resourcesByType: Record<string, PerformanceResourceTiming[]> = {}\r\n\r\n  resources.forEach(resource => {\r\n    const resourceTiming = resource as PerformanceResourceTiming\r\n    const url = new URL(resourceTiming.name)\r\n    const fileExtension = url.pathname.split('.').pop() || 'unknown'\r\n\r\n    if (!resourcesByType[fileExtension]) {\r\n      resourcesByType[fileExtension] = []\r\n    }\r\n\r\n    resourcesByType[fileExtension].push(resourceTiming)\r\n  })\r\n\r\n  // Calculate metrics for each resource type\r\n  const metrics: Record<\r\n    string,\r\n    {\r\n      count: number\r\n      totalSize: number\r\n      totalDuration: number\r\n      averageDuration: number\r\n    }\r\n  > = {}\r\n\r\n  Object.entries(resourcesByType).forEach(([type, resources]) => {\r\n    const totalSize = resources.reduce((sum, resource) => {\r\n      return sum + (resource.transferSize || 0)\r\n    }, 0)\r\n\r\n    const totalDuration = resources.reduce((sum, resource) => {\r\n      return sum + (resource.responseEnd - resource.startTime)\r\n    }, 0)\r\n\r\n    metrics[type] = {\r\n      count: resources.length,\r\n      totalSize,\r\n      totalDuration,\r\n      averageDuration: totalDuration / resources.length,\r\n    }\r\n  })\r\n\r\n  // Log the metrics\r\n  logger.info(\r\n    'Resource timing metrics',\r\n    {\r\n      metrics,\r\n      url: window.location.href,\r\n      pathname: window.location.pathname,\r\n    },\r\n    ['performance', 'resource']\r\n  )\r\n}\r\n\r\n/**\r\n * Set up performance observers\r\n */\r\nfunction setupPerformanceObservers() {\r\n  if (typeof window === 'undefined' || !window.PerformanceObserver) {\r\n    return\r\n  }\r\n\r\n  // Observe paint metrics (FP, FCP)\r\n  try {\r\n    const paintObserver = new PerformanceObserver(entries => {\r\n      entries.getEntries().forEach(entry => {\r\n        const metric: PerformanceMetric = {\r\n          name: entry.name,\r\n          type: MetricType.PAINT,\r\n          value: entry.startTime,\r\n          unit: 'ms',\r\n          timestamp: Date.now(),\r\n        }\r\n\r\n        logger.info(\r\n          `Paint metric: ${entry.name}`,\r\n          {\r\n            metric,\r\n            url: window.location.href,\r\n            pathname: window.location.pathname,\r\n          },\r\n          ['performance', 'paint']\r\n        )\r\n      })\r\n    })\r\n\r\n    paintObserver.observe({ entryTypes: ['paint'] })\r\n  } catch (error) {\r\n    logger.warn('Failed to observe paint metrics', { error })\r\n  }\r\n\r\n  // Observe layout shift metrics (CLS)\r\n  try {\r\n    let cumulativeLayoutShift = 0\r\n\r\n    const layoutShiftObserver = new PerformanceObserver(entries => {\r\n      entries.getEntries().forEach((entry: any) => {\r\n        // Only count layout shifts without recent user input\r\n        if (!entry.hadRecentInput) {\r\n          cumulativeLayoutShift += entry.value\r\n        }\r\n      })\r\n\r\n      const metric: PerformanceMetric = {\r\n        name: 'cumulative_layout_shift',\r\n        type: MetricType.LAYOUT,\r\n        value: cumulativeLayoutShift,\r\n        unit: 'count',\r\n        timestamp: Date.now(),\r\n      }\r\n\r\n      logger.info(\r\n        'Layout shift metric',\r\n        {\r\n          metric,\r\n          url: window.location.href,\r\n          pathname: window.location.pathname,\r\n        },\r\n        ['performance', 'layout']\r\n      )\r\n    })\r\n\r\n    layoutShiftObserver.observe({ entryTypes: ['layout-shift'] })\r\n  } catch (error) {\r\n    logger.warn('Failed to observe layout shift metrics', { error })\r\n  }\r\n\r\n  // Observe first input delay (FID)\r\n  try {\r\n    const firstInputObserver = new PerformanceObserver(entries => {\r\n      entries.getEntries().forEach(entry => {\r\n        const metric: PerformanceMetric = {\r\n          name: 'first_input_delay',\r\n          type: MetricType.FIRST_INPUT,\r\n          value: entry.processingStart - entry.startTime,\r\n          unit: 'ms',\r\n          timestamp: Date.now(),\r\n        }\r\n\r\n        logger.info(\r\n          'First input delay metric',\r\n          {\r\n            metric,\r\n            url: window.location.href,\r\n            pathname: window.location.pathname,\r\n          },\r\n          ['performance', 'first-input']\r\n        )\r\n      })\r\n    })\r\n\r\n    firstInputObserver.observe({ entryTypes: ['first-input'] })\r\n  } catch (error) {\r\n    logger.warn('Failed to observe first input delay metrics', { error })\r\n  }\r\n}\r\n\r\n/**\r\n * Measure the execution time of a function\r\n * @param fn Function to measure\r\n * @param name Name of the metric\r\n * @returns Result of the function\r\n */\r\nexport function measureExecutionTime<T>(fn: () => T, name: string): T {\r\n  const start = performance.now()\r\n  const result = fn()\r\n  const duration = performance.now() - start\r\n\r\n  const metric: PerformanceMetric = {\r\n    name,\r\n    type: MetricType.CUSTOM,\r\n    value: duration,\r\n    unit: 'ms',\r\n    timestamp: Date.now(),\r\n  }\r\n\r\n  logger.debug(\r\n    `Execution time for ${name}`,\r\n    {\r\n      metric,\r\n      url: typeof window !== 'undefined' ? window.location.href : undefined,\r\n      pathname: typeof window !== 'undefined' ? window.location.pathname : undefined,\r\n    },\r\n    ['performance', 'execution-time']\r\n  )\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * Measure the execution time of an async function\r\n * @param fn Async function to measure\r\n * @param name Name of the metric\r\n * @returns Promise that resolves to the result of the function\r\n */\r\nexport async function measureAsyncExecutionTime<T>(fn: () => Promise<T>, name: string): Promise<T> {\r\n  const start = performance.now()\r\n\r\n  try {\r\n    const result = await fn()\r\n    const duration = performance.now() - start\r\n\r\n    const metric: PerformanceMetric = {\r\n      name,\r\n      type: MetricType.CUSTOM,\r\n      value: duration,\r\n      unit: 'ms',\r\n      timestamp: Date.now(),\r\n    }\r\n\r\n    logger.debug(\r\n      `Async execution time for ${name}`,\r\n      {\r\n        metric,\r\n        url: typeof window !== 'undefined' ? window.location.href : undefined,\r\n        pathname: typeof window !== 'undefined' ? window.location.pathname : undefined,\r\n      },\r\n      ['performance', 'execution-time']\r\n    )\r\n\r\n    return result\r\n  } catch (error) {\r\n    const duration = performance.now() - start\r\n\r\n    const metric: PerformanceMetric = {\r\n      name: `${name}_error`,\r\n      type: MetricType.CUSTOM,\r\n      value: duration,\r\n      unit: 'ms',\r\n      timestamp: Date.now(),\r\n    }\r\n\r\n    logger.warn(\r\n      `Error in async execution for ${name}`,\r\n      {\r\n        metric,\r\n        error,\r\n        url: typeof window !== 'undefined' ? window.location.href : undefined,\r\n        pathname: typeof window !== 'undefined' ? window.location.pathname : undefined,\r\n      },\r\n      ['performance', 'execution-time', 'error']\r\n    )\r\n\r\n    throw error\r\n  }\r\n}\r\n\r\n/**\r\n * Create a performance monitoring hook for React components\r\n * @param componentName Name of the component\r\n * @returns Object with performance monitoring methods\r\n */\r\nexport function usePerformanceMonitoring(componentName: string) {\r\n  const renderStart = performance.now()\r\n\r\n  return {\r\n    /**\r\n     * Report component render time\r\n     */\r\n    reportRenderTime: () => {\r\n      const renderTime = performance.now() - renderStart\r\n\r\n      const metric: PerformanceMetric = {\r\n        name: `${componentName}_render`,\r\n        type: MetricType.CUSTOM,\r\n        value: renderTime,\r\n        unit: 'ms',\r\n        timestamp: Date.now(),\r\n      }\r\n\r\n      logger.debug(\r\n        `Render time for ${componentName}`,\r\n        {\r\n          metric,\r\n          url: typeof window !== 'undefined' ? window.location.href : undefined,\r\n          pathname: typeof window !== 'undefined' ? window.location.pathname : undefined,\r\n        },\r\n        ['performance', 'render-time']\r\n      )\r\n    },\r\n\r\n    /**\r\n     * Measure the execution time of a function\r\n     * @param fn Function to measure\r\n     * @param name Name of the metric\r\n     * @returns Result of the function\r\n     */\r\n    measureExecutionTime: <T>(fn: () => T, name: string): T => {\r\n      return measureExecutionTime(fn, `${componentName}_${name}`)\r\n    },\r\n\r\n    /**\r\n     * Measure the execution time of an async function\r\n     * @param fn Async function to measure\r\n     * @param name Name of the metric\r\n     * @returns Promise that resolves to the result of the function\r\n     */\r\n    measureAsyncExecutionTime: <T>(fn: () => Promise<T>, name: string): Promise<T> => {\r\n      return measureAsyncExecutionTime(fn, `${componentName}_${name}`)\r\n    },\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\prisma.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-var",
        "severity": 2,
        "message": "Unexpected var, use let or const instead.",
        "line": 14,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "unexpectedVar",
        "endLine": 14,
        "endColumn": 39,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\properties.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\rate-limit.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'headers' is defined but never used.",
        "line": 1,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 17
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { headers } from 'next/headers'\nimport { NextRequest, NextResponse } from 'next/server'\n\ninterface RateLimitConfig {\n  // Maximum number of requests allowed within the interval\n  limit: number\n  // Time window in seconds\n  interval: number\n  // Optional identifier function to determine the rate limit key (defaults to IP address)\n  identifierFn?: (req: NextRequest) => string\n}\n\n// In-memory store for rate limiting\n// In production, you should use Redis or another distributed cache\nconst rateLimitStore = new Map<string, { count: number; resetTime: number }>()\n\n// Clean up expired entries periodically\nsetInterval(() => {\n  const now = Date.now()\n  for (const [key, value] of rateLimitStore.entries()) {\n    if (value.resetTime < now) {\n      rateLimitStore.delete(key)\n    }\n  }\n}, 60000) // Clean up every minute\n\n/**\n * Rate limiting middleware for Next.js API routes\n */\nexport function rateLimit(config: RateLimitConfig) {\n  const { limit, interval, identifierFn } = config\n\n  return async (req: NextRequest): Promise<NextResponse | null> => {\n    // Get identifier (default to IP address)\n    const identifier = identifierFn\n      ? identifierFn(req)\n      : headers().get('x-forwarded-for') || 'unknown-ip'\n\n    const now = Date.now()\n    const windowKey = `${identifier}`\n\n    // Get or initialize rate limit data for this identifier\n    const rateData = rateLimitStore.get(windowKey) || {\n      count: 0,\n      resetTime: now + interval * 1000,\n    }\n\n    // If the reset time has passed, reset the counter\n    if (rateData.resetTime < now) {\n      rateData.count = 0\n      rateData.resetTime = now + interval * 1000\n    }\n\n    // Increment request count\n    rateData.count += 1\n    rateLimitStore.set(windowKey, rateData)\n\n    // Set rate limit headers\n    const headers = new Headers()\n    headers.set('X-RateLimit-Limit', limit.toString())\n    headers.set('X-RateLimit-Remaining', Math.max(0, limit - rateData.count).toString())\n    headers.set('X-RateLimit-Reset', Math.ceil(rateData.resetTime / 1000).toString())\n\n    // If over limit, return 429 Too Many Requests\n    if (rateData.count > limit) {\n      return new NextResponse(\n        JSON.stringify({\n          error: 'Too many requests',\n          message: 'Rate limit exceeded. Please try again later.',\n        }),\n        {\n          status: 429,\n          headers,\n        }\n      )\n    }\n\n    return null // Continue to the API handler\n  }\n}\n\n/**\n * Apply rate limiting to a Next.js API route handler\n */\nexport function withRateLimit(\n  handler: (req: NextRequest) => Promise<NextResponse> | NextResponse,\n  config: RateLimitConfig\n) {\n  const rateLimiter = rateLimit(config)\n\n  return async (req: NextRequest) => {\n    // Apply rate limiting\n    const rateLimitResponse = await rateLimiter(req)\n    if (rateLimitResponse) {\n      return rateLimitResponse\n    }\n\n    // Continue to the handler if rate limit not exceeded\n    return handler(req)\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\rate-limit\\factory.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-require-imports",
        "severity": 2,
        "message": "A `require()` style import is forbidden.",
        "line": 35,
        "column": 42,
        "nodeType": "CallExpression",
        "messageId": "noRequireImports",
        "endLine": 35,
        "endColumn": 60
      },
      {
        "ruleId": "@typescript-eslint/no-require-imports",
        "severity": 2,
        "message": "A `require()` style import is forbidden.",
        "line": 38,
        "column": 37,
        "nodeType": "CallExpression",
        "messageId": "noRequireImports",
        "endLine": 38,
        "endColumn": 55
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/rate-limit/factory.ts\nimport { winstonLogger as logger } from '../logging/winston-logger'\n\nimport { redisRateLimit } from './redis'\n\nimport { RateLimitOptions, rateLimit } from './index'\n\n/**\n * Create a rate limiter based on the environment\n * @param options Rate limit options\n * @returns Rate limiter instance\n */\nexport function createRateLimiter(options: RateLimitOptions) {\n  // Use Redis in production, in-memory in development\n  const useRedis = process.env.NODE_ENV === 'production' || process.env.USE_REDIS === 'true'\n\n  if (useRedis) {\n    logger.info('Using Redis-based rate limiter')\n    return redisRateLimit(options)\n  } else {\n    logger.info('Using in-memory rate limiter')\n    return rateLimit(options)\n  }\n}\n\n/**\n * Create a rate limit middleware based on the environment\n * @param options Rate limit options\n * @returns Express middleware function\n */\nexport function createRateLimitMiddleware(options: RateLimitOptions) {\n  const useRedis = process.env.NODE_ENV === 'production' || process.env.USE_REDIS === 'true'\n\n  if (useRedis) {\n    const { redisRateLimitMiddleware } = require('./redis')\n    return redisRateLimitMiddleware(options)\n  } else {\n    const { rateLimitMiddleware } = require('./index')\n    return rateLimitMiddleware(options)\n  }\n}\n\nexport default {\n  createRateLimiter,\n  createRateLimitMiddleware,\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\rate-limit\\index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 186,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 186,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4200, 4203], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4200, 4203], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 186,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 186,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4210, 4213], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4210, 4213], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 186,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 186,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4221, 4224], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4221, 4224], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/rate-limit/index.ts\nimport { winstonLogger as logger } from '../logging/winston-logger'\n\n/**\n * Interface for rate limit options\n */\nexport interface RateLimitOptions {\n  /**\n   * Time window in milliseconds\n   */\n  interval: number\n\n  /**\n   * Maximum number of requests allowed in the interval\n   */\n  maxRequests: number\n\n  /**\n   * Optional prefix for the cache key\n   */\n  prefix?: string\n\n  /**\n   * Whether to log rate limit events\n   */\n  enableLogging?: boolean\n}\n\n/**\n * Interface for rate limit check result\n */\nexport interface RateLimitResult {\n  /**\n   * Whether the request is allowed\n   */\n  success: boolean\n\n  /**\n   * Number of remaining requests in the current interval\n   */\n  remaining: number\n\n  /**\n   * Time in milliseconds until the rate limit resets\n   */\n  resetIn: number\n\n  /**\n   * Total number of requests made in the current interval\n   */\n  total: number\n}\n\n/**\n * In-memory store for rate limit data\n */\nconst store = new Map<string, { count: number; timestamp: number }>()\n\n/**\n * Cleanup old entries periodically\n */\nconst cleanupInterval = 10 * 60 * 1000 // 10 minutes\nsetInterval(() => {\n  const now = Date.now()\n  for (const [key, data] of store.entries()) {\n    // Remove entries older than 1 hour\n    if (now - data.timestamp > 60 * 60 * 1000) {\n      store.delete(key)\n    }\n  }\n}, cleanupInterval)\n\n/**\n * Rate limiter class\n */\nexport class RateLimiter {\n  private options: Required<RateLimitOptions>\n\n  /**\n   * Create a new rate limiter\n   * @param options Rate limit options\n   */\n  constructor(options: RateLimitOptions) {\n    this.options = {\n      prefix: 'ratelimit:',\n      enableLogging: true,\n      ...options,\n    }\n  }\n\n  /**\n   * Check if a request is allowed\n   * @param identifier Unique identifier for the client (e.g., IP address)\n   * @returns Rate limit check result\n   */\n  async check(identifier: string): Promise<RateLimitResult> {\n    const key = `${this.options.prefix}${identifier}`\n    const now = Date.now()\n\n    // Get current data or create new entry\n    const current = store.get(key) || { count: 0, timestamp: now }\n\n    // Check if the interval has passed and reset if needed\n    if (now - current.timestamp > this.options.interval) {\n      current.count = 0\n      current.timestamp = now\n    }\n\n    // Increment the counter\n    current.count++\n\n    // Calculate remaining requests and reset time\n    const remaining = Math.max(0, this.options.maxRequests - current.count)\n    const resetIn = this.options.interval - (now - current.timestamp)\n    const success = current.count <= this.options.maxRequests\n\n    // Update the store\n    store.set(key, current)\n\n    // Log rate limit events if enabled\n    if (this.options.enableLogging) {\n      if (!success) {\n        logger.warn('Rate limit exceeded', {\n          context: {\n            identifier,\n            maxRequests: this.options.maxRequests,\n            interval: this.options.interval,\n            count: current.count,\n          },\n        })\n      } else if (remaining < 5) {\n        logger.info('Rate limit approaching', {\n          context: {\n            identifier,\n            maxRequests: this.options.maxRequests,\n            remaining,\n            resetIn,\n          },\n        })\n      }\n    }\n\n    return {\n      success,\n      remaining,\n      resetIn,\n      total: current.count,\n    }\n  }\n\n  /**\n   * Reset the rate limit for a specific identifier\n   * @param identifier Unique identifier for the client\n   */\n  reset(identifier: string): void {\n    const key = `${this.options.prefix}${identifier}`\n    store.delete(key)\n\n    if (this.options.enableLogging) {\n      logger.info('Rate limit reset', {\n        context: {\n          identifier,\n        },\n      })\n    }\n  }\n}\n\n/**\n * Create a new rate limiter\n * @param options Rate limit options\n * @returns Rate limiter instance\n */\nexport function rateLimit(options: RateLimitOptions): RateLimiter {\n  return new RateLimiter(options)\n}\n\n/**\n * Express middleware for rate limiting\n * @param options Rate limit options\n * @returns Express middleware function\n */\nexport function rateLimitMiddleware(options: RateLimitOptions) {\n  const limiter = new RateLimiter(options)\n\n  return async (req: any, res: any, next: any) => {\n    // Get client identifier (IP address or user ID)\n    const identifier =\n      req.ip ||\n      req.headers['x-forwarded-for'] ||\n      req.headers['x-real-ip'] ||\n      req.connection.remoteAddress ||\n      'anonymous'\n\n    // Check rate limit\n    const result = await limiter.check(identifier)\n\n    // Set rate limit headers\n    res.setHeader('X-RateLimit-Limit', options.maxRequests.toString())\n    res.setHeader('X-RateLimit-Remaining', result.remaining.toString())\n    res.setHeader('X-RateLimit-Reset', Math.ceil(result.resetIn / 1000).toString())\n\n    // If rate limit exceeded, return 429 Too Many Requests\n    if (!result.success) {\n      return res.status(429).json({\n        error: {\n          message: 'Too many requests, please try again later',\n          details: {\n            retryAfter: Math.ceil(result.resetIn / 1000),\n          },\n        },\n      })\n    }\n\n    // Continue to the next middleware\n    next()\n  }\n}\n\nexport default {\n  rateLimit,\n  rateLimitMiddleware,\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\rate-limit\\redis.ts",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'redis'.",
        "line": 2,
        "column": 30,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 37
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'now' is assigned a value but never used.",
        "line": 93,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 93,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 239,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 239,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5975, 5978], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5975, 5978], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 239,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 239,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5985, 5988], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5985, 5988], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 239,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 239,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5996, 5999], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5996, 5999], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/rate-limit/redis.ts\nimport { createClient } from 'redis'\n\nimport { winstonLogger as logger } from '../logging/winston-logger'\n\nimport { RateLimitOptions, RateLimitResult } from './index'\n\n/**\n * Redis-based rate limiter for production use\n */\nexport class RedisRateLimiter {\n  private options: Required<RateLimitOptions>\n  private client: ReturnType<typeof createClient>\n  private isConnected: boolean = false\n\n  /**\n   * Create a new Redis rate limiter\n   * @param options Rate limit options\n   * @param redisUrl Redis connection URL\n   */\n  constructor(options: RateLimitOptions, redisUrl?: string) {\n    this.options = {\n      prefix: 'ratelimit:',\n      enableLogging: true,\n      ...options,\n    }\n\n    // Create Redis client\n    this.client = createClient({\n      url: redisUrl || process.env.REDIS_URL || 'redis://localhost:6379',\n    })\n\n    // Set up event handlers\n    this.client.on('error', err => {\n      logger.error('Redis client error', {\n        context: {\n          error: err.message,\n          stack: err.stack,\n        },\n      })\n      this.isConnected = false\n    })\n\n    this.client.on('connect', () => {\n      logger.info('Redis client connected')\n      this.isConnected = true\n    })\n\n    // Connect to Redis\n    this.connect()\n  }\n\n  /**\n   * Connect to Redis\n   */\n  private async connect() {\n    if (!this.isConnected) {\n      try {\n        await this.client.connect()\n      } catch (error) {\n        logger.error('Failed to connect to Redis', {\n          context: {\n            error: error instanceof Error ? error.message : String(error),\n          },\n        })\n      }\n    }\n  }\n\n  /**\n   * Check if a request is allowed\n   * @param identifier Unique identifier for the client (e.g., IP address)\n   * @returns Rate limit check result\n   */\n  async check(identifier: string): Promise<RateLimitResult> {\n    // Ensure Redis is connected\n    if (!this.isConnected) {\n      await this.connect()\n\n      // If still not connected, fall back to allowing the request\n      if (!this.isConnected) {\n        logger.warn('Rate limiting disabled: Redis not connected')\n        return {\n          success: true,\n          remaining: this.options.maxRequests,\n          resetIn: this.options.interval,\n          total: 0,\n        }\n      }\n    }\n\n    const key = `${this.options.prefix}${identifier}`\n    const now = Date.now()\n\n    try {\n      // Use Redis transaction to ensure atomicity\n      const multi = this.client.multi()\n\n      // Get current count\n      multi.get(key)\n\n      // Get TTL\n      multi.ttl(key)\n\n      // Execute transaction\n      const [countStr, ttl] = await multi.exec()\n\n      // Parse count or default to 0\n      let count = countStr ? parseInt(countStr as string, 10) : 0\n\n      // If key doesn't exist or has expired, reset count\n      if (ttl < 0) {\n        count = 0\n      }\n\n      // Increment count\n      count++\n\n      // Calculate remaining requests and reset time\n      const remaining = Math.max(0, this.options.maxRequests - count)\n      const resetIn = ttl < 0 ? this.options.interval : ttl * 1000\n      const success = count <= this.options.maxRequests\n\n      // Update Redis\n      await this.client.setEx(key, Math.ceil(this.options.interval / 1000), count.toString())\n\n      // Log rate limit events if enabled\n      if (this.options.enableLogging) {\n        if (!success) {\n          logger.warn('Rate limit exceeded', {\n            context: {\n              identifier,\n              maxRequests: this.options.maxRequests,\n              interval: this.options.interval,\n              count,\n            },\n          })\n        } else if (remaining < 5) {\n          logger.info('Rate limit approaching', {\n            context: {\n              identifier,\n              maxRequests: this.options.maxRequests,\n              remaining,\n              resetIn,\n            },\n          })\n        }\n      }\n\n      return {\n        success,\n        remaining,\n        resetIn,\n        total: count,\n      }\n    } catch (error) {\n      // Log error and fall back to allowing the request\n      logger.error('Rate limit check failed', {\n        context: {\n          error: error instanceof Error ? error.message : String(error),\n          identifier,\n        },\n      })\n\n      return {\n        success: true,\n        remaining: this.options.maxRequests,\n        resetIn: this.options.interval,\n        total: 0,\n      }\n    }\n  }\n\n  /**\n   * Reset the rate limit for a specific identifier\n   * @param identifier Unique identifier for the client\n   */\n  async reset(identifier: string): Promise<void> {\n    if (!this.isConnected) {\n      await this.connect()\n\n      if (!this.isConnected) {\n        return\n      }\n    }\n\n    const key = `${this.options.prefix}${identifier}`\n\n    try {\n      await this.client.del(key)\n\n      if (this.options.enableLogging) {\n        logger.info('Rate limit reset', {\n          context: {\n            identifier,\n          },\n        })\n      }\n    } catch (error) {\n      logger.error('Failed to reset rate limit', {\n        context: {\n          error: error instanceof Error ? error.message : String(error),\n          identifier,\n        },\n      })\n    }\n  }\n\n  /**\n   * Close the Redis connection\n   */\n  async close(): Promise<void> {\n    if (this.isConnected) {\n      await this.client.quit()\n      this.isConnected = false\n    }\n  }\n}\n\n/**\n * Create a new Redis rate limiter\n * @param options Rate limit options\n * @param redisUrl Redis connection URL\n * @returns Redis rate limiter instance\n */\nexport function redisRateLimit(options: RateLimitOptions, redisUrl?: string) {\n  return new RedisRateLimiter(options, redisUrl)\n}\n\n/**\n * Express middleware for Redis-based rate limiting\n * @param options Rate limit options\n * @param redisUrl Redis connection URL\n * @returns Express middleware function\n */\nexport function redisRateLimitMiddleware(options: RateLimitOptions, redisUrl?: string) {\n  const limiter = new RedisRateLimiter(options, redisUrl)\n\n  return async (req: any, res: any, next: any) => {\n    // Get client identifier (IP address or user ID)\n    const identifier =\n      req.ip ||\n      req.headers['x-forwarded-for'] ||\n      req.headers['x-real-ip'] ||\n      req.connection.remoteAddress ||\n      'anonymous'\n\n    // Check rate limit\n    const result = await limiter.check(identifier)\n\n    // Set rate limit headers\n    res.setHeader('X-RateLimit-Limit', options.maxRequests.toString())\n    res.setHeader('X-RateLimit-Remaining', result.remaining.toString())\n    res.setHeader('X-RateLimit-Reset', Math.ceil(result.resetIn / 1000).toString())\n\n    // If rate limit exceeded, return 429 Too Many Requests\n    if (!result.success) {\n      return res.status(429).json({\n        error: {\n          message: 'Too many requests, please try again later',\n          details: {\n            retryAfter: Math.ceil(result.resetIn / 1000),\n          },\n        },\n      })\n    }\n\n    // Continue to the next middleware\n    next()\n  }\n}\n\nexport default {\n  redisRateLimit,\n  redisRateLimitMiddleware,\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\search.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\semantic-search.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\services\\locationService.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 52,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 52,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1392, 1395], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1392, 1395], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\r\n * Location Service\r\n *\r\n * Provides geocoding and location search functionality for UK addresses and postcodes\r\n * using the MapTiler Geocoding API.\r\n */\r\n\r\n/**\r\n * Interface for location search results\r\n */\r\nexport interface LocationResult {\r\n  label: string\r\n  lat: number\r\n  lng: number\r\n}\r\n\r\n/**\r\n * Autocomplete UK locations and postcodes\r\n *\r\n * @param query The search query (partial postcode, place name, etc.)\r\n * @returns Array of matching locations with coordinates\r\n */\r\nexport async function autocompleteUKLocation(query: string): Promise<LocationResult[]> {\r\n  // Validate input\r\n  if (!query || query.trim().length === 0) {\r\n    return []\r\n  }\r\n\r\n  const MAPTILER_KEY = process.env.MAPTILER_API_KEY!\r\n\r\n  // Validate API key\r\n  if (!MAPTILER_KEY) {\r\n    throw new Error('MAPTILER_API_KEY environment variable is not set')\r\n  }\r\n\r\n  try {\r\n    const url = `https://api.maptiler.com/geocoding/${encodeURIComponent(\r\n      query\r\n    )}.json?key=${MAPTILER_KEY}&country=gb&language=en&limit=5`\r\n\r\n    const res = await fetch(url)\r\n\r\n    // Handle API errors\r\n    if (!res.ok) {\r\n      const errorData = await res.json().catch(() => null)\r\n      throw new Error(`MapTiler API error: ${res.status} ${errorData?.message || res.statusText}`)\r\n    }\r\n\r\n    const json = await res.json()\r\n\r\n    // Transform the response to our simplified format\r\n    return json.features.map((f: any) => ({\r\n      label: f.place_name,\r\n      lat: f.center[1],\r\n      lng: f.center[0],\r\n    }))\r\n  } catch (error) {\r\n    console.error('Error in autocompleteUKLocation:', error)\r\n    throw error\r\n  }\r\n}\r\n\r\n/**\r\n * Get detailed information about a specific UK postcode\r\n *\r\n * @param postcode The full UK postcode\r\n * @returns Detailed location information\r\n */\r\nexport async function getPostcodeDetails(postcode: string): Promise<LocationResult | null> {\r\n  const MAPTILER_KEY = process.env.MAPTILER_API_KEY!\r\n\r\n  if (!MAPTILER_KEY) {\r\n    throw new Error('MAPTILER_API_KEY environment variable is not set')\r\n  }\r\n\r\n  try {\r\n    // Format the postcode by removing spaces and converting to uppercase\r\n    const formattedPostcode = postcode.replace(/\\s+/g, '').toUpperCase()\r\n\r\n    const url = `https://api.maptiler.com/geocoding/${encodeURIComponent(\r\n      formattedPostcode\r\n    )}.json?key=${MAPTILER_KEY}&country=gb&language=en&limit=1`\r\n\r\n    const res = await fetch(url)\r\n\r\n    if (!res.ok) {\r\n      const errorData = await res.json().catch(() => null)\r\n      throw new Error(`MapTiler API error: ${res.status} ${errorData?.message || res.statusText}`)\r\n    }\r\n\r\n    const json = await res.json()\r\n\r\n    // If no results found, return null\r\n    if (!json.features || json.features.length === 0) {\r\n      return null\r\n    }\r\n\r\n    const feature = json.features[0]\r\n\r\n    return {\r\n      label: feature.place_name,\r\n      lat: feature.center[1],\r\n      lng: feature.center[0],\r\n    }\r\n  } catch (error) {\r\n    console.error('Error in getPostcodeDetails:', error)\r\n    throw error\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\services\\propertyService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\uploads\\error-handling.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 18,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 18,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [370, 373], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [370, 373], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 28,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 28,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [587, 590], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [587, 590], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 55,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 55,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1585, 1588], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1585, 1588], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\r\n * Error handling utilities for upload processing\r\n */\r\nimport { normalizeError } from '../error/error-utils'\r\n\r\n/**\r\n * Interface for upload data\r\n */\r\nexport interface UploadData {\r\n  id: string\r\n  fileName?: string\r\n  fileSize?: number\r\n  uploaderId?: string\r\n  status?: string\r\n  createdAt?: Date\r\n  updatedAt?: Date\r\n  propertyCount?: number\r\n  [key: string]: any // Allow for additional properties\r\n}\r\n\r\n/**\r\n * Interface for error context\r\n */\r\nexport interface ErrorContext {\r\n  operation: string\r\n  uploadId?: string\r\n  fileName?: string\r\n  additionalInfo?: Record<string, any>\r\n}\r\n\r\n/**\r\n * Safely logs upload processing errors with consistent formatting\r\n * @param error The error that occurred\r\n * @param context Context information about the operation\r\n * @param includeUploaderId Whether to include the uploader ID in logs (defaults to false for privacy)\r\n */\r\nexport function logUploadError(\r\n  error: unknown,\r\n  context: ErrorContext,\r\n  includeUploaderId = false\r\n): void {\r\n  // Create a structured error object for logging\r\n  const errorObj = {\r\n    message: normalizeError(error),\r\n    operation: context.operation,\r\n    uploadId: context.uploadId || 'unknown',\r\n    fileName: context.fileName || 'unknown',\r\n    timestamp: new Date().toISOString(),\r\n    ...context.additionalInfo,\r\n  }\r\n\r\n  // Remove sensitive information if not explicitly included\r\n  if (!includeUploaderId && context.additionalInfo && 'uploaderId' in context.additionalInfo) {\r\n    // Use type assertion or index notation to avoid TypeScript error\r\n    delete (errorObj as Record<string, any>)['uploaderId']\r\n  }\r\n\r\n  // Log differently based on environment\r\n  if (process.env.NODE_ENV === 'development') {\r\n    // In development, include more details including the stack trace\r\n    console.error(`[UPLOAD ERROR] ${context.operation}:`, errorObj, error)\r\n  } else {\r\n    // In production, log a structured object without the full error\r\n    console.error(`[UPLOAD ERROR] ${context.operation}:`, JSON.stringify(errorObj))\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a safe fallback response when property count determination fails\r\n * @param upload The upload data object\r\n * @param error The error that occurred\r\n * @returns A sanitized upload object with fallback values\r\n */\r\nexport function createPropertyCountFallback(\r\n  upload: UploadData | null | undefined,\r\n  error: unknown\r\n): UploadData {\r\n  // Log the error with appropriate context\r\n  logUploadError(error, {\r\n    operation: 'getPropertyCount',\r\n    uploadId: upload?.id,\r\n    fileName: upload?.fileName,\r\n    additionalInfo: {\r\n      fileSize: upload?.fileSize,\r\n      status: upload?.status,\r\n    },\r\n  })\r\n\r\n  // Return a sanitized object with fallback values\r\n  return {\r\n    ...upload,\r\n    id: upload?.id || 'unknown',\r\n    propertyCount: 0,\r\n    countError: true, // Flag to indicate the count is unreliable\r\n    uploaderId: undefined, // Remove uploader ID for privacy\r\n    errorMessage:\r\n      process.env.NODE_ENV === 'development'\r\n        ? normalizeError(error)\r\n        : 'Failed to determine property count',\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a safe response for upload processing errors\r\n * @param upload The upload data object\r\n * @param error The error that occurred\r\n * @param operation The operation that failed\r\n * @returns A sanitized upload object with error information\r\n */\r\nexport function createUploadErrorResponse(\r\n  upload: UploadData | null | undefined,\r\n  error: unknown,\r\n  operation: string\r\n): UploadData & { error: boolean } {\r\n  // Log the error with appropriate context\r\n  logUploadError(error, {\r\n    operation,\r\n    uploadId: upload?.id,\r\n    fileName: upload?.fileName,\r\n  })\r\n\r\n  // Return a sanitized object with error information\r\n  return {\r\n    ...upload,\r\n    id: upload?.id || 'unknown',\r\n    error: true,\r\n    status: 'error',\r\n    errorMessage:\r\n      process.env.NODE_ENV === 'development'\r\n        ? normalizeError(error)\r\n        : `Failed to process upload: ${operation}`,\r\n    uploaderId: undefined, // Remove uploader ID for privacy\r\n  }\r\n}\r\n\r\n/**\r\n * Safely extracts upload information with privacy considerations\r\n * @param upload The upload data object\r\n * @param includePrivateData Whether to include private data\r\n * @returns A sanitized upload object\r\n */\r\nexport function sanitizeUploadData(\r\n  upload: UploadData | null | undefined,\r\n  includePrivateData = false\r\n): Partial<UploadData> {\r\n  if (!upload) {\r\n    return { id: 'unknown' }\r\n  }\r\n\r\n  // Create a base object with non-sensitive data\r\n  const sanitized: Partial<UploadData> = {\r\n    id: upload.id,\r\n    fileName: upload.fileName,\r\n    fileSize: upload.fileSize,\r\n    status: upload.status,\r\n    createdAt: upload.createdAt,\r\n    updatedAt: upload.updatedAt,\r\n    propertyCount: upload.propertyCount,\r\n  }\r\n\r\n  // Include private data if explicitly requested\r\n  if (includePrivateData) {\r\n    sanitized.uploaderId = upload.uploaderId\r\n    // Add other private fields as needed\r\n  }\r\n\r\n  return sanitized\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\utils\\file-utils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\utils\\geocoding.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\validation\\form-validation.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\lib\\vector.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\middleware.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'request' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 7,
        "column": 28,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 35
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\n/**\n * Middleware to add security headers to all responses\n */\nexport function middleware(request: NextRequest) {\n  // Get the response\n  const response = NextResponse.next()\n\n  // Add security headers\n  const headers = response.headers\n\n  // Content Security Policy\n  headers.set(\n    'Content-Security-Policy',\n    \"default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://unpkg.com; style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net https://fonts.googleapis.com; img-src 'self' data: https://*; font-src 'self' https://fonts.gstatic.com; connect-src 'self' https://api.mapbox.com https://events.mapbox.com https://*.clerk.accounts.dev https://api.clerk.dev; frame-src 'self'\"\n  )\n\n  // Prevent MIME type sniffing\n  headers.set('X-Content-Type-Options', 'nosniff')\n\n  // Prevent clickjacking\n  headers.set('X-Frame-Options', 'DENY')\n\n  // Enable strict XSS protection\n  headers.set('X-XSS-Protection', '1; mode=block')\n\n  // Disable browser features\n  headers.set(\n    'Permissions-Policy',\n    'camera=(), microphone=(), geolocation=(self), interest-cohort=()'\n  )\n\n  // Strict Transport Security\n  headers.set('Strict-Transport-Security', 'max-age=63072000; includeSubDomains; preload')\n\n  // Referrer Policy\n  headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')\n\n  return response\n}\n\n/**\n * Configure which paths this middleware runs on\n */\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - public folder\n     */\n    '/((?!_next/static|_next/image|favicon.ico|public/).*)',\n  ],\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\db\\src\\index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\db\\src\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\db\\src\\schema.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\db\\src\\schema.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\types\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\types\\property.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\.storybook\\main.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\.storybook\\preview.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\components\\Button.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\components\\Button.stories.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\components\\Button.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\components\\Button.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\components\\Map.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\postcss.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\src\\components\\Button\\Button.stories.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\src\\components\\Button\\Button.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\src\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\stories\\Button.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\stories\\Button.stories.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\stories\\Button.stories.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\stories\\Button.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\stories\\ButtonComponent.stories.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\stories\\ButtonComponent.stories.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\stories\\Header.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\stories\\Header.stories.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\stories\\Header.stories.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\stories\\Header.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\stories\\Page.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\stories\\Page.stories.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\stories\\Page.stories.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\stories\\Page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\tailwind.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\vitest.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\ui\\vitest.setup.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\utils\\formatDate.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\utils\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\packages\\utils\\tests\\formatDate.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\pages\\api\\amenities.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\pages\\api\\favorites\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\pages\\api\\locations\\postcode.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\pages\\api\\locations\\search.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\pages\\api\\properties\\[id].ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\pages\\api\\properties\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\pages\\api\\semantic-search.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\pages\\api\\upload.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\pages\\properties\\[id].tsx",
    "messages": [
      {
        "ruleId": "jsx-a11y/anchor-is-valid",
        "severity": 1,
        "message": "The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",
        "line": 125,
        "column": 13,
        "nodeType": "JSXOpeningElement",
        "endLine": 125,
        "endColumn": 105
      },
      {
        "ruleId": "jsx-a11y/anchor-is-valid",
        "severity": 1,
        "message": "The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",
        "line": 139,
        "column": 11,
        "nodeType": "JSXOpeningElement",
        "endLine": 139,
        "endColumn": 74
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// pages/properties/[id].tsx\nimport dynamic from 'next/dynamic'\nimport Link from 'next/link'\nimport { useRouter } from 'next/router'\nimport { useState, useEffect } from 'react'\n\n// Import the SimilarProperties component\nconst SimilarProperties = dynamic(() => import('../../components/search/SimilarProperties'), {\n  ssr: false,\n})\n\n// Define Property type\ninterface Property {\n  id: string\n  title: string\n  description: string\n  price: number\n  location: string\n  bedrooms: number\n  bathrooms: number\n  squareFeet: number\n  propertyType: string\n  status: string\n  images?: string[]\n  features?: string[]\n  createdAt: string\n}\n\nexport default function PropertyDetailPage() {\n  const router = useRouter()\n  const { id } = router.query\n\n  const [property, setProperty] = useState<Property | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    // Only fetch when we have an ID\n    if (!id) return\n\n    const fetchProperty = async () => {\n      setLoading(true)\n      setError(null)\n\n      try {\n        // In a real app, this would be an API call\n        // For now, we'll simulate fetching property data\n        await new Promise(resolve => setTimeout(resolve, 500))\n\n        // Mock property data\n        const mockProperty: Property = {\n          id: id as string,\n          title: `Luxury ${id === 'prop-123' ? 'Penthouse' : 'Property'} with Amazing Views`,\n          description: `This stunning ${id === 'prop-123' ? 'penthouse' : 'property'} offers breathtaking views and luxurious amenities. Located in a prime area, it features high-end finishes, spacious rooms, and modern design. Perfect for those seeking comfort and elegance in urban living.`,\n          price: 1150000,\n          location: 'London, UK',\n          bedrooms: 3,\n          bathrooms: 2,\n          squareFeet: 1850,\n          propertyType: id === 'prop-123' ? 'penthouse' : 'apartment',\n          status: 'available',\n          images: [\n            'https://placehold.co/600x400?text=Property+Image+1',\n            'https://placehold.co/600x400?text=Property+Image+2',\n            'https://placehold.co/600x400?text=Property+Image+3',\n          ],\n          features: [\n            'Floor-to-ceiling windows',\n            'Private balcony',\n            'Gourmet kitchen',\n            'Hardwood floors',\n            'Smart home technology',\n            'In-unit laundry',\n            'Central air conditioning',\n            'Walk-in closets',\n          ],\n          createdAt: new Date().toISOString(),\n        }\n\n        setProperty(mockProperty)\n      } catch (err) {\n        console.error('Error fetching property:', err)\n        setError('Failed to load property details. Please try again.')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchProperty()\n  }, [id])\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center py-12\">\n          <div className=\"inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-blue-500 border-r-transparent\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading property details...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded\">\n          <p>{error}</p>\n          <button onClick={() => router.reload()} className=\"mt-2 text-blue-500 hover:underline\">\n            Try again\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  if (!property) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center py-12\">\n          <h2 className=\"text-2xl font-bold text-gray-700\">Property Not Found</h2>\n          <p className=\"mt-2 text-gray-600\">\n            The property you&#39;re looking for doesn&#39;t exist or has been removed.\n          </p>\n          <Link href=\"/search\">\n            <a className=\"mt-4 inline-block bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\">\n              Back to Search\n            </a>\n          </Link>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      {/* Back button */}\n      <div className=\"mb-6\">\n        <Link href=\"/search\">\n          <a className=\"text-blue-500 hover:underline flex items-center\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              className=\"h-5 w-5 mr-1\"\n              viewBox=\"0 0 20 20\"\n              fill=\"currentColor\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                d=\"M9.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L7.414 9H15a1 1 0 110 2H7.414l2.293 2.293a1 1 0 010 1.414z\"\n                clipRule=\"evenodd\"\n              />\n            </svg>\n            Back to Search\n          </a>\n        </Link>\n      </div>\n\n      {/* Property title and status */}\n      <div className=\"flex justify-between items-start mb-6\">\n        <h1 className=\"text-3xl font-bold\">{property.title}</h1>\n        <span\n          className={`px-3 py-1 rounded-full text-sm font-medium ${\n            property.status === 'available'\n              ? 'bg-green-100 text-green-800'\n              : property.status === 'pending'\n                ? 'bg-yellow-100 text-yellow-800'\n                : 'bg-red-100 text-red-800'\n          }`}\n        >\n          {property.status.charAt(0).toUpperCase() + property.status.slice(1)}\n        </span>\n      </div>\n\n      {/* Property location */}\n      <p className=\"text-gray-600 text-lg mb-6\">{property.location}</p>\n\n      {/* Property images */}\n      <div className=\"mb-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          {property.images &&\n            property.images.map((image, index) => (\n              <div\n                key={index}\n                className={`${index === 0 ? 'md:col-span-2 md:row-span-2' : ''} h-64 bg-gray-200`}\n              >\n                <img\n                  src={image}\n                  alt={`${property.title} #${index + 1}`}\n                  className=\"w-full h-full object-cover\"\n                />\n              </div>\n            ))}\n        </div>\n      </div>\n\n      {/* Property details */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-8\">\n        <div className=\"md:col-span-2\">\n          {/* Description */}\n          <div className=\"mb-8\">\n            <h2 className=\"text-2xl font-bold mb-4\">Description</h2>\n            <p className=\"text-gray-700 leading-relaxed\">{property.description}</p>\n          </div>\n\n          {/* Features */}\n          <div>\n            <h2 className=\"text-2xl font-bold mb-4\">Features</h2>\n            <ul className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n              {property.features &&\n                property.features.map((feature, index) => (\n                  <li key={index} className=\"flex items-center text-gray-700\">\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      className=\"h-5 w-5 text-green-500 mr-2\"\n                      viewBox=\"0 0 20 20\"\n                      fill=\"currentColor\"\n                    >\n                      <path\n                        fillRule=\"evenodd\"\n                        d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                        clipRule=\"evenodd\"\n                      />\n                    </svg>\n                    {feature}\n                  </li>\n                ))}\n            </ul>\n          </div>\n        </div>\n\n        {/* Price and details card */}\n        <div>\n          <div className=\"bg-white rounded-lg shadow-md p-6 border border-gray-200 sticky top-4\">\n            <div className=\"text-3xl font-bold text-gray-900 mb-4\">\n              £{property.price.toLocaleString()}\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4 mb-6\">\n              <div className=\"text-center p-3 bg-gray-50 rounded\">\n                <div className=\"text-gray-500 text-sm\">Bedrooms</div>\n                <div className=\"font-bold text-lg\">{property.bedrooms}</div>\n              </div>\n              <div className=\"text-center p-3 bg-gray-50 rounded\">\n                <div className=\"text-gray-500 text-sm\">Bathrooms</div>\n                <div className=\"font-bold text-lg\">{property.bathrooms}</div>\n              </div>\n              <div className=\"text-center p-3 bg-gray-50 rounded\">\n                <div className=\"text-gray-500 text-sm\">Area</div>\n                <div className=\"font-bold text-lg\">{property.squareFeet} sq ft</div>\n              </div>\n              <div className=\"text-center p-3 bg-gray-50 rounded\">\n                <div className=\"text-gray-500 text-sm\">Type</div>\n                <div className=\"font-bold text-lg capitalize\">{property.propertyType}</div>\n              </div>\n            </div>\n\n            <button className=\"w-full bg-blue-500 hover:bg-blue-600 text-white py-3 px-4 rounded-lg font-medium\">\n              Contact Agent\n            </button>\n\n            <button className=\"w-full mt-3 border border-blue-500 text-blue-500 hover:bg-blue-50 py-3 px-4 rounded-lg font-medium\">\n              Schedule Viewing\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Similar Properties Section */}\n      {id && <SimilarProperties propertyId={id as string} />}\n    </div>\n  )\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\pages\\search.tsx",
    "messages": [
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 50,
        "column": 16,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": {
              "range": [1584, 1673],
              "text": "\r\n          Try: &quot;modern apartment in city center\" or \"family home with garden\"\r\n        "
            },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": {
              "range": [1584, 1673],
              "text": "\r\n          Try: &ldquo;modern apartment in city center\" or \"family home with garden\"\r\n        "
            },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": {
              "range": [1584, 1673],
              "text": "\r\n          Try: &#34;modern apartment in city center\" or \"family home with garden\"\r\n        "
            },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": {
              "range": [1584, 1673],
              "text": "\r\n          Try: &rdquo;modern apartment in city center\" or \"family home with garden\"\r\n        "
            },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 50,
        "column": 48,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": {
              "range": [1584, 1673],
              "text": "\r\n          Try: \"modern apartment in city center&quot; or \"family home with garden\"\r\n        "
            },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": {
              "range": [1584, 1673],
              "text": "\r\n          Try: \"modern apartment in city center&ldquo; or \"family home with garden\"\r\n        "
            },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": {
              "range": [1584, 1673],
              "text": "\r\n          Try: \"modern apartment in city center&#34; or \"family home with garden\"\r\n        "
            },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": {
              "range": [1584, 1673],
              "text": "\r\n          Try: \"modern apartment in city center&rdquo; or \"family home with garden\"\r\n        "
            },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 50,
        "column": 53,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": {
              "range": [1584, 1673],
              "text": "\r\n          Try: \"modern apartment in city center\" or &quot;family home with garden\"\r\n        "
            },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": {
              "range": [1584, 1673],
              "text": "\r\n          Try: \"modern apartment in city center\" or &ldquo;family home with garden\"\r\n        "
            },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": {
              "range": [1584, 1673],
              "text": "\r\n          Try: \"modern apartment in city center\" or &#34;family home with garden\"\r\n        "
            },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": {
              "range": [1584, 1673],
              "text": "\r\n          Try: \"modern apartment in city center\" or &rdquo;family home with garden\"\r\n        "
            },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 50,
        "column": 77,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": {
              "range": [1584, 1673],
              "text": "\r\n          Try: \"modern apartment in city center\" or \"family home with garden&quot;\r\n        "
            },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": {
              "range": [1584, 1673],
              "text": "\r\n          Try: \"modern apartment in city center\" or \"family home with garden&ldquo;\r\n        "
            },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": {
              "range": [1584, 1673],
              "text": "\r\n          Try: \"modern apartment in city center\" or \"family home with garden&#34;\r\n        "
            },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": {
              "range": [1584, 1673],
              "text": "\r\n          Try: \"modern apartment in city center\" or \"family home with garden&rdquo;\r\n        "
            },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// pages/search.tsx\r\nimport { useState } from 'react'\r\n\r\nimport { Property } from '../lib/getListings'\r\nimport { semanticSearch } from '../lib/search'\r\n\r\nexport default function SearchPage() {\r\n  const [query, setQuery] = useState('')\r\n  const [results, setResults] = useState<Property[]>([])\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  const handleSearch = async (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    if (!query.trim()) return\r\n\r\n    setLoading(true)\r\n    try {\r\n      const searchResults = await semanticSearch(query)\r\n      setResults(searchResults)\r\n    } catch (error) {\r\n      console.error('Search error:', error)\r\n      alert('Error performing search. Please try again.')\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <h1 className=\"text-3xl font-bold mb-6\">Semantic Property Search</h1>\r\n\r\n      <form onSubmit={handleSearch} className=\"mb-8\">\r\n        <div className=\"flex gap-2\">\r\n          <input\r\n            type=\"text\"\r\n            value={query}\r\n            onChange={e => setQuery(e.target.value)}\r\n            placeholder=\"Describe your ideal property...\"\r\n            className=\"flex-grow p-2 border rounded\"\r\n          />\r\n          <button\r\n            type=\"submit\"\r\n            disabled={loading}\r\n            className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:bg-blue-300\"\r\n          >\r\n            {loading ? 'Searching...' : 'Search'}\r\n          </button>\r\n        </div>\r\n        <p className=\"text-sm text-gray-500 mt-2\">\r\n          Try: \"modern apartment in city center\" or \"family home with garden\"\r\n        </p>\r\n      </form>\r\n\r\n      {results.length > 0 ? (\r\n        <div>\r\n          <h2 className=\"text-xl font-semibold mb-4\">Search Results</h2>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n            {results.map(property => (\r\n              <div key={property.id} className=\"border rounded-lg overflow-hidden shadow-md\">\r\n                <div className=\"h-48 bg-gray-200 relative\">\r\n                  {property.images && property.images[0] ? (\r\n                    <img\r\n                      src={property.images[0]}\r\n                      alt={property.title}\r\n                      className=\"w-full h-full object-cover\"\r\n                    />\r\n                  ) : (\r\n                    <div className=\"flex items-center justify-center h-full text-gray-400\">\r\n                      No image available\r\n                    </div>\r\n                  )}\r\n                  <div className=\"absolute bottom-0 right-0 bg-blue-500 text-white px-2 py-1 text-sm\">\r\n                    Similarity: {(property.score * 100).toFixed(1)}%\r\n                  </div>\r\n                </div>\r\n                <div className=\"p-4\">\r\n                  <h3 className=\"font-bold text-lg mb-1\">{property.title}</h3>\r\n                  <p className=\"text-gray-600 mb-2\">{property.location}</p>\r\n                  <p className=\"font-semibold text-lg mb-2\">£{property.price.toLocaleString()}</p>\r\n                  <div className=\"flex items-center text-sm text-gray-500 mb-2\">\r\n                    <span className=\"mr-3\">{property.bedrooms} beds</span>\r\n                    <span>{property.bathrooms} baths</span>\r\n                  </div>\r\n                  <p className=\"text-sm text-gray-600 line-clamp-2\">{property.description}</p>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      ) : query && !loading ? (\r\n        <div className=\"text-center py-8 text-gray-500\">\r\n          No properties found matching your search.\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\prisma\\connection-pool.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 21,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 21,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [684, 735], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { PrismaClient } from '@prisma/client'\nimport { Pool } from 'pg'\n\n// Environment variables\nconst DATABASE_URL = process.env.DATABASE_URL\nconst POOL_SIZE = parseInt(process.env.POOL_SIZE || '10', 10)\n\n// Connection pool configuration\nconst pool = new Pool({\n  connectionString: DATABASE_URL,\n  max: POOL_SIZE, // Maximum number of clients in the pool\n  idleTimeoutMillis: 30000, // How long a client is allowed to remain idle before being closed\n  connectionTimeoutMillis: 2000, // How long to wait for a connection to become available\n  ssl: {\n    rejectUnauthorized: false, // Required for Neon Postgres\n  },\n})\n\n// Log pool events for monitoring\npool.on('connect', () => {\n  console.log('Database pool connection established')\n})\n\npool.on('error', err => {\n  console.error('Unexpected error on idle client', err)\n  process.exit(-1)\n})\n\n// Create a custom Prisma client with connection pooling\nconst prismaClientSingleton = () => {\n  return new PrismaClient({\n    datasources: {\n      db: {\n        url: DATABASE_URL,\n      },\n    },\n    log: ['query', 'error', 'warn'],\n  })\n}\n\n// Use global to maintain a single instance across hot reloads in development\ntype PrismaClientSingleton = ReturnType<typeof prismaClientSingleton>\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClientSingleton | undefined\n}\n\n// Export the Prisma client singleton\nexport const prisma = globalForPrisma.prisma ?? prismaClientSingleton()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n\nexport default prisma\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\prisma\\seed.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 35,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 35,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [850, 926], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { PrismaClient } from '@prisma/client'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nconst prisma = new PrismaClient()\r\n\r\nasync function main() {\r\n  // Clear existing data\r\n  await prisma.property.deleteMany({})\r\n\r\n  // Add sample properties\r\n  const properties = [\r\n    {\r\n      id: uuidv4(),\r\n      title: 'Modern Apartment in City Center',\r\n      location: 'London',\r\n      postcode: 'EC1A 1BB',\r\n      price: 450000,\r\n      imageUrl: 'https://example.com/images/apartment1.jpg',\r\n      lat: 51.5074,\r\n      lng: -0.1278,\r\n      description: 'A beautiful modern apartment in the heart of the city.',\r\n      councilTaxBand: 'D',\r\n      tenure: 'Leasehold',\r\n      epcRating: 'B',\r\n    },\r\n    // Add more sample properties\r\n  ]\r\n\r\n  for (const property of properties) {\r\n    await prisma.property.create({\r\n      data: property,\r\n    })\r\n  }\r\n\r\n  console.log(`Database has been seeded with ${properties.length} properties`)\r\n}\r\n\r\nmain()\r\n  .catch(e => {\r\n    console.error(e)\r\n    process.exit(1)\r\n  })\r\n  .finally(async () => {\r\n    await prisma.$disconnect()\r\n  })\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\__mocks__\\fileMock.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\api\\src\\db\\schema.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\api\\src\\index.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 2,
        "column": 1,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 2,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [19, 57], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// API entry point\nconsole.log('API server starting...');\n\n// Add your API server implementation here\n// Example:\n// import express from 'express';\n// const app = express();\n// app.listen(3001, () => console.log('API server running on port 3001'));\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\api\\src\\some-service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\.next\\server\\interception-route-rewrite-manifest.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\.next\\server\\middleware-build-manifest.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\.next\\server\\middleware-react-loadable-manifest.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\.next\\server\\next-font-manifest.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\.next\\server\\server-reference-manifest.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\.next\\static\\chunks\\polyfills.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\.next\\static\\development\\_buildManifest.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\.next\\static\\development\\_ssgManifest.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\app\\admin\\dashboard\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\app\\admin\\layout.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\app\\agent\\dashboard\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 112,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 112,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2971, 2974], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2971, 2974], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 191,
        "column": 55,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [5666, 5710],
              "text": "You haven&apos;t uploaded any property files yet."
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [5666, 5710],
              "text": "You haven&lsquo;t uploaded any property files yet."
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [5666, 5710],
              "text": "You haven&#39;t uploaded any property files yet."
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [5666, 5710],
              "text": "You haven&rsquo;t uploaded any property files yet."
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 279,
        "column": 20,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [9459, 9554],
              "text": "\n            You don&apos;t have any properties yet. Upload a CSV file to add properties.\n          "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [9459, 9554],
              "text": "\n            You don&lsquo;t have any properties yet. Upload a CSV file to add properties.\n          "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [9459, 9554],
              "text": "\n            You don&#39;t have any properties yet. Upload a CSV file to add properties.\n          "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [9459, 9554],
              "text": "\n            You don&rsquo;t have any properties yet. Upload a CSV file to add properties.\n          "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useUser } from '@clerk/nextjs';\nimport UploadZone from '@components/common/UploadZone';\nimport { useState, useEffect } from 'react';\n\nimport { Button } from '../../../src/ui';\n\ninterface UploadRecord {\n  id: string;\n  filename: string;\n  status: 'pending' | 'approved' | 'rejected';\n  createdAt: Date;\n  propertyCount: number;\n}\n\ninterface Property {\n  id: string;\n  uploadId: string;\n  address: string;\n  price: number;\n  bedrooms?: number;\n  type?: string;\n  dateSold?: Date;\n}\n\nexport default function AgentDashboard() {\n  const { isLoaded, isSignedIn, user } = useUser();\n  const [uploads, setUploads] = useState<UploadRecord[]>([]);\n  const [properties, setProperties] = useState<Property[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [uploadStatus, setUploadStatus] = useState<{\n    isUploading: boolean;\n    success: boolean | null;\n    message: string | null;\n  }>({\n    isUploading: false,\n    success: null,\n    message: null,\n  });\n\n  useEffect(() => {\n    // Fetch agent's uploads and properties\n    const fetchAgentData = async () => {\n      try {\n        setLoading(true);\n        // This would be replaced with actual API calls\n        const uploadsResponse = await fetch('/api/agent/uploads');\n        const propertiesResponse = await fetch('/api/agent/properties');\n\n        if (!uploadsResponse.ok || !propertiesResponse.ok) {\n          throw new Error('Failed to fetch data');\n        }\n\n        const uploadsData = await uploadsResponse.json();\n        const propertiesData = await propertiesResponse.json();\n\n        setUploads(uploadsData.uploads);\n        setProperties(propertiesData.properties);\n      } catch (err) {\n        console.error('Error fetching agent data:', err);\n        setError('Failed to load your data. Please try again.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchAgentData();\n  }, []);\n\n  const handleFileUpload = async (file: File) => {\n    setUploadStatus({\n      isUploading: true,\n      success: null,\n      message: 'Uploading file...',\n    });\n\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n\n      const response = await fetch('/api/agent/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Upload failed');\n      }\n\n      const data = await response.json();\n\n      // Add the new upload to the list\n      setUploads([data.upload, ...uploads]);\n\n      setUploadStatus({\n        isUploading: false,\n        success: true,\n        message: `Successfully uploaded ${file.name}`,\n      });\n\n      // Clear success message after 5 seconds\n      setTimeout(() => {\n        setUploadStatus((prev) => ({\n          ...prev,\n          success: null,\n          message: null,\n        }));\n      }, 5000);\n    } catch (err: any) {\n      console.error('Upload error:', err);\n      setUploadStatus({\n        isUploading: false,\n        success: false,\n        message: err.message || 'Failed to upload file. Please try again.',\n      });\n    }\n  };\n\n  const viewUploadDetails = (uploadId: string) => {\n    // Navigate to upload details page\n    window.location.href = `/agent/uploads/${uploadId}`;\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h1 className=\"text-3xl font-bold\">Agent Dashboard</h1>\n        {isLoaded && isSignedIn && (\n          <div className=\"flex items-center\">\n            <div className=\"mr-4\">\n              <p className=\"text-sm text-gray-600\">Welcome,</p>\n              <p className=\"font-medium\">{user.firstName || user.emailAddresses[0].emailAddress}</p>\n            </div>\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={() => (window.location.href = '/sign-out')}\n            >\n              Sign Out\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {/* Upload Section */}\n      <div className=\"bg-white rounded shadow p-6 mb-8\">\n        <h2 className=\"text-xl font-semibold mb-4\">Upload Properties</h2>\n        <p className=\"text-gray-600 mb-4\">\n          Upload a CSV file containing property details. The file should include columns for\n          address, price, bedrooms, type, etc.\n        </p>\n\n        <UploadZone onUpload={handleFileUpload} />\n\n        {uploadStatus.isUploading && (\n          <div className=\"mt-4 flex items-center text-blue-600\">\n            <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2\"></div>\n            <span>{uploadStatus.message}</span>\n          </div>\n        )}\n\n        {uploadStatus.success === true && (\n          <div className=\"mt-4 text-green-600\">{uploadStatus.message}</div>\n        )}\n\n        {uploadStatus.success === false && (\n          <div className=\"mt-4 text-red-600\">{uploadStatus.message}</div>\n        )}\n      </div>\n\n      {/* Uploads Table */}\n      <div className=\"bg-white rounded shadow overflow-hidden mb-8\">\n        <h2 className=\"text-xl font-semibold p-4 border-b\">Your Uploads</h2>\n\n        {loading && (\n          <div className=\"flex justify-center items-center p-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-700\"></div>\n          </div>\n        )}\n\n        {error && (\n          <div className=\"p-4 text-red-600\" role=\"alert\">\n            {error}\n          </div>\n        )}\n\n        {!loading && !error && uploads.length === 0 && (\n          <div className=\"p-4 text-gray-600\">You haven't uploaded any property files yet.</div>\n        )}\n\n        {!loading && !error && uploads.length > 0 && (\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Filename\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Date\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Properties\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {uploads.map((upload) => (\n                  <tr key={upload.id}>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm font-medium text-gray-900\">{upload.filename}</div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm text-gray-900\">\n                        {new Date(upload.createdAt).toLocaleDateString()}\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm text-gray-900\">{upload.propertyCount}</div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span\n                        className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full \n                        ${\n                          upload.status === 'pending'\n                            ? 'bg-yellow-100 text-yellow-800'\n                            : upload.status === 'approved'\n                              ? 'bg-green-100 text-green-800'\n                              : 'bg-red-100 text-red-800'\n                        }`}\n                      >\n                        {upload.status.charAt(0).toUpperCase() + upload.status.slice(1)}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                      <Button\n                        variant=\"secondary\"\n                        size=\"sm\"\n                        onClick={() => viewUploadDetails(upload.id)}\n                      >\n                        View Details\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n\n      {/* Properties Preview */}\n      <div className=\"bg-white rounded shadow overflow-hidden\">\n        <h2 className=\"text-xl font-semibold p-4 border-b\">Your Properties</h2>\n\n        {loading && (\n          <div className=\"flex justify-center items-center p-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-700\"></div>\n          </div>\n        )}\n\n        {error && (\n          <div className=\"p-4 text-red-600\" role=\"alert\">\n            {error}\n          </div>\n        )}\n\n        {!loading && !error && properties.length === 0 && (\n          <div className=\"p-4 text-gray-600\">\n            You don't have any properties yet. Upload a CSV file to add properties.\n          </div>\n        )}\n\n        {!loading && !error && properties.length > 0 && (\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Address\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Price\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Bedrooms\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Type\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {properties.slice(0, 5).map((property) => (\n                  <tr key={property.id}>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm font-medium text-gray-900\">{property.address}</div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm text-gray-900\">\n                        £{property.price.toLocaleString()}\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm text-gray-900\">{property.bedrooms || 'N/A'}</div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm text-gray-900\">{property.type || 'N/A'}</div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                      <Button\n                        variant=\"secondary\"\n                        size=\"sm\"\n                        onClick={() => (window.location.href = `/agent/properties/${property.id}`)}\n                      >\n                        Edit\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n\n            {properties.length > 5 && (\n              <div className=\"p-4 text-center\">\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => (window.location.href = '/agent/properties')}\n                >\n                  View All Properties ({properties.length})\n                </Button>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\app\\agent\\layout.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\app\\agent\\profile\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\app\\api\\admin\\uploads\\[id]\\approve\\route.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 12,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 12,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [410, 463], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextRequest, NextResponse } from 'next/server';\n\nexport async function POST(request: NextRequest, { params }: { params: { id: string } }) {\n  try {\n    const uploadId = params.id;\n\n    // In a real implementation, you would:\n    // 1. Verify the user has admin permissions\n    // 2. Update the upload status in the database\n    // 3. Process any side effects (e.g., making properties searchable)\n\n    console.log(`Approving upload with ID: ${uploadId}`);\n\n    // Mock successful update\n    return NextResponse.json({\n      message: 'Upload approved successfully',\n      uploadId,\n    });\n  } catch (error) {\n    console.error('Error approving upload:', error);\n    return NextResponse.json({ message: 'Failed to approve upload' }, { status: 500 });\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\app\\api\\admin\\uploads\\[id]\\reject\\route.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 12,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 12,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [415, 468], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextRequest, NextResponse } from 'next/server';\n\nexport async function POST(request: NextRequest, { params }: { params: { id: string } }) {\n  try {\n    const uploadId = params.id;\n\n    // In a real implementation, you would:\n    // 1. Verify the user has admin permissions\n    // 2. Update the upload status in the database\n    // 3. Process any side effects (e.g., marking properties as unavailable)\n\n    console.log(`Rejecting upload with ID: ${uploadId}`);\n\n    // Mock successful update\n    return NextResponse.json({\n      message: 'Upload rejected successfully',\n      uploadId,\n    });\n  } catch (error) {\n    console.error('Error rejecting upload:', error);\n    return NextResponse.json({ message: 'Failed to reject upload' }, { status: 500 });\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\app\\api\\admin\\uploads\\route.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'request' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 52,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 52,
        "endColumn": 34
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextRequest, NextResponse } from 'next/server';\n\n// Mock data - would be replaced with database queries\nconst mockUploads = [\n  {\n    id: '1',\n    uploaderId: 'user-123',\n    uploaderName: 'John Smith',\n    filename: 'london-properties.csv',\n    status: 'approved',\n    createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 7 days ago\n    propertyCount: 42,\n  },\n  {\n    id: '2',\n    uploaderId: 'user-123',\n    uploaderName: 'John Smith',\n    filename: 'manchester-listings.csv',\n    status: 'pending',\n    createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago\n    propertyCount: 18,\n  },\n  {\n    id: '3',\n    uploaderId: 'user-123',\n    uploaderName: 'John Smith',\n    filename: 'birmingham-properties.csv',\n    status: 'rejected',\n    createdAt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000), // 14 days ago\n    propertyCount: 7,\n  },\n  {\n    id: '4',\n    uploaderId: 'user-456',\n    uploaderName: 'Sarah Johnson',\n    filename: 'edinburgh-listings.csv',\n    status: 'pending',\n    createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // 1 day ago\n    propertyCount: 23,\n  },\n  {\n    id: '5',\n    uploaderId: 'user-789',\n    uploaderName: 'Michael Brown',\n    filename: 'glasgow-properties.csv',\n    status: 'approved',\n    createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000), // 5 days ago\n    propertyCount: 31,\n  },\n];\n\nexport async function GET(request: NextRequest) {\n  try {\n    // In a real implementation, you would:\n    // 1. Verify the user has admin permissions\n    // 2. Query the database for all uploads\n    // 3. Calculate stats\n    // 4. Return the results\n\n    // Sort by date (newest first)\n    const sortedUploads = [...mockUploads].sort(\n      (a, b) => b.createdAt.getTime() - a.createdAt.getTime()\n    );\n\n    // Calculate stats\n    const stats = {\n      totalProperties: mockUploads.reduce((sum, upload) => sum + upload.propertyCount, 0),\n      pendingUploads: mockUploads.filter((upload) => upload.status === 'pending').length,\n      approvedUploads: mockUploads.filter((upload) => upload.status === 'approved').length,\n      rejectedUploads: mockUploads.filter((upload) => upload.status === 'rejected').length,\n    };\n\n    return NextResponse.json({\n      uploads: sortedUploads,\n      stats,\n    });\n  } catch (error) {\n    console.error('Error fetching admin uploads:', error);\n    return NextResponse.json({ message: 'Failed to fetch uploads' }, { status: 500 });\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\app\\api\\agent\\properties\\route.ts",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module '../../../../../lib/db'.",
        "line": 5,
        "column": 28,
        "nodeType": "Literal",
        "endLine": 5,
        "endColumn": 51
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'getPropertiesByUploadId' is defined but never used.",
        "line": 6,
        "column": 38,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 61
      },
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module '../../../../../lib/db/queries'.",
        "line": 6,
        "column": 69,
        "nodeType": "Literal",
        "endLine": 6,
        "endColumn": 100
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'request' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 8,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 34
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { auth } from '@clerk/nextjs/server';\nimport { inArray } from 'drizzle-orm';\nimport { NextRequest, NextResponse } from 'next/server';\n\nimport { db, schema } from '../../../../../lib/db';\nimport { getUploadRecordsByUploader, getPropertiesByUploadId } from '../../../../../lib/db/queries';\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Get the user ID from Clerk\n    const { userId } = await auth();\n\n    if (!userId) {\n      return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Get all uploads for this user\n    const uploads = await getUploadRecordsByUploader(userId);\n\n    // Extract upload IDs\n    const uploadIds = uploads.map((upload) => upload.id);\n\n    if (uploadIds.length === 0) {\n      // If user has no uploads, return empty array\n      return NextResponse.json({ properties: [] });\n    }\n\n    // Get all properties for these uploads in a single query\n    const properties = await db\n      .select()\n      .from(schema.property)\n      .where(inArray(schema.property.uploadId, uploadIds));\n\n    return NextResponse.json({\n      properties: properties,\n    });\n  } catch (error) {\n    console.error('Error fetching properties:', error);\n    return NextResponse.json({ message: 'Failed to fetch properties' }, { status: 500 });\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\app\\api\\agent\\upload\\route.ts",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module '../../../../../lib/db'.",
        "line": 6,
        "column": 20,
        "nodeType": "Literal",
        "endLine": 6,
        "endColumn": 43
      },
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module '../../../../../lib/db/property-processor'.",
        "line": 7,
        "column": 41,
        "nodeType": "Literal",
        "endLine": 7,
        "endColumn": 83
      },
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module '../../../../../lib/db/queries'.",
        "line": 12,
        "column": 8,
        "nodeType": "Literal",
        "endLine": 12,
        "endColumn": 39
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 54,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 54,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [1930, 1984], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 133,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 133,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [4548, 4627], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 136,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 136,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4704, 4707], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4704, 4707], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'skip_empty_lines' is not in camel case.",
        "line": 150,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 150,
        "endColumn": 27
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 154,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 154,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [5326, 5410], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 158,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 158,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [5573, 5663], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'headerRow' is assigned a value but never used.",
        "line": 180,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 180,
        "endColumn": 18
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 197,
        "column": 13,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 197,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [7224, 7395], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'skip_empty_lines' is not in camel case.",
        "line": 214,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 214,
        "endColumn": 35
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 219,
        "column": 17,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 219,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [8209, 8336], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'skip_empty_lines' is not in camel case.",
        "line": 235,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 235,
        "endColumn": 31
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 240,
        "column": 13,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 240,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [8860, 8985], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 251,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 251,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [9191, 9302], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 271,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 271,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [9909, 9975], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 291,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 291,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [10647, 10727], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 332,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 332,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [12074, 12145], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 335,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 335,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [12230, 12309], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'tx' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 339,
        "column": 46,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 339,
        "endColumn": 48
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 342,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 342,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [12492, 12552], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 353,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 353,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [12839, 12925], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 374,
        "column": 17,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 374,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [13910, 13983], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 387,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 387,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [14444, 14522], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 437,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 437,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [16445, 16585], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 7,
    "fatalErrorCount": 0,
    "warningCount": 19,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { auth } from '@clerk/nextjs/server';\nimport * as csvParse from 'csv-parse/sync';\nimport { NextRequest, NextResponse } from 'next/server';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { db } from '../../../../../lib/db';\nimport { processUploadEmbeddings } from '../../../../../lib/db/property-processor';\nimport {\n  createUploadRecord,\n  createProperty,\n  getUploadRecordsByUploader,\n} from '../../../../../lib/db/queries';\n\n// Security constants\nconst MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB\nconst VALID_FILENAME_REGEX = /^[\\w\\.-]+$/; // Only allow alphanumeric, underscore, dot, and hyphen\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Get the user ID and authentication data from Clerk\n    const { userId, sessionClaims } = await auth();\n\n    // Check if user is authenticated\n    if (!userId) {\n      console.warn('Unauthorized access attempt to upload endpoint');\n      return NextResponse.json(\n        { message: 'Unauthorized - Authentication required' },\n        { status: 401 }\n      );\n    }\n\n    // Check if user has the required role (agent or admin)\n    // This assumes Clerk is configured with custom roles in session claims\n    const userRoles = (sessionClaims?.roles as string[]) || [];\n    const hasRequiredRole = userRoles.some((role) => ['agent', 'admin'].includes(role));\n\n    if (!hasRequiredRole) {\n      console.warn(`User ${userId} attempted to upload without required role`);\n      return NextResponse.json(\n        {\n          message: 'Forbidden - Insufficient permissions',\n          details: 'Only agents and administrators can upload property data',\n        },\n        { status: 403 }\n      );\n    }\n\n    // Verify the user has uploaded before or has an active account\n    try {\n      const previousUploads = await getUploadRecordsByUploader(userId);\n\n      // If this is the user's first upload, log it for monitoring\n      if (previousUploads.length === 0) {\n        console.info(`First-time upload from user ${userId}`);\n      }\n    } catch (userCheckError) {\n      console.error(`Error checking user upload history for ${userId}:`, userCheckError);\n      // We'll continue processing even if this check fails\n      // It's just for monitoring purposes\n    }\n\n    const formData = await request.formData();\n    const file = formData.get('file') as File;\n\n    if (!file) {\n      return NextResponse.json({ message: 'No file provided' }, { status: 400 });\n    }\n\n    // Security check: Validate filename to prevent path traversal attacks\n    const fileName = file.name;\n    if (!fileName.match(VALID_FILENAME_REGEX)) {\n      console.warn(`Rejected file with invalid filename: ${fileName}`);\n      return NextResponse.json(\n        {\n          message: 'Invalid filename',\n          details: 'Filename can only contain letters, numbers, underscores, dots, and hyphens',\n        },\n        { status: 400 }\n      );\n    }\n\n    // Security check: Validate file size\n    if (file.size > MAX_FILE_SIZE) {\n      console.warn(`Rejected oversized file: ${fileName} (${file.size} bytes)`);\n      return NextResponse.json(\n        {\n          message: 'File too large',\n          details: `Maximum file size is ${MAX_FILE_SIZE / (1024 * 1024)}MB, received ${(file.size / (1024 * 1024)).toFixed(2)}MB`,\n        },\n        { status: 400 }\n      );\n    }\n\n    // Check file type\n    if (!file.name.endsWith('.csv')) {\n      console.warn(`Rejected non-CSV file: ${fileName} (${file.type})`);\n      return NextResponse.json(\n        {\n          message: 'Only CSV files are allowed',\n          details: 'Please upload a file with .csv extension',\n        },\n        { status: 400 }\n      );\n    }\n\n    // Process and parse CSV file using a more efficient approach\n    try {\n      // Security check: Verify the file is not empty\n      if (file.size === 0) {\n        console.warn(`Rejected empty file: ${fileName} (0 bytes)`);\n        return NextResponse.json(\n          {\n            message: 'File is empty',\n            details: 'The uploaded file contains no data',\n          },\n          { status: 400 }\n        );\n      }\n\n      // Security check: Basic size validation\n      if (file.size < 10) {\n        // Arbitrary minimum for a valid CSV with headers\n        console.warn(`Rejected file with insufficient content: ${fileName} (${file.size} bytes)`);\n        return NextResponse.json(\n          {\n            message: 'Invalid CSV content',\n            details: 'The file appears to be too small to be a valid CSV with headers',\n          },\n          { status: 400 }\n        );\n      }\n\n      console.info(`Starting to process CSV file: ${fileName} (${file.size} bytes)`);\n\n      // We'll use a hybrid approach based on file size\n      let records: any[] = [];\n\n      // For files under the threshold, use the direct parsing approach\n      // This is simpler and works well for most uploads\n      const STREAMING_THRESHOLD = 5 * 1024 * 1024; // 5MB threshold for streaming\n\n      if (file.size < STREAMING_THRESHOLD) {\n        // Use the direct parsing approach for smaller files\n        const fileBuffer = await file.arrayBuffer();\n        const fileContent = new TextDecoder().decode(fileBuffer);\n\n        // Parse CSV\n        records = csvParse.parse(fileContent, {\n          columns: true,\n          skip_empty_lines: true,\n          trim: true,\n        });\n\n        console.info(`Parsed ${records.length} records from CSV file using direct parsing`);\n      } else {\n        // For larger files, use a chunked processing approach\n        // This processes the file in smaller chunks to avoid memory issues\n        console.info(`Using chunked processing for large file: ${fileName} (${file.size} bytes)`);\n\n        // Get the file as an ArrayBuffer but process it in chunks\n        const fileBuffer = await file.arrayBuffer();\n        const CHUNK_SIZE = 1024 * 1024; // 1MB chunks\n        const decoder = new TextDecoder();\n\n        let csvContent = '';\n        let headerRow = '';\n        let processedBytes = 0;\n\n        // Process the first chunk to extract headers\n        const firstChunkSize = Math.min(CHUNK_SIZE, fileBuffer.byteLength);\n        const firstChunk = new Uint8Array(fileBuffer, 0, firstChunkSize);\n        const firstChunkText = decoder.decode(firstChunk, { stream: true });\n\n        // Extract the header row\n        const headerEndIndex = firstChunkText.indexOf('\\n');\n        if (headerEndIndex === -1) {\n          throw new Error('Could not find header row in CSV file');\n        }\n\n        headerRow = firstChunkText.substring(0, headerEndIndex).trim();\n        csvContent = firstChunkText;\n        processedBytes = firstChunkSize;\n\n        // Process the rest of the file in chunks\n        while (processedBytes < fileBuffer.byteLength) {\n          const chunkSize = Math.min(CHUNK_SIZE, fileBuffer.byteLength - processedBytes);\n          const chunk = new Uint8Array(fileBuffer, processedBytes, chunkSize);\n          const chunkText = decoder.decode(chunk, {\n            stream: processedBytes + chunkSize < fileBuffer.byteLength,\n          });\n\n          csvContent += chunkText;\n          processedBytes += chunkSize;\n\n          // Log progress for very large files\n          if (processedBytes % (10 * CHUNK_SIZE) === 0) {\n            console.info(\n              `Processed ${processedBytes} of ${fileBuffer.byteLength} bytes (${Math.round((processedBytes / fileBuffer.byteLength) * 100)}%)`\n            );\n          }\n\n          // If we've accumulated enough data, parse and clear the buffer\n          if (csvContent.length > 5 * CHUNK_SIZE) {\n            // Make sure we break at a newline to avoid splitting records\n            const lastNewlineIndex = csvContent.lastIndexOf('\\n');\n            if (lastNewlineIndex !== -1) {\n              const contentToParse = csvContent.substring(0, lastNewlineIndex + 1);\n              csvContent = csvContent.substring(lastNewlineIndex + 1);\n\n              // Parse this chunk of CSV data\n              try {\n                const chunkRecords = csvParse.parse(contentToParse, {\n                  columns: true,\n                  skip_empty_lines: true,\n                  trim: true,\n                });\n\n                records = records.concat(chunkRecords);\n                console.info(\n                  `Parsed ${chunkRecords.length} records from chunk, total: ${records.length}`\n                );\n              } catch (chunkError) {\n                console.error('Error parsing CSV chunk:', chunkError);\n                throw chunkError;\n              }\n            }\n          }\n        }\n\n        // Parse any remaining content\n        if (csvContent.length > 0) {\n          try {\n            const finalRecords = csvParse.parse(csvContent, {\n              columns: true,\n              skip_empty_lines: true,\n              trim: true,\n            });\n\n            records = records.concat(finalRecords);\n            console.info(\n              `Parsed ${finalRecords.length} records from final chunk, total: ${records.length}`\n            );\n          } catch (finalError) {\n            console.error('Error parsing final CSV chunk:', finalError);\n            throw finalError;\n          }\n        }\n      }\n\n      // Log successful parsing\n      console.info(\n        `Successfully parsed CSV with ${records.length} records from file: ${file.name}`\n      );\n\n      // Validate CSV structure\n      if (records.length === 0) {\n        console.warn(`Rejected empty CSV file: ${file.name}`);\n        return NextResponse.json(\n          { message: 'CSV file is empty. Please provide a file with at least one record.' },\n          { status: 400 }\n        );\n      }\n\n      // Define required fields\n      const requiredFields = ['address', 'price'];\n\n      // First, check if all required fields exist in the CSV structure (using first record)\n      const firstRecord = records[0];\n\n      // Log the first record structure for debugging (excluding sensitive data)\n      console.info('First record structure:', Object.keys(firstRecord));\n\n      // Check if all required fields exist in the CSV structure\n      for (const field of requiredFields) {\n        if (!(field in firstRecord)) {\n          console.warn(\n            `CSV missing required field: ${field}. Available fields: ${Object.keys(firstRecord).join(', ')}`\n          );\n          return NextResponse.json(\n            {\n              message: `CSV is missing required field: ${field}`,\n              availableFields: Object.keys(firstRecord),\n              requiredFields: requiredFields,\n            },\n            { status: 400 }\n          );\n        }\n      }\n\n      // Now validate all records to ensure consistency throughout the file\n      console.info(`Validating all ${records.length} records for required fields...`);\n\n      for (let i = 0; i < records.length; i++) {\n        const record = records[i];\n\n        for (const field of requiredFields) {\n          if (\n            !(field in record) ||\n            record[field] === null ||\n            record[field] === undefined ||\n            record[field] === ''\n          ) {\n            console.warn(\n              `Record at index ${i} is missing required field \"${field}\" or has empty value`\n            );\n            return NextResponse.json(\n              {\n                message: `Missing or empty required field \"${field}\" in record ${i + 1}`,\n                details: `All records must contain non-empty values for fields: ${requiredFields.join(', ')}`,\n                recordIndex: i,\n                fieldName: field,\n              },\n              { status: 400 }\n            );\n          }\n        }\n\n        // Validate price field is a valid number\n        if (isNaN(parseInt(record.price, 10))) {\n          console.warn(`Record at index ${i} has invalid price value: \"${record.price}\"`);\n          return NextResponse.json(\n            {\n              message: `Invalid price value in record ${i + 1}`,\n              details: `Price must be a valid number, found: \"${record.price}\"`,\n              recordIndex: i,\n            },\n            { status: 400 }\n          );\n        }\n      }\n\n      console.info('All records successfully validated for required fields');\n\n      // Use a transaction to ensure all operations succeed or fail together\n      console.info(`Starting database transaction for ${records.length} properties`);\n\n      let result;\n      try {\n        result = await db.transaction(async (tx) => {\n          // Create upload record in the database\n          const uploadId = uuidv4();\n          console.info(`Creating upload record with ID: ${uploadId}`);\n\n          const upload = await createUploadRecord({\n            id: uploadId,\n            uploaderId: userId,\n            filename: file.name,\n            status: 'pending',\n            createdAt: new Date(),\n          });\n\n          // Process and save each property record\n          console.info(`Processing ${records.length} property records for upload ${upload.id}`);\n\n          let processedCount = 0;\n          for (const record of records) {\n            try {\n              // Since we've already validated required fields, we can safely create the property\n              // But we'll still use defensive programming for optional fields\n              await createProperty({\n                id: uuidv4(),\n                uploadId: upload.id,\n                address: record.address.trim(), // Trim whitespace\n                price: parseInt(record.price, 10), // Already validated as a number\n                bedrooms: record.bedrooms ? parseInt(record.bedrooms, 10) : null,\n                type: record.type ? record.type.trim() : null,\n                dateSold: record.dateSold ? new Date(record.dateSold) : null,\n                embedding: null, // We'll handle embeddings separately\n              });\n              processedCount++;\n\n              // Log progress for large uploads\n              if (processedCount % 100 === 0) {\n                console.info(`Processed ${processedCount}/${records.length} properties`);\n              }\n            } catch (recordError) {\n              // Log the specific record that failed\n              console.error('Failed to process property record:', {\n                error: recordError instanceof Error ? recordError.message : 'Unknown error',\n                record: JSON.stringify(record),\n              });\n              // Re-throw to trigger transaction rollback\n              throw recordError;\n            }\n          }\n\n          console.info(`Successfully processed all ${processedCount} property records`);\n\n          return {\n            upload,\n            propertyCount: records.length,\n          };\n        });\n      } catch (dbError) {\n        console.error('Database transaction failed:', {\n          error: dbError instanceof Error ? dbError.message : 'Unknown error',\n          stack: dbError instanceof Error ? dbError.stack : undefined,\n          recordCount: records.length,\n          fileName: file.name,\n        });\n\n        return NextResponse.json(\n          {\n            message: 'Database operation failed',\n            details: dbError instanceof Error ? dbError.message : 'Unknown error',\n            requestId: uuidv4(), // Include a request ID that can be referenced in logs\n          },\n          { status: 500 }\n        );\n      }\n\n      // Trigger embedding generation in the background\n      // We don't await this to avoid blocking the response\n      processUploadEmbeddings(result.upload.id).catch((err) => {\n        console.error(`Error generating embeddings for upload ${result.upload.id}:`, {\n          error: err instanceof Error ? err.message : 'Unknown error',\n          stack: err instanceof Error ? err.stack : undefined,\n          uploadId: result.upload.id,\n          timestamp: new Date().toISOString(),\n        });\n\n        // Update the upload status to indicate embedding generation failed\n        db.update('uploads')\n          .set({ status: 'embedding_failed', updatedAt: new Date() })\n          .where('id', '=', result.upload.id)\n          .execute()\n          .catch((updateErr) => {\n            console.error(`Failed to update upload status for ${result.upload.id}:`, updateErr);\n          });\n\n        // TODO: Implement a notification system or retry mechanism\n        // For example, you could add this failed upload to a queue for retry\n        // or send a notification to the user or admin\n      });\n\n      // Log the successful upload with user ID for audit purposes\n      console.info(\n        `Successfully processed upload ${result.upload.id} with ${result.propertyCount} properties by user ${userId}`\n      );\n\n      // Create a sanitized version of the upload record for the response\n      // This ensures we don't accidentally expose sensitive information\n      const sanitizedUpload = {\n        id: result.upload.id,\n        filename: result.upload.filename,\n        status: result.upload.status,\n        createdAt: result.upload.createdAt,\n        propertyCount: result.propertyCount,\n        // Explicitly omit uploaderId and any other sensitive fields\n      };\n\n      return NextResponse.json({\n        message: 'File uploaded successfully',\n        upload: sanitizedUpload,\n      });\n    } catch (parseError) {\n      // Generate a unique error reference ID\n      const errorReferenceId = uuidv4();\n\n      // Detailed CSV parsing error logging for internal debugging\n      console.error('CSV parsing error:', {\n        referenceId: errorReferenceId,\n        error: parseError.message,\n        stack: parseError.stack,\n        fileName: file.name,\n        fileSize: file.size,\n        userId: userId,\n        timestamp: new Date().toISOString(),\n        // We don't include content preview in the chunked parsing approach\n        // as fileContent might not be defined, and we want to avoid memory issues\n      });\n\n      // Return a helpful but sanitized error response\n      return NextResponse.json(\n        {\n          message: 'Failed to parse CSV file',\n          details: 'Please check the CSV format and ensure it follows the required structure.',\n          help: 'Make sure the CSV has headers and the data is properly formatted.',\n          referenceId: errorReferenceId,\n        },\n        { status: 400 }\n      );\n    }\n  } catch (error) {\n    // Generate a unique error reference ID that can be used to correlate logs with user reports\n    const errorReferenceId = uuidv4();\n\n    // Detailed general error logging with sensitive information for internal use only\n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    const errorStack = error instanceof Error ? error.stack : undefined;\n\n    // Log detailed error information for debugging (including sensitive data)\n    console.error('Upload error:', {\n      referenceId: errorReferenceId,\n      message: errorMessage,\n      stack: errorStack,\n      userId: userId || 'unknown',\n      endpoint: 'POST /api/agent/upload',\n      timestamp: new Date().toISOString(),\n      fileName: file?.name || 'unknown',\n      fileSize: file?.size || 'unknown',\n    });\n\n    // Return a sanitized error response without exposing internal details or sensitive information\n    return NextResponse.json(\n      {\n        message: 'An error occurred while processing the upload',\n        details: 'Please try again or contact support if the problem persists',\n        referenceId: errorReferenceId, // Include reference ID so users can report issues\n      },\n      { status: 500 }\n    );\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\app\\api\\agent\\uploads\\route.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'request' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 10,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 34
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { auth } from '@clerk/nextjs/server';\nimport { NextRequest, NextResponse } from 'next/server';\n\nimport {\n  getUploadRecordsByUploader,\n  countPropertiesByUploadId,\n  UploadRecord,\n} from '@/lib/db/queries';\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Get the user ID from Clerk\n    const { userId } = await auth();\n\n    if (!userId) {\n      return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Get all uploads for this user from the database\n    const uploads = await getUploadRecordsByUploader(userId);\n\n    // For each upload, get the property count\n    const uploadsWithCounts = await Promise.all(\n      uploads.map(async (upload: UploadRecord) => {\n        const propertyCount = await countPropertiesByUploadId(upload.id);\n        return {\n          ...upload,\n          propertyCount,\n          // Don't expose the uploaderId in the response\n          uploaderId: undefined,\n        };\n      })\n    );\n\n    return NextResponse.json({\n      uploads: uploadsWithCounts,\n    });\n  } catch (error) {\n    console.error('Error fetching uploads:', error);\n    return NextResponse.json({ message: 'Failed to fetch uploads' }, { status: 500 });\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\app\\api\\search\\route.ts",
    "messages": [
      {
        "ruleId": "import/order",
        "severity": 2,
        "message": "There should be no empty line within import group",
        "line": 1,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "endLine": 1,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'errorResponse' is defined but never used.",
        "line": 9,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 40
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'HttpStatus' is defined but never used.",
        "line": 9,
        "column": 42,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 52
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 69,
        "column": 12,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 69,
        "endColumn": 13
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 70,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 70,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2454, 2537], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { db } from '@your-org/db';\n\n// Import the property table directly from the drizzle schema\nimport { sql } from 'drizzle-orm';\nimport { pgTable, text, uuid, integer, timestamp, jsonb } from 'drizzle-orm/pg-core';\nimport { NextRequest } from 'next/server';\nimport { z } from 'zod';\n\nimport { successResponse, errorResponse, HttpStatus } from '../../../../../lib/api/response';\nimport { validateQuery, withValidation } from '../../../../../lib/api/validation';\nimport { bindVector, bindJsonbArray } from '../../../../../lib/db/utils';\nimport { generateEmbedding } from '../../../../../lib/embedding';\n\n// Define the property table directly in this file to avoid import issues\nconst property = pgTable('properties', {\n  id: uuid('id').defaultRandom().primaryKey(),\n  uploadId: uuid('upload_id'),\n  address: text('address'),\n  price: integer('price'),\n  bedrooms: integer('bedrooms'),\n  type: text('type'),\n  dateSold: timestamp('date_sold'),\n  embedding: jsonb('embedding').$type<number[]>(),\n});\n\n// Get embedding provider from environment variables\nconst embeddingProvider = (process.env.EMBEDDING_PROVIDER || 'lmstudio') as 'openai' | 'lmstudio';\nconst embeddingModel = process.env.LLM_MODEL || 'bge-base-en';\n\n// Define the search query schema\nconst SearchQuerySchema = z.object({\n  q: z.string().min(1, 'Search query is required'),\n  limit: z\n    .string()\n    .optional()\n    .transform((val) => {\n      const parsed = parseInt(val || '10', 10);\n      return isNaN(parsed) ? 10 : parsed;\n    }),\n});\n\nexport const GET = withValidation(async (request: NextRequest) => {\n  // Validate query parameters\n  const params = (await validateQuery(request, SearchQuerySchema)) as z.infer<\n    typeof SearchQuerySchema\n  >;\n\n  // Generate embedding for the search query\n  const embedding = await generateEmbedding(params.q, {\n    provider: embeddingProvider,\n    model: embeddingModel,\n  });\n\n  // Perform vector search using PostgreSQL with pgvector\n  // This uses the optimized search_properties_by_vector function if it exists\n  try {\n    // Try to use the optimized function first (if pgvector is set up)\n    // Use proper parameter binding instead of JSON.stringify\n    const { rows } = await db.execute(sql`\n      SELECT * FROM search_properties_by_vector(${bindVector(embedding)}, ${params.limit})\n    `);\n\n    if (rows.length > 0) {\n      return successResponse({\n        query: params.q,\n        results: rows,\n      });\n    }\n  } catch (e) {\n    console.log('Optimized vector search not available, falling back to JSONB search');\n  }\n\n  // Fall back to JSONB-based search if the function doesn't exist\n  const properties = await db\n    .select()\n    .from(property)\n    .where(sql`embedding is not null`)\n    .orderBy(sql`embedding <-> ${bindJsonbArray(embedding)}`)\n    .limit(params.limit);\n\n  return successResponse({\n    query: params.q,\n    results: properties,\n  });\n});\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\app\\api\\search\\route.vitest.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'schema' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 76,
        "column": 51,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 76,
        "endColumn": 57
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 76,
        "column": 59,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 76,
        "endColumn": 62,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1889, 1892], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1889, 1892], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unsafe-function-type",
        "severity": 2,
        "message": "The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.",
        "line": 102,
        "column": 37,
        "nodeType": "Identifier",
        "messageId": "bannedFunctionType",
        "endLine": 102,
        "endColumn": 45
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 106,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 106,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2725, 2728], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2725, 2728], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'generateEmbedding' is assigned a value but never used.",
        "line": 388,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 388,
        "endColumn": 30
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextRequest } from 'next/server';\nimport { describe, it, expect, beforeEach, vi, afterEach } from 'vitest';\nimport { z } from 'zod';\n\nimport { GET } from './route';\n\n// Mock the embedding generation\nvi.mock('../../../../../lib/embedding', () => ({\n  generateEmbedding: vi.fn().mockResolvedValue([0.1, 0.2, 0.3]),\n}));\n\n// Mock the database\nvi.mock('@your-org/db', () => {\n  const selectChain = {\n    from: vi.fn().mockReturnThis(),\n    where: vi.fn().mockReturnThis(),\n    orderBy: vi.fn().mockReturnThis(),\n    limit: vi\n      .fn()\n      .mockResolvedValue([{ id: 'fallback-1', title: 'Fallback Result', price: 500000 }]),\n  };\n  return {\n    db: {\n      execute: vi.fn().mockResolvedValue({ rows: [] }),\n      select: vi.fn(() => selectChain),\n    },\n    schema: {\n      property: {},\n    },\n  };\n});\n\n// Mock the database utilities\nvi.mock('../../../../../lib/db/utils', () => ({\n  bindVector: vi.fn((embedding: number[]) => embedding),\n  bindJsonbArray: vi.fn((embedding: number[]) => embedding),\n}));\n\n// Mock the API response utilities\nvi.mock('../../../../../lib/api/response', () => {\n  return {\n    successResponse: vi.fn((data) => {\n      return Response.json(\n        {\n          success: true,\n          data,\n        },\n        { status: 200 }\n      );\n    }),\n    errorResponse: vi.fn((message, status = 400, code, details) => {\n      return Response.json(\n        {\n          success: false,\n          error: {\n            message,\n            ...(code && { code }),\n            ...(details && { details }),\n          },\n        },\n        { status }\n      );\n    }),\n    HttpStatus: {\n      OK: 200,\n      BAD_REQUEST: 400,\n      UNPROCESSABLE_ENTITY: 422,\n      INTERNAL_SERVER_ERROR: 500,\n    },\n  };\n});\n\n// Mock the validation utilities\nvi.mock('../../../../../lib/api/validation', () => {\n  return {\n    validateQuery: vi.fn(async (req: NextRequest, schema: any) => {\n      const url = new URL(req.url);\n      const searchParams = Object.fromEntries(url.searchParams.entries());\n\n      try {\n        // Simulate Zod validation\n        if (!searchParams.q) {\n          throw new z.ZodError([\n            {\n              code: 'invalid_type',\n              expected: 'string',\n              received: 'undefined',\n              path: ['q'],\n              message: 'Search query is required',\n            },\n          ]);\n        }\n\n        return {\n          q: searchParams.q,\n          limit: searchParams.limit ? parseInt(searchParams.limit, 10) : 10,\n        };\n      } catch (error) {\n        throw error;\n      }\n    }),\n    withValidation: vi.fn((handler: Function) => {\n      return async (req: NextRequest) => {\n        try {\n          return await handler(req);\n        } catch (error: any) {\n          if (error instanceof z.ZodError) {\n            return Response.json(\n              {\n                success: false,\n                error: {\n                  message: 'Validation error',\n                  code: 'VALIDATION_ERROR',\n                  details: error.errors,\n                },\n              },\n              { status: 422 }\n            );\n          }\n\n          return Response.json(\n            {\n              success: false,\n              error: {\n                message: error.message || 'An unexpected error occurred',\n              },\n            },\n            { status: 500 }\n          );\n        }\n      };\n    }),\n  };\n});\n\n// Util to simulate a request with query params\nconst makeRequest = (params: Record<string, string>): NextRequest => {\n  const url = new URL('http://localhost/api/search');\n  Object.entries(params).forEach(([k, v]) => url.searchParams.append(k, v));\n  return new NextRequest(url);\n};\n\ndescribe('GET /search', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  afterEach(() => {\n    vi.resetAllMocks();\n  });\n\n  it('returns fallback results if vector search returns no results', async () => {\n    // Setup\n    const { db } = await import('@your-org/db');\n    const { generateEmbedding } = await import('../../../../../lib/embedding');\n    const { bindVector, bindJsonbArray } = await import('../../../../../lib/db/utils');\n\n    // Execute\n    const req = makeRequest({ q: 'modern home', limit: '5' });\n    const response = await GET(req);\n    const responseBody = await response.json();\n\n    // Verify\n    expect(response.status).toBe(200);\n    expect(responseBody.success).toBe(true);\n    expect(responseBody.data.query).toBe('modern home');\n    expect(responseBody.data.results.length).toBeGreaterThan(0);\n    expect(responseBody.data.results[0].title).toBe('Fallback Result');\n\n    // Verify function calls\n    expect(generateEmbedding).toHaveBeenCalledWith('modern home', expect.any(Object));\n    expect(db.execute).toHaveBeenCalledWith(expect.any(Object));\n    expect(bindVector).toHaveBeenCalledWith([0.1, 0.2, 0.3]);\n    expect(db.select).toHaveBeenCalled();\n    expect(bindJsonbArray).toHaveBeenCalledWith([0.1, 0.2, 0.3]);\n  });\n\n  it('returns vector results if vector search is successful', async () => {\n    // Setup\n    const { db } = await import('@your-org/db');\n    const { generateEmbedding } = await import('../../../../../lib/embedding');\n    const { bindVector } = await import('../../../../../lib/db/utils');\n\n    // Reset the mock to ensure it's clean\n    vi.mocked(bindVector).mockClear();\n\n    vi.mocked(db.execute).mockResolvedValueOnce({\n      rows: [{ id: 'vector-1', title: 'Vector Result', price: 750000 }],\n      command: 'SELECT',\n      rowCount: 1,\n      oid: 0,\n      fields: [],\n    });\n\n    // Execute\n    const req = makeRequest({ q: 'villa', limit: '3' });\n    const response = await GET(req);\n    const responseBody = await response.json();\n\n    // Verify\n    expect(response.status).toBe(200);\n    expect(responseBody.success).toBe(true);\n    expect(responseBody.data.results[0].title).toBe('Vector Result');\n\n    // Verify function calls\n    expect(generateEmbedding).toHaveBeenCalledWith('villa', expect.any(Object));\n    expect(db.execute).toHaveBeenCalledWith(expect.any(Object));\n    // Don't test exact parameters for bindVector as it might be called differently\n    expect(bindVector).toHaveBeenCalled();\n    expect(db.select).not.toHaveBeenCalled(); // Should not fall back to JSONB search\n  });\n\n  it('returns 422 with validation error if query param is missing', async () => {\n    // Execute\n    const req = makeRequest({});\n    const response = await GET(req);\n    const responseBody = await response.json();\n\n    // Verify\n    expect(response.status).toBe(422);\n    expect(responseBody.success).toBe(false);\n    expect(responseBody.error.code).toBe('VALIDATION_ERROR');\n    expect(responseBody.error.message).toBe('Validation error');\n    expect(Array.isArray(responseBody.error.details)).toBe(true);\n  });\n\n  it('uses default limit if not provided', async () => {\n    // Setup\n    const { db } = await import('@your-org/db');\n    const { generateEmbedding } = await import('../../../../../lib/embedding');\n\n    // Mock successful database response for this test\n    vi.mocked(db.execute).mockResolvedValueOnce({\n      rows: [{ id: 'default-limit-1', title: 'Default Limit Result', price: 600000 }],\n      command: 'SELECT',\n      rowCount: 1,\n      oid: 0,\n      fields: [],\n    });\n\n    // Execute\n    const req = makeRequest({ q: 'penthouse' });\n    const response = await GET(req);\n    const responseBody = await response.json();\n\n    // Verify\n    expect(response.status).toBe(200);\n    expect(responseBody.success).toBe(true);\n    expect(responseBody.data.results[0].title).toBe('Default Limit Result');\n\n    // Verify function calls with default limit\n    expect(generateEmbedding).toHaveBeenCalledWith('penthouse', expect.any(Object));\n    expect(db.execute).toHaveBeenCalledWith(expect.any(Object));\n  });\n\n  it('handles invalid limit parameter by using default', async () => {\n    // Setup\n    const { db } = await import('@your-org/db');\n\n    // Mock successful database response for this test\n    vi.mocked(db.execute).mockResolvedValueOnce({\n      rows: [{ id: 'invalid-limit-1', title: 'Invalid Limit Result', price: 650000 }],\n      command: 'SELECT',\n      rowCount: 1,\n      oid: 0,\n      fields: [],\n    });\n\n    // Execute\n    const req = makeRequest({ q: 'apartment', limit: 'invalid' });\n    const response = await GET(req);\n    const responseBody = await response.json();\n\n    // Verify\n    expect(response.status).toBe(200);\n    expect(responseBody.success).toBe(true);\n    expect(responseBody.data.results[0].title).toBe('Invalid Limit Result');\n\n    // Should use default limit (10)\n    expect(db.execute).toHaveBeenCalledWith(expect.any(Object));\n  });\n\n  it('handles database errors gracefully', async () => {\n    // Setup\n    const { db } = await import('@your-org/db');\n    const { generateEmbedding } = await import('../../../../../lib/embedding');\n\n    // Mock a database error in both execute and select\n    vi.mocked(db.execute).mockRejectedValueOnce(new Error('Database connection error'));\n    vi.mocked(db.select).mockImplementationOnce(() => {\n      throw new Error('Database query error');\n    });\n\n    // Execute\n    const req = makeRequest({ q: 'error test' });\n    const response = await GET(req);\n    const responseBody = await response.json();\n\n    // Verify\n    expect(response.status).toBe(500);\n    expect(responseBody.success).toBe(false);\n    expect(responseBody.error.message).toBe('Database query error');\n\n    // Verify function calls\n    expect(generateEmbedding).toHaveBeenCalledWith('error test', expect.any(Object));\n    expect(db.execute).toHaveBeenCalledWith(expect.any(Object));\n  });\n\n  it('handles embedding generation errors', async () => {\n    // Setup\n    const { generateEmbedding } = await import('../../../../../lib/embedding');\n\n    // Mock embedding generation error\n    vi.mocked(generateEmbedding).mockRejectedValueOnce(new Error('Embedding service unavailable'));\n\n    // Execute\n    const req = makeRequest({ q: 'embedding error' });\n    const response = await GET(req);\n    const responseBody = await response.json();\n\n    // Verify\n    expect(response.status).toBe(500);\n    expect(responseBody.success).toBe(false);\n    expect(responseBody.error.message).toBe('Embedding service unavailable');\n  });\n\n  it('handles very long search queries properly', async () => {\n    // Setup\n    const { db } = await import('@your-org/db');\n    const { generateEmbedding } = await import('../../../../../lib/embedding');\n\n    // Mock successful database response\n    vi.mocked(db.execute).mockResolvedValueOnce({\n      rows: [{ id: 'long-query-1', title: 'Long Query Result', price: 800000 }],\n      command: 'SELECT',\n      rowCount: 1,\n      oid: 0,\n      fields: [],\n    });\n\n    // Create a very long search query (500+ characters)\n    const longQuery = 'luxury ' + 'modern '.repeat(100) + 'apartment with views';\n\n    // Execute\n    const req = makeRequest({ q: longQuery });\n    const response = await GET(req);\n    const responseBody = await response.json();\n\n    // Verify\n    expect(response.status).toBe(200);\n    expect(responseBody.success).toBe(true);\n    expect(responseBody.data.results[0].title).toBe('Long Query Result');\n    expect(generateEmbedding).toHaveBeenCalledWith(longQuery, expect.any(Object));\n  });\n\n  it('handles special characters in search queries', async () => {\n    // Setup\n    const { db } = await import('@your-org/db');\n    const { generateEmbedding } = await import('../../../../../lib/embedding');\n\n    // Mock successful database response\n    vi.mocked(db.execute).mockResolvedValueOnce({\n      rows: [{ id: 'special-chars-1', title: 'Special Chars Result', price: 950000 }],\n      command: 'SELECT',\n      rowCount: 1,\n      oid: 0,\n      fields: [],\n    });\n\n    // Create a query with special characters\n    const specialCharsQuery = 'apartment & penthouse (2-bedroom) with $500k-$1M price range';\n\n    // Execute\n    const req = makeRequest({ q: specialCharsQuery });\n    const response = await GET(req);\n    const responseBody = await response.json();\n\n    // Verify\n    expect(response.status).toBe(200);\n    expect(responseBody.success).toBe(true);\n    expect(responseBody.data.results[0].title).toBe('Special Chars Result');\n    expect(generateEmbedding).toHaveBeenCalledWith(specialCharsQuery, expect.any(Object));\n  });\n\n  it('handles very large limit values', async () => {\n    // Setup\n    const { db } = await import('@your-org/db');\n    const { generateEmbedding } = await import('../../../../../lib/embedding');\n\n    // Mock successful database response\n    vi.mocked(db.execute).mockResolvedValueOnce({\n      rows: [{ id: 'large-limit-1', title: 'Large Limit Result', price: 1200000 }],\n      command: 'SELECT',\n      rowCount: 1,\n      oid: 0,\n      fields: [],\n    });\n\n    // Execute with a very large limit\n    const req = makeRequest({ q: 'house', limit: '1000' });\n    const response = await GET(req);\n    const responseBody = await response.json();\n\n    // Verify\n    expect(response.status).toBe(200);\n    expect(responseBody.success).toBe(true);\n    expect(responseBody.data.results[0].title).toBe('Large Limit Result');\n\n    // The SQL query should be called with the large limit\n    expect(db.execute).toHaveBeenCalledWith(expect.any(Object));\n  });\n});\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\app\\layout.tsx",
    "messages": [
      {
        "ruleId": "import/order",
        "severity": 2,
        "message": "`@clerk/nextjs` import should occur before import of `react`",
        "line": 3,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "endLine": 3,
        "endColumn": 47
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport './globals.css';\nimport { ClerkProvider } from '@clerk/nextjs';\n\nexport const metadata = {\n  title: 'Property Portal',\n  description: 'A modern property listing and management portal',\n};\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <ClerkProvider>\n      <html lang=\"en\">\n        <body className=\"min-h-screen bg-gray-50\">{children}</body>\n      </html>\n    </ClerkProvider>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\app\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'useEffect' is defined but never used.",
        "line": 3,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 36
      },
      {
        "ruleId": "import/no-named-as-default",
        "severity": 1,
        "message": "Using exported name 'Header' as identifier for default import.",
        "line": 6,
        "column": 8,
        "nodeType": "ImportDefaultSpecifier",
        "endLine": 6,
        "endColumn": 14
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 194,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 194,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [6774, 6828], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 209,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 209,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [7174, 7209], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 214,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 214,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [7300, 7337], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\n\nimport Footer from '../components/layout/Footer';\nimport Header from '../components/layout/Header';\nimport CallToAction from '../components/sections/CallToAction';\nimport Features from '../components/sections/Features';\nimport Hero from '../components/sections/Hero';\nimport SearchResults, { Property } from '../components/sections/SearchResults';\n\nexport default function HomePage() {\n  // State for search functionality\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState<Property[]>([]);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchError, setSearchError] = useState<string | null>(null);\n\n  // Mock data for the components\n  const navLinks = [\n    { id: 'buy', label: 'Buy', href: '/buy' },\n    { id: 'rent', label: 'Rent', href: '/rent' },\n    { id: 'sell', label: 'Sell', href: '/sell' },\n    { id: 'agents', label: 'Find Agents', href: '/agents' },\n    { id: 'resources', label: 'Resources', href: '/resources' },\n  ];\n\n  const features = [\n    {\n      id: 'search',\n      title: 'Advanced Search',\n      description: 'Find properties that match your exact criteria with our powerful search tools.',\n      icon: '🔍',\n    },\n    {\n      id: 'virtual-tours',\n      title: 'Virtual Tours',\n      description: 'Explore properties from the comfort of your home with immersive virtual tours.',\n      icon: '🏠',\n    },\n    {\n      id: 'alerts',\n      title: 'Property Alerts',\n      description:\n        'Get notified instantly when new properties matching your criteria become available.',\n      icon: '🔔',\n    },\n    {\n      id: 'mortgage',\n      title: 'Mortgage Calculator',\n      description:\n        'Plan your finances with our easy-to-use mortgage calculator and affordability tools.',\n      icon: '💰',\n    },\n    {\n      id: 'agents',\n      title: 'Expert Agents',\n      description:\n        'Connect with experienced real estate agents who can guide you through the process.',\n      icon: '👤',\n    },\n    {\n      id: 'market-insights',\n      title: 'Market Insights',\n      description: 'Access up-to-date market data and trends to make informed property decisions.',\n      icon: '📊',\n    },\n  ];\n\n  const footerColumns = [\n    {\n      id: 'buyers',\n      title: 'For Buyers',\n      links: [\n        { id: 'buy-property', label: 'Buy Property', href: '/buy' },\n        { id: 'mortgage', label: 'Mortgage Calculator', href: '/mortgage' },\n        { id: 'buyer-guides', label: 'Buyer Guides', href: '/guides/buyers' },\n        { id: 'saved-properties', label: 'Saved Properties', href: '/account/saved' },\n      ],\n    },\n    {\n      id: 'sellers',\n      title: 'For Sellers',\n      links: [\n        { id: 'sell-property', label: 'Sell Property', href: '/sell' },\n        { id: 'valuation', label: 'Property Valuation', href: '/valuation' },\n        { id: 'seller-guides', label: 'Seller Guides', href: '/guides/sellers' },\n        { id: 'find-agent', label: 'Find an Agent', href: '/agents' },\n      ],\n    },\n    {\n      id: 'company',\n      title: 'Company',\n      links: [\n        { id: 'about', label: 'About Us', href: '/about' },\n        { id: 'contact', label: 'Contact Us', href: '/contact' },\n        { id: 'careers', label: 'Careers', href: '/careers' },\n        { id: 'press', label: 'Press', href: '/press' },\n      ],\n    },\n  ];\n\n  const socialLinks = [\n    { id: 'facebook', icon: '📘', href: 'https://facebook.com', label: 'Facebook' },\n    { id: 'twitter', icon: '🐦', href: 'https://twitter.com', label: 'Twitter' },\n    { id: 'instagram', icon: '📷', href: 'https://instagram.com', label: 'Instagram' },\n    { id: 'linkedin', icon: '💼', href: 'https://linkedin.com', label: 'LinkedIn' },\n  ];\n\n  // Mock property search function\n  const performSearch = (query: string) => {\n    // Reset any previous errors\n    setSearchError(null);\n    setSearchQuery(query);\n    setIsSearching(true);\n\n    // Simulate API call with a delay\n    setTimeout(() => {\n      try {\n        // Simulate a random error (10% chance) for demonstration purposes\n        if (Math.random() < 0.1) {\n          throw new Error('Unable to connect to search service. Please try again.');\n        }\n\n        // Mock data - in a real app, this would come from an API\n        const mockResults: Property[] = [\n          {\n            id: '1',\n            title: 'Modern Apartment in City Center',\n            price: '£350,000',\n            location: 'Cambridge, UK',\n            bedrooms: 2,\n            bathrooms: 1,\n            area: '850 sq ft',\n            description:\n              'A beautiful modern apartment in the heart of Cambridge with easy access to shops, restaurants, and public transport.',\n            imageUrl: 'https://placehold.co/600x400/png?text=Apartment',\n          },\n          {\n            id: '2',\n            title: 'Spacious Family Home with Garden',\n            price: '£550,000',\n            location: 'Cambridge, UK',\n            bedrooms: 4,\n            bathrooms: 2,\n            area: '1,800 sq ft',\n            description:\n              'Perfect family home with a large garden in a quiet neighborhood. Close to excellent schools and parks.',\n            imageUrl: 'https://placehold.co/600x400/png?text=Family+Home',\n          },\n          {\n            id: '3',\n            title: 'Luxury Penthouse with River View',\n            price: '£750,000',\n            location: 'Cambridge, UK',\n            bedrooms: 3,\n            bathrooms: 2,\n            area: '1,200 sq ft',\n            description:\n              'Stunning penthouse apartment with panoramic views of the river. Features high-end finishes and a private terrace.',\n            imageUrl: 'https://placehold.co/600x400/png?text=Penthouse',\n          },\n        ];\n\n        // Filter results based on query for demonstration\n        const filteredResults =\n          query.length > 0\n            ? mockResults.filter(\n                (property) =>\n                  property.title.toLowerCase().includes(query.toLowerCase()) ||\n                  property.location.toLowerCase().includes(query.toLowerCase()) ||\n                  property.description.toLowerCase().includes(query.toLowerCase())\n              )\n            : mockResults;\n\n        setSearchResults(filteredResults);\n      } catch (error) {\n        console.error('Search error:', error);\n        setSearchError(error instanceof Error ? error.message : 'An unexpected error occurred');\n        setSearchResults([]);\n      } finally {\n        setIsSearching(false);\n      }\n    }, 1500);\n  };\n\n  const clearSearch = () => {\n    setSearchQuery('');\n    setSearchResults([]);\n    setSearchError(null);\n  };\n\n  const handleViewDetails = (propertyId: string) => {\n    console.log('View details for property:', propertyId);\n    alert(`Viewing details for property ID: ${propertyId}`);\n    // In a real app, you would navigate to a property details page\n  };\n\n  // Event handlers\n  const handleLogin = () => {\n    window.location.href = '/sign-in';\n  };\n\n  const handleSignup = () => {\n    window.location.href = '/sign-up';\n  };\n\n  const handlePrimaryCTA = () => {\n    console.log('Primary CTA clicked');\n    alert('Start your property journey!');\n  };\n\n  const handleSecondaryCTA = () => {\n    console.log('Secondary CTA clicked');\n    alert('Contact an agent!');\n  };\n\n  return (\n    <main>\n      <Header navLinks={navLinks} onLogin={handleLogin} onSignup={handleSignup} />\n\n      <Hero\n        title=\"Find Your Dream Property\"\n        subtitle=\"Discover thousands of properties for sale and rent across the country\"\n        buttonText=\"Explore Properties\"\n        useInlineSearch={true}\n        onInlineSearch={performSearch}\n      />\n\n      {/* Search Results Section - Only visible when there's a search query */}\n      {searchQuery && (\n        <SearchResults\n          query={searchQuery}\n          results={searchResults}\n          isLoading={isSearching}\n          error={searchError || undefined}\n          onViewDetails={handleViewDetails}\n          onClearSearch={clearSearch}\n        />\n      )}\n\n      <Features\n        title=\"Everything You Need in One Place\"\n        subtitle=\"Our platform offers comprehensive tools and resources for buyers, sellers, and renters\"\n        features={features}\n        className=\"features-section\"\n      />\n\n      <CallToAction\n        title=\"Ready to Start Your Property Journey?\"\n        description=\"Whether you're buying, selling, or renting, we're here to help every step of the way.\"\n        primaryButtonText=\"Get Started\"\n        secondaryButtonText=\"Contact an Agent\"\n        onPrimaryClick={handlePrimaryCTA}\n        onSecondaryClick={handleSecondaryCTA}\n      />\n\n      <Footer\n        columns={footerColumns}\n        copyrightText=\"© 2023 Property Portal. All rights reserved.\"\n        socialLinks={socialLinks}\n      />\n    </main>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\app\\pages\\search.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 6,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 56,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 56,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1475, 1478], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1475, 1478], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useSearchParams } from 'next/navigation';\nimport { useEffect, useState, useRef } from 'react';\n\nimport { Button } from '../../src/ui';\n\ninterface Property {\n  id: string;\n  title: string;\n  location: string;\n  price: number;\n  imageUrl: string;\n  description: string;\n}\n\nexport default function SearchPage() {\n  const searchParams = useSearchParams();\n  const query = searchParams?.get('query') || '';\n  const [results, setResults] = useState<Property[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const debounceTimeout = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    if (!query) {\n      setResults([]);\n      setError(null);\n      setLoading(false);\n      return;\n    }\n\n    // Debounce API calls by 300ms\n    if (debounceTimeout.current) clearTimeout(debounceTimeout.current);\n\n    debounceTimeout.current = setTimeout(() => {\n      const runSearch = async () => {\n        setLoading(true);\n        setError(null);\n\n        try {\n          const res = await fetch('/api/search', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ query }),\n          });\n\n          if (!res.ok) {\n            throw new Error(`API error: ${res.status}`);\n          }\n\n          const data = await res.json();\n          setResults(data?.properties || []);\n        } catch (err: any) {\n          console.error('Search failed:', err);\n          setError('Failed to load search results. Please try again.');\n          setResults([]);\n        } finally {\n          setLoading(false);\n        }\n      };\n\n      runSearch();\n    }, 300);\n\n    // Cleanup on unmount or query change\n    return () => {\n      if (debounceTimeout.current) clearTimeout(debounceTimeout.current);\n    };\n  }, [query]);\n\n  return (\n    <div className=\"max-w-5xl mx-auto p-6\">\n      <h1 className=\"text-3xl font-bold mb-4\">\n        Search results for: <span className=\"text-purple-600\">{query || '...'}</span>\n      </h1>\n\n      {!query && <p className=\"text-gray-600\">Please enter a search term to find properties.</p>}\n\n      {loading && (\n        <div className=\"flex justify-center my-6\">\n          <svg\n            className=\"animate-spin h-8 w-8 text-purple-600\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            aria-label=\"Loading\"\n          >\n            <circle\n              className=\"opacity-25\"\n              cx=\"12\"\n              cy=\"12\"\n              r=\"10\"\n              stroke=\"currentColor\"\n              strokeWidth=\"4\"\n            ></circle>\n            <path\n              className=\"opacity-75\"\n              fill=\"currentColor\"\n              d=\"M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z\"\n            ></path>\n          </svg>\n        </div>\n      )}\n\n      {error && (\n        <p className=\"text-red-600 font-semibold my-4\" role=\"alert\">\n          {error}\n        </p>\n      )}\n\n      {!loading && !error && results.length > 0 && (\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n          {results.map((p) => (\n            <div key={p.id} className=\"border rounded shadow-sm p-4\">\n              <img src={p.imageUrl} alt={p.title} className=\"rounded w-full h-40 object-cover\" />\n              <h2 className=\"text-xl font-bold mt-2\">{p.title}</h2>\n              <p className=\"text-sm text-gray-500\">{p.location}</p>\n              <p className=\"text-lg font-semibold text-blue-600\">£{p.price.toLocaleString()}</p>\n              <p className=\"mt-2 text-sm\">{p.description}</p>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {!loading && !error && query && results.length === 0 && <p>No matching properties found.</p>}\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\app\\sign-in\\[[...sign-in]]\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\app\\sign-out\\[[...sign-out]]\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'useRouter' is defined but never used.",
        "line": 2,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { SignOutButton } from '@clerk/nextjs';\nimport { useRouter } from 'next/navigation';\n\nexport default function SignOutPage() {\n  return (\n    <div className=\"flex min-h-screen items-center justify-center\">\n      <div className=\"bg-white p-8 rounded-lg shadow-md text-center\">\n        <h1 className=\"text-2xl font-bold mb-4\">Sign Out</h1>\n        <p className=\"mb-6 text-gray-600\">Are you sure you want to sign out?</p>\n        <SignOutButton>\n          <button className=\"bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded\">\n            Sign Out\n          </button>\n        </SignOutButton>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\app\\sign-up\\[[...sign-up]]\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\components\\common\\UploadZone.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 138,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 138,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'clearFile' is assigned a value but never used.",
        "line": 162,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 162,
        "endColumn": 18
      },
      {
        "ruleId": "jsx-a11y/click-events-have-key-events",
        "severity": 2,
        "message": "Visible, non-interactive elements with click handlers must have at least one keyboard listener.",
        "line": 173,
        "column": 7,
        "nodeType": "JSXOpeningElement",
        "endLine": 186,
        "endColumn": 8
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useRef, useEffect, DragEvent, ChangeEvent } from 'react';\n\nimport { Button } from '../../src/ui';\n\ninterface FileValidationResult {\n  valid: boolean;\n  message: string;\n}\n\ninterface UploadZoneProps {\n  onUpload: (file: File) => void;\n  acceptedFileTypes?: string | string[];\n  maxSizeInMB?: number;\n  multiple?: boolean;\n  disabled?: boolean;\n  showPreview?: boolean;\n  customValidator?: (file: File) => Promise<FileValidationResult> | FileValidationResult;\n  className?: string;\n  description?: string;\n}\n\nexport default function UploadZone({\n  onUpload,\n  acceptedFileTypes = '.csv',\n  maxSizeInMB = 10,\n  multiple = false,\n  disabled = false,\n  showPreview = false,\n  customValidator,\n  className = '',\n  description,\n}: UploadZoneProps) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\n  const [validationError, setValidationError] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const dropZoneRef = useRef<HTMLDivElement>(null);\n\n  // Convert acceptedFileTypes to array for easier handling\n  const acceptedTypesArray = Array.isArray(acceptedFileTypes)\n    ? acceptedFileTypes\n    : [acceptedFileTypes];\n\n  // Clean up preview URL when component unmounts\n  useEffect(() => {\n    return () => {\n      if (previewUrl) {\n        URL.revokeObjectURL(previewUrl);\n      }\n    };\n  }, [previewUrl]);\n\n  // Handle drag events\n  const handleDragOver = (e: DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (!disabled) {\n      setIsDragging(true);\n    }\n  };\n\n  const handleDragLeave = (e: DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragging(false);\n  };\n\n  const handleDrop = (e: DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragging(false);\n\n    if (disabled) return;\n\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      const file = e.dataTransfer.files[0];\n      processFile(file);\n    }\n  };\n\n  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      const file = e.target.files[0];\n      processFile(file);\n    }\n  };\n\n  const validateFileType = (file: File): boolean => {\n    // If no specific types are required, accept all\n    if (acceptedTypesArray.length === 0 || acceptedTypesArray[0] === '*') {\n      return true;\n    }\n\n    // Check if file extension or MIME type matches any accepted type\n    return acceptedTypesArray.some((type) => {\n      // Check by extension (e.g., .csv)\n      if (type.startsWith('.')) {\n        return file.name.toLowerCase().endsWith(type.toLowerCase());\n      }\n      // Check by MIME type (e.g., text/csv)\n      return file.type === type;\n    });\n  };\n\n  const validateFileSize = (file: File): boolean => {\n    const fileSizeInMB = file.size / (1024 * 1024);\n    return fileSizeInMB <= maxSizeInMB;\n  };\n\n  const processFile = async (file: File) => {\n    setValidationError(null);\n\n    // Validate file type\n    if (!validateFileType(file)) {\n      setValidationError(\n        `Invalid file type. Please upload ${acceptedTypesArray.join(' or ')} files.`\n      );\n      return;\n    }\n\n    // Validate file size\n    if (!validateFileSize(file)) {\n      setValidationError(`File is too large. Maximum size is ${maxSizeInMB}MB.`);\n      return;\n    }\n\n    // Run custom validator if provided\n    if (customValidator) {\n      try {\n        const result = await Promise.resolve(customValidator(file));\n        if (!result.valid) {\n          setValidationError(result.message);\n          return;\n        }\n      } catch (error) {\n        setValidationError('File validation failed.');\n        return;\n      }\n    }\n\n    // Create preview for image files\n    if (showPreview && file.type.startsWith('image/')) {\n      const url = URL.createObjectURL(file);\n      setPreviewUrl(url);\n    } else {\n      setPreviewUrl(null);\n    }\n\n    setSelectedFile(file);\n    onUpload(file);\n  };\n\n  const handleButtonClick = () => {\n    if (!disabled && fileInputRef.current) {\n      fileInputRef.current.click();\n    }\n  };\n\n  const clearFile = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.stopPropagation();\n    setSelectedFile(null);\n    setPreviewUrl(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  return (\n    <div className={`${className}`}>\n      <div\n        ref={dropZoneRef}\n        className={`border-2 border-dashed rounded-lg p-6 text-center transition-colors ${\n          disabled\n            ? 'bg-gray-100 border-gray-300 cursor-not-allowed opacity-60'\n            : isDragging\n              ? 'border-purple-500 bg-purple-50'\n              : 'border-gray-300 hover:border-purple-400 cursor-pointer'\n        }`}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onDrop={handleDrop}\n        onClick={disabled ? undefined : handleButtonClick}\n      >\n        <input\n          type=\"file\"\n          ref={fileInputRef}\n          onChange={handleFileChange}\n          accept={\n            Array.isArray(acceptedFileTypes) ? acceptedFileTypes.join(',') : acceptedFileTypes\n          }\n          multiple={multiple}\n          disabled={disabled}\n          className=\"hidden\"\n        />\n\n        {/* Preview area */}\n        {showPreview && previewUrl && (\n          <div className=\"mb-4\">\n            <img\n              src={previewUrl}\n              alt=\"File preview\"\n              className=\"max-h-40 max-w-full mx-auto rounded\"\n            />\n          </div>\n        )}\n\n        <div className=\"flex flex-col items-center justify-center\">\n          {!selectedFile ? (\n            <>\n              <svg\n                className=\"w-12 h-12 text-gray-400 mb-3\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\"\n                ></path>\n              </svg>\n              <p className=\"mb-2 text-sm text-gray-700\">\n                <span className=\"font-semibold\">Click to upload</span> or drag and drop\n              </p>\n              <p className=\"text-xs text-gray-500\">\n                {Array.isArray(acceptedFileTypes)\n                  ? acceptedFileTypes.join(', ')\n                  : acceptedFileTypes}{' '}\n                files up to {maxSizeInMB}MB\n              </p>\n              {description && <p className=\"mt-2 text-xs text-gray-500\">{description}</p>}\n            </>\n          ) : (\n            <div className=\"flex flex-col items-center\">\n              <div className=\"flex items-center mb-2\">\n                <svg\n                  className=\"w-8 h-8 text-green-500 mr-2\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth=\"2\"\n                    d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n                  ></path>\n                </svg>\n                <span className=\"text-sm font-medium\">{selectedFile.name}</span>\n              </div>\n              <p className=\"text-xs text-gray-500 mb-3\">\n                {(selectedFile.size / (1024 * 1024)).toFixed(2)} MB\n              </p>\n              <Button\n                variant=\"secondary\"\n                size=\"small\"\n                onClick={() => {\n                  if (fileInputRef.current) {\n                    setSelectedFile(null);\n                    setPreviewUrl(null);\n                    fileInputRef.current.value = '';\n                  }\n                }}\n                disabled={disabled}\n              >\n                Choose Different File\n              </Button>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Error message */}\n      {validationError && <div className=\"mt-2 text-sm text-red-600\">{validationError}</div>}\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\components\\layout\\Footer.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\components\\layout\\Header.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\components\\sections\\CallToAction.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\components\\sections\\FeatureCard.tsx",
    "messages": [
      {
        "ruleId": "jsx-a11y/no-noninteractive-tabindex",
        "severity": 2,
        "message": "`tabIndex` should only be declared on interactive elements.",
        "line": 38,
        "column": 7,
        "nodeType": "JSXAttribute",
        "endLine": 38,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import Image from 'next/image';\nimport React from 'react';\n\nimport { FeatureItem } from './Features';\n\ninterface FeatureCardProps {\n  feature: FeatureItem;\n  className?: string;\n}\n\nexport const FeatureCard: React.FC<FeatureCardProps> = ({ feature, className = '' }) => {\n  const renderIcon = (icon: FeatureItem['icon']) => {\n    if (React.isValidElement(icon)) {\n      return icon;\n    } else if (typeof icon === 'string') {\n      return (\n        <span className=\"text-blue-600 text-2xl\" aria-hidden=\"true\">\n          {icon}\n        </span>\n      );\n    } else if (icon && typeof icon === 'object' && 'src' in icon) {\n      return (\n        <Image\n          src={icon.src}\n          alt={icon.alt || feature.title}\n          width={24}\n          height={24}\n          className=\"w-6 h-6\"\n        />\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div\n      className={`bg-white p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300 h-full flex flex-col ${className}`}\n      tabIndex={0}\n    >\n      <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mb-4\">\n        {renderIcon(feature.icon)}\n      </div>\n      <h3 className=\"text-xl font-semibold mb-2 text-gray-800\">{feature.title}</h3>\n      <p className=\"text-gray-600 flex-grow\">{feature.description}</p>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\components\\sections\\Features.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\components\\sections\\Hero.test.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'fireEvent' is defined but never used.",
        "line": 1,
        "column": 26,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 16,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 16,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [404, 407], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [404, 407], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport React from 'react';\n\nimport Hero from './Hero';\n\n// Mock the useRouter hook\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n  }),\n}));\n\n// Mock the useDebounce hook\njest.mock('../../hooks/useDebounce', () => ({\n  useDebounce: (value: any) => value, // Return the value immediately for testing\n}));\n\ndescribe('Hero Component', () => {\n  it('renders with default props', () => {\n    render(<Hero />);\n\n    // Check if the default title and subtitle are rendered\n    expect(screen.getByText('Find Your Perfect UK Home')).toBeInTheDocument();\n    expect(\n      screen.getByText('Search smarter with AI-powered property matching and location insights')\n    ).toBeInTheDocument();\n\n    // Check if the search input is rendered\n    expect(screen.getByLabelText('Search for properties')).toBeInTheDocument();\n\n    // Check if the search button is rendered with default text\n    expect(screen.getByRole('button', { name: /search/i })).toBeInTheDocument();\n  });\n\n  it('renders with custom props', () => {\n    const customProps = {\n      title: 'Custom Title',\n      subtitle: 'Custom Subtitle',\n      buttonText: 'Custom Button',\n    };\n\n    render(<Hero {...customProps} />);\n\n    // Check if the custom title and subtitle are rendered\n    expect(screen.getByText('Custom Title')).toBeInTheDocument();\n    expect(screen.getByText('Custom Subtitle')).toBeInTheDocument();\n\n    // Check if the search button has the custom text\n    expect(screen.getByRole('button', { name: /custom button/i })).toBeInTheDocument();\n  });\n\n  it('handles search input and button click', async () => {\n    const mockOnInlineSearch = jest.fn();\n    const user = userEvent.setup();\n\n    render(<Hero useInlineSearch={true} onInlineSearch={mockOnInlineSearch} />);\n\n    // Get the search input and button\n    const searchInput = screen.getByLabelText('Search for properties');\n    const searchButton = screen.getByRole('button', { name: /search/i });\n\n    // Type in the search input\n    await user.type(searchInput, 'test search');\n\n    // Click the search button\n    await user.click(searchButton);\n\n    // Check if the onInlineSearch function was called with the correct value\n    expect(mockOnInlineSearch).toHaveBeenCalledWith('test search');\n  });\n\n  it('handles Enter key press in search input', async () => {\n    const mockOnInlineSearch = jest.fn();\n    const user = userEvent.setup();\n\n    render(<Hero useInlineSearch={true} onInlineSearch={mockOnInlineSearch} />);\n\n    // Get the search input\n    const searchInput = screen.getByLabelText('Search for properties');\n\n    // Type in the search input and press Enter\n    await user.type(searchInput, 'test search{enter}');\n\n    // Check if the onInlineSearch function was called with the correct value\n    expect(mockOnInlineSearch).toHaveBeenCalledWith('test search');\n  });\n\n  it('disables the search button when input is empty', async () => {\n    const user = userEvent.setup();\n    render(<Hero />);\n\n    // Get the search button\n    const searchButton = screen.getByRole('button', { name: /search/i });\n\n    // Initially, the button should be disabled\n    expect(searchButton).toBeDisabled();\n\n    // Type in the search input\n    const searchInput = screen.getByLabelText('Search for properties');\n    await user.type(searchInput, 'test');\n\n    // Now the button should be enabled\n    expect(searchButton).not.toBeDisabled();\n\n    // Clear the input\n    await user.clear(searchInput);\n\n    // The button should be disabled again\n    expect(searchButton).toBeDisabled();\n  });\n\n  it('shows loading state when searching', async () => {\n    const mockOnInlineSearch = jest.fn(() => {\n      // Simulate a delay in the search\n      return new Promise((resolve) => setTimeout(resolve, 100));\n    });\n\n    const user = userEvent.setup();\n\n    render(<Hero useInlineSearch={true} onInlineSearch={mockOnInlineSearch} />);\n\n    // Get the search input and button\n    const searchInput = screen.getByLabelText('Search for properties');\n    const searchButton = screen.getByRole('button', { name: /search/i });\n\n    // Type in the search input\n    await user.type(searchInput, 'test search');\n\n    // Click the search button\n    await user.click(searchButton);\n\n    // Check if the loading state is shown\n    expect(screen.getByText('Searching...')).toBeInTheDocument();\n\n    // Wait for the search to complete\n    await waitFor(() => {\n      expect(screen.queryByText('Searching...')).not.toBeInTheDocument();\n    });\n  });\n});\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\components\\sections\\Hero.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'handleSearch', 'onInlineSearch', and 'useInlineSearch'. Either include them or remove the dependency array.",
        "line": 34,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 34,
        "endColumn": 22,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [debouncedInput, handleSearch, onInlineSearch, useInlineSearch]",
            "fix": {
              "range": [1031, 1047],
              "text": "[debouncedInput, handleSearch, onInlineSearch, useInlineSearch]"
            }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useRouter } from 'next/navigation';\nimport React, { useState, useEffect } from 'react';\n\nimport { useDebounce } from '../../hooks/useDebounce';\nimport { Button } from '../../src/ui';\n\ninterface HeroProps {\n  title?: string;\n  subtitle?: string;\n  buttonText?: string;\n  useInlineSearch?: boolean;\n  onInlineSearch?: (query: string) => void;\n}\n\nexport default function Hero({\n  title = 'Find Your Perfect UK Home',\n  subtitle = 'Search smarter with AI-powered property matching and location insights',\n  buttonText = 'Search',\n  useInlineSearch = false,\n  onInlineSearch,\n}: HeroProps) {\n  const [input, setInput] = useState('');\n  const [isSearching, setIsSearching] = useState(false);\n  const router = useRouter();\n\n  // Debounce the search input with a 500ms delay\n  const debouncedInput = useDebounce(input, 500);\n\n  // Effect to trigger search when debounced input changes\n  useEffect(() => {\n    if (debouncedInput && debouncedInput.trim() && useInlineSearch && onInlineSearch) {\n      handleSearch(true);\n    }\n  }, [debouncedInput]);\n\n  const handleSearch = (isDebounced = false) => {\n    if (!input.trim()) return;\n\n    if (useInlineSearch && onInlineSearch) {\n      // Only set isSearching if this isn't from the debounce effect\n      // (to avoid UI flicker when typing quickly)\n      if (!isDebounced) {\n        setIsSearching(true);\n      }\n\n      onInlineSearch(input.trim());\n\n      // Scroll to results\n      setTimeout(() => {\n        const searchResults = document.getElementById('search-results');\n        if (searchResults) {\n          searchResults.scrollIntoView({\n            behavior: 'smooth',\n            block: 'start',\n          });\n        }\n        setIsSearching(false);\n      }, 100);\n    } else {\n      const encoded = encodeURIComponent(input.trim());\n      router.push(`/search?query=${encoded}`);\n    }\n  };\n\n  return (\n    <section\n      className=\"bg-gradient-to-br from-purple-700 via-indigo-700 to-indigo-900 text-white py-24 px-6 text-center\"\n      aria-labelledby=\"hero-heading\"\n    >\n      <h1 id=\"hero-heading\" className=\"text-5xl sm:text-6xl font-extrabold tracking-tight mb-6\">\n        {title}\n      </h1>\n      <p className=\"text-xl max-w-lg mx-auto mb-10 leading-relaxed\">{subtitle}</p>\n\n      <div\n        className=\"bg-white text-black p-5 rounded-2xl max-w-4xl mx-auto shadow-lg\"\n        role=\"search\"\n        aria-label=\"Property search\"\n      >\n        <div className=\"flex flex-col sm:flex-row gap-5 items-center\">\n          <div className=\"w-full flex-1 relative\">\n            <label htmlFor=\"property-search\" className=\"sr-only\">\n              Search for properties\n            </label>\n            <input\n              id=\"property-search\"\n              type=\"search\"\n              className=\"w-full px-5 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n              placeholder=\"e.g. 'Modern flat near Cambridge with a garden'\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyDown={(e) => e.key === 'Enter' && handleSearch()}\n              aria-label=\"Search for properties\"\n              aria-describedby=\"search-description\"\n            />\n            <span id=\"search-description\" className=\"sr-only\">\n              Enter location, property type, or features to search\n            </span>\n          </div>\n\n          <Button\n            variant=\"primary\"\n            onClick={() => handleSearch()}\n            disabled={!input.trim() || isSearching}\n            className=\"w-full sm:w-auto px-8 py-3 font-semibold rounded-lg transition-transform hover:scale-105 disabled:opacity-50\"\n            aria-label={isSearching ? 'Searching...' : 'Search for properties'}\n          >\n            {isSearching ? (\n              <>\n                <span className=\"inline-block mr-2 h-4 w-4 rounded-full border-2 border-white border-t-transparent animate-spin\"></span>\n                Searching...\n              </>\n            ) : (\n              buttonText\n            )}\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\components\\sections\\SearchResults.test.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'fireEvent' is defined but never used.",
        "line": 1,
        "column": 26,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Property' is defined but never used.",
        "line": 5,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 33
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { render, screen, fireEvent } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport React from 'react';\n\nimport SearchResults, { Property } from './SearchResults';\n\ndescribe('SearchResults Component', () => {\n  // Mock data for testing\n  const mockProperties = [\n    {\n      id: '1',\n      title: 'Modern Apartment',\n      price: '£350,000',\n      location: 'Cambridge, UK',\n      bedrooms: 2,\n      bathrooms: 1,\n      area: '850 sq ft',\n      description: 'A beautiful modern apartment in the heart of Cambridge.',\n      imageUrl: '/mock-image-1.jpg',\n    },\n    {\n      id: '2',\n      title: 'Family Home',\n      price: '£550,000',\n      location: 'London, UK',\n      bedrooms: 4,\n      bathrooms: 2,\n      area: '1,800 sq ft',\n      description: 'Perfect family home with a large garden in a quiet neighborhood.',\n      imageUrl: '/mock-image-2.jpg',\n    },\n  ];\n\n  it('renders nothing when query is empty', () => {\n    const { container } = render(<SearchResults query=\"\" results={[]} isLoading={false} />);\n\n    // The component should not render anything\n    expect(container.firstChild).toBeNull();\n  });\n\n  it('renders loading state correctly', () => {\n    render(<SearchResults query=\"test\" results={[]} isLoading={true} />);\n\n    // Check if the loading indicator is shown\n    expect(screen.getByText('Searching for properties...')).toBeInTheDocument();\n\n    // Check if the loading text is shown in the heading\n    expect(screen.getByText('Searching for \"test\"...')).toBeInTheDocument();\n  });\n\n  it('renders results correctly', () => {\n    render(<SearchResults query=\"test\" results={mockProperties} isLoading={false} />);\n\n    // Check if the results heading is shown\n    expect(screen.getByText('Found 2 properties matching \"test\"')).toBeInTheDocument();\n\n    // Check if all property titles are shown\n    expect(screen.getByText('Modern Apartment')).toBeInTheDocument();\n    expect(screen.getByText('Family Home')).toBeInTheDocument();\n\n    // Check if property details are shown\n    expect(screen.getByText('£350,000')).toBeInTheDocument();\n    expect(screen.getByText('Cambridge, UK')).toBeInTheDocument();\n    expect(screen.getByText('2 beds')).toBeInTheDocument();\n\n    // Check if all \"View Details\" buttons are shown\n    const viewDetailsButtons = screen.getAllByRole('button', { name: /view details/i });\n    expect(viewDetailsButtons).toHaveLength(2);\n  });\n\n  it('renders no results message correctly', () => {\n    render(<SearchResults query=\"nonexistent\" results={[]} isLoading={false} />);\n\n    // Check if the no results heading is shown\n    expect(screen.getByText('No properties found for \"nonexistent\"')).toBeInTheDocument();\n\n    // Check if the no results message is shown\n    expect(screen.getByText('No properties match your search')).toBeInTheDocument();\n    expect(\n      screen.getByText(\n        'Try adjusting your search criteria or explore our featured properties below.'\n      )\n    ).toBeInTheDocument();\n  });\n\n  it('renders error message correctly', () => {\n    render(\n      <SearchResults\n        query=\"test\"\n        results={[]}\n        isLoading={false}\n        error=\"An error occurred while searching\"\n      />\n    );\n\n    // Check if the error message is shown\n    expect(screen.getByText('An error occurred while searching')).toBeInTheDocument();\n  });\n\n  it('calls onViewDetails when View Details button is clicked', async () => {\n    const mockOnViewDetails = jest.fn();\n    const user = userEvent.setup();\n\n    render(\n      <SearchResults\n        query=\"test\"\n        results={mockProperties}\n        isLoading={false}\n        onViewDetails={mockOnViewDetails}\n      />\n    );\n\n    // Get the first View Details button\n    const viewDetailsButtons = screen.getAllByRole('button', { name: /view details/i });\n\n    // Click the first View Details button\n    await user.click(viewDetailsButtons[0]);\n\n    // Check if onViewDetails was called with the correct property ID\n    expect(mockOnViewDetails).toHaveBeenCalledWith('1');\n  });\n\n  it('calls onClearSearch when Clear Search button is clicked', async () => {\n    const mockOnClearSearch = jest.fn();\n    const user = userEvent.setup();\n\n    render(\n      <SearchResults\n        query=\"test\"\n        results={mockProperties}\n        isLoading={false}\n        onClearSearch={mockOnClearSearch}\n      />\n    );\n\n    // Get the Clear Search button\n    const clearSearchButton = screen.getByRole('button', { name: /clear search/i });\n\n    // Click the Clear Search button\n    await user.click(clearSearchButton);\n\n    // Check if onClearSearch was called\n    expect(mockOnClearSearch).toHaveBeenCalled();\n  });\n});\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\components\\sections\\SearchResults.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\hooks\\useDebounce.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\lib\\db\\queries.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\lib\\logging\\logger.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 24,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 24,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [602, 605], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [602, 605], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 159,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 159,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4459, 4462], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4459, 4462], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 235,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 235,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6418, 6421], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6418, 6421], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 264,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 264,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [7031, 7082], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 267,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 267,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [7126, 7176], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 298,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 298,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8004, 8007], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8004, 8007], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 319,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 319,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8568, 8571], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8568, 8571], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 360,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 360,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9632, 9635], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9632, 9635], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 391,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 391,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10532, 10535], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10532, 10535], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 401,
        "column": 64,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 401,
        "endColumn": 67,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10810, 10813], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10810, 10813], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 411,
        "column": 64,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 411,
        "endColumn": 67,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11089, 11092], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11089, 11092], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 425,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 425,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11419, 11422], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11419, 11422], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 441,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 441,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11765, 11768], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11765, 11768], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 11,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/logging/logger.ts\n/**\n * Structured logging utility for the application\n *\n * This module provides a consistent interface for logging across the application.\n * It supports different log levels, structured metadata, and can be configured\n * to send logs to external services like Sentry or LogRocket.\n */\n\n// Log levels in order of severity\nexport enum LogLevel {\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n  FATAL = 'fatal',\n}\n\n// Log entry interface\nexport interface LogEntry {\n  level: LogLevel;\n  message: string;\n  timestamp: string;\n  context?: Record<string, any>;\n  tags?: string[];\n  error?: Error;\n}\n\n// Logger configuration interface\nexport interface LoggerConfig {\n  minLevel: LogLevel;\n  enableConsole: boolean;\n  sentryDsn?: string;\n  logRocketAppId?: string;\n  environment: 'development' | 'test' | 'production';\n  release?: string;\n  userId?: string;\n  userEmail?: string;\n}\n\n// Default configuration\nconst defaultConfig: LoggerConfig = {\n  minLevel: LogLevel.DEBUG,\n  enableConsole: true,\n  environment: (process.env.NODE_ENV as 'development' | 'test' | 'production') || 'development',\n  release: process.env.NEXT_PUBLIC_APP_VERSION,\n};\n\n// Global logger configuration\nlet loggerConfig: LoggerConfig = { ...defaultConfig };\n\n// External logging services\nlet sentryInitialized = false;\nlet logRocketInitialized = false;\n\n/**\n * Initialize Sentry for error tracking\n * This is done lazily to avoid importing Sentry in environments where it's not needed\n */\nasync function initSentry(dsn: string, config: LoggerConfig) {\n  if (sentryInitialized) return;\n\n  try {\n    // Dynamically import Sentry to avoid bundling it unnecessarily\n    const Sentry = await import('@sentry/nextjs');\n\n    Sentry.init({\n      dsn,\n      environment: config.environment,\n      release: config.release,\n      tracesSampleRate: config.environment === 'production' ? 0.2 : 1.0,\n      // Only send errors and above to Sentry\n      beforeSend(event) {\n        if (event.level && ['error', 'fatal'].includes(event.level)) {\n          return event;\n        }\n        return null;\n      },\n    });\n\n    // Set user information if available\n    if (config.userId || config.userEmail) {\n      Sentry.setUser({\n        id: config.userId,\n        email: config.userEmail,\n      });\n    }\n\n    sentryInitialized = true;\n\n    return Sentry;\n  } catch (error) {\n    console.error('Failed to initialize Sentry:', error);\n    return null;\n  }\n}\n\n/**\n * Initialize LogRocket for session replay\n * This is done lazily to avoid importing LogRocket in environments where it's not needed\n */\nasync function initLogRocket(appId: string, config: LoggerConfig) {\n  if (logRocketInitialized) return;\n\n  try {\n    // Dynamically import LogRocket to avoid bundling it unnecessarily\n    // @ts-expect-error - LogRocket types may vary between versions\n    const LogRocket = (await import('logrocket')).default;\n\n    LogRocket.init(appId, {\n      release: config.release,\n      console: {\n        isEnabled: {\n          // Configure which console methods to capture\n          log: true,\n          warn: true,\n          error: true,\n        },\n      },\n      network: {\n        isEnabled: true,\n        requestSanitizer: (request) => {\n          // Don't log request bodies for sensitive endpoints\n          if (\n            request.url &&\n            (request.url.includes('/api/auth') || request.url.includes('/api/user'))\n          ) {\n            request.body = undefined;\n          }\n          return request;\n        },\n        responseSanitizer: (response) => {\n          // Don't log response bodies for sensitive endpoints\n          if (\n            response.url &&\n            (response.url.includes('/api/auth') || response.url.includes('/api/user'))\n          ) {\n            response.body = undefined;\n          }\n          return response;\n        },\n      },\n    });\n\n    // Set user information if available\n    if (config.userId || config.userEmail) {\n      LogRocket.identify(config.userId || 'anonymous', {\n        email: config.userEmail || '',\n      });\n    }\n\n    // Connect LogRocket with Sentry if both are enabled\n    if (sentryInitialized) {\n      const Sentry = await import('@sentry/nextjs');\n      LogRocket.getSessionURL((sessionURL) => {\n        // Use a try-catch to handle potential missing methods\n        try {\n          // Using any type for scope as Sentry API might vary between versions\n          Sentry.withScope((scope: any) => {\n            scope.setExtra('logRocketSessionURL', sessionURL);\n          });\n        } catch (err) {\n          console.error('Failed to set LogRocket session URL in Sentry:', err);\n        }\n      });\n    }\n\n    logRocketInitialized = true;\n\n    return LogRocket;\n  } catch (error) {\n    console.error('Failed to initialize LogRocket:', error);\n    return null;\n  }\n}\n\n/**\n * Configure the logger\n * @param config Logger configuration\n */\nexport function configureLogger(config: Partial<LoggerConfig>) {\n  loggerConfig = { ...loggerConfig, ...config };\n\n  // Initialize external logging services if configured\n  if (loggerConfig.sentryDsn && typeof window !== 'undefined') {\n    initSentry(loggerConfig.sentryDsn, loggerConfig);\n  }\n\n  if (loggerConfig.logRocketAppId && typeof window !== 'undefined') {\n    initLogRocket(loggerConfig.logRocketAppId, loggerConfig);\n  }\n}\n\n/**\n * Set user information for logging\n * @param userId User ID\n * @param userEmail User email\n */\nexport async function setLogUser(userId?: string, userEmail?: string) {\n  loggerConfig.userId = userId;\n  loggerConfig.userEmail = userEmail;\n\n  // Update user information in external services\n  if (sentryInitialized) {\n    const Sentry = await import('@sentry/nextjs');\n    if (Sentry.setUser) {\n      Sentry.setUser({\n        id: userId,\n        email: userEmail,\n      });\n    }\n  }\n\n  if (logRocketInitialized && typeof window !== 'undefined') {\n    // @ts-expect-error - LogRocket types may vary between versions\n    const LogRocket = (await import('logrocket')).default;\n    LogRocket.identify(userId || 'anonymous', {\n      email: userEmail || '',\n    });\n  }\n}\n\n/**\n * Create a log entry\n * @param level Log level\n * @param message Log message\n * @param context Additional context\n * @param tags Tags for categorizing logs\n * @param error Error object\n * @returns Log entry\n */\nfunction createLogEntry(\n  level: LogLevel,\n  message: string,\n  context?: Record<string, any>,\n  tags?: string[],\n  error?: Error\n): LogEntry {\n  return {\n    level,\n    message,\n    timestamp: new Date().toISOString(),\n    context,\n    tags,\n    error,\n  };\n}\n\n/**\n * Log to the console with appropriate formatting\n * @param entry Log entry\n */\nfunction logToConsole(entry: LogEntry) {\n  if (!loggerConfig.enableConsole) return;\n\n  const { level, message, timestamp, context, tags, error } = entry;\n\n  // Format the log message\n  const formattedMessage = `[${timestamp}] [${level.toUpperCase()}] ${message}`;\n\n  // Log with appropriate console method\n  switch (level) {\n    case LogLevel.DEBUG:\n      console.debug(formattedMessage, { context, tags });\n      break;\n    case LogLevel.INFO:\n      console.info(formattedMessage, { context, tags });\n      break;\n    case LogLevel.WARN:\n      console.warn(formattedMessage, { context, tags });\n      break;\n    case LogLevel.ERROR:\n    case LogLevel.FATAL:\n      console.error(formattedMessage, { context, tags, error });\n      break;\n  }\n}\n\n/**\n * Send log to external services\n * @param entry Log entry\n */\nasync function logToExternalServices(entry: LogEntry) {\n  const { level, message, context, tags, error } = entry;\n\n  // Send to Sentry if configured and level is ERROR or FATAL\n  if (\n    loggerConfig.sentryDsn &&\n    sentryInitialized &&\n    (level === LogLevel.ERROR || level === LogLevel.FATAL)\n  ) {\n    try {\n      const Sentry = await import('@sentry/nextjs');\n\n      // Set extra context\n      try {\n        // Using any type for scope as Sentry API might vary between versions\n        Sentry.withScope((scope: any) => {\n          if (context) {\n            Object.entries(context).forEach(([key, value]) => {\n              scope.setExtra(key, value);\n            });\n          }\n\n          if (tags) {\n            tags.forEach((tag) => {\n              scope.setTag(tag, 'true');\n            });\n          }\n        });\n      } catch (err) {\n        console.error('Failed to set context in Sentry:', err);\n      }\n\n      // Capture the error or message\n      if (error) {\n        Sentry.captureException(error);\n      } else {\n        Sentry.captureMessage(message, level as any);\n      }\n    } catch (err) {\n      console.error('Failed to log to Sentry:', err);\n    }\n  }\n\n  // Send to LogRocket if configured\n  if (loggerConfig.logRocketAppId && logRocketInitialized) {\n    try {\n      // @ts-expect-error - LogRocket types may vary between versions\n      const LogRocket = (await import('logrocket')).default;\n\n      // Log the message\n      if (level === LogLevel.ERROR || level === LogLevel.FATAL) {\n        LogRocket.captureException(error || new Error(message), {\n          tags,\n          extra: context,\n        });\n      } else if (level === LogLevel.WARN) {\n        LogRocket.warn(message, context);\n      } else {\n        LogRocket.log(message, context);\n      }\n    } catch (err) {\n      console.error('Failed to log to LogRocket:', err);\n    }\n  }\n}\n\n/**\n * Log a message\n * @param level Log level\n * @param message Log message\n * @param context Additional context\n * @param tags Tags for categorizing logs\n * @param error Error object\n */\nasync function log(\n  level: LogLevel,\n  message: string,\n  context?: Record<string, any>,\n  tags?: string[],\n  error?: Error\n) {\n  // Skip if below minimum log level\n  if (\n    (level === LogLevel.DEBUG && loggerConfig.minLevel !== LogLevel.DEBUG) ||\n    (level === LogLevel.INFO &&\n      [LogLevel.WARN, LogLevel.ERROR, LogLevel.FATAL].includes(loggerConfig.minLevel)) ||\n    (level === LogLevel.WARN && [LogLevel.ERROR, LogLevel.FATAL].includes(loggerConfig.minLevel)) ||\n    (level === LogLevel.ERROR && loggerConfig.minLevel === LogLevel.FATAL)\n  ) {\n    return;\n  }\n\n  // Create log entry\n  const entry = createLogEntry(level, message, context, tags, error);\n\n  // Log to console\n  logToConsole(entry);\n\n  // Log to external services\n  await logToExternalServices(entry);\n}\n\n/**\n * Log a debug message\n * @param message Log message\n * @param context Additional context\n * @param tags Tags for categorizing logs\n */\nexport function debug(message: string, context?: Record<string, any>, tags?: string[]) {\n  log(LogLevel.DEBUG, message, context, tags);\n}\n\n/**\n * Log an info message\n * @param message Log message\n * @param context Additional context\n * @param tags Tags for categorizing logs\n */\nexport function info(message: string, context?: Record<string, any>, tags?: string[]) {\n  log(LogLevel.INFO, message, context, tags);\n}\n\n/**\n * Log a warning message\n * @param message Log message\n * @param context Additional context\n * @param tags Tags for categorizing logs\n */\nexport function warn(message: string, context?: Record<string, any>, tags?: string[]) {\n  log(LogLevel.WARN, message, context, tags);\n}\n\n/**\n * Log an error message\n * @param message Log message\n * @param error Error object\n * @param context Additional context\n * @param tags Tags for categorizing logs\n */\nexport function error(\n  message: string,\n  error?: Error,\n  context?: Record<string, any>,\n  tags?: string[]\n) {\n  log(LogLevel.ERROR, message, context, tags, error);\n}\n\n/**\n * Log a fatal error message\n * @param message Log message\n * @param error Error object\n * @param context Additional context\n * @param tags Tags for categorizing logs\n */\nexport function fatal(\n  message: string,\n  error?: Error,\n  context?: Record<string, any>,\n  tags?: string[]\n) {\n  log(LogLevel.FATAL, message, context, tags, error);\n}\n\n// Export a default logger object\nconst logger = {\n  debug,\n  info,\n  warn,\n  error,\n  fatal,\n  configureLogger,\n  setLogUser,\n};\n\nexport default logger;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\lib\\logging\\simplified-logger.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 48,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 48,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [929, 932], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [929, 932], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 48,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 48,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [935, 938], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [935, 938], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 123,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 123,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [3455, 3524], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 172,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 172,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [4980, 5052], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 315,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 315,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9125, 9128], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9125, 9128], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 357,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 357,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10357, 10360], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10357, 10360], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 368,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 368,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [10682, 10723], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 371,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 371,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [10767, 10807], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 389,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 389,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11186, 11189], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11186, 11189], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 457,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 457,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13149, 13152], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13149, 13152], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 464,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 464,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13302, 13305], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13302, 13305], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 471,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 471,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13456, 13459], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13456, 13459], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 478,
        "column": 68,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 478,
        "endColumn": 71,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13628, 13631], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13628, 13631], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 485,
        "column": 68,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 485,
        "endColumn": 71,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13816, 13819], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13816, 13819], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 10,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/logging/simplified-logger.ts\n\n/**\n * Sensitive fields that should never be logged\n * Add any field names that might contain sensitive information\n */\nconst SENSITIVE_FIELDS = [\n  'password',\n  'token',\n  'secret',\n  'authorization',\n  'apiKey',\n  'api_key',\n  'key',\n  'credential',\n  'ssn',\n  'socialSecurity',\n  'creditCard',\n  'cardNumber',\n  'cvv',\n];\n\nexport enum LogLevel {\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n  FATAL = 'fatal',\n}\n\ninterface LoggerConfig {\n  enableConsole?: boolean;\n  minLevel?: LogLevel;\n  sentryDsn?: string;\n  logRocketAppId?: string;\n  userId?: string;\n  userEmail?: string;\n  requestId?: string;\n  release?: string;\n  environment?: 'development' | 'test' | 'production';\n}\n\n/**\n * Sanitize an object to remove sensitive data before logging\n * @param obj The object to sanitize\n * @returns A sanitized copy of the object\n */\nfunction sanitizeForLogging(obj: any): any {\n  if (!obj || typeof obj !== 'object') {\n    return obj;\n  }\n\n  // Handle arrays\n  if (Array.isArray(obj)) {\n    return obj.map((item) => sanitizeForLogging(item));\n  }\n\n  // Handle objects\n  const sanitized = { ...obj };\n  for (const key in sanitized) {\n    const lowerKey = key.toLowerCase();\n\n    // Check if this key contains any sensitive terms\n    if (SENSITIVE_FIELDS.some((field) => lowerKey.includes(field.toLowerCase()))) {\n      sanitized[key] = '[REDACTED]';\n    } else if (typeof sanitized[key] === 'object' && sanitized[key] !== null) {\n      // Recursively sanitize nested objects\n      sanitized[key] = sanitizeForLogging(sanitized[key]);\n    }\n  }\n\n  return sanitized;\n}\n\nconst defaultConfig: LoggerConfig = {\n  enableConsole: true,\n  // Set different default log levels based on environment\n  minLevel: process.env.NODE_ENV === 'production' ? LogLevel.WARN : LogLevel.DEBUG,\n  environment:\n    (process.env.NODE_ENV as unknown as 'development' | 'test' | 'production') || 'development',\n  release: process.env.NEXT_PUBLIC_APP_VERSION,\n};\n\n// Global logger configuration\n// TODO: Consider refactoring to use a class or singleton pattern if this module grows more complex\n// This would help encapsulate state and provide better testability\nlet loggerConfig: LoggerConfig = { ...defaultConfig };\nlet sentryInitialized = false;\nlet logRocketInitialized = false;\n\n/**\n * Configure the logger\n */\nexport function configureLogger(config: Partial<LoggerConfig>) {\n  loggerConfig = { ...loggerConfig, ...config };\n\n  // Use environment variables for secrets if not explicitly provided\n  const sentryDsn = loggerConfig.sentryDsn || process.env.NEXT_PUBLIC_SENTRY_DSN;\n  const logRocketAppId = loggerConfig.logRocketAppId || process.env.NEXT_PUBLIC_LOGROCKET_APP_ID;\n\n  // Initialize external logging services if configured\n  if (sentryDsn && typeof window !== 'undefined') {\n    initSentry(sentryDsn, loggerConfig);\n  }\n\n  if (logRocketAppId && typeof window !== 'undefined') {\n    initLogRocket(logRocketAppId, loggerConfig);\n  }\n\n  // In production, ensure we're not logging too verbosely\n  if (process.env.NODE_ENV === 'production' && !config.minLevel) {\n    loggerConfig.minLevel = LogLevel.WARN;\n  }\n}\n\n/**\n * Initialize Sentry for error tracking\n * @returns The Sentry instance if initialization was successful, null otherwise\n */\nasync function initSentry(dsn: string, config: LoggerConfig) {\n  // Skip initialization if already initialized or if dsn is missing/empty\n  if (sentryInitialized) {\n    console.debug('Sentry already initialized, skipping initialization');\n    return;\n  }\n\n  if (!dsn || dsn.trim() === '') {\n    console.warn('Sentry DSN is empty or missing, skipping initialization');\n    return null;\n  }\n\n  try {\n    const Sentry = await import('@sentry/nextjs');\n\n    Sentry.init({\n      dsn,\n      environment: config.environment,\n      release: config.release,\n      tracesSampleRate: config.environment === 'production' ? 0.2 : 1.0,\n    });\n\n    // Set user information if available\n    if (config.userId || config.userEmail) {\n      Sentry.setUser({\n        id: config.userId,\n        email: config.userEmail,\n      });\n    }\n\n    sentryInitialized = true;\n    return Sentry;\n  } catch (error) {\n    console.error('Failed to initialize Sentry:', error);\n    // Log detailed error information to help with debugging\n    if (error instanceof Error) {\n      console.error(`Sentry initialization error: ${error.name}: ${error.message}`);\n      if (error.stack) console.error(`Stack trace: ${error.stack}`);\n    }\n    // Log environment information to help diagnose deployment issues\n    console.error(`Environment: ${process.env.NODE_ENV}, Release: ${config.release}`);\n    return null;\n  }\n}\n\n/**\n * Initialize LogRocket for session replay\n * @returns The LogRocket instance if initialization was successful, null otherwise\n */\nasync function initLogRocket(appId: string, config: LoggerConfig) {\n  // Skip initialization if already initialized or if appId is missing/empty\n  if (logRocketInitialized) {\n    console.debug('LogRocket already initialized, skipping initialization');\n    return;\n  }\n\n  if (!appId || appId.trim() === '') {\n    console.warn('LogRocket App ID is empty or missing, skipping initialization');\n    return null;\n  }\n\n  try {\n    const LogRocket = (await import('logrocket')).default;\n\n    LogRocket.init(appId, {\n      release: config.release,\n      console: {\n        isEnabled: {\n          error: true,\n          warn: true,\n        },\n      },\n      network: {\n        isEnabled: true,\n        requestSanitizer: (request) => {\n          // Don't log request bodies for sensitive endpoints\n          if (request.url.includes('/api/auth') || request.url.includes('/api/user')) {\n            request.body = null;\n          }\n          return request;\n        },\n        responseSanitizer: (response) => {\n          // Don't log response bodies for sensitive endpoints\n          if (response.url.includes('/api/auth') || response.url.includes('/api/user')) {\n            response.body = null;\n          }\n          return response;\n        },\n      },\n    });\n\n    // Set user information if available\n    if (config.userId || config.userEmail) {\n      LogRocket.identify(config.userId || 'anonymous', {\n        email: config.userEmail,\n      });\n    }\n\n    // Connect LogRocket with Sentry if both are enabled\n    if (sentryInitialized) {\n      const Sentry = await import('@sentry/nextjs');\n      LogRocket.getSessionURL((sessionURL) => {\n        Sentry.configureScope((scope) => {\n          scope.setExtra('logRocketSessionURL', sessionURL);\n\n          // Add request ID to Sentry scope if available\n          if (loggerConfig.requestId) {\n            scope.setTag('requestId', loggerConfig.requestId);\n          }\n        });\n      });\n    }\n\n    // Add request ID to LogRocket metadata if available\n    if (loggerConfig.requestId) {\n      LogRocket.setMeta('requestId', loggerConfig.requestId);\n    }\n\n    logRocketInitialized = true;\n    return LogRocket;\n  } catch (error) {\n    console.error('Failed to initialize LogRocket:', error);\n    // Log detailed error information to help with debugging\n    if (error instanceof Error) {\n      console.error(`LogRocket initialization error: ${error.name}: ${error.message}`);\n      if (error.stack) console.error(`Stack trace: ${error.stack}`);\n    }\n    // Log environment information to help diagnose deployment issues\n    console.error(\n      `Environment: ${process.env.NODE_ENV}, Release: ${config.release}, AppId: ${appId}`\n    );\n    return null;\n  }\n}\n\n/**\n * Set user information for logging\n */\nexport async function setLogUser(userId?: string, userEmail?: string) {\n  loggerConfig.userId = userId;\n  loggerConfig.userEmail = userEmail;\n\n  // Update user information in external services\n  if (sentryInitialized) {\n    const Sentry = await import('@sentry/nextjs');\n    Sentry.setUser({\n      id: userId,\n      email: userEmail,\n    });\n  }\n\n  if (logRocketInitialized && typeof window !== 'undefined') {\n    const LogRocket = (await import('logrocket')).default;\n    LogRocket.identify(userId || 'anonymous', {\n      email: userEmail,\n    });\n  }\n}\n\n/**\n * Set request ID for logging\n * This is useful for tracking logs across a single request lifecycle\n * and correlating logs between different services\n */\nexport async function setRequestId(requestId: string) {\n  loggerConfig.requestId = requestId;\n\n  // Update request ID in external services\n  if (sentryInitialized && typeof window !== 'undefined') {\n    try {\n      const Sentry = await import('@sentry/nextjs');\n      Sentry.configureScope((scope) => {\n        scope.setTag('requestId', requestId);\n      });\n    } catch (err) {\n      console.error('Failed to set request ID in Sentry:', err);\n    }\n  }\n\n  if (logRocketInitialized && typeof window !== 'undefined') {\n    try {\n      const LogRocket = (await import('logrocket')).default;\n      LogRocket.setMeta('requestId', requestId);\n    } catch (err) {\n      console.error('Failed to set request ID in LogRocket:', err);\n    }\n  }\n}\n\n/**\n * Log a message with the specified level\n */\nasync function log(\n  level: LogLevel,\n  message: string,\n  context?: any,\n  tags?: string[],\n  error?: Error\n) {\n  // Skip if below minimum log level\n  if (loggerConfig.minLevel && shouldSkipLog(level, loggerConfig.minLevel)) {\n    return;\n  }\n\n  // Enhance context with requestId and userId if available in config\n  const enhancedContext = sanitizeForLogging({\n    ...(context || {}),\n    ...(loggerConfig.requestId ? { requestId: loggerConfig.requestId } : {}),\n    ...(loggerConfig.userId ? { userId: loggerConfig.userId } : {}),\n  });\n\n  // Log to console if enabled\n  if (loggerConfig.enableConsole !== false) {\n    logToConsole(level, message, enhancedContext, tags, error);\n  }\n\n  // Log to external services\n  await logToExternalServices(level, message, enhancedContext, tags, error);\n}\n\n/**\n * Determine if a log should be skipped based on minimum level\n */\nfunction shouldSkipLog(level: LogLevel, minLevel: LogLevel): boolean {\n  const levels = [LogLevel.DEBUG, LogLevel.INFO, LogLevel.WARN, LogLevel.ERROR, LogLevel.FATAL];\n  const levelIndex = levels.indexOf(level);\n  const minLevelIndex = levels.indexOf(minLevel);\n\n  return levelIndex < minLevelIndex;\n}\n\n/**\n * Log to the console with appropriate formatting\n */\nfunction logToConsole(\n  level: LogLevel,\n  message: string,\n  context?: any,\n  tags?: string[],\n  error?: Error\n) {\n  const timestamp = new Date().toISOString();\n  const formattedMessage = `[${timestamp}] [${level.toUpperCase()}] ${message}`;\n  const logData = { ...(context || {}), tags };\n\n  // Use the appropriate console method based on level\n  switch (level) {\n    case LogLevel.DEBUG:\n      console.debug(formattedMessage, logData);\n      break;\n    case LogLevel.INFO:\n      console.info(formattedMessage, logData);\n      break;\n    case LogLevel.WARN:\n      console.warn(formattedMessage, logData);\n      break;\n    case LogLevel.ERROR:\n    case LogLevel.FATAL:\n      console.error(formattedMessage, error || '', logData);\n      break;\n  }\n}\n\n/**\n * Log to external services like Sentry and LogRocket\n */\nasync function logToExternalServices(\n  level: LogLevel,\n  message: string,\n  context?: any,\n  tags?: string[],\n  error?: Error\n) {\n  // Send to Sentry if configured and level is ERROR or FATAL\n  if (sentryInitialized && (level === LogLevel.ERROR || level === LogLevel.FATAL)) {\n    try {\n      const Sentry = await import('@sentry/nextjs');\n\n      // Set extra context\n      Sentry.configureScope((scope) => {\n        if (context) {\n          Object.entries(context).forEach(([key, value]) => {\n            scope.setExtra(key, value);\n          });\n        }\n\n        if (tags) {\n          tags.forEach((tag) => {\n            scope.setTag(tag, 'true');\n          });\n        }\n      });\n\n      // Capture the error or message\n      if (error) {\n        Sentry.captureException(error);\n      } else {\n        Sentry.captureMessage(message, level);\n      }\n    } catch (err) {\n      console.error('Failed to log to Sentry:', err);\n      if (err instanceof Error) {\n        console.error(`Sentry logging error: ${err.name}: ${err.message}`);\n        // Don't log stack trace here to avoid recursive error logging\n      }\n    }\n  }\n\n  // Send to LogRocket if configured\n  if (logRocketInitialized) {\n    try {\n      const LogRocket = (await import('logrocket')).default;\n\n      // Log the message\n      if (level === LogLevel.ERROR || level === LogLevel.FATAL) {\n        LogRocket.captureException(error || new Error(message), {\n          tags: tags?.reduce((acc, tag) => ({ ...acc, [tag]: true }), {}),\n          extra: context,\n        });\n      } else if (level === LogLevel.WARN) {\n        LogRocket.warn(message, context);\n      } else {\n        LogRocket.log(message, context);\n      }\n    } catch (err) {\n      console.error('Failed to log to LogRocket:', err);\n      if (err instanceof Error) {\n        console.error(`LogRocket logging error: ${err.name}: ${err.message}`);\n        // Don't log stack trace here to avoid recursive error logging\n      }\n    }\n  }\n}\n\n/**\n * Log a debug message\n */\nexport function debug(message: string, context?: any, tags?: string[]) {\n  log(LogLevel.DEBUG, message, context, tags);\n}\n\n/**\n * Log an info message\n */\nexport function info(message: string, context?: any, tags?: string[]) {\n  log(LogLevel.INFO, message, context, tags);\n}\n\n/**\n * Log a warning message\n */\nexport function warn(message: string, context?: any, tags?: string[]) {\n  log(LogLevel.WARN, message, context, tags);\n}\n\n/**\n * Log an error message\n */\nexport function error(message: string, errorObj?: Error, context?: any, tags?: string[]) {\n  log(LogLevel.ERROR, message, context, tags, errorObj);\n}\n\n/**\n * Log a fatal error message\n */\nexport function fatal(message: string, errorObj?: Error, context?: any, tags?: string[]) {\n  log(LogLevel.FATAL, message, context, tags, errorObj);\n}\n\n// Export a default logger object\nconst logger = {\n  debug,\n  info,\n  warn,\n  error,\n  fatal,\n  configureLogger,\n  setLogUser,\n  setRequestId,\n};\n\nexport default logger;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\middleware.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\next.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\pages\\MyPage.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\postcss.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\src\\components\\MyPageComponent.tsx",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 7,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 7,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [127, 169], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\n\nimport { Button } from '../ui';\n\nconst MyPageComponent = () => {\n  const handleClick = () => {\n    console.log('Button clicked in web app!');\n  };\n\n  return (\n    <div>\n      <h1>Welcome to My Page</h1>\n      <Button onClick={handleClick} variant=\"primary\" size=\"large\">\n        Click Me!\n      </Button>\n      <Button\n        onClick={() => alert('Secondary clicked')}\n        variant=\"secondary\"\n        style={{ marginLeft: '10px' }}\n      >\n        Another Action\n      </Button>\n      <Button variant=\"destructive\" isLoading={true} style={{ marginLeft: '10px' }}>\n        Processing...\n      </Button>\n    </div>\n  );\n};\n\nexport default MyPageComponent;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\src\\ui\\Button.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\src\\ui\\index.ts",
    "messages": [
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'Button'.",
        "line": 1,
        "column": 1,
        "nodeType": "ExportAllDeclaration",
        "endLine": 1,
        "endColumn": 26
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'Button'.",
        "line": 2,
        "column": 21,
        "nodeType": "Identifier",
        "endLine": 2,
        "endColumn": 27
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "export * from './Button';\nexport { default as Button } from './Button';\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\apps\\web\\tailwind.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\jest.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\jest.setup.js",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'jest-fetch-mock'.",
        "line": 5,
        "column": 34,
        "nodeType": "Literal",
        "endLine": 5,
        "endColumn": 51
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Import Jest DOM matchers\nimport '@testing-library/jest-dom';\n\n// Mock fetch\nimport { enableFetchMocks } from 'jest-fetch-mock';\nenableFetchMocks();\n\n// Mock Next.js router\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    prefetch: jest.fn(),\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n    pathname: '/',\n    query: {},\n  }),\n  usePathname: () => '/',\n  useSearchParams: () => new URLSearchParams(),\n}));\n\n// Mock environment variables\nprocess.env = {\n  ...process.env,\n  NEXT_PUBLIC_APP_URL: 'http://localhost:3000',\n  DATABASE_URL: 'postgres://test:test@localhost:5432/test_db',\n};\n\n// Suppress console errors during tests\nconst originalConsoleError = console.error;\nconsole.error = (...args) => {\n  if (\n    typeof args[0] === 'string' &&\n    (args[0].includes('Warning: ReactDOM.render') ||\n      args[0].includes('Warning: React.createElement') ||\n      args[0].includes('Error: Uncaught [Error: expected'))\n  ) {\n    return;\n  }\n  originalConsoleError(...args);\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\lib\\api\\response.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 3,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 3,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [73, 76], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [73, 76], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 9,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 9,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [180, 183], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [180, 183], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 37,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 37,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [821, 824], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [821, 824], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextResponse } from 'next/server';\n\nexport type ApiResponse<T = any> = {\n  success: boolean;\n  data?: T;\n  error?: {\n    message: string;\n    code?: string;\n    details?: any;\n  };\n};\n\n/**\n * Create a successful API response\n * @param data The data to include in the response\n * @returns A NextResponse with standardized format\n */\nexport function successResponse<T>(data: T): NextResponse<ApiResponse<T>> {\n  return NextResponse.json({\n    success: true,\n    data,\n  });\n}\n\n/**\n * Create an error API response\n * @param message Error message\n * @param status HTTP status code\n * @param code Optional error code\n * @param details Optional error details\n * @returns A NextResponse with standardized format\n */\nexport function errorResponse(\n  message: string,\n  status: number = 500,\n  code?: string,\n  details?: any\n): NextResponse<ApiResponse<never>> {\n  return NextResponse.json(\n    {\n      success: false,\n      error: {\n        message,\n        ...(code && { code }),\n        ...(details && { details }),\n      },\n    },\n    { status }\n  );\n}\n\n/**\n * HTTP status codes for common API responses\n */\nexport const HttpStatus = {\n  OK: 200,\n  CREATED: 201,\n  NO_CONTENT: 204,\n  BAD_REQUEST: 400,\n  UNAUTHORIZED: 401,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  METHOD_NOT_ALLOWED: 405,\n  CONFLICT: 409,\n  UNPROCESSABLE_ENTITY: 422,\n  INTERNAL_SERVER_ERROR: 500,\n  SERVICE_UNAVAILABLE: 503,\n} as const;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\lib\\api\\validation.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\lib\\db\\generate-embeddings.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 10,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 10,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [183, 252], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 12,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 12,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [298, 357], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import dotenv from 'dotenv';\n\nimport { processAllMissingEmbeddings } from './property-processor';\n\n// Load environment variables\ndotenv.config();\n\nasync function main() {\n  try {\n    console.log('Starting to generate embeddings for all properties...');\n    await processAllMissingEmbeddings();\n    console.log('Embedding generation completed successfully');\n  } catch (error) {\n    console.error('Error generating embeddings:', error);\n    process.exit(1);\n  }\n}\n\n// Run the script\nmain();\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\lib\\db\\index.ts",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module '../../drizzle/schema'.",
        "line": 5,
        "column": 25,
        "nodeType": "Literal",
        "endLine": 5,
        "endColumn": 47
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import * as dotenv from 'dotenv';\nimport { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\n\nimport * as schema from '../../drizzle/schema';\n\n// Load environment variables\ndotenv.config();\n\n// Check if DATABASE_URL is defined\nif (!process.env.DATABASE_URL) {\n  throw new Error('DATABASE_URL is not defined in environment variables');\n}\n\n// Create a postgres connection\nconst client = postgres(process.env.DATABASE_URL);\n\n// Create a drizzle client\nexport const db = drizzle(client, { schema });\n\n// Export schema for convenience\nexport { schema };\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\lib\\db\\migrate.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 15,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 15,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [409, 455], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 24,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 24,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [773, 821], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import * as dotenv from 'dotenv';\nimport { drizzle } from 'drizzle-orm/postgres-js';\nimport { migrate } from 'drizzle-orm/postgres-js/migrator';\nimport postgres from 'postgres';\n\n// Load environment variables\ndotenv.config();\n\n// Database migration function\nasync function runMigration() {\n  if (!process.env.DATABASE_URL) {\n    throw new Error('DATABASE_URL is not defined in environment variables');\n  }\n\n  console.log('Starting database migration...');\n\n  // For migrations, we need a separate connection with max 1 connection\n  const migrationClient = postgres(process.env.DATABASE_URL, { max: 1 });\n  const db = drizzle(migrationClient);\n\n  try {\n    // This will run migrations from the specified directory\n    await migrate(db, { migrationsFolder: 'drizzle' });\n    console.log('Migration completed successfully');\n  } catch (error) {\n    console.error('Migration failed:', error);\n    process.exit(1);\n  } finally {\n    // Close the connection\n    await migrationClient.end();\n  }\n}\n\n// Run the migration\nrunMigration();\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\lib\\db\\property-processor.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 18,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 18,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [572, 575], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [572, 575], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 58,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 58,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1668, 1730], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 65,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 65,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1873, 1941], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 84,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 84,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2475, 2554], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 98,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 98,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2809, 2890], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 126,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 126,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [3777, 3895], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 148,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 148,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [4610, 4742], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 208,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 208,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [6507, 6563], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 212,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 212,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [6583, 6662], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 237,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 237,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [7436, 7547], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 247,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 247,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [7728, 7800], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 10,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import dotenv from 'dotenv';\nimport { eq, and, isNull } from 'drizzle-orm';\n\nimport { generateEmbedding, generateEmbeddingBatch } from '../embedding';\n\nimport { db, schema } from './index';\n\n// Load environment variables\ndotenv.config();\n\n// Get embedding provider from environment variables\nconst embeddingProvider = (process.env.EMBEDDING_PROVIDER as 'openai' | 'lmstudio') || 'lmstudio';\nconst embeddingModel = process.env.LLM_MODEL || 'bge-base-en';\n\n/**\n * Generate a text representation of a property for embedding\n */\nexport function generatePropertyText(property: any): string {\n  const parts = [\n    property.address,\n    `${property.bedrooms || ''} bedroom`,\n    property.type || '',\n    `£${property.price || ''}`,\n  ];\n\n  return parts.filter(Boolean).join(', ');\n}\n\n/**\n * Process a single property to generate and store its embedding\n */\nexport async function processPropertyEmbedding(propertyId: string): Promise<void> {\n  // Get the property from the database\n  const properties = await db\n    .select()\n    .from(schema.property)\n    .where(eq(schema.property.id, propertyId));\n\n  if (properties.length === 0) {\n    throw new Error(`Property not found: ${propertyId}`);\n  }\n\n  const property = properties[0];\n\n  // Generate text representation\n  const text = generatePropertyText(property);\n\n  // Generate embedding\n  const embedding = await generateEmbedding(text, {\n    provider: embeddingProvider,\n    model: embeddingModel,\n  });\n\n  // Update property with embedding\n  // The vector column will be updated automatically by the trigger if it exists\n  await db.update(schema.property).set({ embedding }).where(eq(schema.property.id, propertyId));\n\n  console.log(`Generated embedding for property ${propertyId}`);\n}\n\n/**\n * Process all properties for a specific upload\n */\nexport async function processUploadEmbeddings(uploadId: string): Promise<void> {\n  console.log(`Starting embedding generation for upload ${uploadId}`);\n\n  try {\n    // First, update the upload status to processing\n    await db\n      .update(schema.uploads)\n      .set({\n        status: 'processing_embeddings',\n        updatedAt: new Date(),\n      })\n      .where(eq(schema.uploads.id, uploadId));\n\n    // Get all properties for this upload that don't have embeddings yet\n    const properties = await db\n      .select()\n      .from(schema.property)\n      .where(and(eq(schema.property.uploadId, uploadId), isNull(schema.property.embedding)));\n\n    if (properties.length === 0) {\n      console.log(`No properties found for upload ${uploadId} that need embeddings`);\n\n      // Update upload status to complete\n      await db\n        .update(schema.uploads)\n        .set({\n          status: 'complete',\n          updatedAt: new Date(),\n        })\n        .where(eq(schema.uploads.id, uploadId));\n\n      return;\n    }\n\n    console.log(`Processing ${properties.length} properties for upload ${uploadId}`);\n\n    // Process in batches to avoid potential memory issues with large uploads\n    const batchSize = 100;\n    let processedCount = 0;\n\n    for (let i = 0; i < properties.length; i += batchSize) {\n      const batch = properties.slice(i, i + batchSize);\n\n      try {\n        // Generate text representations for this batch\n        const texts = batch.map(generatePropertyText);\n\n        // Generate embeddings in batch\n        const embeddings = await generateEmbeddingBatch(texts, {\n          provider: embeddingProvider,\n          model: embeddingModel,\n        });\n\n        // Update each property with its embedding\n        for (let j = 0; j < batch.length; j++) {\n          await db\n            .update(schema.property)\n            .set({ embedding: embeddings[j] })\n            .where(eq(schema.property.id, batch[j].id));\n        }\n\n        processedCount += batch.length;\n        console.log(\n          `Processed ${processedCount}/${properties.length} embeddings for upload ${uploadId}`\n        );\n      } catch (batchError) {\n        console.error(`Error processing batch for upload ${uploadId}:`, {\n          error: batchError instanceof Error ? batchError.message : 'Unknown error',\n          stack: batchError instanceof Error ? batchError.stack : undefined,\n          batchSize: batch.length,\n          batchStart: i,\n          uploadId,\n        });\n\n        // Continue with the next batch instead of failing the entire process\n        // This way we can still process as many properties as possible\n      }\n\n      // Add a small delay between batches to avoid rate limits\n      if (i + batchSize < properties.length) {\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n\n    console.log(\n      `Completed embedding generation for upload ${uploadId}: ${processedCount}/${properties.length} successful`\n    );\n\n    // Update upload status based on success rate\n    const status = processedCount === properties.length ? 'complete' : 'partial_embeddings';\n\n    await db\n      .update(schema.uploads)\n      .set({\n        status,\n        updatedAt: new Date(),\n        processingStats: JSON.stringify({\n          total: properties.length,\n          processed: processedCount,\n          failed: properties.length - processedCount,\n          completedAt: new Date().toISOString(),\n        }),\n      })\n      .where(eq(schema.uploads.id, uploadId));\n  } catch (error) {\n    console.error(`Failed to process embeddings for upload ${uploadId}:`, {\n      error: error instanceof Error ? error.message : 'Unknown error',\n      stack: error instanceof Error ? error.stack : undefined,\n      uploadId,\n    });\n\n    // Update upload status to failed\n    try {\n      await db\n        .update(schema.uploads)\n        .set({\n          status: 'embedding_failed',\n          updatedAt: new Date(),\n          processingStats: JSON.stringify({\n            error: error instanceof Error ? error.message : 'Unknown error',\n            failedAt: new Date().toISOString(),\n          }),\n        })\n        .where(eq(schema.uploads.id, uploadId));\n    } catch (updateError) {\n      console.error(`Failed to update status for upload ${uploadId}:`, updateError);\n    }\n\n    // Re-throw the error so the caller can handle it\n    throw error;\n  }\n}\n\n/**\n * Process all properties in the database that don't have embeddings\n */\nexport async function processAllMissingEmbeddings(): Promise<void> {\n  // Get all properties that don't have embeddings\n  const properties = await db\n    .select()\n    .from(schema.property)\n    .where(isNull(schema.property.embedding));\n\n  if (properties.length === 0) {\n    console.log('No properties found that need embeddings');\n    return;\n  }\n\n  console.log(`Processing ${properties.length} properties that need embeddings`);\n\n  // Process in batches of 50\n  const batchSize = 50;\n  for (let i = 0; i < properties.length; i += batchSize) {\n    const batch = properties.slice(i, i + batchSize);\n\n    // Generate text representations for this batch\n    const texts = batch.map(generatePropertyText);\n\n    // Generate embeddings in batch\n    const embeddings = await generateEmbeddingBatch(texts, {\n      provider: embeddingProvider,\n      model: embeddingModel,\n    });\n\n    // Update each property with its embedding\n    // The vector column will be updated automatically by the trigger if it exists\n    for (let j = 0; j < batch.length; j++) {\n      await db\n        .update(schema.property)\n        .set({ embedding: embeddings[j] })\n        .where(eq(schema.property.id, batch[j].id));\n    }\n\n    console.log(\n      `Processed batch ${i / batchSize + 1} of ${Math.ceil(properties.length / batchSize)}`\n    );\n\n    // Add a delay between batches to avoid rate limits\n    if (i + batchSize < properties.length) {\n      await new Promise((resolve) => setTimeout(resolve, 2000));\n    }\n  }\n\n  console.log(`Generated embeddings for ${properties.length} properties`);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\lib\\db\\queries.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'and' is defined but never used.",
        "line": 1,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'uuidv4' is defined but never used.",
        "line": 2,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 22
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { eq, and, desc, sql } from 'drizzle-orm';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { db, schema } from './index';\n\n// Types based on our schema\nexport type UploadRecord = typeof schema.uploadRecord.$inferSelect;\nexport type NewUploadRecord = typeof schema.uploadRecord.$inferInsert;\n\nexport type Property = typeof schema.property.$inferSelect;\nexport type NewProperty = typeof schema.property.$inferInsert;\n\n// Upload Record Queries\nexport async function createUploadRecord(data: NewUploadRecord): Promise<UploadRecord> {\n  const result = await db.insert(schema.uploadRecord).values(data).returning();\n\n  return result[0];\n}\n\nexport async function getUploadRecordById(id: string): Promise<UploadRecord | undefined> {\n  const results = await db.select().from(schema.uploadRecord).where(eq(schema.uploadRecord.id, id));\n\n  return results[0];\n}\n\nexport async function getUploadRecordsByUploader(uploaderId: string): Promise<UploadRecord[]> {\n  return db\n    .select()\n    .from(schema.uploadRecord)\n    .where(eq(schema.uploadRecord.uploaderId, uploaderId))\n    .orderBy(desc(schema.uploadRecord.createdAt));\n}\n\nexport async function updateUploadRecordStatus(\n  id: string,\n  status: string\n): Promise<UploadRecord | undefined> {\n  const results = await db\n    .update(schema.uploadRecord)\n    .set({ status })\n    .where(eq(schema.uploadRecord.id, id))\n    .returning();\n\n  return results[0];\n}\n\n// Property Queries\nexport async function createProperty(data: NewProperty): Promise<Property> {\n  const result = await db.insert(schema.property).values(data).returning();\n\n  return result[0];\n}\n\nexport async function getPropertyById(id: string): Promise<Property | undefined> {\n  const results = await db.select().from(schema.property).where(eq(schema.property.id, id));\n\n  return results[0];\n}\n\nexport async function getPropertiesByUploadId(uploadId: string): Promise<Property[]> {\n  return db.select().from(schema.property).where(eq(schema.property.uploadId, uploadId));\n}\n\nexport async function updateProperty(\n  id: string,\n  data: Partial<NewProperty>\n): Promise<Property | undefined> {\n  const results = await db\n    .update(schema.property)\n    .set(data)\n    .where(eq(schema.property.id, id))\n    .returning();\n\n  return results[0];\n}\n\nexport async function deleteProperty(id: string): Promise<void> {\n  await db.delete(schema.property).where(eq(schema.property.id, id));\n}\n\n// Count properties by upload ID\nexport async function countPropertiesByUploadId(uploadId: string): Promise<number> {\n  const result = await db\n    .select({ count: sql<number>`count(*)` })\n    .from(schema.property)\n    .where(eq(schema.property.uploadId, uploadId));\n\n  return result[0].count;\n}\n\n// Vector search for properties (if you have embeddings)\nexport async function searchPropertiesByEmbedding(\n  embedding: number[],\n  limit: number = 10\n): Promise<Property[]> {\n  // This uses PostgreSQL's vector operations to find similar properties\n  // Note: This requires the pgvector extension to be installed in your database\n  return db\n    .select()\n    .from(schema.property)\n    .where(sql`embedding is not null`)\n    .orderBy(sql`embedding <-> ${JSON.stringify(embedding)}::jsonb`)\n    .limit(limit);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\lib\\db\\utils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\lib\\embedding.ts",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'openai'.",
        "line": 3,
        "column": 20,
        "nodeType": "Literal",
        "endLine": 3,
        "endColumn": 28
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'encoding_format' is not in camel case.",
        "line": 77,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 77,
        "endColumn": 20
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import axios from 'axios';\nimport dotenv from 'dotenv';\nimport OpenAI from 'openai';\n\n// Load environment variables\ndotenv.config();\n\n// Define embedding model options\nexport type EmbeddingProvider = 'openai' | 'lmstudio';\n\n// Interface for embedding options\ninterface EmbeddingOptions {\n  provider?: EmbeddingProvider;\n  model?: string;\n  apiKey?: string;\n  apiUrl?: string;\n}\n\n// Default options\nconst defaultOptions: EmbeddingOptions = {\n  provider: 'openai',\n  model: 'text-embedding-3-small',\n  apiKey: process.env.OPENAI_API_KEY,\n  apiUrl: process.env.LLM_API_URL || 'http://localhost:11434/api/embeddings',\n};\n\n/**\n * Generate embeddings for a text using either OpenAI or LM Studio\n * @param text The text to generate embeddings for\n * @param options Configuration options\n * @returns An array of numbers representing the embedding vector\n */\nexport async function generateEmbedding(\n  text: string,\n  options: EmbeddingOptions = {}\n): Promise<number[]> {\n  // Merge default options with provided options\n  const config = { ...defaultOptions, ...options };\n\n  // Validate input\n  if (!text || text.trim() === '') {\n    throw new Error('Text cannot be empty');\n  }\n\n  try {\n    // Use OpenAI API\n    if (config.provider === 'openai') {\n      return await generateOpenAIEmbedding(text, config);\n    }\n    // Use LM Studio API\n    else if (config.provider === 'lmstudio') {\n      return await generateLMStudioEmbedding(text, config);\n    } else {\n      throw new Error(`Unsupported provider: ${config.provider}`);\n    }\n  } catch (error) {\n    console.error('Error generating embedding:', error);\n    throw error;\n  }\n}\n\n/**\n * Generate embeddings using OpenAI API\n */\nasync function generateOpenAIEmbedding(text: string, options: EmbeddingOptions): Promise<number[]> {\n  if (!options.apiKey) {\n    throw new Error('OpenAI API key is required');\n  }\n\n  const openai = new OpenAI({\n    apiKey: options.apiKey,\n  });\n\n  const response = await openai.embeddings.create({\n    model: options.model || 'text-embedding-3-small',\n    input: text,\n    encoding_format: 'float',\n  });\n\n  return response.data[0].embedding;\n}\n\n/**\n * Generate embeddings using LM Studio API\n */\nasync function generateLMStudioEmbedding(\n  text: string,\n  options: EmbeddingOptions\n): Promise<number[]> {\n  if (!options.apiUrl) {\n    throw new Error('LM Studio API URL is required');\n  }\n\n  const response = await axios.post(\n    options.apiUrl,\n    {\n      model: options.model || 'bge-base-en',\n      prompt: text,\n    },\n    {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n\n  if (response.data && response.data.embedding) {\n    return response.data.embedding;\n  } else {\n    throw new Error('Invalid response from LM Studio API');\n  }\n}\n\n/**\n * Generate embeddings for multiple texts in batch\n * @param texts Array of texts to generate embeddings for\n * @param options Configuration options\n * @returns Array of embedding vectors\n */\nexport async function generateEmbeddingBatch(\n  texts: string[],\n  options: EmbeddingOptions = {}\n): Promise<number[][]> {\n  // Process in batches to avoid rate limits\n  const batchSize = 20;\n  const results: number[][] = [];\n\n  for (let i = 0; i < texts.length; i += batchSize) {\n    const batch = texts.slice(i, i + batchSize);\n    const promises = batch.map((text) => generateEmbedding(text, options));\n    const batchResults = await Promise.all(promises);\n    results.push(...batchResults);\n\n    // Add a small delay between batches to avoid rate limits\n    if (i + batchSize < texts.length) {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n    }\n  }\n\n  return results;\n}\n\n/**\n * Calculate cosine similarity between two vectors\n * @param a First vector\n * @param b Second vector\n * @returns Similarity score between -1 and 1\n */\nexport function cosineSimilarity(a: number[], b: number[]): number {\n  if (a.length !== b.length) {\n    throw new Error('Vectors must have the same length');\n  }\n\n  let dotProduct = 0;\n  let normA = 0;\n  let normB = 0;\n\n  for (let i = 0; i < a.length; i++) {\n    dotProduct += a[i] * b[i];\n    normA += a[i] * a[i];\n    normB += b[i] * b[i];\n  }\n\n  if (normA === 0 || normB === 0) {\n    return 0;\n  }\n\n  return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\lib\\logging\\logger.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 24,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 24,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [602, 605], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [602, 605], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 215,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 215,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5743, 5746], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5743, 5746], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 244,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 244,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [6356, 6407], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 247,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 247,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [6451, 6501], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 294,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 294,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7685, 7688], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7685, 7688], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 334,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 334,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8679, 8682], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8679, 8682], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 365,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 365,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9579, 9582], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9579, 9582], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 375,
        "column": 64,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 375,
        "endColumn": 67,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9857, 9860], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9857, 9860], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 385,
        "column": 64,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 385,
        "endColumn": 67,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10136, 10139], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10136, 10139], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 399,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 399,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10466, 10469], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10466, 10469], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 415,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 415,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10812, 10815], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10812, 10815], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// lib/logging/logger.ts\n/**\n * Structured logging utility for the application\n *\n * This module provides a consistent interface for logging across the application.\n * It supports different log levels, structured metadata, and can be configured\n * to send logs to external services like Sentry or LogRocket.\n */\n\n// Log levels in order of severity\nexport enum LogLevel {\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n  FATAL = 'fatal',\n}\n\n// Log entry interface\nexport interface LogEntry {\n  level: LogLevel;\n  message: string;\n  timestamp: string;\n  context?: Record<string, any>;\n  tags?: string[];\n  error?: Error;\n}\n\n// Logger configuration interface\nexport interface LoggerConfig {\n  minLevel: LogLevel;\n  enableConsole: boolean;\n  sentryDsn?: string;\n  logRocketAppId?: string;\n  environment: 'development' | 'test' | 'production';\n  release?: string;\n  userId?: string;\n  userEmail?: string;\n}\n\n// Default configuration\nconst defaultConfig: LoggerConfig = {\n  minLevel: LogLevel.DEBUG,\n  enableConsole: true,\n  environment: (process.env.NODE_ENV as 'development' | 'test' | 'production') || 'development',\n  release: process.env.NEXT_PUBLIC_APP_VERSION,\n};\n\n// Global logger configuration\nlet loggerConfig: LoggerConfig = { ...defaultConfig };\n\n// External logging services\nlet sentryInitialized = false;\nlet logRocketInitialized = false;\n\n/**\n * Initialize Sentry for error tracking\n * This is done lazily to avoid importing Sentry in environments where it's not needed\n */\nasync function initSentry(dsn: string, config: LoggerConfig) {\n  if (sentryInitialized) return;\n\n  try {\n    // Dynamically import Sentry to avoid bundling it unnecessarily\n    const Sentry = await import('@sentry/nextjs');\n\n    Sentry.init({\n      dsn,\n      environment: config.environment,\n      release: config.release,\n      tracesSampleRate: config.environment === 'production' ? 0.2 : 1.0,\n      // Only send errors and above to Sentry\n      beforeSend(event) {\n        if (event.level && ['error', 'fatal'].includes(event.level)) {\n          return event;\n        }\n        return null;\n      },\n    });\n\n    // Set user information if available\n    if (config.userId || config.userEmail) {\n      Sentry.setUser({\n        id: config.userId,\n        email: config.userEmail,\n      });\n    }\n\n    sentryInitialized = true;\n\n    return Sentry;\n  } catch (error) {\n    console.error('Failed to initialize Sentry:', error);\n    return null;\n  }\n}\n\n/**\n * Initialize LogRocket for session replay\n * This is done lazily to avoid importing LogRocket in environments where it's not needed\n */\nasync function initLogRocket(appId: string, config: LoggerConfig) {\n  if (logRocketInitialized) return;\n\n  try {\n    // Dynamically import LogRocket to avoid bundling it unnecessarily\n    const LogRocket = (await import('logrocket')).default;\n\n    LogRocket.init(appId, {\n      release: config.release,\n      console: {\n        isEnabled: true,\n        methods: ['error', 'warn'],\n      },\n      network: {\n        isEnabled: true,\n        requestSanitizer: (request) => {\n          // Don't log request bodies for sensitive endpoints\n          if (request.url.includes('/api/auth') || request.url.includes('/api/user')) {\n            request.body = null;\n          }\n          return request;\n        },\n        responseSanitizer: (response) => {\n          // Don't log response bodies for sensitive endpoints\n          if (response.url.includes('/api/auth') || response.url.includes('/api/user')) {\n            response.body = null;\n          }\n          return response;\n        },\n      },\n    });\n\n    // Set user information if available\n    if (config.userId || config.userEmail) {\n      LogRocket.identify(config.userId || 'anonymous', {\n        email: config.userEmail,\n      });\n    }\n\n    // Connect LogRocket with Sentry if both are enabled\n    if (sentryInitialized) {\n      const Sentry = await import('@sentry/nextjs');\n      LogRocket.getSessionURL((sessionURL) => {\n        Sentry.configureScope((scope) => {\n          scope.setExtra('logRocketSessionURL', sessionURL);\n        });\n      });\n    }\n\n    logRocketInitialized = true;\n\n    return LogRocket;\n  } catch (error) {\n    console.error('Failed to initialize LogRocket:', error);\n    return null;\n  }\n}\n\n/**\n * Configure the logger\n * @param config Logger configuration\n */\nexport function configureLogger(config: Partial<LoggerConfig>) {\n  loggerConfig = { ...loggerConfig, ...config };\n\n  // Initialize external logging services if configured\n  if (loggerConfig.sentryDsn && typeof window !== 'undefined') {\n    initSentry(loggerConfig.sentryDsn, loggerConfig);\n  }\n\n  if (loggerConfig.logRocketAppId && typeof window !== 'undefined') {\n    initLogRocket(loggerConfig.logRocketAppId, loggerConfig);\n  }\n}\n\n/**\n * Set user information for logging\n * @param userId User ID\n * @param userEmail User email\n */\nexport async function setLogUser(userId?: string, userEmail?: string) {\n  loggerConfig.userId = userId;\n  loggerConfig.userEmail = userEmail;\n\n  // Update user information in external services\n  if (sentryInitialized) {\n    const Sentry = await import('@sentry/nextjs');\n    Sentry.setUser({\n      id: userId,\n      email: userEmail,\n    });\n  }\n\n  if (logRocketInitialized && typeof window !== 'undefined') {\n    const LogRocket = (await import('logrocket')).default;\n    LogRocket.identify(userId || 'anonymous', {\n      email: userEmail,\n    });\n  }\n}\n\n/**\n * Create a log entry\n * @param level Log level\n * @param message Log message\n * @param context Additional context\n * @param tags Tags for categorizing logs\n * @param error Error object\n * @returns Log entry\n */\nfunction createLogEntry(\n  level: LogLevel,\n  message: string,\n  context?: Record<string, any>,\n  tags?: string[],\n  error?: Error\n): LogEntry {\n  return {\n    level,\n    message,\n    timestamp: new Date().toISOString(),\n    context,\n    tags,\n    error,\n  };\n}\n\n/**\n * Log to the console with appropriate formatting\n * @param entry Log entry\n */\nfunction logToConsole(entry: LogEntry) {\n  if (!loggerConfig.enableConsole) return;\n\n  const { level, message, timestamp, context, tags, error } = entry;\n\n  // Format the log message\n  const formattedMessage = `[${timestamp}] [${level.toUpperCase()}] ${message}`;\n\n  // Log with appropriate console method\n  switch (level) {\n    case LogLevel.DEBUG:\n      console.debug(formattedMessage, { context, tags });\n      break;\n    case LogLevel.INFO:\n      console.info(formattedMessage, { context, tags });\n      break;\n    case LogLevel.WARN:\n      console.warn(formattedMessage, { context, tags });\n      break;\n    case LogLevel.ERROR:\n    case LogLevel.FATAL:\n      console.error(formattedMessage, { context, tags, error });\n      break;\n  }\n}\n\n/**\n * Send log to external services\n * @param entry Log entry\n */\nasync function logToExternalServices(entry: LogEntry) {\n  const { level, message, context, tags, error } = entry;\n\n  // Send to Sentry if configured and level is ERROR or FATAL\n  if (\n    loggerConfig.sentryDsn &&\n    sentryInitialized &&\n    (level === LogLevel.ERROR || level === LogLevel.FATAL)\n  ) {\n    try {\n      const Sentry = await import('@sentry/nextjs');\n\n      // Set extra context\n      Sentry.configureScope((scope) => {\n        if (context) {\n          Object.entries(context).forEach(([key, value]) => {\n            scope.setExtra(key, value);\n          });\n        }\n\n        if (tags) {\n          tags.forEach((tag) => {\n            scope.setTag(tag, 'true');\n          });\n        }\n      });\n\n      // Capture the error or message\n      if (error) {\n        Sentry.captureException(error);\n      } else {\n        Sentry.captureMessage(message, level as any);\n      }\n    } catch (err) {\n      console.error('Failed to log to Sentry:', err);\n    }\n  }\n\n  // Send to LogRocket if configured\n  if (loggerConfig.logRocketAppId && logRocketInitialized) {\n    try {\n      const LogRocket = (await import('logrocket')).default;\n\n      // Log the message\n      if (level === LogLevel.ERROR || level === LogLevel.FATAL) {\n        LogRocket.captureException(error || new Error(message), {\n          tags,\n          extra: context,\n        });\n      } else if (level === LogLevel.WARN) {\n        LogRocket.warn(message, context);\n      } else {\n        LogRocket.log(message, context);\n      }\n    } catch (err) {\n      console.error('Failed to log to LogRocket:', err);\n    }\n  }\n}\n\n/**\n * Log a message\n * @param level Log level\n * @param message Log message\n * @param context Additional context\n * @param tags Tags for categorizing logs\n * @param error Error object\n */\nasync function log(\n  level: LogLevel,\n  message: string,\n  context?: Record<string, any>,\n  tags?: string[],\n  error?: Error\n) {\n  // Skip if below minimum log level\n  if (\n    (level === LogLevel.DEBUG && loggerConfig.minLevel !== LogLevel.DEBUG) ||\n    (level === LogLevel.INFO &&\n      [LogLevel.WARN, LogLevel.ERROR, LogLevel.FATAL].includes(loggerConfig.minLevel)) ||\n    (level === LogLevel.WARN && [LogLevel.ERROR, LogLevel.FATAL].includes(loggerConfig.minLevel)) ||\n    (level === LogLevel.ERROR && loggerConfig.minLevel === LogLevel.FATAL)\n  ) {\n    return;\n  }\n\n  // Create log entry\n  const entry = createLogEntry(level, message, context, tags, error);\n\n  // Log to console\n  logToConsole(entry);\n\n  // Log to external services\n  await logToExternalServices(entry);\n}\n\n/**\n * Log a debug message\n * @param message Log message\n * @param context Additional context\n * @param tags Tags for categorizing logs\n */\nexport function debug(message: string, context?: Record<string, any>, tags?: string[]) {\n  log(LogLevel.DEBUG, message, context, tags);\n}\n\n/**\n * Log an info message\n * @param message Log message\n * @param context Additional context\n * @param tags Tags for categorizing logs\n */\nexport function info(message: string, context?: Record<string, any>, tags?: string[]) {\n  log(LogLevel.INFO, message, context, tags);\n}\n\n/**\n * Log a warning message\n * @param message Log message\n * @param context Additional context\n * @param tags Tags for categorizing logs\n */\nexport function warn(message: string, context?: Record<string, any>, tags?: string[]) {\n  log(LogLevel.WARN, message, context, tags);\n}\n\n/**\n * Log an error message\n * @param message Log message\n * @param error Error object\n * @param context Additional context\n * @param tags Tags for categorizing logs\n */\nexport function error(\n  message: string,\n  error?: Error,\n  context?: Record<string, any>,\n  tags?: string[]\n) {\n  log(LogLevel.ERROR, message, context, tags, error);\n}\n\n/**\n * Log a fatal error message\n * @param message Log message\n * @param error Error object\n * @param context Additional context\n * @param tags Tags for categorizing logs\n */\nexport function fatal(\n  message: string,\n  error?: Error,\n  context?: Record<string, any>,\n  tags?: string[]\n) {\n  log(LogLevel.FATAL, message, context, tags, error);\n}\n\n// Export a default logger object\nconst logger = {\n  debug,\n  info,\n  warn,\n  error,\n  fatal,\n  configureLogger,\n  setLogUser,\n};\n\nexport default logger;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\db\\src\\index.js",
    "messages": [
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'node_postgres_1' is not in camel case.",
        "line": 56,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 56,
        "endColumn": 22
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'pg_1' is not in camel case.",
        "line": 57,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 57,
        "endColumn": 11
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'pg_1' is not in camel case.",
        "line": 64,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 64,
        "endColumn": 22
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'node_postgres_1' is not in camel case.",
        "line": 69,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 69,
        "endColumn": 33
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use strict';\nvar __createBinding =\n  (this && this.__createBinding) ||\n  (Object.create\n    ? function (o, m, k, k2) {\n        if (k2 === undefined) k2 = k;\n        var desc = Object.getOwnPropertyDescriptor(m, k);\n        if (!desc || ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n          desc = {\n            enumerable: true,\n            get: function () {\n              return m[k];\n            },\n          };\n        }\n        Object.defineProperty(o, k2, desc);\n      }\n    : function (o, m, k, k2) {\n        if (k2 === undefined) k2 = k;\n        o[k2] = m[k];\n      });\nvar __setModuleDefault =\n  (this && this.__setModuleDefault) ||\n  (Object.create\n    ? function (o, v) {\n        Object.defineProperty(o, 'default', { enumerable: true, value: v });\n      }\n    : function (o, v) {\n        o['default'] = v;\n      });\nvar __importStar =\n  (this && this.__importStar) ||\n  (function () {\n    var ownKeys = function (o) {\n      ownKeys =\n        Object.getOwnPropertyNames ||\n        function (o) {\n          var ar = [];\n          for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n          return ar;\n        };\n      return ownKeys(o);\n    };\n    return function (mod) {\n      if (mod && mod.__esModule) return mod;\n      var result = {};\n      if (mod != null)\n        for (var k = ownKeys(mod), i = 0; i < k.length; i++)\n          if (k[i] !== 'default') __createBinding(result, mod, k[i]);\n      __setModuleDefault(result, mod);\n      return result;\n    };\n  })();\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.schema = exports.pool = exports.db = void 0;\nconst node_postgres_1 = require('drizzle-orm/node-postgres');\nconst pg_1 = require('pg');\nconst schema = __importStar(require('./schema')); // Import the schema\nexports.schema = schema;\nconst databaseUrl = process.env.DATABASE_URL;\nif (!databaseUrl) {\n  throw new Error('DATABASE_URL environment variable is not set.');\n}\nconst pool = new pg_1.Pool({\n  connectionString: databaseUrl,\n});\nexports.pool = pool;\n// Initialize Drizzle client WITH the schema\nexports.db = (0, node_postgres_1.drizzle)(pool, { schema }); // Pass schema here\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\db\\src\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\db\\src\\schema.js",
    "messages": [
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'pg_core_1' is not in camel case.",
        "line": 4,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 4,
        "endColumn": 16
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'pg_core_1' is not in camel case.",
        "line": 5,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 5,
        "endColumn": 30
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'pg_core_1' is not in camel case.",
        "line": 6,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 6,
        "endColumn": 20
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'pg_core_1' is not in camel case.",
        "line": 7,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 7,
        "endColumn": 26
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'pg_core_1' is not in camel case.",
        "line": 8,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 8,
        "endColumn": 23
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'pg_core_1' is not in camel case.",
        "line": 11,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 11,
        "endColumn": 30
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'pg_core_1' is not in camel case.",
        "line": 12,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 12,
        "endColumn": 20
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'pg_core_1' is not in camel case.",
        "line": 13,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 13,
        "endColumn": 23
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'pg_core_1' is not in camel case.",
        "line": 14,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 14,
        "endColumn": 25
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'pg_core_1' is not in camel case.",
        "line": 15,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 15,
        "endColumn": 26
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'pg_core_1' is not in camel case.",
        "line": 16,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 16,
        "endColumn": 27
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'pg_core_1' is not in camel case.",
        "line": 17,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 17,
        "endColumn": 27
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'pg_core_1' is not in camel case.",
        "line": 19,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 19,
        "endColumn": 34
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'pg_core_1' is not in camel case.",
        "line": 20,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 20,
        "endColumn": 20
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'pg_core_1' is not in camel case.",
        "line": 21,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 21,
        "endColumn": 23
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'pg_core_1' is not in camel case.",
        "line": 22,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 22,
        "endColumn": 24
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'pg_core_1' is not in camel case.",
        "line": 25,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 25,
        "endColumn": 27
      },
      {
        "ruleId": "camelcase",
        "severity": 2,
        "message": "Identifier 'pg_core_1' is not in camel case.",
        "line": 26,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "notCamelCase",
        "endLine": 26,
        "endColumn": 27
      }
    ],
    "suppressedMessages": [],
    "errorCount": 18,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.apiTokens = exports.posts = exports.users = void 0;\nconst pg_core_1 = require('drizzle-orm/pg-core');\nexports.users = (0, pg_core_1.pgTable)('users', {\n  id: (0, pg_core_1.serial)('id').primaryKey(),\n  fullName: (0, pg_core_1.text)('full_name'),\n  email: (0, pg_core_1.varchar)('email', { length: 256 }).unique(),\n  // ... other user fields\n});\nexports.posts = (0, pg_core_1.pgTable)('posts', {\n  id: (0, pg_core_1.serial)('id').primaryKey(),\n  title: (0, pg_core_1.varchar)('title', { length: 256 }).notNull(),\n  content: (0, pg_core_1.text)('content'),\n  authorId: (0, pg_core_1.integer)('author_id').references(() => exports.users.id),\n  createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow().notNull(),\n  updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow().notNull(),\n});\nexports.apiTokens = (0, pg_core_1.pgTable)('api_tokens', {\n  id: (0, pg_core_1.serial)('id').primaryKey(),\n  token: (0, pg_core_1.varchar)('token', { length: 256 }).unique().notNull(),\n  userId: (0, pg_core_1.integer)('user_id')\n    .notNull()\n    .references(() => exports.users.id),\n  expiresAt: (0, pg_core_1.timestamp)('expires_at'),\n  createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow().notNull(),\n});\n// Add all other tables here\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\db\\src\\schema.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\.storybook\\main.ts",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\.storybook\\main.ts was not found by the project service. Consider either including it in the tsconfig.json or including it in allowDefaultProject.",
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import type { StorybookConfig } from '@storybook/react-vite';\n\nimport { join, dirname } from 'path';\n\n/**\n * This function is used to resolve the absolute path of a package.\n * It is needed in projects that use Yarn PnP or are set up within a monorepo.\n */\nfunction getAbsolutePath(value: string): any {\n  return dirname(require.resolve(join(value, 'package.json')));\n}\nconst config: StorybookConfig = {\n  stories: ['../stories/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: [\n    getAbsolutePath('@storybook/addon-essentials'),\n    getAbsolutePath('@storybook/addon-onboarding'),\n    getAbsolutePath('@storybook/addon-interactions'),\n  ],\n  framework: {\n    name: getAbsolutePath('@storybook/react-vite'),\n    options: {},\n  },\n};\nexport default config;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\.storybook\\preview.ts",
    "messages": [
      {
        "ruleId": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\.storybook\\preview.ts was not found by the project service. Consider either including it in the tsconfig.json or including it in allowDefaultProject.",
        "nodeType": null
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import type { Preview } from '@storybook/react';\n\nconst preview: Preview = {\n  parameters: {\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n};\n\nexport default preview;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\components\\Button.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\components\\Button.stories.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\components\\Button.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\components\\Button.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\index.ts",
    "messages": [
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'ButtonProps'.",
        "line": 8,
        "column": 1,
        "nodeType": "ExportAllDeclaration",
        "endLine": 8,
        "endColumn": 37
      },
      {
        "ruleId": "import/export",
        "severity": 2,
        "message": "Multiple exports of name 'ButtonProps'.",
        "line": 11,
        "column": 15,
        "nodeType": "Identifier",
        "endLine": 11,
        "endColumn": 26
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * UI Component Library\n *\n * This file exports all UI components for use in the application.\n */\n\n// Export all components\nexport * from './components/Button';\n\n// Export component types\nexport type { ButtonProps } from './components/Button';\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\postcss.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\src\\components\\Button\\Button.stories.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ButtonProps' is defined but never used.",
        "line": 3,
        "column": 18,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import type { Meta, StoryObj } from '@storybook/react';\n\nimport { Button, ButtonProps } from './Button'; // Import the component and its props\n\n// More on how to set up stories at: https://storybook.js.org/docs/react/writing-stories/introduction#default-export\nconst meta: Meta<typeof Button> = {\n  title: 'UI/Button', // Folder structure in Storybook UI\n  component: Button,\n  parameters: {\n    // Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/react/configure/story-layout\n    layout: 'centered',\n  },\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/react/writing-docs/autodocs\n  tags: ['autodocs'],\n  // More on argTypes: https://storybook.js.org/docs/react/api/argtypes\n  argTypes: {\n    variant: {\n      control: 'select',\n      options: ['primary', 'secondary', 'destructive'],\n    },\n    size: {\n      control: 'select',\n      options: ['small', 'medium', 'large'],\n    },\n    isLoading: { control: 'boolean' },\n    disabled: { control: 'boolean' },\n    children: { control: 'text' },\n    onClick: { action: 'clicked' }, // Log clicks in Storybook actions panel\n  },\n  args: {\n    // Default args for all stories\n    variant: 'primary',\n    size: 'medium',\n    isLoading: false,\n    disabled: false,\n    children: 'Button Text',\n  },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// More on writing stories with args: https://storybook.js.org/docs/react/writing-stories/args\nexport const Primary: Story = {\n  args: {\n    variant: 'primary',\n    children: 'Primary Button',\n  },\n};\n\nexport const Secondary: Story = {\n  args: {\n    variant: 'secondary',\n    children: 'Secondary Button',\n  },\n};\n\nexport const Destructive: Story = {\n  args: {\n    variant: 'destructive',\n    children: 'Delete Action',\n  },\n};\n\nexport const Large: Story = {\n  args: {\n    size: 'large',\n    children: 'Large Button',\n  },\n};\n\nexport const Small: Story = {\n  args: {\n    size: 'small',\n    children: 'Small Button',\n  },\n};\n\nexport const IsLoading: Story = {\n  args: {\n    isLoading: true,\n    children: 'Loading...', // Children might be ignored by the component when isLoading\n  },\n};\n\nexport const Disabled: Story = {\n  args: {\n    disabled: true,\n    children: 'Disabled Button',\n  },\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\src\\components\\Button\\Button.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\src\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\stories\\Button.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\stories\\Button.stories.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\stories\\Button.stories.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\stories\\Button.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\stories\\ButtonComponent.stories.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\stories\\ButtonComponent.stories.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\stories\\Header.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\stories\\Header.stories.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\stories\\Header.stories.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\stories\\Header.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\stories\\Page.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\stories\\Page.stories.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\stories\\Page.stories.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\stories\\Page.tsx",
    "messages": [
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 39,
        "column": 13,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": {
              "range": [1096, 1252],
              "text": "\n            Use a higher-level connected component. Storybook helps you compose such data from the\n            &quot;args\" of child component stories\n          "
            },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": {
              "range": [1096, 1252],
              "text": "\n            Use a higher-level connected component. Storybook helps you compose such data from the\n            &ldquo;args\" of child component stories\n          "
            },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": {
              "range": [1096, 1252],
              "text": "\n            Use a higher-level connected component. Storybook helps you compose such data from the\n            &#34;args\" of child component stories\n          "
            },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": {
              "range": [1096, 1252],
              "text": "\n            Use a higher-level connected component. Storybook helps you compose such data from the\n            &rdquo;args\" of child component stories\n          "
            },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 39,
        "column": 18,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": {
              "range": [1096, 1252],
              "text": "\n            Use a higher-level connected component. Storybook helps you compose such data from the\n            \"args&quot; of child component stories\n          "
            },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": {
              "range": [1096, 1252],
              "text": "\n            Use a higher-level connected component. Storybook helps you compose such data from the\n            \"args&ldquo; of child component stories\n          "
            },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": {
              "range": [1096, 1252],
              "text": "\n            Use a higher-level connected component. Storybook helps you compose such data from the\n            \"args&#34; of child component stories\n          "
            },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": {
              "range": [1096, 1252],
              "text": "\n            Use a higher-level connected component. Storybook helps you compose such data from the\n            \"args&rdquo; of child component stories\n          "
            },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\n\nimport { Header } from './Header';\nimport './page.css';\n\ntype User = {\n  name: string;\n};\n\nexport const Page: React.FC = () => {\n  const [user, setUser] = React.useState<User>();\n\n  return (\n    <article>\n      <Header\n        user={user}\n        onLogin={() => setUser({ name: 'Jane Doe' })}\n        onLogout={() => setUser(undefined)}\n        onCreateAccount={() => setUser({ name: 'Jane Doe' })}\n      />\n\n      <section className=\"storybook-page\">\n        <h2>Pages in Storybook</h2>\n        <p>\n          We recommend building UIs with a{' '}\n          <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <strong>component-driven</strong>\n          </a>{' '}\n          process starting with atomic components and ending with pages.\n        </p>\n        <p>\n          Render pages with mock data. This makes it easy to build and review page states without\n          needing to navigate to them in your app. Here are some handy patterns for managing page\n          data in Storybook:\n        </p>\n        <ul>\n          <li>\n            Use a higher-level connected component. Storybook helps you compose such data from the\n            \"args\" of child component stories\n          </li>\n          <li>\n            Assemble data in the page component from your services. You can mock these services out\n            using Storybook.\n          </li>\n        </ul>\n        <p>\n          Get a guided tutorial on component-driven development at{' '}\n          <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            Storybook tutorials\n          </a>\n          . Read more in the{' '}\n          <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n            docs\n          </a>\n          .\n        </p>\n        <div className=\"tip-wrapper\">\n          <span className=\"tip\">Tip</span> Adjust the width of the canvas with the{' '}\n          <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n            <g fill=\"none\" fillRule=\"evenodd\">\n              <path\n                d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n                id=\"a\"\n                fill=\"#999\"\n              />\n            </g>\n          </svg>\n          Viewports addon in the toolbar\n        </div>\n      </section>\n    </article>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\tailwind.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\vitest.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\packages\\ui\\vitest.setup.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\src\\app\\api\\items\\route.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 29,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 29,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [886, 937], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 36,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 36,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1173, 1176], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1173, 1176], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { createItemSchema, CreateItemInput } from '@/lib/schemas/itemSchemas'; // Adjust path if needed\nimport { NextResponse } from 'next/server';\n\n// Dummy database or service\nconst itemsDb: CreateItemInput[] = [];\n\nexport async function POST(request: Request) {\n  try {\n    const requestBody = await request.json();\n\n    // 1. Validate the request body\n    const validationResult = createItemSchema.safeParse(requestBody);\n\n    if (!validationResult.success) {\n      // If validation fails, return 400 with error messages\n      return NextResponse.json(\n        {\n          message: 'Invalid request data',\n          errors: validationResult.error.flatten().fieldErrors,\n        },\n        { status: 400 }\n      );\n    }\n\n    // 2. Use the validated data (it's now type-safe!)\n    const validatedData: CreateItemInput = validationResult.data;\n\n    // Simulate saving to database\n    console.log('Received valid data:', validatedData);\n    itemsDb.push(validatedData); // In a real app, you'd interact with Drizzle ORM here\n\n    return NextResponse.json(\n      { message: 'Item created successfully', item: validatedData },\n      { status: 201 }\n    );\n  } catch (error: any) {\n    // Catch errors from request.json() or other unexpected errors\n    console.error('Error creating item:', error);\n    if (error instanceof SyntaxError) {\n      // Handle JSON parsing errors specifically\n      return NextResponse.json({ message: 'Invalid JSON payload' }, { status: 400 });\n    }\n    return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\src\\lib\\schemas\\itemSchemas.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\src\\pages\\api\\items.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 5,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 5,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [204, 207], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [204, 207], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 11,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 11,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [311, 314], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [311, 314], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 40,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 40,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1173, 1224], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { createItemSchema, CreateItemInput } from '@/lib/schemas/itemSchemas';\nimport type { NextApiRequest, NextApiResponse } from 'next';\n\n// Import our standardized response types\ntype ApiResponse<T = any> = {\n  success: boolean;\n  data?: T;\n  error?: {\n    message: string;\n    code?: string;\n    details?: any;\n  };\n};\n\n// Dummy database or service\nconst itemsDb: CreateItemInput[] = [];\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse<ApiResponse>) {\n  if (req.method === 'POST') {\n    try {\n      // 1. Validate the request body\n      const validationResult = createItemSchema.safeParse(req.body);\n\n      if (!validationResult.success) {\n        // If validation fails, return 422 with error messages\n        return res.status(422).json({\n          success: false,\n          error: {\n            message: 'Validation error',\n            code: 'VALIDATION_ERROR',\n            details: validationResult.error.flatten().fieldErrors,\n          },\n        });\n      }\n\n      // 2. Use the validated data (it's now type-safe!)\n      const validatedData: CreateItemInput = validationResult.data;\n\n      // Simulate saving to database\n      console.log('Received valid data:', validatedData);\n      itemsDb.push(validatedData); // In a real app, you'd interact with Drizzle ORM here\n\n      // Return standardized success response\n      return res.status(201).json({\n        success: true,\n        data: {\n          message: 'Item created successfully',\n          item: validatedData,\n        },\n      });\n    } catch (error) {\n      // Catch any other unexpected errors during processing\n      console.error('Error creating item:', error);\n      return res.status(500).json({\n        success: false,\n        error: {\n          message: 'Internal Server Error',\n          code: 'INTERNAL_ERROR',\n        },\n      });\n    }\n  } else {\n    // Method not allowed - standardized error response\n    res.setHeader('Allow', ['POST']);\n    return res.status(405).json({\n      success: false,\n      error: {\n        message: `Method ${req.method} Not Allowed`,\n        code: 'METHOD_NOT_ALLOWED',\n      },\n    });\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\property-portal\\vitest.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\scripts\\apply-db-optimizations.js",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 35,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 35,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [744, 800], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 38,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 38,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [845, 894], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 40,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 40,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [963, 1011], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 43,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 43,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1066, 1109], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 51,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 51,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1345, 1412], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 56,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 56,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1570, 1627], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 62,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 62,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1843, 1905], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 66,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 66,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1957, 2003], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 75,
        "column": 24,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 75,
        "endColumn": 35
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 81,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 81,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2386, 2450], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 83,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 83,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2456, 2526], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 11,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Script to apply database optimizations\n *\n * This script:\n * 1. Applies the latest Prisma migrations\n * 2. Verifies the HNSW index was created correctly\n * 3. Tests the connection pool\n */\n\nconst { execSync } = require('child_process')\n\nconst { PrismaClient } = require('@prisma/client')\nconst { Pool } = require('pg')\n\n// Load environment variables\nrequire('dotenv').config()\n\nconst DATABASE_URL = process.env.DATABASE_URL\nconst POOL_SIZE = parseInt(process.env.POOL_SIZE || '10', 10)\n\n// Create a connection pool\nconst pool = new Pool({\n  connectionString: DATABASE_URL,\n  max: POOL_SIZE,\n  ssl: {\n    rejectUnauthorized: false,\n  },\n})\n\n// Create a Prisma client\nconst prisma = new PrismaClient()\n\nasync function main() {\n  try {\n    console.log('Starting database optimization process...')\n\n    // Step 1: Apply Prisma migrations\n    console.log('\\n1. Applying Prisma migrations...')\n    execSync('npx prisma migrate deploy', { stdio: 'inherit' })\n    console.log('✅ Migrations applied successfully')\n\n    // Step 2: Verify the HNSW index was created\n    console.log('\\n2. Verifying HNSW index...')\n    const indexResult = await pool.query(`\n      SELECT indexname, indexdef \n      FROM pg_indexes \n      WHERE tablename = 'Property' AND indexname = 'Property_embedding_hnsw_idx';\n    `)\n\n    if (indexResult.rows.length > 0) {\n      console.log('✅ HNSW index verified:', indexResult.rows[0].indexdef)\n    } else {\n      console.error('❌ HNSW index not found. Please check the migration.')\n\n      // Try to create the index manually if it doesn't exist\n      console.log('Attempting to create the index manually...')\n      await pool.query(`\n        CREATE INDEX IF NOT EXISTS \"Property_embedding_hnsw_idx\" ON \"Property\" \n        USING hnsw (embedding vector_cosine_ops) \n        WITH (m = 16, ef_construction = 64);\n      `)\n      console.log('Manual index creation attempted. Please verify.')\n    }\n\n    // Step 3: Test the connection pool\n    console.log('\\n3. Testing connection pool...')\n    const startTime = Date.now()\n\n    // Run 10 concurrent queries to test the pool\n    const promises = Array(10)\n      .fill(0)\n      .map((_, i) =>\n        pool\n          .query('SELECT NOW() as time')\n          .then(res => console.log(`Query ${i + 1} completed at ${res.rows[0].time}`))\n      )\n\n    await Promise.all(promises)\n\n    const duration = Date.now() - startTime\n    console.log(`✅ Connection pool test completed in ${duration}ms`)\n\n    console.log('\\nDatabase optimization process completed successfully!')\n  } catch (error) {\n    console.error('Error during database optimization:', error)\n    process.exit(1)\n  } finally {\n    // Clean up\n    await prisma.$disconnect()\n    await pool.end()\n  }\n}\n\nmain()\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\scripts\\codebase-health-check.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 60,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 60,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [1900, 1949], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 76,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 76,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [2431, 2608], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 82,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 82,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [2677, 2788], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 91,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 91,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [3075, 3160], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 104,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 104,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [3412, 3451], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 112,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 112,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [3839, 4044], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 126,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 126,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [4219, 4412], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { exec as execCallback } from 'child_process'\r\nimport * as util from 'util'\r\n\r\n// Use console for this script since we can't find the logger\r\n// We'll look for console statements in other files, not this one\r\nconst exec = util.promisify(execCallback)\r\n\r\n// Patterns to search for\r\nconst PATTERNS = [\r\n  {\r\n    name: 'Console statements',\r\n    regex: /console\\.(log|error|warn|info|debug)/g,\r\n    command:\r\n      'grep -r \"console\\\\.\" --include=\"*.{ts,tsx,js,jsx}\" . --exclude-dir={node_modules,.next,dist,build,coverage,.git,drizzle}',\r\n    severity: 'warning',\r\n  },\r\n  {\r\n    name: 'Any type',\r\n    regex: /: any(\\s|\\)|\\]|;|,)/g,\r\n    command:\r\n      'grep -r \": any\" --include=\"*.{ts,tsx}\" . --exclude-dir={node_modules,.next,dist,build,coverage,.git,drizzle}',\r\n    severity: 'warning',\r\n  },\r\n  {\r\n    name: 'Explicit null checks',\r\n    regex: /([a-zA-Z0-9_]+)\\s*===\\s*null|\\s*null\\s*===\\s*([a-zA-Z0-9_]+)/g,\r\n    command:\r\n      'grep -r \"=== null\\\\|null ===\" --include=\"*.{ts,tsx,js,jsx}\" . --exclude-dir={node_modules,.next,dist,build,coverage,.git,drizzle}',\r\n    severity: 'info',\r\n  },\r\n  {\r\n    name: 'Direct error string concatenation',\r\n    regex: /\\+\\s*error|\\+\\s*err|error\\s*\\+|err\\s*\\+/g,\r\n    command:\r\n      'grep -r \"\\\\+ error\\\\|error \\\\+\" --include=\"*.{ts,tsx,js,jsx}\" . --exclude-dir={node_modules,.next,dist,build,coverage,.git,drizzle}',\r\n    severity: 'warning',\r\n  },\r\n  {\r\n    name: 'TODO comments',\r\n    regex: /\\/\\/\\s*TODO|\\/\\*\\s*TODO/g,\r\n    command:\r\n      'grep -r \"TODO\" --include=\"*.{ts,tsx,js,jsx}\" . --exclude-dir={node_modules,.next,dist,build,coverage,.git,drizzle}',\r\n    severity: 'info',\r\n  },\r\n]\r\n\r\n// Define types for better type safety\r\ninterface ExecError extends Error {\r\n  code?: number\r\n  stdout?: string\r\n}\r\n\r\ninterface EslintResult {\r\n  errorCount: number\r\n  warningCount: number\r\n  filePath: string\r\n}\r\n\r\nasync function runHealthCheck() {\r\n  console.info('Starting codebase health check...')\r\n\r\n  const results: Record<string, { count: number; files: string[] }> = {}\r\n\r\n  // Run checks in parallel\r\n  await Promise.all(\r\n    PATTERNS.map(async pattern => {\r\n      try {\r\n        const { stdout } = await exec(pattern.command)\r\n        const lines = stdout.split('\\n').filter(Boolean)\r\n\r\n        results[pattern.name] = {\r\n          count: lines.length,\r\n          files: lines.map(line => line.split(':')[0]).filter((v, i, a) => a.indexOf(v) === i),\r\n        }\r\n\r\n        console.info(`Found ${lines.length} instances of ${pattern.name}`, {\r\n          severity: pattern.severity,\r\n          fileCount: results[pattern.name].files.length,\r\n        })\r\n\r\n        if (lines.length > 0 && lines.length <= 10) {\r\n          console.info(`Sample occurrences of ${pattern.name}:`, {\r\n            samples: lines.slice(0, 5),\r\n          })\r\n        }\r\n      } catch (error) {\r\n        // grep returns non-zero exit code when no matches are found\r\n        const execError = error as ExecError\r\n        if (execError.code === 1 && execError.stdout === '') {\r\n          results[pattern.name] = { count: 0, files: [] }\r\n          console.info(`No instances of ${pattern.name} found`, { severity: pattern.severity })\r\n        } else {\r\n          console.error(\r\n            `Error checking for ${pattern.name}`,\r\n            error instanceof Error ? error : new Error(String(error))\r\n          )\r\n        }\r\n      }\r\n    })\r\n  )\r\n\r\n  // Run ESLint check\r\n  try {\r\n    console.info('Running ESLint check...')\r\n    const { stdout } = await exec('npx eslint --ext .ts,.tsx,.js,.jsx . --format json')\r\n\r\n    // Parse ESLint JSON output\r\n    const eslintResults = JSON.parse(stdout) as EslintResult[]\r\n    const errorCount = eslintResults.reduce((sum: number, file) => sum + file.errorCount, 0)\r\n    const warningCount = eslintResults.reduce((sum: number, file) => sum + file.warningCount, 0)\r\n\r\n    console.info('ESLint check completed', {\r\n      errorCount,\r\n      warningCount,\r\n      filesWithIssues: eslintResults.filter(file => file.errorCount > 0 || file.warningCount > 0)\r\n        .length,\r\n    })\r\n  } catch (error) {\r\n    console.error(\r\n      'Error running ESLint check',\r\n      error instanceof Error ? error : new Error(String(error))\r\n    )\r\n  }\r\n\r\n  // Summary\r\n  console.info('Health check summary', {\r\n    results: Object.entries(results).map(([name, data]) => ({\r\n      name,\r\n      count: data.count,\r\n      fileCount: data.files.length,\r\n    })),\r\n  })\r\n}\r\n\r\nrunHealthCheck().catch(error => {\r\n  console.error('Health check failed', error instanceof Error ? error : new Error(String(error)))\r\n  process.exit(1)\r\n})\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\scripts\\generate-property-embeddings.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 27,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 27,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [636, 698], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 40,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 40,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [996, 1067], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `pgvector` also has a named export `toSql`. Check if you meant to write `import {toSql} from 'pgvector'` instead.",
        "line": 58,
        "column": 11,
        "nodeType": "MemberExpression",
        "endLine": 58,
        "endColumn": 25
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 62,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 62,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1783, 1901], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 73,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 73,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2099, 2144], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 77,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 77,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2270, 2387], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// scripts/generate-property-embeddings.ts\nimport dotenv from 'dotenv'\nimport { Pool } from 'pg'\nimport pgvector from 'pgvector'\n\nimport { generateEmbeddings } from '../services/vectorSearch'\n\n// Load environment variables\ndotenv.config()\n\n// Initialize pgvector\npgvector.init()\n\n// Create a connection pool\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,\n})\n\n/**\n * Generate embeddings for all properties that don't have them\n */\nasync function generatePropertyEmbeddings() {\n  const client = await pool.connect()\n\n  try {\n    console.log('Starting embedding generation for properties...')\n\n    // Start a transaction\n    await client.query('BEGIN')\n\n    // Get properties without embeddings\n    const { rows: properties } = await client.query(`\n      SELECT id, title, description, location, property_type\n      FROM properties\n      WHERE embedding IS NULL\n      LIMIT 100\n    `)\n\n    console.log(`Found ${properties.length} properties without embeddings`)\n\n    // Process each property\n    for (const [index, property] of properties.entries()) {\n      try {\n        // Create a text representation of the property for embedding\n        const textToEmbed = `\n          Property: ${property.title}\n          Description: ${property.description || ''}\n          Location: ${property.location || ''}\n          Type: ${property.property_type || ''}\n        `.trim()\n\n        // Generate embeddings\n        const embedding = await generateEmbeddings(textToEmbed)\n\n        // Update the property with the embedding\n        await client.query(`UPDATE properties SET embedding = $1 WHERE id = $2`, [\n          pgvector.toSql(embedding),\n          property.id,\n        ])\n\n        console.log(\n          `[${index + 1}/${properties.length}] Generated embedding for property ${property.id}`\n        )\n      } catch (error) {\n        console.error(`Failed to generate embedding for property ${property.id}:`, error)\n      }\n    }\n\n    // Commit the transaction\n    await client.query('COMMIT')\n\n    console.log('Embedding generation completed')\n\n    // If there are more properties to process, suggest running the script again\n    if (properties.length === 100) {\n      console.log(\n        'There may be more properties without embeddings. Run the script again to process them.'\n      )\n    }\n  } catch (error) {\n    // Rollback the transaction on error\n    await client.query('ROLLBACK')\n    console.error('Embedding generation failed:', error)\n  } finally {\n    // Release the client back to the pool\n    client.release()\n\n    // Close the pool\n    await pool.end()\n  }\n}\n\n// Run the script\ngeneratePropertyEmbeddings().catch(error => {\n  console.error('Script failed:', error)\n  process.exit(1)\n})\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\scripts\\lint-test.js",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 8,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 8,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [215, 267], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// This file is intentionally written with style issues to test ESLint and Prettier\r\n\r\nfunction badlyFormattedFunction(a, b) {\r\n  // This has wrong indentation and spacing\r\n  const x = a + b\r\n\r\n  if (x > 10) {\r\n    console.log('This should trigger an ESLint warning')\r\n    return x * 2\r\n  }\r\n\r\n  // Unused variable should trigger a warning\r\n  const unused = 'This is not used'\r\n\r\n  return x\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\scripts\\security-check.js",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 37,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 37,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [836, 900], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 40,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 40,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [974, 1017], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 48,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 48,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1214, 1267], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 56,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 56,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1465, 1498], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 66,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 66,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1790, 1849], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 72,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 72,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2011, 2072], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 77,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 77,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2116, 2178], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 94,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 94,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2619, 2694], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 104,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 104,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2893, 2953], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 113,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 113,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [3142, 3193], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 124,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 124,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [3571, 3683], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 159,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 159,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [4510, 4554], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 166,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 166,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [4658, 4702], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 13,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Security check script\n *\n * This script:\n * 1. Runs npm audit to check for vulnerable dependencies\n * 2. Checks for missing environment variables\n * 3. Validates security headers in middleware\n */\n\nconst { execSync } = require('child_process')\nconst fs = require('fs')\nconst path = require('path')\n\nconst dotenv = require('dotenv')\n\n// Required environment variables\nconst REQUIRED_ENV_VARS = [\n  'DATABASE_URL',\n  'CLERK_SECRET_KEY',\n  'NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY',\n  'OLLAMA_API_KEY',\n  'EMBEDDING_SERVICE_URL',\n]\n\n// Security headers that should be present in middleware\nconst REQUIRED_SECURITY_HEADERS = [\n  'Content-Security-Policy',\n  'X-Content-Type-Options',\n  'X-Frame-Options',\n  'X-XSS-Protection',\n  'Permissions-Policy',\n  'Strict-Transport-Security',\n  'Referrer-Policy',\n]\n\nfunction checkDependencies() {\n  console.log('\\n🔍 Checking dependencies for vulnerabilities...')\n  try {\n    execSync('npm audit --production', { stdio: 'inherit' })\n    console.log('✅ Dependency check completed')\n  } catch (error) {\n    console.error('⚠️ Vulnerabilities found in dependencies')\n    // Continue with the script even if vulnerabilities are found\n  }\n}\n\nfunction checkEnvironmentVariables() {\n  console.log('\\n🔍 Checking environment variables...')\n\n  // Load .env file if it exists\n  const envPath = path.resolve(process.cwd(), '.env')\n  let envVars = {}\n\n  if (fs.existsSync(envPath)) {\n    envVars = dotenv.parse(fs.readFileSync(envPath))\n    console.log('📄 Found .env file')\n  } else {\n    console.warn('⚠️ No .env file found. Checking environment variables from process.env')\n    envVars = process.env\n  }\n\n  // Check for missing required variables\n  const missingVars = REQUIRED_ENV_VARS.filter(varName => !envVars[varName])\n\n  if (missingVars.length === 0) {\n    console.log('✅ All required environment variables are set')\n  } else {\n    console.error('❌ Missing required environment variables:')\n    missingVars.forEach(varName => {\n      console.error(`   - ${varName}`)\n    })\n    console.log('\\nPlease add these variables to your .env file')\n  }\n}\n\nfunction checkSecurityHeaders() {\n  console.log('\\n🔍 Checking security headers in middleware...')\n\n  const middlewarePath = path.resolve(process.cwd(), 'middleware.ts')\n\n  if (!fs.existsSync(middlewarePath)) {\n    console.error('❌ middleware.ts file not found')\n    return\n  }\n\n  const middlewareContent = fs.readFileSync(middlewarePath, 'utf8')\n\n  // Check for each required header\n  const missingHeaders = REQUIRED_SECURITY_HEADERS.filter(\n    header => !middlewareContent.includes(header)\n  )\n\n  if (missingHeaders.length === 0) {\n    console.log('✅ All required security headers are configured in middleware')\n  } else {\n    console.error('❌ Missing security headers in middleware:')\n    missingHeaders.forEach(header => {\n      console.error(`   - ${header}`)\n    })\n  }\n}\n\nfunction checkRateLimiting() {\n  console.log('\\n🔍 Checking rate limiting implementation...')\n\n  const rateLimitPath = path.resolve(process.cwd(), 'lib/rate-limit.ts')\n\n  if (!fs.existsSync(rateLimitPath)) {\n    console.error('❌ lib/rate-limit.ts file not found')\n    return\n  }\n\n  console.log('✅ Rate limiting implementation found')\n\n  // Check API routes for rate limiting\n  const apiDir = path.resolve(process.cwd(), 'app/api')\n  if (fs.existsSync(apiDir)) {\n    const apiRoutes = findApiRoutes(apiDir)\n    const routesWithRateLimit = apiRoutes.filter(route => {\n      const content = fs.readFileSync(route, 'utf8')\n      return content.includes('withRateLimit') || content.includes('rateLimit')\n    })\n\n    console.log(\n      `📊 ${routesWithRateLimit.length} of ${apiRoutes.length} API routes have rate limiting`\n    )\n\n    if (routesWithRateLimit.length < apiRoutes.length) {\n      console.warn('⚠️ Some API routes do not have rate limiting:')\n      apiRoutes.forEach(route => {\n        const content = fs.readFileSync(route, 'utf8')\n        if (!content.includes('withRateLimit') && !content.includes('rateLimit')) {\n          console.warn(`   - ${route.replace(process.cwd(), '')}`)\n        }\n      })\n    }\n  }\n}\n\nfunction findApiRoutes(dir, routes = []) {\n  const files = fs.readdirSync(dir)\n\n  files.forEach(file => {\n    const filePath = path.join(dir, file)\n    const stat = fs.statSync(filePath)\n\n    if (stat.isDirectory()) {\n      findApiRoutes(filePath, routes)\n    } else if (file === 'route.ts' || file === 'route.js') {\n      routes.push(filePath)\n    }\n  })\n\n  return routes\n}\n\n// Run all checks\nfunction runSecurityChecks() {\n  console.log('🔒 Running security checks...')\n\n  checkDependencies()\n  checkEnvironmentVariables()\n  checkSecurityHeaders()\n  checkRateLimiting()\n\n  console.log('\\n🔒 Security check completed')\n}\n\nrunSecurityChecks()\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\scripts\\setup-db.js",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 8,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 8,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [255, 289], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 19,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 19,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [517, 558], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 27,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 27,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [726, 765], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// This script sets up the database by running migrations and generating the Prisma client\r\nconst { execSync } = require('child_process')\r\nconst path = require('path')\r\n\r\n// Function to execute shell commands\r\nfunction runCommand(command) {\r\n  try {\r\n    console.log(`Running: ${command}`)\r\n    execSync(command, { stdio: 'inherit' })\r\n  } catch (error) {\r\n    console.error(`Error executing command: ${command}`)\r\n    console.error(error)\r\n    process.exit(1)\r\n  }\r\n}\r\n\r\n// Main function\r\nasync function main() {\r\n  console.log('Setting up the database...')\r\n\r\n  // Generate Prisma client\r\n  runCommand('npx prisma generate')\r\n\r\n  // Create migrations from the schema\r\n  runCommand('npx prisma migrate dev --name init')\r\n\r\n  console.log('Database setup complete!')\r\n}\r\n\r\n// Run the main function\r\nmain().catch(error => {\r\n  console.error('Error setting up the database:', error)\r\n  process.exit(1)\r\n})\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\scripts\\test-api.js",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module '../lib/db.js'.",
        "line": 4,
        "column": 24,
        "nodeType": "Literal",
        "endLine": 4,
        "endColumn": 38
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 82,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 82,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1941, 1982], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 85,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 85,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2049, 2139], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 87,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 87,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2192, 2269], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 95,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 95,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2416, 2476], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 99,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 99,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2566, 2603], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 101,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 101,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2625, 2655], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 102,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 102,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2663, 2779], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 115,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 115,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [3061, 3130], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 118,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 118,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [3218, 3278], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 120,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 120,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [3324, 3401], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 10,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// This script tests the API functions directly\r\nimport { Property } from '@prisma/client'\r\n\r\nimport { prisma } from '../lib/db.js'\r\n\r\n// Copy of the API functions to avoid module resolution issues\r\nasync function fetchProperties(query = '', page = 1, limit = 6) {\r\n  const skip = (page - 1) * limit\r\n\r\n  // Build the where clause for both queries\r\n  const where = {\r\n    OR: [\r\n      { title: { contains: query, mode: 'insensitive' } },\r\n      { location: { contains: query, mode: 'insensitive' } },\r\n    ],\r\n  }\r\n\r\n  // Get properties with pagination\r\n  const properties = await prisma.property.findMany({\r\n    where,\r\n    skip,\r\n    take: limit,\r\n    orderBy: { title: 'asc' },\r\n  })\r\n\r\n  // Get total count for pagination\r\n  const totalCount = await prisma.property.count({ where })\r\n\r\n  return {\r\n    properties,\r\n    totalCount,\r\n  }\r\n}\r\n\r\nasync function fetchPropertyById(id) {\r\n  try {\r\n    const property = await prisma.property.findUnique({\r\n      where: { id },\r\n    })\r\n\r\n    if (!property) {\r\n      return {\r\n        error: `Property with ID ${id} not found`,\r\n      }\r\n    }\r\n\r\n    return {\r\n      property,\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching property ${id}:`, error)\r\n    return {\r\n      error: error instanceof Error ? error.message : 'An unexpected error occurred',\r\n    }\r\n  }\r\n}\r\n\r\nasync function fetchNearbyProperties(propertyId, lat, lng, distance = 10, limit = 3) {\r\n  // Calculate the approximate latitude/longitude range\r\n  // 1 degree of latitude is approximately 111 kilometers\r\n  const latRange = distance / 111\r\n\r\n  const properties = await prisma.property.findMany({\r\n    where: {\r\n      id: { not: propertyId },\r\n      lat: {\r\n        gte: lat - latRange,\r\n        lte: lat + latRange,\r\n      },\r\n      lng: {\r\n        gte: lng - latRange,\r\n        lte: lng + latRange,\r\n      },\r\n    },\r\n    take: limit,\r\n  })\r\n\r\n  return properties\r\n}\r\n\r\nasync function testFetchProperties() {\r\n  console.log('Testing fetchProperties...')\r\n  try {\r\n    const result = await fetchProperties('', 1, 3)\r\n    console.log(`Found ${result.totalCount} properties, showing ${result.properties.length}:`)\r\n    result.properties.forEach(property => {\r\n      console.log(`- ${property.title} (${property.location}): $${property.price}`)\r\n    })\r\n  } catch (error) {\r\n    console.error('Error testing fetchProperties:', error)\r\n  }\r\n}\r\n\r\nasync function testFetchPropertyById(id) {\r\n  console.log(`\\nTesting fetchPropertyById with ID: ${id}...`)\r\n  try {\r\n    const result = await fetchPropertyById(id)\r\n    if (result.error) {\r\n      console.log(`Error: ${result.error}`)\r\n    } else {\r\n      console.log('Property found:')\r\n      console.log(\r\n        `- ${result.property.title} (${result.property.location}): $${result.property.price}`\r\n      )\r\n\r\n      // Test nearby properties\r\n      await testFetchNearbyProperties(id, result.property.lat, result.property.lng)\r\n    }\r\n  } catch (error) {\r\n    console.error('Error testing fetchPropertyById:', error)\r\n  }\r\n}\r\n\r\nasync function testFetchNearbyProperties(id, lat, lng) {\r\n  console.log(`\\nTesting fetchNearbyProperties near ${lat}, ${lng}...`)\r\n  try {\r\n    const properties = await fetchNearbyProperties(id, lat, lng, 50, 3)\r\n    console.log(`Found ${properties.length} nearby properties:`)\r\n    properties.forEach(property => {\r\n      console.log(`- ${property.title} (${property.location}): $${property.price}`)\r\n    })\r\n  } catch (error) {\r\n    console.error('Error testing fetchNearbyProperties:', error)\r\n  }\r\n}\r\n\r\nasync function main() {\r\n  // Test fetching properties\r\n  await testFetchProperties()\r\n\r\n  // Get the first property ID from the results\r\n  const result = await fetchProperties()\r\n  if (result.properties.length > 0) {\r\n    const firstPropertyId = result.properties[0].id\r\n    await testFetchPropertyById(firstPropertyId)\r\n  }\r\n}\r\n\r\nmain()\r\n  .catch(error => {\r\n    console.error('Error running tests:', error)\r\n    process.exit(1)\r\n  })\r\n  .finally(() => {\r\n    process.exit(0)\r\n  })\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\scripts\\test-db.mjs",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 8,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 8,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [172, 217], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 16,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 16,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [369, 422], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 18,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 18,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [468, 545], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 23,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 23,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [637, 692], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 27,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 27,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [779, 842], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 28,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 28,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [850, 901], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 46,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 46,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1347, 1415], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 48,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 48,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1471, 1548], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 52,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 52,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1573, 1627], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Simple script to test database connectivity\r\nimport { PrismaClient } from '@prisma/client'\r\n\r\nconst prisma = new PrismaClient()\r\n\r\nasync function main() {\r\n  try {\r\n    console.log('Testing database connection...')\r\n\r\n    // Get all properties\r\n    const properties = await prisma.property.findMany({\r\n      take: 3,\r\n      orderBy: { title: 'asc' },\r\n    })\r\n\r\n    console.log(`Found ${properties.length} properties:`)\r\n    properties.forEach(property => {\r\n      console.log(`- ${property.title} (${property.location}): $${property.price}`)\r\n    })\r\n\r\n    // Get property count\r\n    const count = await prisma.property.count()\r\n    console.log(`\\nTotal properties in database: ${count}`)\r\n\r\n    if (properties.length > 0) {\r\n      const firstProperty = properties[0]\r\n      console.log(`\\nDetails for property \"${firstProperty.title}\":`)\r\n      console.log(JSON.stringify(firstProperty, null, 2))\r\n\r\n      // Find nearby properties\r\n      const nearbyProperties = await prisma.property.findMany({\r\n        where: {\r\n          id: { not: firstProperty.id },\r\n          lat: {\r\n            gte: firstProperty.lat - 0.5,\r\n            lte: firstProperty.lat + 0.5,\r\n          },\r\n          lng: {\r\n            gte: firstProperty.lng - 0.5,\r\n            lte: firstProperty.lng + 0.5,\r\n          },\r\n        },\r\n        take: 2,\r\n      })\r\n\r\n      console.log(`\\nFound ${nearbyProperties.length} nearby properties:`)\r\n      nearbyProperties.forEach(property => {\r\n        console.log(`- ${property.title} (${property.location}): $${property.price}`)\r\n      })\r\n    }\r\n\r\n    console.log('\\nDatabase test completed successfully!')\r\n  } catch (error) {\r\n    console.error('Error testing database:', error)\r\n  } finally {\r\n    await prisma.$disconnect()\r\n  }\r\n}\r\n\r\nmain()\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\scripts\\test-neon-connection.ts",
    "messages": [
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `configureLogger`. Check if you meant to write `import {configureLogger} from '@lib/logging/simplified-logger'` instead.",
        "line": 6,
        "column": 1,
        "nodeType": "MemberExpression",
        "endLine": 6,
        "endColumn": 23
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `info`. Check if you meant to write `import {info} from '@lib/logging/simplified-logger'` instead.",
        "line": 12,
        "column": 1,
        "nodeType": "MemberExpression",
        "endLine": 12,
        "endColumn": 12
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `info`. Check if you meant to write `import {info} from '@lib/logging/simplified-logger'` instead.",
        "line": 28,
        "column": 5,
        "nodeType": "MemberExpression",
        "endLine": 28,
        "endColumn": 16
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `info`. Check if you meant to write `import {info} from '@lib/logging/simplified-logger'` instead.",
        "line": 32,
        "column": 5,
        "nodeType": "MemberExpression",
        "endLine": 32,
        "endColumn": 16
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `info`. Check if you meant to write `import {info} from '@lib/logging/simplified-logger'` instead.",
        "line": 41,
        "column": 5,
        "nodeType": "MemberExpression",
        "endLine": 41,
        "endColumn": 16
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `debug`. Check if you meant to write `import {debug} from '@lib/logging/simplified-logger'` instead.",
        "line": 43,
        "column": 7,
        "nodeType": "MemberExpression",
        "endLine": 43,
        "endColumn": 19
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `info`. Check if you meant to write `import {info} from '@lib/logging/simplified-logger'` instead.",
        "line": 48,
        "column": 5,
        "nodeType": "MemberExpression",
        "endLine": 48,
        "endColumn": 16
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `info`. Check if you meant to write `import {info} from '@lib/logging/simplified-logger'` instead.",
        "line": 50,
        "column": 5,
        "nodeType": "MemberExpression",
        "endLine": 50,
        "endColumn": 16
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `error`. Check if you meant to write `import {error} from '@lib/logging/simplified-logger'` instead.",
        "line": 52,
        "column": 5,
        "nodeType": "MemberExpression",
        "endLine": 52,
        "endColumn": 17
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `logger` also has a named export `info`. Check if you meant to write `import {info} from '@lib/logging/simplified-logger'` instead.",
        "line": 58,
        "column": 5,
        "nodeType": "MemberExpression",
        "endLine": 58,
        "endColumn": 16
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 10,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { PrismaClient } from '@prisma/client'\r\n\r\nimport logger from '@lib/logging/simplified-logger'\r\n\r\n// Configure logger for this script\r\nlogger.configureLogger({\r\n  minLevel: 'debug',\r\n  enableConsole: true,\r\n  environment: 'development',\r\n})\r\n\r\nlogger.info('Logger initialized successfully!')\r\n\r\nconst prisma = new PrismaClient({\r\n  log: ['query', 'info', 'warn', 'error'],\r\n})\r\n\r\n// Define a type for the extension query result\r\ntype PgExtension = {\r\n  extname: string\r\n  extversion: string\r\n  // Use a more specific type instead of any\r\n  [key: string]: string | number | boolean | null\r\n}\r\n\r\nasync function main() {\r\n  try {\r\n    logger.info('Testing connection to Neon database...')\r\n\r\n    // Test basic connection\r\n    const databaseVersion = await prisma.$queryRaw<string>`SELECT version()`\r\n    logger.info('Connected to database', { version: databaseVersion })\r\n\r\n    // Check available extensions\r\n    const extensions = await prisma.$queryRaw<PgExtension[]>`\r\n      SELECT extname, extversion \r\n      FROM pg_extension \r\n      ORDER BY extname\r\n    `\r\n\r\n    logger.info('Available PostgreSQL extensions:', { count: extensions.length })\r\n    extensions.forEach(ext => {\r\n      logger.debug(`Extension: ${ext.extname}, version: ${ext.extversion}`)\r\n    })\r\n\r\n    // Test a simple query\r\n    const result = await prisma.$queryRaw<{ now: Date }[]>`SELECT NOW() as now`\r\n    logger.info('Current database time:', { time: result[0].now })\r\n\r\n    logger.info('Database connection test completed successfully')\r\n  } catch (error) {\r\n    logger.error(\r\n      'Failed to connect to database',\r\n      error instanceof Error ? error : new Error(String(error))\r\n    )\r\n  } finally {\r\n    await prisma.$disconnect()\r\n    logger.info('Database connection closed')\r\n  }\r\n}\r\n\r\nmain()\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\scripts\\test-prisma.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 7,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 7,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [163, 227], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 18,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 18,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [491, 539], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { prisma } from '../lib/db'\r\n\r\nasync function testConnection() {\r\n  try {\r\n    // Test a simple query\r\n    const count = await prisma.property.count()\r\n    console.log(`Connection successful! Found ${count} properties.`)\r\n\r\n    // Test vector capabilities if you have properties with embeddings\r\n    if (count > 0) {\r\n      const property = await prisma.property.findFirst({\r\n        where: {\r\n          embedding: {\r\n            not: null,\r\n          },\r\n        },\r\n      })\r\n      console.log('Sample property:', property?.title)\r\n    }\r\n  } catch (error) {\r\n    console.error('Database connection test failed:', error)\r\n  } finally {\r\n    await prisma.$disconnect()\r\n  }\r\n}\r\n\r\ntestConnection()\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\scripts\\test-property-detail.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\services\\vectorSearch.ts",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 2,
        "column": 26,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 2,
        "endColumn": 27,
        "fix": { "range": [53, 54], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 3,
        "column": 32,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 3,
        "endColumn": 33,
        "fix": { "range": [86, 87], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 5,
        "column": 72,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 5,
        "endColumn": 73,
        "fix": { "range": [160, 161], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 8,
        "column": 16,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 8,
        "endColumn": 17,
        "fix": { "range": [201, 202], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 17,
        "column": 3,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 17,
        "endColumn": 4,
        "fix": { "range": [607, 608], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `(err)` with `err`",
        "line": 20,
        "column": 18,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 20,
        "endColumn": 23,
        "fix": { "range": [646, 651], "text": "err" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 26,
        "column": 5,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 26,
        "endColumn": 6,
        "fix": { "range": [785, 786], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 27,
        "column": 3,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 27,
        "endColumn": 4,
        "fix": { "range": [789, 790], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 33,
        "column": 20,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 33,
        "endColumn": 21,
        "fix": { "range": [901, 902], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 34,
        "column": 20,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 34,
        "endColumn": 21,
        "fix": { "range": [922, 923], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 35,
        "column": 20,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 35,
        "endColumn": 21,
        "fix": { "range": [943, 944], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 36,
        "column": 20,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 36,
        "endColumn": 21,
        "fix": { "range": [964, 965], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 37,
        "column": 21,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 37,
        "endColumn": 22,
        "fix": { "range": [986, 987], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 38,
        "column": 24,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 38,
        "endColumn": 25,
        "fix": { "range": [1011, 1012], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 39,
        "column": 44,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 39,
        "endColumn": 45,
        "fix": { "range": [1056, 1057], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 46,
        "column": 17,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 46,
        "endColumn": 18,
        "fix": { "range": [1167, 1168], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 47,
        "column": 18,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 47,
        "endColumn": 19,
        "fix": { "range": [1186, 1187], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 48,
        "column": 31,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 48,
        "endColumn": 32,
        "fix": { "range": [1218, 1219], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 64,
        "column": 31,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 64,
        "endColumn": 32,
        "fix": { "range": [1711, 1712], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 68,
        "column": 38,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 68,
        "endColumn": 39,
        "fix": { "range": [1786, 1787], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 69,
        "column": 39,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 69,
        "endColumn": 40,
        "fix": { "range": [1826, 1827], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 70,
        "column": 67,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 70,
        "endColumn": 68,
        "fix": { "range": [1894, 1895], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 73,
        "column": 96,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 73,
        "endColumn": 97,
        "fix": { "range": [2015, 2016], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 82,
        "column": 6,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 82,
        "endColumn": 7,
        "fix": { "range": [2201, 2202], "text": "" }
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `pgvector` also has a named export `toSql`. Check if you meant to write `import {toSql} from 'pgvector'` instead.",
        "line": 85,
        "column": 65,
        "nodeType": "MemberExpression",
        "endLine": 85,
        "endColumn": 79
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 85,
        "column": 96,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 85,
        "endColumn": 97,
        "fix": { "range": [2328, 2329], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 86,
        "column": 23,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 86,
        "endColumn": 24,
        "fix": { "range": [2352, 2353], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 90,
        "column": 50,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 90,
        "endColumn": 51,
        "fix": { "range": [2463, 2464], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 91,
        "column": 33,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 91,
        "endColumn": 34,
        "fix": { "range": [2497, 2498], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 95,
        "column": 50,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 95,
        "endColumn": 51,
        "fix": { "range": [2589, 2590], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 96,
        "column": 33,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 96,
        "endColumn": 34,
        "fix": { "range": [2623, 2624], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 101,
        "column": 70,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 101,
        "endColumn": 71,
        "fix": { "range": [2748, 2749], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 102,
        "column": 33,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 102,
        "endColumn": 34,
        "fix": { "range": [2782, 2783], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 107,
        "column": 53,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 107,
        "endColumn": 54,
        "fix": { "range": [2904, 2905], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 108,
        "column": 33,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 108,
        "endColumn": 34,
        "fix": { "range": [2938, 2939], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 113,
        "column": 54,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 113,
        "endColumn": 55,
        "fix": { "range": [3063, 3064], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 114,
        "column": 34,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 114,
        "endColumn": 35,
        "fix": { "range": [3098, 3099], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 119,
        "column": 57,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 119,
        "endColumn": 58,
        "fix": { "range": [3219, 3220], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 120,
        "column": 37,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 120,
        "endColumn": 38,
        "fix": { "range": [3257, 3258], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 125,
        "column": 50,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 125,
        "endColumn": 51,
        "fix": { "range": [3358, 3359], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 126,
        "column": 31,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 126,
        "endColumn": 32,
        "fix": { "range": [3390, 3391], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 130,
        "column": 67,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 130,
        "endColumn": 68,
        "fix": { "range": [3497, 3498], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 131,
        "column": 42,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 131,
        "endColumn": 43,
        "fix": { "range": [3540, 3541], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 138,
        "column": 6,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 138,
        "endColumn": 7,
        "fix": { "range": [3688, 3689], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 140,
        "column": 36,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 140,
        "endColumn": 37,
        "fix": { "range": [3726, 3727], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 143,
        "column": 58,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 143,
        "endColumn": 59,
        "fix": { "range": [3811, 3812], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 146,
        "column": 44,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 146,
        "endColumn": 45,
        "fix": { "range": [3891, 3892], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 154,
        "column": 7,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 154,
        "endColumn": 8,
        "fix": { "range": [4073, 4074], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 156,
        "column": 16,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 156,
        "endColumn": 17,
        "fix": { "range": [4091, 4092], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 166,
        "column": 7,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 166,
        "endColumn": 8,
        "fix": { "range": [4379, 4380], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 168,
        "column": 16,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 168,
        "endColumn": 17,
        "fix": { "range": [4397, 4398], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 186,
        "column": 6,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 186,
        "endColumn": 7,
        "fix": { "range": [4877, 4878], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 188,
        "column": 73,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 188,
        "endColumn": 74,
        "fix": { "range": [4952, 4953], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 191,
        "column": 66,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 191,
        "endColumn": 67,
        "fix": { "range": [5064, 5065], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 194,
        "column": 55,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 194,
        "endColumn": 56,
        "fix": { "range": [5127, 5128], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 205,
        "column": 6,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 205,
        "endColumn": 7,
        "fix": { "range": [5366, 5367], "text": "" }
      },
      {
        "ruleId": "import/no-named-as-default-member",
        "severity": 1,
        "message": "Caution: `pgvector` also has a named export `toSql`. Check if you meant to write `import {toSql} from 'pgvector'` instead.",
        "line": 207,
        "column": 54,
        "nodeType": "MemberExpression",
        "endLine": 207,
        "endColumn": 68
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 207,
        "column": 100,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 207,
        "endColumn": 101,
        "fix": { "range": [5468, 5469], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 209,
        "column": 16,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 209,
        "endColumn": 17,
        "fix": { "range": [5486, 5487], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 217,
        "column": 7,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 217,
        "endColumn": 8,
        "fix": { "range": [5751, 5752], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 219,
        "column": 16,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 219,
        "endColumn": 17,
        "fix": { "range": [5769, 5770], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 238,
        "column": 7,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 238,
        "endColumn": 8,
        "fix": { "range": [6441, 6442], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 242,
        "column": 26,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 242,
        "endColumn": 27,
        "fix": { "range": [6605, 6606], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 243,
        "column": 85,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 243,
        "endColumn": 86,
        "fix": { "range": [6721, 6722], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 246,
        "column": 84,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 246,
        "endColumn": 85,
        "fix": { "range": [6863, 6864], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `(val)·=>·val·/·magnitude);` with `val·=>·val·/·magnitude)`",
        "line": 247,
        "column": 47,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 247,
        "endColumn": 73,
        "fix": { "range": [6911, 6937], "text": "val => val / magnitude)" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 249,
        "column": 31,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 249,
        "endColumn": 32,
        "fix": { "range": [6969, 6970], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 257,
        "column": 7,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 257,
        "endColumn": 8,
        "fix": { "range": [7226, 7227], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 259,
        "column": 16,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 259,
        "endColumn": 17,
        "fix": { "range": [7244, 7245], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `;`",
        "line": 267,
        "column": 2,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 267,
        "endColumn": 3,
        "fix": { "range": [7343, 7344], "text": "" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 68,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 68,
    "fixableWarningCount": 0,
    "source": "// services/vectorSearch.ts\nimport { Pool } from 'pg';\nimport pgvector from 'pgvector';\n\nimport { winstonLogger as logger } from '../lib/logging/winston-logger';\n\n// Initialize pgvector\npgvector.init();\n\n// Create a connection pool\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,\n  max: 20, // Maximum number of clients in the pool\n  idleTimeoutMillis: 30000, // How long a client is allowed to remain idle before being closed\n  connectionTimeoutMillis: 2000, // How long to wait for a connection\n});\n\n// Log pool errors\npool.on('error', (err) => {\n  logger.error('Unexpected error on idle client', {\n    context: {\n      error: err.message,\n      stack: err.stack,\n    },\n  });\n});\n\n/**\n * Interface for property search filters\n */\nexport interface PropertySearchFilters {\n  minPrice?: number;\n  maxPrice?: number;\n  location?: string;\n  bedrooms?: number;\n  bathrooms?: number;\n  propertyType?: string;\n  status?: 'available' | 'sold' | 'pending';\n}\n\n/**\n * Interface for property search options\n */\nexport interface PropertySearchOptions {\n  limit?: number;\n  offset?: number;\n  similarityThreshold?: number;\n}\n\n/**\n * Perform a semantic search on properties using vector embeddings\n *\n * @param queryEmbedding - The vector embedding of the search query\n * @param filters - Optional filters to apply to the search\n * @param options - Optional search options\n * @returns Array of properties sorted by similarity\n */\nexport async function semanticPropertySearch(\n  queryEmbedding: number[],\n  filters: PropertySearchFilters = {},\n  options: PropertySearchOptions = {}\n) {\n  const startTime = Date.now();\n\n  try {\n    // Set default options\n    const limit = options.limit || 10;\n    const offset = options.offset || 0;\n    const similarityThreshold = options.similarityThreshold || 0.5;\n\n    // Extract filters\n    const { minPrice, maxPrice, location, bedrooms, bathrooms, propertyType, status } = filters;\n\n    // Build the query with dynamic filters\n    let query = `\n      SELECT \n        p.*,\n        1 - (p.embedding <=> $1) AS similarity\n      FROM properties p\n      WHERE 1 = 1\n    `;\n\n    // Add filter conditions\n    const queryParams: (string | number | pgvector.Vector)[] = [pgvector.toSql(queryEmbedding)];\n    let paramIndex = 2;\n\n    // Add price filters\n    if (minPrice !== undefined) {\n      query += ` AND p.price >= $${paramIndex++}`;\n      queryParams.push(minPrice);\n    }\n\n    if (maxPrice !== undefined) {\n      query += ` AND p.price <= $${paramIndex++}`;\n      queryParams.push(maxPrice);\n    }\n\n    // Add location filter\n    if (location) {\n      query += ` AND p.location ILIKE '%' || $${paramIndex++} || '%'`;\n      queryParams.push(location);\n    }\n\n    // Add bedrooms filter\n    if (bedrooms !== undefined) {\n      query += ` AND p.bedrooms >= $${paramIndex++}`;\n      queryParams.push(bedrooms);\n    }\n\n    // Add bathrooms filter\n    if (bathrooms !== undefined) {\n      query += ` AND p.bathrooms >= $${paramIndex++}`;\n      queryParams.push(bathrooms);\n    }\n\n    // Add property type filter\n    if (propertyType) {\n      query += ` AND p.property_type = $${paramIndex++}`;\n      queryParams.push(propertyType);\n    }\n\n    // Add status filter\n    if (status) {\n      query += ` AND p.status = $${paramIndex++}`;\n      queryParams.push(status);\n    }\n\n    // Add similarity threshold\n    query += ` AND (1 - (p.embedding <=> $1)) >= $${paramIndex++}`;\n    queryParams.push(similarityThreshold);\n\n    // Add ordering and pagination\n    query += `\n      ORDER BY similarity DESC\n      LIMIT $${paramIndex++}\n      OFFSET $${paramIndex++}\n    `;\n\n    queryParams.push(limit, offset);\n\n    // Execute the query\n    const { rows } = await pool.query(query, queryParams);\n\n    // Log the search performance\n    const duration = Date.now() - startTime;\n    logger.info('Vector search completed', {\n      context: {\n        duration: `${duration}ms`,\n        resultCount: rows.length,\n        filters,\n        options,\n      },\n    });\n\n    return rows;\n  } catch (error) {\n    // Log the error\n    logger.error('Vector search failed', {\n      context: {\n        error: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : undefined,\n        filters,\n        options,\n      },\n    });\n\n    throw error;\n  }\n}\n\n/**\n * Get similar properties based on a reference property ID\n *\n * @param propertyId - The ID of the reference property\n * @param limit - Maximum number of similar properties to return\n * @returns Array of similar properties\n */\nexport async function getSimilarProperties(propertyId: string, limit = 5) {\n  try {\n    // First, get the embedding of the reference property\n    const propertyQuery = `\n      SELECT embedding\n      FROM properties\n      WHERE id = $1\n    `;\n\n    const propertyResult = await pool.query(propertyQuery, [propertyId]);\n\n    if (propertyResult.rows.length === 0) {\n      throw new Error(`Property with ID ${propertyId} not found`);\n    }\n\n    const embedding = propertyResult.rows[0].embedding;\n\n    // Then, find similar properties\n    const similarQuery = `\n      SELECT \n        p.*,\n        1 - (p.embedding <=> $1) AS similarity\n      FROM properties p\n      WHERE p.id != $2\n      ORDER BY similarity DESC\n      LIMIT $3\n    `;\n\n    const { rows } = await pool.query(similarQuery, [pgvector.toSql(embedding), propertyId, limit]);\n\n    return rows;\n  } catch (error) {\n    logger.error('Failed to get similar properties', {\n      context: {\n        propertyId,\n        error: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : undefined,\n      },\n    });\n\n    throw error;\n  }\n}\n\n/**\n * Generate embeddings for a text query using an external embedding service\n * This is a placeholder - in a real application, you would call an embedding API\n *\n * @param query - The text query to generate embeddings for\n * @returns Vector embedding of the query\n */\nexport async function generateEmbeddings(query: string): Promise<number[]> {\n  try {\n    // In a real application, you would call an embedding API like OpenAI or Cohere\n    // This is a placeholder that returns a random embedding\n    logger.info('Generating embeddings for query', {\n      context: {\n        query: query.length > 100 ? `${query.substring(0, 100)}...` : query,\n      },\n    });\n\n    // For demonstration purposes, generate a random embedding\n    // In production, replace this with a call to your embedding service\n    const dimension = 384; // Common embedding dimension\n    const embedding = Array.from({ length: dimension }, () => Math.random() * 2 - 1);\n\n    // Normalize the embedding (convert to unit vector)\n    const magnitude = Math.sqrt(embedding.reduce((sum, val) => sum + val * val, 0));\n    const normalizedEmbedding = embedding.map((val) => val / magnitude);\n\n    return normalizedEmbedding;\n  } catch (error) {\n    logger.error('Failed to generate embeddings', {\n      context: {\n        query,\n        error: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : undefined,\n      },\n    });\n\n    throw error;\n  }\n}\n\nexport default {\n  semanticPropertySearch,\n  getSimilarProperties,\n  generateEmbeddings,\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\(properties)\\[id]\\PropertyDetailContent.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\(properties)\\[id]\\PropertyDetailData.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\(properties)\\[id]\\error.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\(properties)\\[id]\\loading.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\(properties)\\[id]\\not-found.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\(properties)\\[id]\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 29,
        "column": 12,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 17
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Metadata } from 'next'\r\nimport { Suspense } from 'react'\r\n\r\nimport ErrorBoundary from '@/app/components/ErrorBoundary'\r\nimport { Skeleton } from '@/app/components/ui/Skeleton'\r\nimport { fetchPropertyById } from '@/lib/api'\r\n\r\nimport PropertyDetailData from './PropertyDetailData'\r\n\r\n// Generate dynamic metadata for the property detail page\r\nexport async function generateMetadata({ params }: { params: { id: string } }): Promise<Metadata> {\r\n  try {\r\n    const { property } = await fetchPropertyById(params.id)\r\n\r\n    if (!property) {\r\n      return {\r\n        title: 'Property Not Found | Property Portal',\r\n        description: 'The requested property could not be found.',\r\n      }\r\n    }\r\n\r\n    return {\r\n      title: `${property.title} | Property Portal`,\r\n      description: `View details for ${property.title} located at ${property.location}. Priced at $${property.price.toLocaleString()}.`,\r\n      openGraph: {\r\n        images: [property.imageUrl],\r\n      },\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      title: 'Property Details | Property Portal',\r\n      description: 'View detailed information about this property.',\r\n    }\r\n  }\r\n}\r\n\r\n// Loading skeleton for property detail\r\nfunction PropertyDetailSkeleton() {\r\n  return (\r\n    <div className=\"lg:grid lg:grid-cols-2 lg:gap-x-8 lg:items-start\">\r\n      {/* Image skeleton */}\r\n      <div className=\"aspect-w-1 aspect-h-1 rounded-lg overflow-hidden\">\r\n        <Skeleton className=\"w-full h-full\" />\r\n      </div>\r\n\r\n      {/* Content skeleton */}\r\n      <div className=\"mt-10 px-4 sm:px-0 sm:mt-16 lg:mt-0 space-y-6\">\r\n        <Skeleton className=\"h-8 w-3/4\" />\r\n        <Skeleton className=\"h-8 w-1/3\" />\r\n\r\n        <div className=\"space-y-3\">\r\n          <Skeleton className=\"h-4 w-full\" />\r\n          <Skeleton className=\"h-4 w-full\" />\r\n          <Skeleton className=\"h-4 w-2/3\" />\r\n        </div>\r\n\r\n        <div className=\"flex space-x-2\">\r\n          <Skeleton className=\"h-6 rounded-full w-20\" />\r\n          <Skeleton className=\"h-6 rounded-full w-20\" />\r\n          <Skeleton className=\"h-6 rounded-full w-20\" />\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-2\">\r\n          <div>\r\n            <Skeleton className=\"h-4 w-1/2\" />\r\n            <div className=\"mt-2 space-y-2\">\r\n              <Skeleton className=\"h-4 w-full\" />\r\n              <Skeleton className=\"h-4 w-full\" />\r\n              <Skeleton className=\"h-4 w-2/3\" />\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <Skeleton className=\"h-4 w-1/2\" />\r\n            <div className=\"mt-2 space-y-2\">\r\n              <Skeleton className=\"h-4 w-full\" />\r\n              <Skeleton className=\"h-4 w-full\" />\r\n              <Skeleton className=\"h-4 w-2/3\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// Main page component\r\nexport default async function PropertyDetailPage({ params }: { params: { id: string } }) {\r\n  return (\r\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\r\n      <ErrorBoundary>\r\n        <Suspense fallback={<PropertyDetailSkeleton />}>\r\n          <PropertyDetailData id={params.id} />\r\n        </Suspense>\r\n      </ErrorBoundary>\r\n    </div>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\(properties)\\[id]\\route.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'request' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 5,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'params' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 5,
        "column": 51,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 57
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextRequest } from 'next/server'\r\n\r\nexport const dynamic = 'force-dynamic'\r\n\r\nexport async function GET(request: NextRequest, { params }: { params: { id: string } }) {\r\n  // This file ensures the route is properly configured\r\n  // The actual rendering is handled by page.tsx\r\n  return new Response(null, {\r\n    status: 200,\r\n  })\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\[id]\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\actions\\items.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 53,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 53,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1473, 1523], "text": "" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\actions\\properties.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 127,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 127,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4039, 4042], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4039, 4042], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use server'\r\n\r\nimport { revalidatePath } from 'next/cache'\r\nimport { z } from 'zod'\r\n\r\nimport { prisma } from '@/lib/db'\r\nimport { createPropertySchema, updatePropertySchema } from '@/lib/schemas/propertySchemas'\r\nimport { Property } from '@/types/property'\r\n\r\n/**\r\n * Add a new property listing\r\n */\r\nexport async function addProperty(formData: FormData | z.infer<typeof createPropertySchema>) {\r\n  try {\r\n    // Handle both FormData and direct object input\r\n    const rawData = formData instanceof FormData ? Object.fromEntries(formData.entries()) : formData\r\n\r\n    // Parse and validate the input data\r\n    const validationResult = createPropertySchema.safeParse(rawData)\r\n\r\n    if (!validationResult.success) {\r\n      return {\r\n        success: false,\r\n        error: {\r\n          message: 'Validation error',\r\n          details: validationResult.error.flatten().fieldErrors,\r\n        },\r\n      }\r\n    }\r\n\r\n    const validatedData = validationResult.data\r\n\r\n    // Create the property in the database\r\n    const property = await prisma.property.create({\r\n      data: {\r\n        address: validatedData.address.line1,\r\n        city: validatedData.address.town,\r\n        state: validatedData.address.county || '',\r\n        zipCode: validatedData.address.postcode,\r\n        country: 'United Kingdom',\r\n        price: validatedData.price,\r\n        bedrooms: validatedData.bedrooms || 0,\r\n        bathrooms: validatedData.bathrooms || 0,\r\n        squareFeet: validatedData.squareFootage || 0,\r\n        description: validatedData.description || '',\r\n        features: validatedData.features || [],\r\n        status: validatedData.status,\r\n        type: validatedData.propertyType,\r\n        metadata: {\r\n          title: validatedData.title,\r\n          listingType: validatedData.listingType,\r\n          addressLine2: validatedData.address.line2,\r\n          tenure: validatedData.tenure,\r\n          councilTaxBand: validatedData.councilTaxBand,\r\n          epcRating: validatedData.epcRating,\r\n          furnishingType: validatedData.furnishingType,\r\n          availableFrom: validatedData.availableFrom,\r\n          minimumTenancy: validatedData.minimumTenancy,\r\n          receptionRooms: validatedData.receptionRooms,\r\n          mainImageUrl: validatedData.mainImageUrl,\r\n          imageUrls: validatedData.imageUrls,\r\n        },\r\n        createdBy: 'system', // This would typically come from the authenticated user\r\n      },\r\n    })\r\n\r\n    // Revalidate the properties list page and the new property's detail page\r\n    revalidatePath('/properties')\r\n    revalidatePath(`/properties/${property.id}`)\r\n\r\n    return {\r\n      success: true,\r\n      data: property,\r\n    }\r\n  } catch (error) {\r\n    console.error('Error adding property:', error)\r\n    return {\r\n      success: false,\r\n      error: {\r\n        message: 'Failed to add property',\r\n        details: error instanceof Error ? error.message : 'Unknown error',\r\n      },\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Update an existing property\r\n */\r\nexport async function updateProperty(\r\n  id: string,\r\n  formData: FormData | z.infer<typeof updatePropertySchema>\r\n) {\r\n  try {\r\n    // Handle both FormData and direct object input\r\n    const rawData = formData instanceof FormData ? Object.fromEntries(formData.entries()) : formData\r\n\r\n    // Parse and validate the input data\r\n    const validationResult = updatePropertySchema.safeParse(rawData)\r\n\r\n    if (!validationResult.success) {\r\n      return {\r\n        success: false,\r\n        error: {\r\n          message: 'Validation error',\r\n          details: validationResult.error.flatten().fieldErrors,\r\n        },\r\n      }\r\n    }\r\n\r\n    const validatedData = validationResult.data\r\n\r\n    // Prepare the update data\r\n    const updateData: Partial<{\r\n      address: string\r\n      city: string\r\n      state: string\r\n      zipCode: string\r\n      price: number\r\n      bedrooms: number\r\n      bathrooms: number\r\n      squareFeet: number\r\n      description: string\r\n      features: string[]\r\n      status: string\r\n      type: string\r\n      metadata: Record<string, any>\r\n      updatedBy: string\r\n      updatedAt: Date\r\n    }> = {}\r\n\r\n    // Map the validated data to the database schema\r\n    if (validatedData.address?.line1) updateData.address = validatedData.address.line1\r\n    if (validatedData.address?.town) updateData.city = validatedData.address.town\r\n    if (validatedData.address?.county) updateData.state = validatedData.address.county\r\n    if (validatedData.address?.postcode) updateData.zipCode = validatedData.address.postcode\r\n    if (validatedData.price) updateData.price = validatedData.price\r\n    if (validatedData.bedrooms !== undefined) updateData.bedrooms = validatedData.bedrooms\r\n    if (validatedData.bathrooms !== undefined) updateData.bathrooms = validatedData.bathrooms\r\n    if (validatedData.squareFootage) updateData.squareFeet = validatedData.squareFootage\r\n    if (validatedData.description) updateData.description = validatedData.description\r\n    if (validatedData.features) updateData.features = validatedData.features\r\n    if (validatedData.status) updateData.status = validatedData.status\r\n    if (validatedData.propertyType) updateData.type = validatedData.propertyType\r\n\r\n    // Prepare metadata updates\r\n    const existingProperty = await prisma.property.findUnique({\r\n      where: { id },\r\n      select: { metadata: true },\r\n    })\r\n\r\n    const currentMetadata = existingProperty?.metadata || {}\r\n    const metadataUpdates: Record<\r\n      string,\r\n      string | number | boolean | Date | string[] | null | undefined\r\n    > = {}\r\n\r\n    if (validatedData.title) metadataUpdates.title = validatedData.title\r\n    if (validatedData.listingType) metadataUpdates.listingType = validatedData.listingType\r\n    if (validatedData.address?.line2 !== undefined)\r\n      metadataUpdates.addressLine2 = validatedData.address.line2\r\n    if (validatedData.tenure) metadataUpdates.tenure = validatedData.tenure\r\n    if (validatedData.councilTaxBand) metadataUpdates.councilTaxBand = validatedData.councilTaxBand\r\n    if (validatedData.epcRating) metadataUpdates.epcRating = validatedData.epcRating\r\n    if (validatedData.furnishingType) metadataUpdates.furnishingType = validatedData.furnishingType\r\n    if (validatedData.availableFrom) metadataUpdates.availableFrom = validatedData.availableFrom\r\n    if (validatedData.minimumTenancy !== undefined)\r\n      metadataUpdates.minimumTenancy = validatedData.minimumTenancy\r\n    if (validatedData.receptionRooms !== undefined)\r\n      metadataUpdates.receptionRooms = validatedData.receptionRooms\r\n    if (validatedData.mainImageUrl) metadataUpdates.mainImageUrl = validatedData.mainImageUrl\r\n    if (validatedData.imageUrls) metadataUpdates.imageUrls = validatedData.imageUrls\r\n\r\n    // Only update metadata if there are changes\r\n    if (Object.keys(metadataUpdates).length > 0) {\r\n      updateData.metadata = {\r\n        ...currentMetadata,\r\n        ...metadataUpdates,\r\n      }\r\n    }\r\n\r\n    // Add updatedBy and updatedAt\r\n    updateData.updatedBy = 'system' // This would typically come from the authenticated user\r\n    updateData.updatedAt = new Date()\r\n\r\n    // Update the property\r\n    const property = await prisma.property.update({\r\n      where: { id },\r\n      data: updateData,\r\n    })\r\n\r\n    // Revalidate the properties list page and the property's detail page\r\n    revalidatePath('/properties')\r\n    revalidatePath(`/properties/${id}`)\r\n\r\n    return {\r\n      success: true,\r\n      data: property,\r\n    }\r\n  } catch (error) {\r\n    console.error('Error updating property:', error)\r\n    return {\r\n      success: false,\r\n      error: {\r\n        message: 'Failed to update property',\r\n        details: error instanceof Error ? error.message : 'Unknown error',\r\n      },\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Delete a property\r\n */\r\nexport async function deleteProperty(id: string) {\r\n  try {\r\n    await prisma.property.delete({\r\n      where: { id },\r\n    })\r\n\r\n    // Revalidate the properties list page\r\n    revalidatePath('/properties')\r\n\r\n    return {\r\n      success: true,\r\n    }\r\n  } catch (error) {\r\n    console.error('Error deleting property:', error)\r\n    return {\r\n      success: false,\r\n      error: {\r\n        message: 'Failed to delete property',\r\n        details: error instanceof Error ? error.message : 'Unknown error',\r\n      },\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get a property by ID\r\n */\r\nexport async function getProperty(id: string): Promise<{\r\n  success: boolean\r\n  data?: Property\r\n  error?: {\r\n    message: string\r\n    details?: string\r\n  }\r\n}> {\r\n  try {\r\n    const property = await prisma.property.findUnique({\r\n      where: { id },\r\n    })\r\n\r\n    if (!property) {\r\n      return {\r\n        success: false,\r\n        error: {\r\n          message: 'Property not found',\r\n        },\r\n      }\r\n    }\r\n\r\n    // Convert the database model to the Property type\r\n    const typedProperty: Property = {\r\n      id: property.id,\r\n      title: property.metadata?.title || property.address,\r\n      location: `${property.address}, ${property.city}, ${property.state}`,\r\n      price: property.price,\r\n      imageUrl: property.metadata?.mainImageUrl || 'https://placehold.co/600x400/png?text=Property',\r\n      lat: property.latitude || 51.505,\r\n      lng: property.longitude || -0.09,\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      data: typedProperty,\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching property:', error)\r\n    return {\r\n      success: false,\r\n      error: {\r\n        message: 'Failed to fetch property',\r\n        details: error instanceof Error ? error.message : 'Unknown error',\r\n      },\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get all properties with optional filtering\r\n */\r\nexport async function getProperties(options?: {\r\n  listingType?: 'sale' | 'rent'\r\n  minPrice?: number\r\n  maxPrice?: number\r\n  bedrooms?: number\r\n  propertyType?: string\r\n  location?: string\r\n  status?: string\r\n  limit?: number\r\n  offset?: number\r\n}): Promise<{\r\n  success: boolean\r\n  data?: {\r\n    properties: Property[]\r\n    totalCount: number\r\n  }\r\n  error?: {\r\n    message: string\r\n    details?: string\r\n  }\r\n}> {\r\n  try {\r\n    const where: Record<string, unknown> = {}\r\n\r\n    // Apply filters\r\n    if (options?.listingType) {\r\n      where.metadata = {\r\n        path: ['listingType'],\r\n        equals: options.listingType,\r\n      }\r\n    }\r\n\r\n    if (options?.minPrice) {\r\n      where.price = {\r\n        ...where.price,\r\n        gte: options.minPrice,\r\n      }\r\n    }\r\n\r\n    if (options?.maxPrice) {\r\n      where.price = {\r\n        ...where.price,\r\n        lte: options.maxPrice,\r\n      }\r\n    }\r\n\r\n    if (options?.bedrooms) {\r\n      where.bedrooms = {\r\n        gte: options.bedrooms,\r\n      }\r\n    }\r\n\r\n    if (options?.propertyType) {\r\n      where.type = options.propertyType\r\n    }\r\n\r\n    if (options?.location) {\r\n      where.OR = [\r\n        { address: { contains: options.location, mode: 'insensitive' } },\r\n        { city: { contains: options.location, mode: 'insensitive' } },\r\n        { state: { contains: options.location, mode: 'insensitive' } },\r\n        { zipCode: { contains: options.location, mode: 'insensitive' } },\r\n      ]\r\n    }\r\n\r\n    if (options?.status) {\r\n      where.status = options.status\r\n    }\r\n\r\n    // Get total count for pagination\r\n    const totalCount = await prisma.property.count({ where })\r\n\r\n    // Get properties with pagination\r\n    const properties = await prisma.property.findMany({\r\n      where,\r\n      take: options?.limit || 10,\r\n      skip: options?.offset || 0,\r\n      orderBy: { createdAt: 'desc' },\r\n    })\r\n\r\n    // Convert the database models to the Property type\r\n    const typedProperties: Property[] = properties.map(property => ({\r\n      id: property.id,\r\n      title: property.metadata?.title || property.address,\r\n      location: `${property.address}, ${property.city}, ${property.state}`,\r\n      price: property.price,\r\n      imageUrl: property.metadata?.mainImageUrl || 'https://placehold.co/600x400/png?text=Property',\r\n      lat: property.latitude || 51.505,\r\n      lng: property.longitude || -0.09,\r\n    }))\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        properties: typedProperties,\r\n        totalCount,\r\n      },\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching properties:', error)\r\n    return {\r\n      success: false,\r\n      error: {\r\n        message: 'Failed to fetch properties',\r\n        details: error instanceof Error ? error.message : 'Unknown error',\r\n      },\r\n    }\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\agent\\properties\\components\\PropertyForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\agent\\properties\\new\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\api\\auth\\[...nextauth]\\route.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\api\\embeddings\\route.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'prisma' is defined but never used.",
        "line": 3,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 16
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextRequest, NextResponse } from 'next/server'\n\nimport { prisma } from '@/lib/db'\nimport { generatePropertyEmbedding } from '@/lib/embeddings'\nimport { createPropertySchema } from '@/lib/schemas/propertySchemas'\n\n/**\n * API route to generate embeddings for a property\n * POST /api/embeddings\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // Parse request body\n    const body = await request.json()\n\n    // Validate property data\n    const validationResult = createPropertySchema.safeParse(body)\n    if (!validationResult.success) {\n      return NextResponse.json(\n        { error: 'Invalid property data', details: validationResult.error.format() },\n        { status: 400 }\n      )\n    }\n\n    const propertyData = validationResult.data\n\n    // Generate embedding\n    const embedding = await generatePropertyEmbedding({\n      title: propertyData.title,\n      location: propertyData.location,\n      description: body.description || '',\n    })\n\n    // Return the embedding\n    return NextResponse.json({ embedding })\n  } catch (error) {\n    console.error('Error generating embedding:', error)\n    return NextResponse.json({ error: 'Failed to generate embedding' }, { status: 500 })\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\api\\items\\route.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 33,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 33,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1044, 1094], "text": "" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\api\\properties\\[id]\\route.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\api\\properties\\route.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\api\\properties\\similar\\route.test.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 24,
        "column": 64,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 24,
        "endColumn": 67,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [577, 580], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [577, 580], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextRequest } from 'next/server'\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'\n\nimport { prisma } from '@/lib/db'\nimport { generatePropertyEmbedding } from '@/lib/embeddings'\n\nimport { GET, POST } from './route'\n\n// Mock dependencies\nvi.mock('@/lib/db', () => ({\n  prisma: {\n    $queryRaw: vi.fn(),\n    property: {\n      findUnique: vi.fn(),\n    },\n  },\n}))\n\nvi.mock('@/lib/embeddings', () => ({\n  generatePropertyEmbedding: vi.fn(),\n}))\n\n// Helper to create a mock NextRequest\nfunction createMockRequest(method: string, url: string, body?: any): NextRequest {\n  const request = {\n    method,\n    nextUrl: new URL(url, 'http://localhost:3000'),\n    json: vi.fn().mockResolvedValue(body),\n  } as unknown as NextRequest\n\n  return request\n}\n\ndescribe('Similar Properties API', () => {\n  beforeEach(() => {\n    vi.resetAllMocks()\n  })\n\n  afterEach(() => {\n    vi.clearAllMocks()\n  })\n\n  describe('GET /api/properties/similar', () => {\n    it('returns 400 if query parameter is missing', async () => {\n      // Create a request without a query parameter\n      const request = createMockRequest('GET', 'http://localhost:3000/api/properties/similar')\n\n      // Call the handler\n      const response = await GET(request)\n      const data = await response.json()\n\n      // Verify the response\n      expect(response.status).toBe(400)\n      expect(data).toEqual({ error: 'Query parameter is required' })\n    })\n\n    it('returns similar properties based on query', async () => {\n      // Mock the embedding generation\n      const mockEmbedding = Array(1536).fill(0.1)\n      vi.mocked(generatePropertyEmbedding).mockResolvedValueOnce(mockEmbedding)\n\n      // Mock the database query\n      const mockProperties = [\n        { id: '1', title: 'Property 1', similarity: 0.1 },\n        { id: '2', title: 'Property 2', similarity: 0.2 },\n      ]\n      vi.mocked(prisma.$queryRaw).mockResolvedValueOnce(mockProperties)\n\n      // Create a request with a query parameter\n      const request = createMockRequest(\n        'GET',\n        'http://localhost:3000/api/properties/similar?query=modern+apartment&limit=2'\n      )\n\n      // Call the handler\n      const response = await GET(request)\n      const data = await response.json()\n\n      // Verify the response\n      expect(response.status).toBe(200)\n      expect(data).toEqual({ properties: mockProperties })\n\n      // Verify the embedding was generated with the correct parameters\n      expect(generatePropertyEmbedding).toHaveBeenCalledWith({\n        title: 'modern apartment',\n        location: '',\n      })\n\n      // Verify the database query was called with the correct parameters\n      expect(prisma.$queryRaw).toHaveBeenCalled()\n    })\n\n    it('handles errors and returns 500', async () => {\n      // Mock the embedding generation to throw an error\n      vi.mocked(generatePropertyEmbedding).mockRejectedValueOnce(new Error('Test error'))\n\n      // Create a request with a query parameter\n      const request = createMockRequest(\n        'GET',\n        'http://localhost:3000/api/properties/similar?query=modern+apartment'\n      )\n\n      // Call the handler\n      const response = await GET(request)\n      const data = await response.json()\n\n      // Verify the response\n      expect(response.status).toBe(500)\n      expect(data).toEqual({ error: 'Failed to find similar properties' })\n    })\n  })\n\n  describe('POST /api/properties/similar', () => {\n    it('returns 400 if propertyId is missing', async () => {\n      // Create a request without a propertyId\n      const request = createMockRequest('POST', 'http://localhost:3000/api/properties/similar', {})\n\n      // Call the handler\n      const response = await POST(request)\n      const data = await response.json()\n\n      // Verify the response\n      expect(response.status).toBe(400)\n      expect(data).toEqual({ error: 'Property ID is required' })\n    })\n\n    it('returns 404 if property is not found', async () => {\n      // Mock the database query to return null\n      vi.mocked(prisma.property.findUnique).mockResolvedValueOnce(null)\n\n      // Create a request with a propertyId\n      const request = createMockRequest('POST', 'http://localhost:3000/api/properties/similar', {\n        propertyId: '999',\n      })\n\n      // Call the handler\n      const response = await POST(request)\n      const data = await response.json()\n\n      // Verify the response\n      expect(response.status).toBe(404)\n      expect(data).toEqual({ error: 'Property not found or has no embedding' })\n    })\n\n    it('returns 404 if property has no embedding', async () => {\n      // Mock the database query to return a property without an embedding\n      vi.mocked(prisma.property.findUnique).mockResolvedValueOnce({\n        id: '1',\n        embedding: null,\n      })\n\n      // Create a request with a propertyId\n      const request = createMockRequest('POST', 'http://localhost:3000/api/properties/similar', {\n        propertyId: '1',\n      })\n\n      // Call the handler\n      const response = await POST(request)\n      const data = await response.json()\n\n      // Verify the response\n      expect(response.status).toBe(404)\n      expect(data).toEqual({ error: 'Property not found or has no embedding' })\n    })\n\n    it('returns similar properties based on propertyId', async () => {\n      // Mock the database query to return a property with an embedding\n      const mockEmbedding = Array(1536).fill(0.1)\n      vi.mocked(prisma.property.findUnique).mockResolvedValueOnce({\n        id: '1',\n        embedding: mockEmbedding,\n      })\n\n      // Mock the database query for similar properties\n      const mockProperties = [\n        { id: '2', title: 'Property 2', similarity: 0.1 },\n        { id: '3', title: 'Property 3', similarity: 0.2 },\n      ]\n      vi.mocked(prisma.$queryRaw).mockResolvedValueOnce(mockProperties)\n\n      // Create a request with a propertyId\n      const request = createMockRequest('POST', 'http://localhost:3000/api/properties/similar', {\n        propertyId: '1',\n        limit: 2,\n      })\n\n      // Call the handler\n      const response = await POST(request)\n      const data = await response.json()\n\n      // Verify the response\n      expect(response.status).toBe(200)\n      expect(data).toEqual({ properties: mockProperties })\n\n      // Verify the database queries were called with the correct parameters\n      expect(prisma.property.findUnique).toHaveBeenCalledWith({\n        where: { id: '1' },\n        select: { id: true, embedding: true },\n      })\n\n      expect(prisma.$queryRaw).toHaveBeenCalled()\n    })\n\n    it('handles errors and returns 500', async () => {\n      // Mock the database query to throw an error\n      vi.mocked(prisma.property.findUnique).mockRejectedValueOnce(new Error('Test error'))\n\n      // Create a request with a propertyId\n      const request = createMockRequest('POST', 'http://localhost:3000/api/properties/similar', {\n        propertyId: '1',\n      })\n\n      // Call the handler\n      const response = await POST(request)\n      const data = await response.json()\n\n      // Verify the response\n      expect(response.status).toBe(500)\n      expect(data).toEqual({ error: 'Failed to find similar properties' })\n    })\n  })\n})\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\api\\properties\\similar\\route.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\components\\AddPropertyForm.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'CreatePropertyInput' is defined but never used.",
        "line": 6,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport { useState } from 'react'\r\n\r\nimport { addProperty } from '@/app/actions/properties'\r\nimport { CreatePropertyInput } from '@/lib/schemas/propertySchemas'\r\n\r\nexport default function AddPropertyForm() {\r\n  const [isSubmitting, setIsSubmitting] = useState(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [success, setSuccess] = useState(false)\r\n\r\n  async function handleSubmit(formData: FormData) {\r\n    setIsSubmitting(true)\r\n    setError(null)\r\n    setSuccess(false)\r\n\r\n    try {\r\n      const result = await addProperty(formData)\r\n\r\n      if (result.success) {\r\n        setSuccess(true)\r\n        // Reset form\r\n        ;(document.getElementById('property-form') as HTMLFormElement).reset()\r\n      } else {\r\n        setError(result.error?.message || 'Failed to add property')\r\n        console.error('Validation errors:', result.error?.details)\r\n      }\r\n    } catch (err) {\r\n      setError('An unexpected error occurred')\r\n      console.error(err)\r\n    } finally {\r\n      setIsSubmitting(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"max-w-2xl mx-auto p-6 bg-white rounded-lg shadow-md\">\r\n      <h2 className=\"text-2xl font-bold mb-6\">Add New Property</h2>\r\n\r\n      {error && <div className=\"mb-4 p-4 text-red-700 bg-red-100 rounded-md\">{error}</div>}\r\n\r\n      {success && (\r\n        <div className=\"mb-4 p-4 text-green-700 bg-green-100 rounded-md\">\r\n          Property added successfully!\r\n        </div>\r\n      )}\r\n\r\n      <form id=\"property-form\" action={handleSubmit} className=\"space-y-6\">\r\n        <div className=\"space-y-4\">\r\n          <h3 className=\"text-lg font-medium\">Basic Information</h3>\r\n\r\n          <div>\r\n            <label htmlFor=\"title\" className=\"block text-sm font-medium text-gray-700\">\r\n              Property Title\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"title\"\r\n              name=\"title\"\r\n              required\r\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-2 gap-4\">\r\n            <div>\r\n              <label htmlFor=\"price\" className=\"block text-sm font-medium text-gray-700\">\r\n                Price (£)\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                id=\"price\"\r\n                name=\"price\"\r\n                required\r\n                min=\"0\"\r\n                step=\"1000\"\r\n                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <label htmlFor=\"listingType\" className=\"block text-sm font-medium text-gray-700\">\r\n                Listing Type\r\n              </label>\r\n              <select\r\n                id=\"listingType\"\r\n                name=\"listingType\"\r\n                required\r\n                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n              >\r\n                <option value=\"sale\">For Sale</option>\r\n                <option value=\"rent\">For Rent</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"propertyType\" className=\"block text-sm font-medium text-gray-700\">\r\n              Property Type\r\n            </label>\r\n            <select\r\n              id=\"propertyType\"\r\n              name=\"propertyType\"\r\n              required\r\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n            >\r\n              <option value=\"flat\">Flat</option>\r\n              <option value=\"apartment\">Apartment</option>\r\n              <option value=\"house\">House</option>\r\n              <option value=\"bungalow\">Bungalow</option>\r\n              <option value=\"maisonette\">Maisonette</option>\r\n              <option value=\"cottage\">Cottage</option>\r\n              <option value=\"land\">Land</option>\r\n              <option value=\"commercial\">Commercial</option>\r\n              <option value=\"other\">Other</option>\r\n            </select>\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700\">\r\n              Description\r\n            </label>\r\n            <textarea\r\n              id=\"description\"\r\n              name=\"description\"\r\n              rows={4}\r\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n            ></textarea>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"space-y-4\">\r\n          <h3 className=\"text-lg font-medium\">Address</h3>\r\n\r\n          <div>\r\n            <label htmlFor=\"address.line1\" className=\"block text-sm font-medium text-gray-700\">\r\n              Address Line 1\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"address.line1\"\r\n              name=\"address.line1\"\r\n              required\r\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"address.line2\" className=\"block text-sm font-medium text-gray-700\">\r\n              Address Line 2 (Optional)\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"address.line2\"\r\n              name=\"address.line2\"\r\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-2 gap-4\">\r\n            <div>\r\n              <label htmlFor=\"address.town\" className=\"block text-sm font-medium text-gray-700\">\r\n                Town/City\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"address.town\"\r\n                name=\"address.town\"\r\n                required\r\n                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <label htmlFor=\"address.county\" className=\"block text-sm font-medium text-gray-700\">\r\n                County (Optional)\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"address.county\"\r\n                name=\"address.county\"\r\n                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"address.postcode\" className=\"block text-sm font-medium text-gray-700\">\r\n              Postcode\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"address.postcode\"\r\n              name=\"address.postcode\"\r\n              required\r\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"space-y-4\">\r\n          <h3 className=\"text-lg font-medium\">Property Details</h3>\r\n\r\n          <div className=\"grid grid-cols-3 gap-4\">\r\n            <div>\r\n              <label htmlFor=\"bedrooms\" className=\"block text-sm font-medium text-gray-700\">\r\n                Bedrooms\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                id=\"bedrooms\"\r\n                name=\"bedrooms\"\r\n                min=\"0\"\r\n                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <label htmlFor=\"bathrooms\" className=\"block text-sm font-medium text-gray-700\">\r\n                Bathrooms\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                id=\"bathrooms\"\r\n                name=\"bathrooms\"\r\n                min=\"0\"\r\n                step=\"0.5\"\r\n                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <label htmlFor=\"receptionRooms\" className=\"block text-sm font-medium text-gray-700\">\r\n                Reception Rooms\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                id=\"receptionRooms\"\r\n                name=\"receptionRooms\"\r\n                min=\"0\"\r\n                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"squareFootage\" className=\"block text-sm font-medium text-gray-700\">\r\n              Square Footage\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"squareFootage\"\r\n              name=\"squareFootage\"\r\n              min=\"0\"\r\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-2 gap-4\">\r\n            <div>\r\n              <label htmlFor=\"tenure\" className=\"block text-sm font-medium text-gray-700\">\r\n                Tenure\r\n              </label>\r\n              <select\r\n                id=\"tenure\"\r\n                name=\"tenure\"\r\n                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n              >\r\n                <option value=\"\">-- Select --</option>\r\n                <option value=\"freehold\">Freehold</option>\r\n                <option value=\"leasehold\">Leasehold</option>\r\n                <option value=\"share_of_freehold\">Share of Freehold</option>\r\n                <option value=\"commonhold\">Commonhold</option>\r\n              </select>\r\n            </div>\r\n\r\n            <div>\r\n              <label htmlFor=\"councilTaxBand\" className=\"block text-sm font-medium text-gray-700\">\r\n                Council Tax Band\r\n              </label>\r\n              <select\r\n                id=\"councilTaxBand\"\r\n                name=\"councilTaxBand\"\r\n                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n              >\r\n                <option value=\"\">-- Select --</option>\r\n                <option value=\"A\">Band A</option>\r\n                <option value=\"B\">Band B</option>\r\n                <option value=\"C\">Band C</option>\r\n                <option value=\"D\">Band D</option>\r\n                <option value=\"E\">Band E</option>\r\n                <option value=\"F\">Band F</option>\r\n                <option value=\"G\">Band G</option>\r\n                <option value=\"H\">Band H</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"epcRating\" className=\"block text-sm font-medium text-gray-700\">\r\n              EPC Rating\r\n            </label>\r\n            <select\r\n              id=\"epcRating\"\r\n              name=\"epcRating\"\r\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\r\n            >\r\n              <option value=\"\">-- Select --</option>\r\n              <option value=\"A\">A</option>\r\n              <option value=\"B\">B</option>\r\n              <option value=\"C\">C</option>\r\n              <option value=\"D\">D</option>\r\n              <option value=\"E\">E</option>\r\n              <option value=\"F\">F</option>\r\n              <option value=\"G\">G</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"pt-5\">\r\n          <div className=\"flex justify-end\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\r\n              onClick={() => (document.getElementById('property-form') as HTMLFormElement).reset()}\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              disabled={isSubmitting}\r\n              className=\"ml-3 inline-flex justify-center rounded-md border border-transparent bg-blue-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:bg-blue-400\"\r\n            >\r\n              {isSubmitting ? 'Submitting...' : 'Add Property'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\components\\ErrorBoundary.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ErrorDisplay' is defined but never used.",
        "line": 5,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 20
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport { ReactNode } from 'react'\r\n\r\nimport ErrorDisplay from './ErrorDisplay'\r\n\r\nexport default function ErrorBoundary({ children }: { children: ReactNode }) {\r\n  return children\r\n}\r\n\r\nErrorBoundary.displayName = 'ErrorBoundary'\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\components\\ErrorDisplay.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\components\\Header.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\components\\LoadingSkeleton.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\components\\PropertyCard.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'id' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 8,
        "column": 40,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 42
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport Image from 'next/image'\r\nimport React from 'react'\r\n\r\nimport { Property } from '@/types/property'\r\n\r\nexport default function PropertyCard({ id, title, location, price, imageUrl }: Property) {\r\n  return (\r\n    <div className=\"border rounded-lg shadow-sm overflow-hidden hover:shadow-md transition\">\r\n      <Image\r\n        src={imageUrl}\r\n        alt={title}\r\n        width={400}\r\n        height={250}\r\n        className=\"w-full h-64 object-cover\"\r\n        priority\r\n      />\r\n      <div className=\"p-4\">\r\n        <h2 className=\"text-xl font-semibold\">{title}</h2>\r\n        <p className=\"text-gray-600\">{location}</p>\r\n        <p className=\"text-blue-600 font-bold mt-2\">${price.toLocaleString()}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\components\\PropertyList.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'totalCount' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 22,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport Link from 'next/link'\r\n\r\nimport { Property } from '@/types/property'\r\n\r\nimport PropertyCard from './PropertyCard'\r\n\r\ninterface PropertyListProps {\r\n  properties: Property[]\r\n  totalCount: number\r\n  page: number\r\n  totalPages: number\r\n  searchParams: { [key: string]: string | string[] | undefined }\r\n}\r\n\r\n/**\r\n * Displays a grid of property cards with pagination\r\n */\r\nexport default function PropertyList({\r\n  properties,\r\n  totalCount,\r\n  page,\r\n  totalPages,\r\n  searchParams,\r\n}: PropertyListProps) {\r\n  if (properties.length === 0) {\r\n    return (\r\n      <div className=\"text-center py-12\">\r\n        <h3 className=\"mt-2 text-lg font-medium text-gray-900\">No properties found</h3>\r\n        <p className=\"mt-1 text-sm text-gray-500\">Try adjusting your search filters.</p>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3\">\r\n        {properties.map(property => (\r\n          <PropertyCard key={property.id} {...property} />\r\n        ))}\r\n      </div>\r\n\r\n      {/* Pagination */}\r\n      {totalPages > 1 && (\r\n        <div className=\"mt-8 flex justify-center\">\r\n          <nav\r\n            className=\"relative z-0 inline-flex rounded-md shadow-sm -space-x-px\"\r\n            aria-label=\"Pagination\"\r\n          >\r\n            {page > 1 && (\r\n              <Link\r\n                href={{\r\n                  pathname: '/properties',\r\n                  query: { ...searchParams, page: page - 1 },\r\n                }}\r\n                className=\"relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50\"\r\n              >\r\n                <span className=\"sr-only\">Previous</span>\r\n                <svg\r\n                  className=\"h-5 w-5\"\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  viewBox=\"0 0 20 20\"\r\n                  fill=\"currentColor\"\r\n                  aria-hidden=\"true\"\r\n                >\r\n                  <path\r\n                    fillRule=\"evenodd\"\r\n                    d=\"M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z\"\r\n                    clipRule=\"evenodd\"\r\n                  />\r\n                </svg>\r\n              </Link>\r\n            )}\r\n\r\n            {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\r\n              const pageNumber = page <= 3 ? i + 1 : page - 2 + i\r\n              if (pageNumber > totalPages) return null\r\n              return (\r\n                <Link\r\n                  key={pageNumber}\r\n                  href={{\r\n                    pathname: '/properties',\r\n                    query: { ...searchParams, page: pageNumber },\r\n                  }}\r\n                  className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${\r\n                    page === pageNumber\r\n                      ? 'z-10 bg-blue-50 border-blue-500 text-blue-600'\r\n                      : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'\r\n                  }`}\r\n                >\r\n                  {pageNumber}\r\n                </Link>\r\n              )\r\n            })}\r\n\r\n            {page < totalPages && (\r\n              <Link\r\n                href={{\r\n                  pathname: '/properties',\r\n                  query: { ...searchParams, page: page + 1 },\r\n                }}\r\n                className=\"relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50\"\r\n              >\r\n                <span className=\"sr-only\">Next</span>\r\n                <svg\r\n                  className=\"h-5 w-5\"\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  viewBox=\"0 0 20 20\"\r\n                  fill=\"currentColor\"\r\n                  aria-hidden=\"true\"\r\n                >\r\n                  <path\r\n                    fillRule=\"evenodd\"\r\n                    d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\"\r\n                    clipRule=\"evenodd\"\r\n                  />\r\n                </svg>\r\n              </Link>\r\n            )}\r\n          </nav>\r\n        </div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\components\\PropertyTimestamps.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\components\\SearchInput.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isPending' is assigned a value but never used.",
        "line": 10,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 19
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.",
        "line": 12,
        "column": 24,
        "nodeType": "Identifier",
        "endLine": 12,
        "endColumn": 35
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client'\r\nimport debounce from 'lodash.debounce'\r\nimport { useRouter, useSearchParams } from 'next/navigation'\r\nimport { useCallback, useState, useTransition } from 'react'\r\n\r\nexport default function SearchInput() {\r\n  const [query, setQuery] = useState('')\r\n  const router = useRouter()\r\n  const searchParams = useSearchParams()\r\n  const [isPending, startTransition] = useTransition()\r\n\r\n  const handleSearch = useCallback(\r\n    debounce((q: string) => {\r\n      const params = new URLSearchParams(searchParams.toString())\r\n      if (q) {\r\n        params.set('q', q)\r\n      } else {\r\n        params.delete('q')\r\n      }\r\n      startTransition(() => {\r\n        router.push(`/search?${params.toString()}`)\r\n      })\r\n    }, 400),\r\n    []\r\n  )\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const val = e.target.value\r\n    setQuery(val)\r\n    handleSearch(val)\r\n  }\r\n\r\n  return (\r\n    <div className=\"mb-6\">\r\n      <input\r\n        type=\"text\"\r\n        className=\"w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n        placeholder=\"Search by title or location...\"\r\n        onChange={onChange}\r\n        value={query}\r\n        aria-label=\"Search Properties\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\components\\ThemeScript.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\components\\ThemeToggle.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\components\\ui\\Skeleton.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\examples\\location-search\\layout.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\examples\\location-search\\page.tsx",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 15,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 15,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [489, 532], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 27,
        "column": 13,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": {
              "range": [833, 1001],
              "text": "\r\n            Search for UK postcodes, cities, towns, or addresses. Try typing a partial postcode like\r\n            &quot;SW1\" or a place name like \"Manchester\".\r\n          "
            },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": {
              "range": [833, 1001],
              "text": "\r\n            Search for UK postcodes, cities, towns, or addresses. Try typing a partial postcode like\r\n            &ldquo;SW1\" or a place name like \"Manchester\".\r\n          "
            },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": {
              "range": [833, 1001],
              "text": "\r\n            Search for UK postcodes, cities, towns, or addresses. Try typing a partial postcode like\r\n            &#34;SW1\" or a place name like \"Manchester\".\r\n          "
            },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": {
              "range": [833, 1001],
              "text": "\r\n            Search for UK postcodes, cities, towns, or addresses. Try typing a partial postcode like\r\n            &rdquo;SW1\" or a place name like \"Manchester\".\r\n          "
            },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 27,
        "column": 17,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": {
              "range": [833, 1001],
              "text": "\r\n            Search for UK postcodes, cities, towns, or addresses. Try typing a partial postcode like\r\n            \"SW1&quot; or a place name like \"Manchester\".\r\n          "
            },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": {
              "range": [833, 1001],
              "text": "\r\n            Search for UK postcodes, cities, towns, or addresses. Try typing a partial postcode like\r\n            \"SW1&ldquo; or a place name like \"Manchester\".\r\n          "
            },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": {
              "range": [833, 1001],
              "text": "\r\n            Search for UK postcodes, cities, towns, or addresses. Try typing a partial postcode like\r\n            \"SW1&#34; or a place name like \"Manchester\".\r\n          "
            },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": {
              "range": [833, 1001],
              "text": "\r\n            Search for UK postcodes, cities, towns, or addresses. Try typing a partial postcode like\r\n            \"SW1&rdquo; or a place name like \"Manchester\".\r\n          "
            },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 27,
        "column": 40,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": {
              "range": [833, 1001],
              "text": "\r\n            Search for UK postcodes, cities, towns, or addresses. Try typing a partial postcode like\r\n            \"SW1\" or a place name like &quot;Manchester\".\r\n          "
            },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": {
              "range": [833, 1001],
              "text": "\r\n            Search for UK postcodes, cities, towns, or addresses. Try typing a partial postcode like\r\n            \"SW1\" or a place name like &ldquo;Manchester\".\r\n          "
            },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": {
              "range": [833, 1001],
              "text": "\r\n            Search for UK postcodes, cities, towns, or addresses. Try typing a partial postcode like\r\n            \"SW1\" or a place name like &#34;Manchester\".\r\n          "
            },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": {
              "range": [833, 1001],
              "text": "\r\n            Search for UK postcodes, cities, towns, or addresses. Try typing a partial postcode like\r\n            \"SW1\" or a place name like &rdquo;Manchester\".\r\n          "
            },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 27,
        "column": 51,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": {
              "range": [833, 1001],
              "text": "\r\n            Search for UK postcodes, cities, towns, or addresses. Try typing a partial postcode like\r\n            \"SW1\" or a place name like \"Manchester&quot;.\r\n          "
            },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": {
              "range": [833, 1001],
              "text": "\r\n            Search for UK postcodes, cities, towns, or addresses. Try typing a partial postcode like\r\n            \"SW1\" or a place name like \"Manchester&ldquo;.\r\n          "
            },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": {
              "range": [833, 1001],
              "text": "\r\n            Search for UK postcodes, cities, towns, or addresses. Try typing a partial postcode like\r\n            \"SW1\" or a place name like \"Manchester&#34;.\r\n          "
            },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": {
              "range": [833, 1001],
              "text": "\r\n            Search for UK postcodes, cities, towns, or addresses. Try typing a partial postcode like\r\n            \"SW1\" or a place name like \"Manchester&rdquo;.\r\n          "
            },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      },
      {
        "ruleId": "jsx-a11y/iframe-has-title",
        "severity": 2,
        "message": "<iframe> elements must have a unique title property.",
        "line": 56,
        "column": 17,
        "nodeType": "JSXOpeningElement",
        "endLine": 62,
        "endColumn": 18
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport React, { useState } from 'react'\r\n\r\nimport LocationSearch from '@/components/LocationSearch'\r\nimport { LocationResult } from '@/lib/services/locationService'\r\n\r\n/**\r\n * Example page demonstrating the UK location search and autocomplete functionality\r\n */\r\nexport default function LocationSearchExample() {\r\n  const [selectedLocation, setSelectedLocation] = useState<LocationResult | null>(null)\r\n\r\n  const handleLocationSelect = (location: LocationResult) => {\r\n    console.log('Selected location:', location)\r\n    setSelectedLocation(location)\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <div className=\"max-w-3xl mx-auto\">\r\n        <h1 className=\"text-3xl font-bold mb-6\">UK Location Search</h1>\r\n\r\n        <div className=\"mb-8\">\r\n          <p className=\"text-gray-600 mb-4\">\r\n            Search for UK postcodes, cities, towns, or addresses. Try typing a partial postcode like\r\n            \"SW1\" or a place name like \"Manchester\".\r\n          </p>\r\n\r\n          <LocationSearch\r\n            onSelect={handleLocationSelect}\r\n            placeholder=\"Enter a UK postcode or location\"\r\n            className=\"w-full\"\r\n          />\r\n        </div>\r\n\r\n        {selectedLocation && (\r\n          <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n            <h2 className=\"text-xl font-semibold mb-4\">Selected Location</h2>\r\n\r\n            <div className=\"space-y-2\">\r\n              <p>\r\n                <span className=\"font-medium\">Location:</span> {selectedLocation.label}\r\n              </p>\r\n              <p>\r\n                <span className=\"font-medium\">Latitude:</span> {selectedLocation.lat}\r\n              </p>\r\n              <p>\r\n                <span className=\"font-medium\">Longitude:</span> {selectedLocation.lng}\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"mt-6\">\r\n              <h3 className=\"text-lg font-medium mb-2\">Map Preview</h3>\r\n              <div className=\"aspect-video bg-gray-100 rounded overflow-hidden\">\r\n                <iframe\r\n                  width=\"100%\"\r\n                  height=\"100%\"\r\n                  frameBorder=\"0\"\r\n                  src={`https://www.google.com/maps/embed/v1/place?key=YOUR_GOOGLE_MAPS_API_KEY&q=${selectedLocation.lat},${selectedLocation.lng}&zoom=15`}\r\n                  allowFullScreen\r\n                ></iframe>\r\n                <p className=\"text-xs text-center mt-1 text-gray-500\">\r\n                  Note: Replace YOUR_GOOGLE_MAPS_API_KEY with an actual API key to see the map\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"mt-8 p-4 bg-blue-50 rounded-lg\">\r\n          <h2 className=\"text-lg font-semibold mb-2\">Implementation Notes</h2>\r\n          <ul className=\"list-disc pl-5 space-y-1 text-sm\">\r\n            <li>This component uses the MapTiler Geocoding API for UK location search</li>\r\n            <li>\r\n              Make sure to set the{' '}\r\n              <code className=\"bg-gray-200 px-1 rounded\">MAPTILER_API_KEY</code> environment\r\n              variable\r\n            </li>\r\n            <li>The search is debounced to prevent excessive API calls</li>\r\n            <li>Results are limited to UK locations only</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\layout.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\login\\metadata.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\login\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'useRouter' is defined but never used.",
        "line": 5,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport { SignIn } from '@clerk/nextjs'\r\nimport Link from 'next/link'\r\nimport { useRouter } from 'next/navigation'\r\n\r\nexport default function Login() {\r\n  return (\r\n    <div className=\"flex min-h-screen flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\r\n      <div className=\"w-full max-w-md space-y-8\">\r\n        <div>\r\n          <h2 className=\"mt-6 text-center text-3xl font-bold tracking-tight text-gray-900\">\r\n            Sign in to your account\r\n          </h2>\r\n          <p className=\"mt-2 text-center text-sm text-gray-600\">\r\n            Or{' '}\r\n            <Link href=\"/register\" className=\"font-medium text-blue-600 hover:text-blue-500\">\r\n              create a new account\r\n            </Link>\r\n          </p>\r\n        </div>\r\n\r\n        {/* Clerk's SignIn component handles the entire authentication flow */}\r\n        <SignIn path=\"/login\" routing=\"path\" signUpUrl=\"/register\" redirectUrl=\"/dashboard\" />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\next.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\properties\\[id]\\NearbyProperties.test.tsx",
    "messages": [
      {
        "ruleId": "import/order",
        "severity": 2,
        "message": "`@/lib/api` import should occur before import of `./NearbyProperties`",
        "line": 22,
        "column": 1,
        "nodeType": "ImportDeclaration",
        "endLine": 22,
        "endColumn": 50
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { render, screen } from '@testing-library/react'\nimport { describe, it, expect, vi } from 'vitest'\n\nimport NearbyProperties from './NearbyProperties'\n\n// Mock the fetchNearbyProperties function\nvi.mock('@/lib/api', () => ({\n  fetchNearbyProperties: vi.fn(),\n}))\n\n// Mock the PropertyCard component\nvi.mock('@/components/PropertyCard', () => ({\n  __esModule: true,\n  default: ({ property }) => (\n    <div data-testid=\"property-card\">\n      <h3>{property.title}</h3>\n      <p>{property.location}</p>\n    </div>\n  ),\n}))\n\nimport { fetchNearbyProperties } from '@/lib/api'\n\ndescribe('NearbyProperties', () => {\n  it('renders nearby properties when available', async () => {\n    // Mock the API response\n    const mockNearbyProperties = [\n      {\n        id: '2',\n        title: 'Beach House',\n        location: 'Santa Monica, CA',\n        price: 1200000,\n      },\n      {\n        id: '3',\n        title: 'Mountain Retreat',\n        location: 'Topanga, CA',\n        price: 950000,\n      },\n    ]\n\n    // Set up the mock to return our test data\n    vi.mocked(fetchNearbyProperties).mockResolvedValue(mockNearbyProperties)\n\n    // Render the component\n    render(<NearbyProperties propertyId=\"1\" lat={34.0259} lng={-118.7798} />)\n\n    // Check for section title\n    expect(await screen.findByText('Nearby Properties')).toBeInTheDocument()\n\n    // Check for property cards\n    expect(await screen.findByText('Beach House')).toBeInTheDocument()\n    expect(await screen.findByText('Santa Monica, CA')).toBeInTheDocument()\n    expect(await screen.findByText('Mountain Retreat')).toBeInTheDocument()\n    expect(await screen.findByText('Topanga, CA')).toBeInTheDocument()\n\n    // Check that the API was called with correct parameters\n    expect(fetchNearbyProperties).toHaveBeenCalledWith('1', 34.0259, -118.7798, 20, 3)\n  })\n\n  it('renders nothing when no nearby properties are found', async () => {\n    // Mock empty response\n    vi.mocked(fetchNearbyProperties).mockResolvedValue([])\n\n    const { container } = render(<NearbyProperties propertyId=\"1\" lat={34.0259} lng={-118.7798} />)\n\n    // The component should return null, so the container should be empty\n    expect(container.firstChild).toBeNull()\n\n    // Check that the API was still called\n    expect(fetchNearbyProperties).toHaveBeenCalled()\n  })\n})\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\properties\\[id]\\NearbyProperties.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\properties\\[id]\\PropertyDetailContent.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\properties\\[id]\\PropertyDetailContent.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\properties\\[id]\\error.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\properties\\[id]\\loading.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\properties\\[id]\\not-found.tsx",
    "messages": [
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 9,
        "column": 27,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [327, 415],
              "text": "\r\n          The property you&apos;re looking for doesn't exist or has been removed.\r\n        "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [327, 415],
              "text": "\r\n          The property you&lsquo;re looking for doesn't exist or has been removed.\r\n        "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [327, 415],
              "text": "\r\n          The property you&#39;re looking for doesn't exist or has been removed.\r\n        "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [327, 415],
              "text": "\r\n          The property you&rsquo;re looking for doesn't exist or has been removed.\r\n        "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 9,
        "column": 48,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [327, 415],
              "text": "\r\n          The property you're looking for doesn&apos;t exist or has been removed.\r\n        "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [327, 415],
              "text": "\r\n          The property you're looking for doesn&lsquo;t exist or has been removed.\r\n        "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [327, 415],
              "text": "\r\n          The property you're looking for doesn&#39;t exist or has been removed.\r\n        "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [327, 415],
              "text": "\r\n          The property you're looking for doesn&rsquo;t exist or has been removed.\r\n        "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import Link from 'next/link'\r\n\r\nexport default function PropertyNotFound() {\r\n  return (\r\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\r\n      <div className=\"text-center\">\r\n        <h2 className=\"text-3xl font-bold text-gray-900\">Property Not Found</h2>\r\n        <p className=\"mt-4 text-lg text-gray-500\">\r\n          The property you're looking for doesn't exist or has been removed.\r\n        </p>\r\n        <div className=\"mt-6\">\r\n          <Link\r\n            href=\"/properties\"\r\n            className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n          >\r\n            Back to Properties\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\properties\\[id]\\page.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\properties\\[id]\\page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 63,
        "column": 12,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 63,
        "endColumn": 17
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Metadata } from 'next'\r\nimport Link from 'next/link'\r\nimport { notFound } from 'next/navigation'\r\nimport { Suspense } from 'react'\r\n\r\nimport ErrorBoundary from '@/app/components/ErrorBoundary'\r\nimport { Skeleton } from '@/app/components/ui/Skeleton'\r\nimport { fetchPropertyById, fetchProperties } from '@/lib/api'\r\n\r\nimport PropertyAmenities from '../../../../components/PropertyAmenities'\r\n\r\nimport NearbyProperties from './NearbyProperties'\r\nimport PropertyDetailContent from './PropertyDetailContent'\r\n\r\n// Generate static paths for better performance\r\nexport async function generateStaticParams() {\r\n  try {\r\n    const { properties } = await fetchProperties('', 1, 100)\r\n    return properties.map(p => ({ id: p.id }))\r\n  } catch (error) {\r\n    // If fetching fails, return empty array - will fall back to dynamic rendering\r\n    console.error('Error generating static params:', error)\r\n    return []\r\n  }\r\n}\r\n\r\n// Generate metadata for SEO\r\nexport async function generateMetadata({ params }: { params: { id: string } }): Promise<Metadata> {\r\n  try {\r\n    const { property } = await fetchPropertyById(params.id)\r\n\r\n    if (!property) {\r\n      return {\r\n        title: 'Property Not Found | Property Portal',\r\n        description: 'The requested property could not be found.',\r\n      }\r\n    }\r\n\r\n    return {\r\n      title: `${property.title} | Property Portal`,\r\n      description: `View details for ${property.title} located in ${property.location || property.address || ''}`,\r\n      keywords: `property, real estate, ${property.location || property.address || ''}`,\r\n      openGraph: {\r\n        title: `${property.title} | Property Portal`,\r\n        description: `View details for ${property.title} at ${property.address}`,\r\n        images: [\r\n          {\r\n            url: property.metadata?.mainImageUrl || '',\r\n            width: 1200,\r\n            height: 630,\r\n            alt: property.title,\r\n          },\r\n        ],\r\n        type: 'article',\r\n      },\r\n      twitter: {\r\n        card: 'summary_large_image',\r\n        title: `${property.title} | Property Portal`,\r\n        description: `View details for ${property.title} at ${property.address}`,\r\n        images: [property.metadata?.mainImageUrl || ''],\r\n      },\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      title: 'Property Details | Property Portal',\r\n      description: 'View detailed information about this property.',\r\n    }\r\n  }\r\n}\r\n\r\n// Loading skeleton for property detail\r\nfunction PropertyDetailSkeleton() {\r\n  return (\r\n    <div className=\"lg:grid lg:grid-cols-2 lg:gap-x-8 lg:items-start\">\r\n      {/* Image skeleton */}\r\n      <div className=\"aspect-w-1 aspect-h-1 rounded-lg overflow-hidden\">\r\n        <Skeleton className=\"w-full h-full\" />\r\n      </div>\r\n\r\n      {/* Content skeleton */}\r\n      <div className=\"mt-10 px-4 sm:px-0 sm:mt-16 lg:mt-0 space-y-6\">\r\n        <Skeleton className=\"h-8 w-3/4\" />\r\n        <Skeleton className=\"h-8 w-1/3\" />\r\n\r\n        <div className=\"space-y-3\">\r\n          <Skeleton className=\"h-4 w-full\" />\r\n          <Skeleton className=\"h-4 w-full\" />\r\n          <Skeleton className=\"h-4 w-2/3\" />\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-3\">\r\n          <div>\r\n            <Skeleton className=\"h-4 w-1/2\" />\r\n            <div className=\"mt-2\">\r\n              <Skeleton className=\"h-4 w-full\" />\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <Skeleton className=\"h-4 w-1/2\" />\r\n            <div className=\"mt-2\">\r\n              <Skeleton className=\"h-4 w-full\" />\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <Skeleton className=\"h-4 w-1/2\" />\r\n            <div className=\"mt-2\">\r\n              <Skeleton className=\"h-4 w-full\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Map skeleton */}\r\n        <div>\r\n          <Skeleton className=\"h-4 w-1/4 mb-2\" />\r\n          <Skeleton className=\"h-64 w-full rounded-md\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// Data fetching component\r\nasync function PropertyDetailData({ id }: { id: string }) {\r\n  const { property, error } = await fetchPropertyById(id)\r\n\r\n  if (!property || error) {\r\n    notFound()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PropertyDetailContent property={property} />\r\n\r\n      {/* Amenities section */}\r\n      <div className=\"mt-12\">\r\n        <h2 className=\"text-2xl font-bold mb-6\">Nearby Amenities</h2>\r\n        <PropertyAmenities lat={property.lat} lng={property.lng} />\r\n      </div>\r\n\r\n      {/* Nearby properties section */}\r\n      <Suspense\r\n        fallback={\r\n          <div className=\"mt-12\">\r\n            <Skeleton className=\"h-8 w-1/3 mb-6\" />\r\n            <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-6\">\r\n              <Skeleton className=\"h-64 w-full rounded-md\" />\r\n              <Skeleton className=\"h-64 w-full rounded-md\" />\r\n              <Skeleton className=\"h-64 w-full rounded-md\" />\r\n            </div>\r\n          </div>\r\n        }\r\n      >\r\n        <NearbyProperties propertyId={property.id} lat={property.lat} lng={property.lng} />\r\n      </Suspense>\r\n    </>\r\n  )\r\n}\r\n\r\n// Main page component\r\nexport default async function PropertyDetailPage({ params }: { params: { id: string } }) {\r\n  return (\r\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\r\n      <Link href=\"/properties\" className=\"text-blue-600 hover:underline mb-6 inline-block\">\r\n        &larr; Back to all properties\r\n      </Link>\r\n\r\n      <ErrorBoundary>\r\n        <Suspense fallback={<PropertyDetailSkeleton />}>\r\n          <PropertyDetailData id={params.id} />\r\n        </Suspense>\r\n      </ErrorBoundary>\r\n    </div>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\properties\\error.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\properties\\loading.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\properties\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\providers\\ThemeProvider.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\search\\SearchPage.tsx",
    "messages": [
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 51,
        "column": 47,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": { "range": [1372, 1373], "text": "&quot;" },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": { "range": [1372, 1373], "text": "&ldquo;" },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": { "range": [1372, 1373], "text": "&#34;" },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": { "range": [1372, 1373], "text": "&rdquo;" },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 51,
        "column": 55,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": { "range": [1380, 1381], "text": "&quot;" },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": { "range": [1380, 1381], "text": "&ldquo;" },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": { "range": [1380, 1381], "text": "&#34;" },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": { "range": [1380, 1381], "text": "&rdquo;" },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client'\n\nimport { useRouter, useSearchParams } from 'next/navigation'\n\nimport LoadMore from '@/components/LoadMore'\nimport Pagination from '@/components/Pagination'\nimport PropertyCard from '@/components/PropertyCard'\nimport SearchInput from '@/components/SearchInput'\nimport { Property } from '@/types/property'\n\ninterface SearchPageProps {\n  properties: Property[]\n  totalCount: number\n  query: string\n  page: number\n  totalPages: number\n}\n\nexport default function SearchPage({\n  properties,\n  totalCount,\n  query,\n  page,\n  totalPages,\n}: SearchPageProps) {\n  const router = useRouter()\n  const searchParams = useSearchParams()\n  const useInfiniteScroll = searchParams.get('scroll') === 'infinite'\n\n  const toggleScrollMode = () => {\n    const params = new URLSearchParams(searchParams.toString())\n    if (useInfiniteScroll) {\n      params.delete('scroll')\n    } else {\n      params.set('scroll', 'infinite')\n    }\n    router.push(`/search?${params.toString()}`)\n  }\n\n  return (\n    <main className=\"max-w-7xl mx-auto px-4 py-8\">\n      <h1 className=\"text-3xl font-bold mb-4\">Search Results</h1>\n\n      <SearchInput />\n\n      <div className=\"mb-4 flex justify-between items-center\">\n        <div>\n          {query ? (\n            <p className=\"text-gray-600\">\n              Found {totalCount} properties matching{' '}\n              <span className=\"font-semibold\">\"{query}\"</span>\n            </p>\n          ) : (\n            <p className=\"text-gray-600\">Showing all properties</p>\n          )}\n        </div>\n\n        <button\n          onClick={toggleScrollMode}\n          className=\"px-3 py-1 text-sm bg-blue-100 text-blue-800 rounded hover:bg-blue-200\"\n        >\n          {useInfiniteScroll ? 'Switch to Pagination' : 'Switch to Infinite Scroll'}\n        </button>\n      </div>\n\n      {properties.length === 0 ? (\n        <p className=\"text-gray-500 py-10 text-center\">\n          No properties found. Try a different search term.\n        </p>\n      ) : useInfiniteScroll ? (\n        <LoadMore initial={properties} query={query} />\n      ) : (\n        <>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6 mb-8\">\n            {properties.map(property => (\n              <PropertyCard key={property.id} {...property} />\n            ))}\n          </div>\n\n          {totalPages > 1 && (\n            <Pagination\n              currentPage={page}\n              totalPages={totalPages}\n              baseUrl={`/search?q=${encodeURIComponent(query)}&page=`}\n            />\n          )}\n        </>\n      )}\n    </main>\n  )\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\search\\page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\app\\theme-demo\\page.tsx",
    "messages": [
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 44,
        "column": 19,
        "nodeType": "JSXOpeningElement",
        "endLine": 44,
        "endColumn": 102
      },
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 54,
        "column": 19,
        "nodeType": "JSXOpeningElement",
        "endLine": 54,
        "endColumn": 102
      },
      {
        "ruleId": "jsx-a11y/anchor-is-valid",
        "severity": 1,
        "message": "The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",
        "line": 97,
        "column": 17,
        "nodeType": "JSXOpeningElement",
        "endLine": 100,
        "endColumn": 18
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import Header from '@/app/components/Header'\r\n\r\nconst navLinks = [\r\n  { href: '/properties', label: 'Properties' },\r\n  { href: '/agents', label: 'Agents' },\r\n  { href: '/about', label: 'About' },\r\n  { href: '/contact', label: 'Contact' },\r\n]\r\n\r\nexport default function ThemeDemoPage() {\r\n  return (\r\n    <div className=\"min-h-screen flex flex-col\">\r\n      <Header navLinks={navLinks} />\r\n\r\n      <main className=\"flex-grow\">\r\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\r\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-8\">Dark Mode Demo</h1>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\r\n            <div className=\"bg-white dark:bg-dark-bg-secondary rounded-lg shadow-md p-6\">\r\n              <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-100 mb-4\">\r\n                Card with Light/Dark Styling\r\n              </h2>\r\n              <p className=\"text-gray-600 dark:text-gray-300 mb-4\">\r\n                This card demonstrates how components adapt to light and dark mode. The background,\r\n                text, and border colors all change based on the current theme.\r\n              </p>\r\n              <div className=\"flex space-x-2\">\r\n                <button className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-800 text-white rounded\">\r\n                  Primary Button\r\n                </button>\r\n                <button className=\"px-4 py-2 bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 rounded\">\r\n                  Secondary Button\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"bg-gray-100 dark:bg-dark-bg-tertiary rounded-lg shadow-md p-6\">\r\n              <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-100 mb-4\">\r\n                Form Elements\r\n              </h2>\r\n              <div className=\"space-y-4\">\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\r\n                    Input Field\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-dark-bg-secondary dark:text-white\"\r\n                    placeholder=\"Type something...\"\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\r\n                    Select Menu\r\n                  </label>\r\n                  <select className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-dark-bg-secondary dark:text-white\">\r\n                    <option>Option 1</option>\r\n                    <option>Option 2</option>\r\n                    <option>Option 3</option>\r\n                  </select>\r\n                </div>\r\n                <div className=\"flex items-center\">\r\n                  <input\r\n                    id=\"remember-me\"\r\n                    name=\"remember-me\"\r\n                    type=\"checkbox\"\r\n                    className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 dark:border-gray-600 rounded\"\r\n                  />\r\n                  <label\r\n                    htmlFor=\"remember-me\"\r\n                    className=\"ml-2 block text-sm text-gray-700 dark:text-gray-300\"\r\n                  >\r\n                    Remember me\r\n                  </label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"mt-8 bg-white dark:bg-dark-bg-secondary rounded-lg shadow-md p-6\">\r\n            <h2 className=\"text-xl font-semibold text-gray-800 dark:text-gray-100 mb-4\">\r\n              Typography Examples\r\n            </h2>\r\n            <div className=\"space-y-4\">\r\n              <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Heading 1</h1>\r\n              <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Heading 2</h2>\r\n              <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white\">Heading 3</h3>\r\n              <p className=\"text-base text-gray-700 dark:text-gray-300\">\r\n                Regular paragraph text. Lorem ipsum dolor sit amet, consectetur adipiscing elit.\r\n                Nullam in dui mauris.\r\n              </p>\r\n              <p className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n                Small text for captions or secondary information.\r\n              </p>\r\n              <div>\r\n                <a\r\n                  href=\"#\"\r\n                  className=\"text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300\"\r\n                >\r\n                  This is a link\r\n                </a>\r\n              </div>\r\n              <blockquote className=\"pl-4 border-l-4 border-gray-300 dark:border-gray-600 italic text-gray-700 dark:text-gray-300\">\r\n                This is a blockquote. It can be used to highlight important information or quotes.\r\n              </blockquote>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </main>\r\n\r\n      <footer className=\"bg-gray-100 dark:bg-dark-bg-secondary py-6\">\r\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n          <p className=\"text-center text-gray-500 dark:text-gray-400\">\r\n            &copy; 2023 Property Portal. All rights reserved.\r\n          </p>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\components\\LoadMore.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\components\\MapLocationSelector.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\components\\Pagination.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\components\\PropertyCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\components\\PropertyFilters.tsx",
    "messages": [
      {
        "ruleId": "jsx-a11y/label-has-associated-control",
        "severity": 2,
        "message": "A form label must be associated with a control.",
        "line": 43,
        "column": 11,
        "nodeType": "JSXOpeningElement",
        "endLine": 43,
        "endColumn": 75
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport { useFilterStore } from '@/store/useStore'\r\n\r\n/**\r\n * Component for filtering properties\r\n * Uses the global store for state management\r\n */\r\nexport default function PropertyFilters() {\r\n  const { filters, setFilter, resetFilters } = useFilterStore()\r\n\r\n  // Property types for the dropdown\r\n  const propertyTypes = [\r\n    { value: 'house', label: 'House' },\r\n    { value: 'apartment', label: 'Apartment' },\r\n    { value: 'condo', label: 'Condo' },\r\n    { value: 'townhouse', label: 'Townhouse' },\r\n    { value: 'land', label: 'Land' },\r\n  ]\r\n\r\n  // Handle number input changes\r\n  const handleNumberChange = (key: 'minPrice' | 'maxPrice' | 'bedrooms', value: string) => {\r\n    const numValue = value === '' ? null : parseInt(value)\r\n    setFilter(key, numValue)\r\n  }\r\n\r\n  return (\r\n    <div className=\"bg-white p-4 rounded-md shadow-sm border\">\r\n      <div className=\"flex justify-between items-center mb-4\">\r\n        <h3 className=\"text-lg font-medium\">Filters</h3>\r\n        <button\r\n          type=\"button\"\r\n          onClick={resetFilters}\r\n          className=\"text-sm text-blue-600 hover:text-blue-800\"\r\n        >\r\n          Reset\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"space-y-4\">\r\n        {/* Price Range */}\r\n        <div>\r\n          <label className=\"block text-sm font-medium text-gray-700 mb-1\">Price Range</label>\r\n          <div className=\"grid grid-cols-2 gap-2\">\r\n            <div>\r\n              <label htmlFor=\"min-price\" className=\"sr-only\">\r\n                Minimum price\r\n              </label>\r\n              <input\r\n                id=\"min-price\"\r\n                type=\"number\"\r\n                placeholder=\"Min\"\r\n                value={filters.minPrice || ''}\r\n                onChange={e => handleNumberChange('minPrice', e.target.value)}\r\n                className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\r\n                aria-label=\"Minimum price\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"max-price\" className=\"sr-only\">\r\n                Maximum price\r\n              </label>\r\n              <input\r\n                id=\"max-price\"\r\n                type=\"number\"\r\n                placeholder=\"Max\"\r\n                value={filters.maxPrice || ''}\r\n                onChange={e => handleNumberChange('maxPrice', e.target.value)}\r\n                className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\r\n                aria-label=\"Maximum price\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Bedrooms */}\r\n        <div>\r\n          <label htmlFor=\"bedrooms\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n            Bedrooms\r\n          </label>\r\n          <select\r\n            id=\"bedrooms\"\r\n            value={filters.bedrooms || ''}\r\n            onChange={e => handleNumberChange('bedrooms', e.target.value)}\r\n            className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\r\n          >\r\n            <option value=\"\">Any</option>\r\n            <option value=\"1\">1+</option>\r\n            <option value=\"2\">2+</option>\r\n            <option value=\"3\">3+</option>\r\n            <option value=\"4\">4+</option>\r\n            <option value=\"5\">5+</option>\r\n          </select>\r\n        </div>\r\n\r\n        {/* Property Type */}\r\n        <div>\r\n          <label htmlFor=\"propertyType\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n            Property Type\r\n          </label>\r\n          <select\r\n            id=\"propertyType\"\r\n            value={filters.propertyType || ''}\r\n            onChange={e => setFilter('propertyType', e.target.value || null)}\r\n            className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\r\n          >\r\n            <option value=\"\">Any</option>\r\n            {propertyTypes.map(type => (\r\n              <option key={type.value} value={type.value}>\r\n                {type.label}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        {/* Location */}\r\n        <div>\r\n          <label htmlFor=\"location\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n            Location\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"location\"\r\n            placeholder=\"City, ZIP, or Address\"\r\n            value={filters.location || ''}\r\n            onChange={e => setFilter('location', e.target.value || null)}\r\n            className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\r\n            aria-describedby=\"location-help\"\r\n          />\r\n          <div id=\"location-help\" className=\"mt-1 text-xs text-gray-500\">\r\n            Enter city name, postal code, or full address\r\n          </div>\r\n        </div>\r\n\r\n        {/* Apply Filters Button */}\r\n        <button\r\n          type=\"button\"\r\n          className=\"w-full py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n          aria-label=\"Apply property filters\"\r\n        >\r\n          Apply Filters\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\components\\PropertySearch.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\components\\SearchHistory.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\components\\SearchInput.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isPending' is assigned a value but never used.",
        "line": 14,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 19
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.",
        "line": 16,
        "column": 23,
        "nodeType": "Identifier",
        "endLine": 16,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-unused-expressions",
        "severity": 2,
        "message": "Expected an assignment or function call and instead saw an expression.",
        "line": 19,
        "column": 7,
        "nodeType": "ExpressionStatement",
        "messageId": "unusedExpression",
        "endLine": 19,
        "endColumn": 50
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client'\r\n\r\nimport debounce from 'lodash.debounce'\r\nimport { useRouter, useSearchParams } from 'next/navigation'\r\nimport { useState, useCallback, useTransition } from 'react'\r\n\r\nimport { useSearchStore } from '@/store/searchStore'\r\n\r\nexport default function SearchInput() {\r\n  const [query, setQuery] = useState('')\r\n  const { history, addQuery, clearHistory } = useSearchStore()\r\n  const router = useRouter()\r\n  const searchParams = useSearchParams()\r\n  const [isPending, startTransition] = useTransition()\r\n\r\n  const updateQuery = useCallback(\r\n    debounce((q: string) => {\r\n      const params = new URLSearchParams(searchParams.toString())\r\n      q ? params.set('q', q) : params.delete('q')\r\n      startTransition(() => {\r\n        router.push(`/search?${params.toString()}`)\r\n        addQuery(q)\r\n      })\r\n    }, 300),\r\n    []\r\n  )\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const val = e.target.value\r\n    setQuery(val)\r\n    updateQuery(val)\r\n  }\r\n\r\n  return (\r\n    <div className=\"mb-4 space-y-2\">\r\n      <input\r\n        type=\"text\"\r\n        className=\"w-full p-3 border rounded\"\r\n        value={query}\r\n        onChange={onChange}\r\n        placeholder=\"Search properties...\"\r\n        aria-label=\"Search input\"\r\n      />\r\n      {history.length > 0 && (\r\n        <div className=\"text-sm text-gray-500\">\r\n          Recent:{' '}\r\n          {history.map((q, idx) => (\r\n            <button\r\n              key={idx}\r\n              className=\"underline mx-1 text-blue-600\"\r\n              onClick={() => {\r\n                setQuery(q)\r\n                updateQuery(q)\r\n              }}\r\n            >\r\n              {q}\r\n            </button>\r\n          ))}\r\n          <button className=\"ml-4 text-red-500\" onClick={() => clearHistory()}>\r\n            Clear\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\components\\SidebarToggle.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\lib\\api.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\lib\\api\\error-handling.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unsafe-function-type",
        "severity": 2,
        "message": "The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.",
        "line": 125,
        "column": 44,
        "nodeType": "Identifier",
        "messageId": "bannedFunctionType",
        "endLine": 125,
        "endColumn": 52
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 126,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 126,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3161, 3164], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3161, 3164], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Centralized API error handling and standardized error responses\n */\nimport { NextResponse } from 'next/server'\n\nimport { logger } from './logger'\n\n/**\n * Custom API Error class for standardized error handling\n */\nexport class APIError extends Error {\n  constructor(\n    public statusCode: number,\n    public message: string,\n    public details?: Record<string, unknown>\n  ) {\n    super(message)\n    this.name = 'APIError'\n    // This maintains proper stack trace in modern JS engines\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, APIError)\n    }\n  }\n}\n\n/**\n * Validation error for handling invalid input data\n */\nexport class ValidationError extends APIError {\n  constructor(message: string, details?: Record<string, unknown>) {\n    super(400, message, details)\n    this.name = 'ValidationError'\n  }\n}\n\n/**\n * Not found error for handling missing resources\n */\nexport class NotFoundError extends APIError {\n  constructor(message: string) {\n    super(404, message)\n    this.name = 'NotFoundError'\n  }\n}\n\n/**\n * Unauthorized error for handling authentication issues\n */\nexport class UnauthorizedError extends APIError {\n  constructor(message: string = 'Unauthorized') {\n    super(401, message)\n    this.name = 'UnauthorizedError'\n  }\n}\n\n/**\n * Forbidden error for handling permission issues\n */\nexport class ForbiddenError extends APIError {\n  constructor(message: string = 'Forbidden') {\n    super(403, message)\n    this.name = 'ForbiddenError'\n  }\n}\n\n/**\n * Handle API errors and return standardized response\n * @param error The error to handle\n * @returns NextResponse with appropriate status code and error details\n */\nexport function handleApiError(error: unknown): NextResponse {\n  // Handle known API errors\n  if (error instanceof APIError) {\n    // Log error with appropriate level based on status code\n    if (error.statusCode >= 500) {\n      logger.error(`API Error [${error.statusCode}]: ${error.message}`, {\n        details: error.details,\n        stack: error.stack,\n      })\n    } else if (error.statusCode >= 400) {\n      logger.warn(`API Error [${error.statusCode}]: ${error.message}`, {\n        details: error.details,\n      })\n    }\n\n    // Return standardized error response\n    return NextResponse.json(\n      {\n        error: {\n          message: error.message,\n          ...(error.details && { details: error.details }),\n        },\n      },\n      { status: error.statusCode }\n    )\n  }\n\n  // Handle unexpected errors\n  const message = error instanceof Error ? error.message : 'An unexpected error occurred'\n  const stack = error instanceof Error ? error.stack : undefined\n\n  // Log unexpected errors as critical\n  logger.error('Unexpected API Error:', {\n    message,\n    stack,\n    error,\n  })\n\n  // Return generic error for unexpected errors\n  return NextResponse.json(\n    {\n      error: {\n        message: 'Internal Server Error',\n      },\n    },\n    { status: 500 }\n  )\n}\n\n/**\n * Wrap an API handler with error handling\n * @param handler The API handler function to wrap\n * @returns A wrapped handler with error handling\n */\nexport function withErrorHandling(handler: Function) {\n  return async (...args: any[]) => {\n    try {\n      return await handler(...args)\n    } catch (error) {\n      return handleApiError(error)\n    }\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\lib\\api\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\lib\\api\\logger.ts",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'winston'.",
        "line": 4,
        "column": 50,
        "nodeType": "Literal",
        "endLine": 4,
        "endColumn": 59
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 78,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 78,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2057, 2060], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2057, 2060], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 79,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 79,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2127, 2130], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2127, 2130], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 80,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 80,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2196, 2199], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2196, 2199], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 81,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 81,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2266, 2269], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2266, 2269], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Centralized logging utility for consistent logging across the application\n */\nimport { createLogger, format, transports } from 'winston'\n\n// Determine if we're in production\nconst isProduction = process.env.NODE_ENV === 'production'\n\n// Create the logger with the desired configuration\nexport const logger = createLogger({\n  level: isProduction ? 'info' : 'debug',\n  format: format.combine(\n    format.timestamp({\n      format: 'YYYY-MM-DD HH:mm:ss',\n    }),\n    format.errors({ stack: true }),\n    format.splat(),\n    format.json()\n  ),\n  defaultMeta: { service: 'property-portal' },\n  transports: [\n    // Write all logs to console\n    new transports.Console({\n      format: format.combine(\n        format.colorize(),\n        format.printf(({ level, message, timestamp, ...metadata }) => {\n          let metaStr = ''\n          if (metadata && Object.keys(metadata).length > 0) {\n            if (metadata.stack) {\n              // Format stack traces specially\n              metaStr = `\\n${metadata.stack}`\n              delete metadata.stack\n            }\n\n            // Format remaining metadata if any\n            if (Object.keys(metadata).length > 0) {\n              metaStr += `\\n${JSON.stringify(metadata, null, 2)}`\n            }\n          }\n          return `${timestamp} ${level}: ${message}${metaStr}`\n        })\n      ),\n    }),\n  ],\n})\n\n// Add file transports in production\nif (isProduction) {\n  // Log everything to a combined log file\n  logger.add(\n    new transports.File({\n      filename: 'logs/combined.log',\n      maxsize: 5242880, // 5MB\n      maxFiles: 5,\n    })\n  )\n\n  // Log errors separately\n  logger.add(\n    new transports.File({\n      filename: 'logs/error.log',\n      level: 'error',\n      maxsize: 5242880, // 5MB\n      maxFiles: 5,\n    })\n  )\n}\n\n// Create a stream object for Morgan HTTP request logging\nexport const logStream = {\n  write: (message: string) => {\n    logger.info(message.trim())\n  },\n}\n\n// Export convenience methods for use throughout the application\nexport default {\n  debug: (message: string, meta?: any) => logger.debug(message, meta),\n  info: (message: string, meta?: any) => logger.info(message, meta),\n  warn: (message: string, meta?: any) => logger.warn(message, meta),\n  error: (message: string, meta?: any) => logger.error(message, meta),\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\lib\\auth.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\lib\\csv-import.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\lib\\csv-import.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 72,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 72,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1877, 1880], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1877, 1880], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { z } from 'zod'\n\nimport { createPropertySchema } from './schemas/propertySchemas'\n\n// Type for CSV validation errors\nexport type CSVValidationError = {\n  row: number\n  errors: Record<string, string[]>\n}\n\n// Type for CSV validation result\nexport type CSVValidationResult = {\n  valid: boolean\n  data: z.infer<typeof createPropertySchema>[]\n  errors: CSVValidationError[]\n}\n\n/**\n * Parse and validate a CSV string containing property data\n * @param csvString The CSV string to parse and validate\n * @returns Validation result with parsed data and any errors\n */\nexport function validatePropertyCSV(csvString: string): CSVValidationResult {\n  // Initialize the result\n  const result: CSVValidationResult = {\n    valid: true,\n    data: [],\n    errors: [],\n  }\n\n  // Split the CSV into lines\n  const lines = csvString.trim().split('\\n')\n\n  // Ensure there's at least a header and one data row\n  if (lines.length < 2) {\n    result.valid = false\n    result.errors.push({\n      row: 0,\n      errors: {\n        file: ['CSV file must contain a header row and at least one data row'],\n      },\n    })\n    return result\n  }\n\n  // Parse the header row\n  const header = parseCSVLine(lines[0])\n\n  // Validate required columns\n  const requiredColumns = ['title', 'location', 'price', 'bedrooms', 'bathrooms']\n  const missingColumns = requiredColumns.filter(col => !header.includes(col))\n\n  if (missingColumns.length > 0) {\n    result.valid = false\n    result.errors.push({\n      row: 0,\n      errors: {\n        header: [`Missing required columns: ${missingColumns.join(', ')}`],\n      },\n    })\n    return result\n  }\n\n  // Process each data row\n  for (let i = 1; i < lines.length; i++) {\n    const line = lines[i].trim()\n    if (!line) continue // Skip empty lines\n\n    const rowData = parseCSVLine(line)\n\n    // Create an object from the CSV row\n    const propertyData: Record<string, any> = {}\n    header.forEach((column, index) => {\n      if (index < rowData.length) {\n        // Convert numeric values\n        if (['price', 'bedrooms', 'bathrooms', 'area', 'lat', 'lng'].includes(column)) {\n          propertyData[column] = parseFloat(rowData[index])\n        } else {\n          propertyData[column] = rowData[index]\n        }\n      }\n    })\n\n    // Validate the property data\n    const validationResult = createPropertySchema.safeParse(propertyData)\n\n    if (validationResult.success) {\n      result.data.push(validationResult.data)\n    } else {\n      result.valid = false\n      result.errors.push({\n        row: i,\n        errors: validationResult.error.flatten().fieldErrors,\n      })\n    }\n  }\n\n  return result\n}\n\n/**\n * Parse a CSV line into an array of values\n * Handles quoted values with commas inside them\n * @param line The CSV line to parse\n * @returns Array of values\n */\nfunction parseCSVLine(line: string): string[] {\n  const result: string[] = []\n  let current = ''\n  let inQuotes = false\n\n  for (let i = 0; i < line.length; i++) {\n    const char = line[i]\n\n    if (char === '\"') {\n      // Toggle quote state\n      inQuotes = !inQuotes\n    } else if (char === ',' && !inQuotes) {\n      // End of field\n      result.push(current.trim())\n      current = ''\n    } else {\n      // Add character to current field\n      current += char\n    }\n  }\n\n  // Add the last field\n  result.push(current.trim())\n\n  return result\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\lib\\currency.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\lib\\db.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\lib\\embeddings.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\lib\\embeddings.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\lib\\prisma.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-var",
        "severity": 2,
        "message": "Unexpected var, use let or const instead.",
        "line": 14,
        "column": 3,
        "nodeType": "VariableDeclaration",
        "messageId": "unexpectedVar",
        "endLine": 14,
        "endColumn": 39,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\lib\\schemas\\itemSchemas.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\lib\\schemas\\propertySchemas.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\lib\\utils\\formatters.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\lib\\utils\\index.ts",
    "messages": [
      {
        "ruleId": "import/no-unresolved",
        "severity": 2,
        "message": "Unable to resolve path to module 'tailwind-merge'.",
        "line": 2,
        "column": 25,
        "nodeType": "Literal",
        "endLine": 2,
        "endColumn": 41
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ClassValue, clsx } from 'clsx'\r\nimport { twMerge } from 'tailwind-merge'\r\n\r\n/**\r\n * Combines multiple class names using clsx and tailwind-merge\r\n * This allows for conditional classes and prevents class conflicts\r\n */\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs))\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\lib\\vector-search.test.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 21,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 21,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [471, 474], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [471, 474], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Prisma } from '@prisma/client'\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'\n\nimport { prisma } from '@/lib/db'\n\n// Mock the Prisma client\nvi.mock('@/lib/db', () => ({\n  prisma: {\n    $queryRaw: vi.fn(),\n    property: {\n      findMany: vi.fn(),\n    },\n  },\n}))\n\n// Create a helper function to simulate the pgvector query\nasync function findSimilarProperties(\n  embedding: number[],\n  limit: number = 5,\n  excludeId?: string\n): Promise<any[]> {\n  // Build the where clause\n  const whereClause = excludeId\n    ? Prisma.sql`WHERE id != ${excludeId} AND embedding IS NOT NULL`\n    : Prisma.sql`WHERE embedding IS NOT NULL`\n\n  // Execute the query\n  return prisma.$queryRaw(Prisma.sql`\n    SELECT \n      id, title, description, price, bedrooms, bathrooms, \n      area, location, address, lat, lng, images, features,\n      councilTaxBand, epcRating, tenure, createdAt, updatedAt,\n      embedding <=> ${Prisma.sql`${embedding}`}::vector AS similarity\n    FROM \"Property\"\n    ${whereClause}\n    ORDER BY similarity\n    LIMIT ${Prisma.sql`${limit}`}\n  `)\n}\n\ndescribe('Vector Search', () => {\n  beforeEach(() => {\n    vi.resetAllMocks()\n  })\n\n  afterEach(() => {\n    vi.clearAllMocks()\n  })\n\n  it('should execute a pgvector similarity search query', async () => {\n    // Mock embedding vector\n    const mockEmbedding = Array(1536).fill(0.1)\n\n    // Mock the query result\n    const mockProperties = [\n      { id: '1', title: 'Property 1', similarity: 0.1 },\n      { id: '2', title: 'Property 2', similarity: 0.2 },\n    ]\n    vi.mocked(prisma.$queryRaw).mockResolvedValueOnce(mockProperties)\n\n    // Execute the search\n    const result = await findSimilarProperties(mockEmbedding, 2)\n\n    // Verify the result\n    expect(result).toEqual(mockProperties)\n\n    // Verify the query was called with the correct parameters\n    expect(prisma.$queryRaw).toHaveBeenCalledWith(\n      expect.objectContaining({\n        values: expect.arrayContaining([mockEmbedding, 2]),\n      })\n    )\n  })\n\n  it('should exclude a specific property ID when provided', async () => {\n    // Mock embedding vector\n    const mockEmbedding = Array(1536).fill(0.1)\n    const excludeId = '123'\n\n    // Mock the query result\n    const mockProperties = [\n      { id: '1', title: 'Property 1', similarity: 0.1 },\n      { id: '2', title: 'Property 2', similarity: 0.2 },\n    ]\n    vi.mocked(prisma.$queryRaw).mockResolvedValueOnce(mockProperties)\n\n    // Execute the search with an excluded ID\n    const result = await findSimilarProperties(mockEmbedding, 2, excludeId)\n\n    // Verify the result\n    expect(result).toEqual(mockProperties)\n\n    // Verify the query was called with the correct parameters\n    expect(prisma.$queryRaw).toHaveBeenCalledWith(\n      expect.objectContaining({\n        values: expect.arrayContaining([excludeId, mockEmbedding, 2]),\n      })\n    )\n  })\n\n  it('should handle empty result sets', async () => {\n    // Mock embedding vector\n    const mockEmbedding = Array(1536).fill(0.1)\n\n    // Mock an empty result\n    vi.mocked(prisma.$queryRaw).mockResolvedValueOnce([])\n\n    // Execute the search\n    const result = await findSimilarProperties(mockEmbedding)\n\n    // Verify the result is empty\n    expect(result).toEqual([])\n    expect(result.length).toBe(0)\n  })\n\n  it('should propagate database errors', async () => {\n    // Mock embedding vector\n    const mockEmbedding = Array(1536).fill(0.1)\n\n    // Mock a database error\n    const dbError = new Error('Database connection error')\n    vi.mocked(prisma.$queryRaw).mockRejectedValueOnce(dbError)\n\n    // Execute the search and expect it to throw\n    await expect(findSimilarProperties(mockEmbedding)).rejects.toThrow('Database connection error')\n  })\n})\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\middleware.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\pages\\api\\auth\\[...nextauth].ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\pages\\api\\items.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 54,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 54,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1774, 1824], "text": "" },
            "desc": "Remove the console.log()."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\store\\filterStore.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\store\\searchStore.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\store\\searchStore.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\store\\useStore.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\src\\types\\property.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\store\\filterStore.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\store\\searchStore.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "c:\\Users\\aps33\\Projects\\property-portal\\vitest.setup.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  }
]
